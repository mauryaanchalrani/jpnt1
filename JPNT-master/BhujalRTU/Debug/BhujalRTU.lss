
BhujalRTU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000008e8  00800200  00009652  000096e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00009652  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000b5a  00800ae8  00800ae8  00009fce  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00009fce  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000a02c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000f30  00000000  00000000  0000a06c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00017b55  00000000  00000000  0000af9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000044ce  00000000  00000000  00022af1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000a6ba  00000000  00000000  00026fbf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002eb8  00000000  00000000  0003167c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00006ee0  00000000  00000000  00034534  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000d464  00000000  00000000  0003b414  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000ed8  00000000  00000000  00048878  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	09 c2       	rjmp	.+1042   	; 0x414 <__ctors_end>
       2:	00 00       	nop
       4:	0c 94 2a 15 	jmp	0x2a54	; 0x2a54 <__vector_1>
       8:	36 c2       	rjmp	.+1132   	; 0x476 <__bad_interrupt>
       a:	00 00       	nop
       c:	34 c2       	rjmp	.+1128   	; 0x476 <__bad_interrupt>
       e:	00 00       	nop
      10:	32 c2       	rjmp	.+1124   	; 0x476 <__bad_interrupt>
      12:	00 00       	nop
      14:	0c 94 04 41 	jmp	0x8208	; 0x8208 <__vector_5>
      18:	0c 94 2b 41 	jmp	0x8256	; 0x8256 <__vector_6>
      1c:	2c c2       	rjmp	.+1112   	; 0x476 <__bad_interrupt>
      1e:	00 00       	nop
      20:	2a c2       	rjmp	.+1108   	; 0x476 <__bad_interrupt>
      22:	00 00       	nop
      24:	28 c2       	rjmp	.+1104   	; 0x476 <__bad_interrupt>
      26:	00 00       	nop
      28:	26 c2       	rjmp	.+1100   	; 0x476 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	24 c2       	rjmp	.+1096   	; 0x476 <__bad_interrupt>
      2e:	00 00       	nop
      30:	22 c2       	rjmp	.+1092   	; 0x476 <__bad_interrupt>
      32:	00 00       	nop
      34:	20 c2       	rjmp	.+1088   	; 0x476 <__bad_interrupt>
      36:	00 00       	nop
      38:	1e c2       	rjmp	.+1084   	; 0x476 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	1c c2       	rjmp	.+1080   	; 0x476 <__bad_interrupt>
      3e:	00 00       	nop
      40:	1a c2       	rjmp	.+1076   	; 0x476 <__bad_interrupt>
      42:	00 00       	nop
      44:	18 c2       	rjmp	.+1072   	; 0x476 <__bad_interrupt>
      46:	00 00       	nop
      48:	16 c2       	rjmp	.+1068   	; 0x476 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	14 c2       	rjmp	.+1064   	; 0x476 <__bad_interrupt>
      4e:	00 00       	nop
      50:	12 c2       	rjmp	.+1060   	; 0x476 <__bad_interrupt>
      52:	00 00       	nop
      54:	10 c2       	rjmp	.+1056   	; 0x476 <__bad_interrupt>
      56:	00 00       	nop
      58:	0e c2       	rjmp	.+1052   	; 0x476 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 6f 41 	jmp	0x82de	; 0x82de <__vector_23>
      60:	0a c2       	rjmp	.+1044   	; 0x476 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 83 43 	jmp	0x8706	; 0x8706 <__vector_25>
      68:	06 c2       	rjmp	.+1036   	; 0x476 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	0c 94 be 43 	jmp	0x877c	; 0x877c <__vector_27>
      70:	02 c2       	rjmp	.+1028   	; 0x476 <__bad_interrupt>
      72:	00 00       	nop
      74:	00 c2       	rjmp	.+1024   	; 0x476 <__bad_interrupt>
      76:	00 00       	nop
      78:	fe c1       	rjmp	.+1020   	; 0x476 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	fc c1       	rjmp	.+1016   	; 0x476 <__bad_interrupt>
      7e:	00 00       	nop
      80:	fa c1       	rjmp	.+1012   	; 0x476 <__bad_interrupt>
      82:	00 00       	nop
      84:	f8 c1       	rjmp	.+1008   	; 0x476 <__bad_interrupt>
      86:	00 00       	nop
      88:	f6 c1       	rjmp	.+1004   	; 0x476 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	f4 c1       	rjmp	.+1000   	; 0x476 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 0c 44 	jmp	0x8818	; 0x8818 <__vector_36>
      94:	f0 c1       	rjmp	.+992    	; 0x476 <__bad_interrupt>
      96:	00 00       	nop
      98:	0c 94 44 44 	jmp	0x8888	; 0x8888 <__vector_38>
      9c:	ec c1       	rjmp	.+984    	; 0x476 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	ea c1       	rjmp	.+980    	; 0x476 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	e8 c1       	rjmp	.+976    	; 0x476 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	e6 c1       	rjmp	.+972    	; 0x476 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	e4 c1       	rjmp	.+968    	; 0x476 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	e2 c1       	rjmp	.+964    	; 0x476 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	e0 c1       	rjmp	.+960    	; 0x476 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	de c1       	rjmp	.+956    	; 0x476 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	dc c1       	rjmp	.+952    	; 0x476 <__bad_interrupt>
      be:	00 00       	nop
      c0:	da c1       	rjmp	.+948    	; 0x476 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	d8 c1       	rjmp	.+944    	; 0x476 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	d6 c1       	rjmp	.+940    	; 0x476 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 50 44 	jmp	0x88a0	; 0x88a0 <__vector_51>
      d0:	d2 c1       	rjmp	.+932    	; 0x476 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	0c 94 51 45 	jmp	0x8aa2	; 0x8aa2 <__vector_53>
      d8:	0c 94 5d 45 	jmp	0x8aba	; 0x8aba <__vector_54>
      dc:	cc c1       	rjmp	.+920    	; 0x476 <__bad_interrupt>
      de:	00 00       	nop
      e0:	0c 94 69 45 	jmp	0x8ad2	; 0x8ad2 <__vector_56>
      e4:	ee 07       	cpc	r30, r30
      e6:	c2 08       	sbc	r12, r2
      e8:	c2 08       	sbc	r12, r2
      ea:	1a 08       	sbc	r1, r10
      ec:	2a 08       	sbc	r2, r10
      ee:	38 08       	sbc	r3, r8
      f0:	46 08       	sbc	r4, r6
      f2:	72 08       	sbc	r7, r2
      f4:	ba 08       	sbc	r11, r10
      f6:	80 08       	sbc	r8, r0
      f8:	8e 08       	sbc	r8, r14
      fa:	56 0b       	sbc	r21, r22
      fc:	66 0b       	sbc	r22, r22
      fe:	66 0d       	add	r22, r6
     100:	95 0d       	add	r25, r5
     102:	6f 0b       	sbc	r22, r31
     104:	7c 0b       	sbc	r23, r28
     106:	a4 0b       	sbc	r26, r20
     108:	b5 0b       	sbc	r27, r21
     10a:	cd 0d       	add	r28, r13
     10c:	d5 0d       	add	r29, r5
     10e:	e9 0b       	sbc	r30, r25
     110:	fc 0b       	sbc	r31, r28
     112:	a7 0f       	add	r26, r23
     114:	a7 0f       	add	r26, r23
     116:	10 0c       	add	r1, r0
     118:	3b 0c       	add	r3, r11
     11a:	45 0c       	add	r4, r5
     11c:	58 0c       	add	r5, r8
     11e:	76 0c       	add	r7, r6
     120:	e3 0c       	add	r14, r3
     122:	fe 0c       	add	r15, r14
     124:	0f 0d       	add	r16, r15
     126:	32 0d       	add	r19, r2
     128:	43 0d       	add	r20, r3
     12a:	dd 0d       	add	r29, r13
     12c:	a7 0f       	add	r26, r23
     12e:	74 0e       	add	r7, r20
     130:	56 0e       	add	r5, r22
     132:	a7 0f       	add	r26, r23
     134:	a7 0f       	add	r26, r23
     136:	a7 0f       	add	r26, r23
     138:	8c 0e       	add	r8, r28
     13a:	9e 0e       	add	r9, r30
     13c:	c7 0e       	add	r12, r23
     13e:	ac 0e       	add	r10, r28
     140:	d6 0e       	add	r13, r22
     142:	19 0f       	add	r17, r25
     144:	a7 0f       	add	r26, r23
     146:	88 0f       	add	r24, r24
     148:	b0 14       	cp	r11, r0
     14a:	a4 14       	cp	r10, r4
     14c:	a6 14       	cp	r10, r6
     14e:	a8 14       	cp	r10, r8
     150:	aa 14       	cp	r10, r10
     152:	ac 14       	cp	r10, r12
     154:	ae 14       	cp	r10, r14
     156:	ae 14       	cp	r10, r14
     158:	ae 14       	cp	r10, r14
     15a:	ae 14       	cp	r10, r14
     15c:	ae 14       	cp	r10, r14
     15e:	ae 14       	cp	r10, r14
     160:	ae 14       	cp	r10, r14
     162:	ae 14       	cp	r10, r14
     164:	ae 14       	cp	r10, r14
     166:	ae 14       	cp	r10, r14
     168:	ae 14       	cp	r10, r14
     16a:	ae 14       	cp	r10, r14
     16c:	ae 14       	cp	r10, r14
     16e:	ae 14       	cp	r10, r14
     170:	ae 14       	cp	r10, r14
     172:	ae 14       	cp	r10, r14
     174:	ae 14       	cp	r10, r14
     176:	ae 14       	cp	r10, r14
     178:	ae 14       	cp	r10, r14
     17a:	ae 14       	cp	r10, r14
     17c:	ae 14       	cp	r10, r14
     17e:	ae 14       	cp	r10, r14
     180:	ae 14       	cp	r10, r14
     182:	ae 14       	cp	r10, r14
     184:	ae 14       	cp	r10, r14
     186:	ae 14       	cp	r10, r14
     188:	b0 14       	cp	r11, r0
     18a:	a4 14       	cp	r10, r4
     18c:	a6 14       	cp	r10, r6
     18e:	a8 14       	cp	r10, r8
     190:	aa 14       	cp	r10, r10
     192:	ac 14       	cp	r10, r12
     194:	ea 26       	eor	r14, r26
     196:	81 20       	and	r8, r1
     198:	98 20       	and	r9, r8
     19a:	a9 20       	and	r10, r9
     19c:	b8 20       	and	r11, r8
     19e:	cd 20       	and	r12, r13
     1a0:	9e 21       	and	r25, r14
     1a2:	b3 21       	and	r27, r3
     1a4:	1e 22       	and	r1, r30
     1a6:	33 22       	and	r3, r19
     1a8:	a3 27       	eor	r26, r19
     1aa:	a3 27       	eor	r26, r19
     1ac:	60 23       	and	r22, r16
     1ae:	77 23       	and	r23, r23
     1b0:	a3 27       	eor	r26, r19
     1b2:	fa 23       	and	r31, r26
     1b4:	09 24       	eor	r0, r9
     1b6:	a3 27       	eor	r26, r19
     1b8:	a3 27       	eor	r26, r19
     1ba:	a3 27       	eor	r26, r19
     1bc:	a3 27       	eor	r26, r19
     1be:	a3 27       	eor	r26, r19
     1c0:	a3 27       	eor	r26, r19
     1c2:	a3 27       	eor	r26, r19
     1c4:	a3 27       	eor	r26, r19
     1c6:	a3 27       	eor	r26, r19
     1c8:	a3 27       	eor	r26, r19
     1ca:	74 24       	eor	r7, r4
     1cc:	89 24       	eor	r8, r9
     1ce:	ee 24       	eor	r14, r14
     1d0:	17 25       	eor	r17, r7
     1d2:	7c 25       	eor	r23, r12
     1d4:	91 25       	eor	r25, r1
     1d6:	a3 27       	eor	r26, r19
     1d8:	a3 27       	eor	r26, r19
     1da:	9a 22       	and	r9, r26
     1dc:	ad 22       	and	r10, r29
     1de:	a3 27       	eor	r26, r19
     1e0:	70 26       	eor	r7, r16
     1e2:	85 26       	eor	r8, r21
     1e4:	f5 26       	eor	r15, r21
     1e6:	a3 27       	eor	r26, r19
     1e8:	1f 27       	eor	r17, r31
     1ea:	88 27       	eor	r24, r24
     1ec:	f7 25       	eor	r31, r7
     1ee:	0c 26       	eor	r0, r28
     1f0:	90 29       	or	r25, r0
     1f2:	a3 29       	or	r26, r3
     1f4:	0a 2c       	mov	r0, r10
     1f6:	0a 2c       	mov	r0, r10
     1f8:	0a 2c       	mov	r0, r10
     1fa:	0a 2c       	mov	r0, r10
     1fc:	0b 2a       	or	r0, r27
     1fe:	20 2a       	or	r2, r16
     200:	93 2a       	or	r9, r19
     202:	36 2b       	or	r19, r22
     204:	47 2b       	or	r20, r23
     206:	34 2c       	mov	r3, r4
     208:	43 2c       	mov	r4, r3
     20a:	53 2c       	mov	r5, r3
     20c:	75 2c       	mov	r7, r5
     20e:	2c 2d       	mov	r18, r12
     210:	77 2d       	mov	r23, r7
     212:	89 2c       	mov	r8, r9
     214:	bc 2c       	mov	r11, r12
     216:	44 2d       	mov	r20, r4
     218:	77 2d       	mov	r23, r7
     21a:	12 42       	sbci	r17, 0x22	; 34
     21c:	0c 42       	sbci	r16, 0x2C	; 44
     21e:	12 42       	sbci	r17, 0x22	; 34
     220:	09 42       	sbci	r16, 0x29	; 41
     222:	12 42       	sbci	r17, 0x22	; 34
     224:	09 42       	sbci	r16, 0x29	; 41
     226:	12 42       	sbci	r17, 0x22	; 34
     228:	12 42       	sbci	r17, 0x22	; 34
     22a:	09 42       	sbci	r16, 0x29	; 41
     22c:	12 42       	sbci	r17, 0x22	; 34
     22e:	09 42       	sbci	r16, 0x29	; 41
     230:	12 42       	sbci	r17, 0x22	; 34

00000232 <__trampolines_end>:
     232:	00 00       	nop
     234:	00 00       	nop
     236:	00 00       	nop
     238:	00 5f       	subi	r16, 0xF0	; 240
     23a:	00 00       	nop
     23c:	00 07       	cpc	r16, r16
     23e:	00 07       	cpc	r16, r16
     240:	00 14       	cp	r0, r0
     242:	7f 14       	cp	r7, r15
     244:	7f 14       	cp	r7, r15
     246:	24 2a       	or	r2, r20
     248:	7f 2a       	or	r7, r31
     24a:	12 23       	and	r17, r18
     24c:	13 08       	sbc	r1, r3
     24e:	64 62       	ori	r22, 0x24	; 36
     250:	36 49       	sbci	r19, 0x96	; 150
     252:	55 22       	and	r5, r21
     254:	50 00       	.word	0x0050	; ????
     256:	05 03       	mulsu	r16, r21
     258:	00 00       	nop
     25a:	00 1c       	adc	r0, r0
     25c:	22 41       	sbci	r18, 0x12	; 18
     25e:	00 00       	nop
     260:	41 22       	and	r4, r17
     262:	1c 00       	.word	0x001c	; ????
     264:	08 2a       	or	r0, r24
     266:	1c 2a       	or	r1, r28
     268:	08 08       	sbc	r0, r8
     26a:	08 3e       	cpi	r16, 0xE8	; 232
     26c:	08 08       	sbc	r0, r8
     26e:	00 50       	subi	r16, 0x00	; 0
     270:	30 00       	.word	0x0030	; ????
     272:	00 08       	sbc	r0, r0
     274:	08 08       	sbc	r0, r8
     276:	08 08       	sbc	r0, r8
     278:	00 30       	cpi	r16, 0x00	; 0
     27a:	30 00       	.word	0x0030	; ????
     27c:	00 20       	and	r0, r0
     27e:	10 08       	sbc	r1, r0
     280:	04 02       	muls	r16, r20
     282:	3e 51       	subi	r19, 0x1E	; 30
     284:	49 45       	sbci	r20, 0x59	; 89
     286:	3e 00       	.word	0x003e	; ????
     288:	42 7f       	andi	r20, 0xF2	; 242
     28a:	40 00       	.word	0x0040	; ????
     28c:	42 61       	ori	r20, 0x12	; 18
     28e:	51 49       	sbci	r21, 0x91	; 145
     290:	46 21       	and	r20, r6
     292:	41 45       	sbci	r20, 0x51	; 81
     294:	4b 31       	cpi	r20, 0x1B	; 27
     296:	18 14       	cp	r1, r8
     298:	12 7f       	andi	r17, 0xF2	; 242
     29a:	10 27       	eor	r17, r16
     29c:	45 45       	sbci	r20, 0x55	; 85
     29e:	45 39       	cpi	r20, 0x95	; 149
     2a0:	3c 4a       	sbci	r19, 0xAC	; 172
     2a2:	49 49       	sbci	r20, 0x99	; 153
     2a4:	30 01       	movw	r6, r0
     2a6:	71 09       	sbc	r23, r1
     2a8:	05 03       	mulsu	r16, r21
     2aa:	36 49       	sbci	r19, 0x96	; 150
     2ac:	49 49       	sbci	r20, 0x99	; 153
     2ae:	36 06       	cpc	r3, r22
     2b0:	49 49       	sbci	r20, 0x99	; 153
     2b2:	29 1e       	adc	r2, r25
     2b4:	00 36       	cpi	r16, 0x60	; 96
     2b6:	36 00       	.word	0x0036	; ????
     2b8:	00 00       	nop
     2ba:	56 36       	cpi	r21, 0x66	; 102
     2bc:	00 00       	nop
     2be:	00 08       	sbc	r0, r0
     2c0:	14 22       	and	r1, r20
     2c2:	41 14       	cp	r4, r1
     2c4:	14 14       	cp	r1, r4
     2c6:	14 14       	cp	r1, r4
     2c8:	41 22       	and	r4, r17
     2ca:	14 08       	sbc	r1, r4
     2cc:	00 02       	muls	r16, r16
     2ce:	01 51       	subi	r16, 0x11	; 17
     2d0:	09 06       	cpc	r0, r25
     2d2:	32 49       	sbci	r19, 0x92	; 146
     2d4:	79 41       	sbci	r23, 0x19	; 25
     2d6:	3e 7e       	andi	r19, 0xEE	; 238
     2d8:	11 11       	cpse	r17, r1
     2da:	11 7e       	andi	r17, 0xE1	; 225
     2dc:	7f 49       	sbci	r23, 0x9F	; 159
     2de:	49 49       	sbci	r20, 0x99	; 153
     2e0:	36 3e       	cpi	r19, 0xE6	; 230
     2e2:	41 41       	sbci	r20, 0x11	; 17
     2e4:	41 22       	and	r4, r17
     2e6:	7f 41       	sbci	r23, 0x1F	; 31
     2e8:	41 22       	and	r4, r17
     2ea:	1c 7f       	andi	r17, 0xFC	; 252
     2ec:	49 49       	sbci	r20, 0x99	; 153
     2ee:	49 41       	sbci	r20, 0x19	; 25
     2f0:	7f 09       	sbc	r23, r15
     2f2:	09 01       	movw	r0, r18
     2f4:	01 3e       	cpi	r16, 0xE1	; 225
     2f6:	41 41       	sbci	r20, 0x11	; 17
     2f8:	51 32       	cpi	r21, 0x21	; 33
     2fa:	7f 08       	sbc	r7, r15
     2fc:	08 08       	sbc	r0, r8
     2fe:	7f 00       	.word	0x007f	; ????
     300:	41 7f       	andi	r20, 0xF1	; 241
     302:	41 00       	.word	0x0041	; ????
     304:	20 40       	sbci	r18, 0x00	; 0
     306:	41 3f       	cpi	r20, 0xF1	; 241
     308:	01 7f       	andi	r16, 0xF1	; 241
     30a:	08 14       	cp	r0, r8
     30c:	22 41       	sbci	r18, 0x12	; 18
     30e:	7f 40       	sbci	r23, 0x0F	; 15
     310:	40 40       	sbci	r20, 0x00	; 0
     312:	40 7f       	andi	r20, 0xF0	; 240
     314:	02 04       	cpc	r0, r2
     316:	02 7f       	andi	r16, 0xF2	; 242
     318:	7f 04       	cpc	r7, r15
     31a:	08 10       	cpse	r0, r8
     31c:	7f 3e       	cpi	r23, 0xEF	; 239
     31e:	41 41       	sbci	r20, 0x11	; 17
     320:	41 3e       	cpi	r20, 0xE1	; 225
     322:	7f 09       	sbc	r23, r15
     324:	09 09       	sbc	r16, r9
     326:	06 3e       	cpi	r16, 0xE6	; 230
     328:	41 51       	subi	r20, 0x11	; 17
     32a:	21 5e       	subi	r18, 0xE1	; 225
     32c:	7f 09       	sbc	r23, r15
     32e:	19 29       	or	r17, r9
     330:	46 46       	sbci	r20, 0x66	; 102
     332:	49 49       	sbci	r20, 0x99	; 153
     334:	49 31       	cpi	r20, 0x19	; 25
     336:	01 01       	movw	r0, r2
     338:	7f 01       	movw	r14, r30
     33a:	01 3f       	cpi	r16, 0xF1	; 241
     33c:	40 40       	sbci	r20, 0x00	; 0
     33e:	40 3f       	cpi	r20, 0xF0	; 240
     340:	1f 20       	and	r1, r15
     342:	40 20       	and	r4, r0
     344:	1f 7f       	andi	r17, 0xFF	; 255
     346:	20 18       	sub	r2, r0
     348:	20 7f       	andi	r18, 0xF0	; 240
     34a:	63 14       	cp	r6, r3
     34c:	08 14       	cp	r0, r8
     34e:	63 03       	mulsu	r22, r19
     350:	04 78       	andi	r16, 0x84	; 132
     352:	04 03       	mulsu	r16, r20
     354:	61 51       	subi	r22, 0x11	; 17
     356:	49 45       	sbci	r20, 0x59	; 89
     358:	43 00       	.word	0x0043	; ????
     35a:	00 7f       	andi	r16, 0xF0	; 240
     35c:	41 41       	sbci	r20, 0x11	; 17
     35e:	02 04       	cpc	r0, r2
     360:	08 10       	cpse	r0, r8
     362:	20 41       	sbci	r18, 0x10	; 16
     364:	41 7f       	andi	r20, 0xF1	; 241
     366:	00 00       	nop
     368:	04 02       	muls	r16, r20
     36a:	01 02       	muls	r16, r17
     36c:	04 40       	sbci	r16, 0x04	; 4
     36e:	40 40       	sbci	r20, 0x00	; 0
     370:	40 40       	sbci	r20, 0x00	; 0
     372:	00 01       	movw	r0, r0
     374:	02 04       	cpc	r0, r2
     376:	00 20       	and	r0, r0
     378:	54 54       	subi	r21, 0x44	; 68
     37a:	54 78       	andi	r21, 0x84	; 132
     37c:	7f 48       	sbci	r23, 0x8F	; 143
     37e:	44 44       	sbci	r20, 0x44	; 68
     380:	38 38       	cpi	r19, 0x88	; 136
     382:	44 44       	sbci	r20, 0x44	; 68
     384:	44 20       	and	r4, r4
     386:	38 44       	sbci	r19, 0x48	; 72
     388:	44 48       	sbci	r20, 0x84	; 132
     38a:	7f 38       	cpi	r23, 0x8F	; 143
     38c:	54 54       	subi	r21, 0x44	; 68
     38e:	54 18       	sub	r5, r4
     390:	08 7e       	andi	r16, 0xE8	; 232
     392:	09 01       	movw	r0, r18
     394:	02 08       	sbc	r0, r2
     396:	14 54       	subi	r17, 0x44	; 68
     398:	54 3c       	cpi	r21, 0xC4	; 196
     39a:	7f 08       	sbc	r7, r15
     39c:	04 04       	cpc	r0, r4
     39e:	78 00       	.word	0x0078	; ????
     3a0:	44 7d       	andi	r20, 0xD4	; 212
     3a2:	40 00       	.word	0x0040	; ????
     3a4:	20 40       	sbci	r18, 0x00	; 0
     3a6:	44 3d       	cpi	r20, 0xD4	; 212
     3a8:	00 00       	nop
     3aa:	7f 10       	cpse	r7, r15
     3ac:	28 44       	sbci	r18, 0x48	; 72
     3ae:	00 41       	sbci	r16, 0x10	; 16
     3b0:	7f 40       	sbci	r23, 0x0F	; 15
     3b2:	00 7c       	andi	r16, 0xC0	; 192
     3b4:	04 18       	sub	r0, r4
     3b6:	04 78       	andi	r16, 0x84	; 132
     3b8:	7c 08       	sbc	r7, r12
     3ba:	04 04       	cpc	r0, r4
     3bc:	78 38       	cpi	r23, 0x88	; 136
     3be:	44 44       	sbci	r20, 0x44	; 68
     3c0:	44 38       	cpi	r20, 0x84	; 132
     3c2:	7c 14       	cp	r7, r12
     3c4:	14 14       	cp	r1, r4
     3c6:	08 08       	sbc	r0, r8
     3c8:	14 14       	cp	r1, r4
     3ca:	18 7c       	andi	r17, 0xC8	; 200
     3cc:	7c 08       	sbc	r7, r12
     3ce:	04 04       	cpc	r0, r4
     3d0:	08 48       	sbci	r16, 0x88	; 136
     3d2:	54 54       	subi	r21, 0x44	; 68
     3d4:	54 20       	and	r5, r4
     3d6:	04 3f       	cpi	r16, 0xF4	; 244
     3d8:	44 40       	sbci	r20, 0x04	; 4
     3da:	20 3c       	cpi	r18, 0xC0	; 192
     3dc:	40 40       	sbci	r20, 0x00	; 0
     3de:	20 7c       	andi	r18, 0xC0	; 192
     3e0:	1c 20       	and	r1, r12
     3e2:	40 20       	and	r4, r0
     3e4:	1c 3c       	cpi	r17, 0xCC	; 204
     3e6:	40 30       	cpi	r20, 0x00	; 0
     3e8:	40 3c       	cpi	r20, 0xC0	; 192
     3ea:	44 28       	or	r4, r4
     3ec:	10 28       	or	r1, r0
     3ee:	44 0c       	add	r4, r4
     3f0:	50 50       	subi	r21, 0x00	; 0
     3f2:	50 3c       	cpi	r21, 0xC0	; 192
     3f4:	44 64       	ori	r20, 0x44	; 68
     3f6:	54 4c       	sbci	r21, 0xC4	; 196
     3f8:	44 00       	.word	0x0044	; ????
     3fa:	08 36       	cpi	r16, 0x68	; 104
     3fc:	41 00       	.word	0x0041	; ????
     3fe:	00 00       	nop
     400:	7f 00       	.word	0x007f	; ????
     402:	00 00       	nop
     404:	41 36       	cpi	r20, 0x61	; 97
     406:	08 00       	.word	0x0008	; ????
     408:	08 08       	sbc	r0, r8
     40a:	2a 1c       	adc	r2, r10
     40c:	08 08       	sbc	r0, r8
     40e:	1c 2a       	or	r1, r28
     410:	08 08       	sbc	r0, r8

00000412 <__ctors_start>:
     412:	f6 40       	sbci	r31, 0x06	; 6

00000414 <__ctors_end>:
     414:	11 24       	eor	r1, r1
     416:	1f be       	out	0x3f, r1	; 63
     418:	cf ef       	ldi	r28, 0xFF	; 255
     41a:	d1 e2       	ldi	r29, 0x21	; 33
     41c:	de bf       	out	0x3e, r29	; 62
     41e:	cd bf       	out	0x3d, r28	; 61
     420:	00 e0       	ldi	r16, 0x00	; 0
     422:	0c bf       	out	0x3c, r16	; 60

00000424 <__do_copy_data>:
     424:	1a e0       	ldi	r17, 0x0A	; 10
     426:	a0 e0       	ldi	r26, 0x00	; 0
     428:	b2 e0       	ldi	r27, 0x02	; 2
     42a:	e2 e5       	ldi	r30, 0x52	; 82
     42c:	f6 e9       	ldi	r31, 0x96	; 150
     42e:	00 e0       	ldi	r16, 0x00	; 0
     430:	0b bf       	out	0x3b, r16	; 59
     432:	02 c0       	rjmp	.+4      	; 0x438 <__do_copy_data+0x14>
     434:	07 90       	elpm	r0, Z+
     436:	0d 92       	st	X+, r0
     438:	a8 3e       	cpi	r26, 0xE8	; 232
     43a:	b1 07       	cpc	r27, r17
     43c:	d9 f7       	brne	.-10     	; 0x434 <__do_copy_data+0x10>

0000043e <__do_clear_bss>:
     43e:	26 e1       	ldi	r18, 0x16	; 22
     440:	a8 ee       	ldi	r26, 0xE8	; 232
     442:	ba e0       	ldi	r27, 0x0A	; 10
     444:	01 c0       	rjmp	.+2      	; 0x448 <.do_clear_bss_start>

00000446 <.do_clear_bss_loop>:
     446:	1d 92       	st	X+, r1

00000448 <.do_clear_bss_start>:
     448:	a2 34       	cpi	r26, 0x42	; 66
     44a:	b2 07       	cpc	r27, r18
     44c:	e1 f7       	brne	.-8      	; 0x446 <.do_clear_bss_loop>

0000044e <__do_global_ctors>:
     44e:	12 e0       	ldi	r17, 0x02	; 2
     450:	ca e0       	ldi	r28, 0x0A	; 10
     452:	d2 e0       	ldi	r29, 0x02	; 2
     454:	00 e0       	ldi	r16, 0x00	; 0
     456:	06 c0       	rjmp	.+12     	; 0x464 <__do_global_ctors+0x16>
     458:	21 97       	sbiw	r28, 0x01	; 1
     45a:	01 09       	sbc	r16, r1
     45c:	80 2f       	mov	r24, r16
     45e:	fe 01       	movw	r30, r28
     460:	0e 94 fa 46 	call	0x8df4	; 0x8df4 <__tablejump2__>
     464:	c9 30       	cpi	r28, 0x09	; 9
     466:	d1 07       	cpc	r29, r17
     468:	80 e0       	ldi	r24, 0x00	; 0
     46a:	08 07       	cpc	r16, r24
     46c:	a9 f7       	brne	.-22     	; 0x458 <__do_global_ctors+0xa>
     46e:	0e 94 95 3f 	call	0x7f2a	; 0x7f2a <main>
     472:	0c 94 27 4b 	jmp	0x964e	; 0x964e <_exit>

00000476 <__bad_interrupt>:
     476:	c4 cd       	rjmp	.-1144   	; 0x0 <__vectors>

00000478 <_Z7initADCv>:
// HJ 18-12-2016
void disable_ADC(void)
{
	// enable ADC, select ADC clock = F_CPU / 128 (i.e. 62.5 kHz)
	ADCSRA &= ~((1<<ADEN) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0));
	ADMUX &= ~(1<<REFS0) ;//| (1<<REFS1);// | (1<<ADLAR);		//Anand 07.06.2014
     478:	ea e7       	ldi	r30, 0x7A	; 122
     47a:	f0 e0       	ldi	r31, 0x00	; 0
     47c:	80 81       	ld	r24, Z
     47e:	87 68       	ori	r24, 0x87	; 135
     480:	80 83       	st	Z, r24
     482:	ec e7       	ldi	r30, 0x7C	; 124
     484:	f0 e0       	ldi	r31, 0x00	; 0
     486:	80 81       	ld	r24, Z
     488:	80 64       	ori	r24, 0x40	; 64
     48a:	80 83       	st	Z, r24
     48c:	8f ef       	ldi	r24, 0xFF	; 255
     48e:	97 e4       	ldi	r25, 0x47	; 71
     490:	01 97       	sbiw	r24, 0x01	; 1
     492:	f1 f7       	brne	.-4      	; 0x490 <_Z7initADCv+0x18>
     494:	00 c0       	rjmp	.+0      	; 0x496 <_Z7initADCv+0x1e>
     496:	00 00       	nop
     498:	08 95       	ret

0000049a <_Z7readADCc>:
{
	/*unsigned int timeout=0;
	static int diesel = 200;*/
	
	//HJ 09-09-2016
	ADMUX &= 0xE0;						// Clear MUX4 - MUX0
     49a:	ec e7       	ldi	r30, 0x7C	; 124
     49c:	f0 e0       	ldi	r31, 0x00	; 0
     49e:	90 81       	ld	r25, Z
     4a0:	90 7e       	andi	r25, 0xE0	; 224
     4a2:	90 83       	st	Z, r25
	
	ADMUX |= (ch & 0x07);
     4a4:	90 81       	ld	r25, Z
     4a6:	87 70       	andi	r24, 0x07	; 7
     4a8:	98 2b       	or	r25, r24
     4aa:	90 83       	st	Z, r25
											// Conversion on channel 0, AVCC reference, 10 bit mode
	ADCSRA |= (1<<ADSC);                // Start conversion
     4ac:	ea e7       	ldi	r30, 0x7A	; 122
     4ae:	f0 e0       	ldi	r31, 0x00	; 0
     4b0:	80 81       	ld	r24, Z
     4b2:	80 64       	ori	r24, 0x40	; 64
     4b4:	80 83       	st	Z, r24
	
	while(!(ADCSRA&(1<<ADIF)))         // Wait for conversion complete
     4b6:	80 81       	ld	r24, Z
     4b8:	84 ff       	sbrs	r24, 4
     4ba:	fd cf       	rjmp	.-6      	; 0x4b6 <_Z7readADCc+0x1c>
			}
			return diesel;
		}*/
	}
	
	ADCSRA |= (1 << ADIF);
     4bc:	ea e7       	ldi	r30, 0x7A	; 122
     4be:	f0 e0       	ldi	r31, 0x00	; 0
     4c0:	80 81       	ld	r24, Z
     4c2:	80 61       	ori	r24, 0x10	; 16
     4c4:	80 83       	st	Z, r24
	
	return(ADC);
     4c6:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x700078>
     4ca:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
}
     4ce:	08 95       	ret

000004d0 <_Z21eepromWriteGPRSConfigP18gprs_config_data_t>:
		eeprom_write_block(&tmp, (void*)addr, sizeof(e2p_log_data_t));
		addr += sizeof(e2p_log_data_t);
	}
	
	sei();
}
     4d0:	cf 93       	push	r28
     4d2:	df 93       	push	r29
     4d4:	ec 01       	movw	r28, r24
     4d6:	f8 94       	cli
     4d8:	62 e4       	ldi	r22, 0x42	; 66
     4da:	0e 94 56 14 	call	0x28ac	; 0x28ac <_Z11getChecksumPhc>
     4de:	fe 01       	movw	r30, r28
     4e0:	e1 5b       	subi	r30, 0xB1	; 177
     4e2:	ff 4f       	sbci	r31, 0xFF	; 255
     4e4:	80 83       	st	Z, r24
     4e6:	40 e5       	ldi	r20, 0x50	; 80
     4e8:	50 e0       	ldi	r21, 0x00	; 0
     4ea:	60 ea       	ldi	r22, 0xA0	; 160
     4ec:	70 e0       	ldi	r23, 0x00	; 0
     4ee:	ce 01       	movw	r24, r28
     4f0:	0e 94 10 4b 	call	0x9620	; 0x9620 <eeprom_write_block>
     4f4:	78 94       	sei
     4f6:	df 91       	pop	r29
     4f8:	cf 91       	pop	r28
     4fa:	08 95       	ret

000004fc <_Z25write_default_GPRS_configv>:
     4fc:	f8 94       	cli
     4fe:	80 e5       	ldi	r24, 0x50	; 80
     500:	e4 e9       	ldi	r30, 0x94	; 148
     502:	f2 e1       	ldi	r31, 0x12	; 18
     504:	df 01       	movw	r26, r30
     506:	1d 92       	st	X+, r1
     508:	8a 95       	dec	r24
     50a:	e9 f7       	brne	.-6      	; 0x506 <_Z25write_default_GPRS_configv+0xa>
     50c:	8e e0       	ldi	r24, 0x0E	; 14
     50e:	e1 e2       	ldi	r30, 0x21	; 33
     510:	f2 e0       	ldi	r31, 0x02	; 2
     512:	a4 e9       	ldi	r26, 0x94	; 148
     514:	b2 e1       	ldi	r27, 0x12	; 18
     516:	01 90       	ld	r0, Z+
     518:	0d 92       	st	X+, r0
     51a:	8a 95       	dec	r24
     51c:	e1 f7       	brne	.-8      	; 0x516 <_Z25write_default_GPRS_configv+0x1a>
     51e:	8e e0       	ldi	r24, 0x0E	; 14
     520:	ef e2       	ldi	r30, 0x2F	; 47
     522:	f2 e0       	ldi	r31, 0x02	; 2
     524:	a4 eb       	ldi	r26, 0xB4	; 180
     526:	b2 e1       	ldi	r27, 0x12	; 18
     528:	01 90       	ld	r0, Z+
     52a:	0d 92       	st	X+, r0
     52c:	8a 95       	dec	r24
     52e:	e1 f7       	brne	.-8      	; 0x528 <_Z25write_default_GPRS_configv+0x2c>
     530:	80 e1       	ldi	r24, 0x10	; 16
     532:	97 e2       	ldi	r25, 0x27	; 39
     534:	90 93 d5 12 	sts	0x12D5, r25	; 0x8012d5 <gprs_config_data+0x41>
     538:	80 93 d4 12 	sts	0x12D4, r24	; 0x8012d4 <gprs_config_data+0x40>
     53c:	6f e4       	ldi	r22, 0x4F	; 79
     53e:	84 e9       	ldi	r24, 0x94	; 148
     540:	92 e1       	ldi	r25, 0x12	; 18
     542:	0e 94 56 14 	call	0x28ac	; 0x28ac <_Z11getChecksumPhc>
     546:	80 93 e3 12 	sts	0x12E3, r24	; 0x8012e3 <gprs_config_data+0x4f>
     54a:	84 e9       	ldi	r24, 0x94	; 148
     54c:	92 e1       	ldi	r25, 0x12	; 18
     54e:	c0 df       	rcall	.-128    	; 0x4d0 <_Z21eepromWriteGPRSConfigP18gprs_config_data_t>
     550:	78 94       	sei
     552:	08 95       	ret

00000554 <_Z20eepromreadGPRSConfigv>:
     554:	ef 92       	push	r14
     556:	ff 92       	push	r15
     558:	1f 93       	push	r17
     55a:	cf 93       	push	r28
     55c:	df 93       	push	r29
     55e:	f8 94       	cli
     560:	c0 e0       	ldi	r28, 0x00	; 0
     562:	d0 e0       	ldi	r29, 0x00	; 0
     564:	0f 2e       	mov	r0, r31
     566:	f3 ee       	ldi	r31, 0xE3	; 227
     568:	ef 2e       	mov	r14, r31
     56a:	f2 e1       	ldi	r31, 0x12	; 18
     56c:	ff 2e       	mov	r15, r31
     56e:	f0 2d       	mov	r31, r0
     570:	40 e5       	ldi	r20, 0x50	; 80
     572:	50 e0       	ldi	r21, 0x00	; 0
     574:	60 ea       	ldi	r22, 0xA0	; 160
     576:	70 e0       	ldi	r23, 0x00	; 0
     578:	84 e9       	ldi	r24, 0x94	; 148
     57a:	92 e1       	ldi	r25, 0x12	; 18
     57c:	0e 94 df 4a 	call	0x95be	; 0x95be <eeprom_read_block>
     580:	f7 01       	movw	r30, r14
     582:	10 81       	ld	r17, Z
     584:	62 e4       	ldi	r22, 0x42	; 66
     586:	84 e9       	ldi	r24, 0x94	; 148
     588:	92 e1       	ldi	r25, 0x12	; 18
     58a:	0e 94 56 14 	call	0x28ac	; 0x28ac <_Z11getChecksumPhc>
     58e:	18 17       	cp	r17, r24
     590:	21 f0       	breq	.+8      	; 0x59a <_Z20eepromreadGPRSConfigv+0x46>
     592:	21 96       	adiw	r28, 0x01	; 1
     594:	c3 30       	cpi	r28, 0x03	; 3
     596:	d1 05       	cpc	r29, r1
     598:	59 f7       	brne	.-42     	; 0x570 <_Z20eepromreadGPRSConfigv+0x1c>
     59a:	78 94       	sei
     59c:	81 e0       	ldi	r24, 0x01	; 1
     59e:	23 97       	sbiw	r28, 0x03	; 3
     5a0:	0c f0       	brlt	.+2      	; 0x5a4 <_Z20eepromreadGPRSConfigv+0x50>
     5a2:	80 e0       	ldi	r24, 0x00	; 0
     5a4:	df 91       	pop	r29
     5a6:	cf 91       	pop	r28
     5a8:	1f 91       	pop	r17
     5aa:	ff 90       	pop	r15
     5ac:	ef 90       	pop	r14
     5ae:	08 95       	ret

000005b0 <_Z17eepromReadCalDatav>:
     5b0:	1f 93       	push	r17
     5b2:	cf 93       	push	r28
     5b4:	df 93       	push	r29
     5b6:	f8 94       	cli
     5b8:	c0 e0       	ldi	r28, 0x00	; 0
     5ba:	d0 e0       	ldi	r29, 0x00	; 0
     5bc:	40 e4       	ldi	r20, 0x40	; 64
     5be:	50 e0       	ldi	r21, 0x00	; 0
     5c0:	60 e5       	ldi	r22, 0x50	; 80
     5c2:	70 e0       	ldi	r23, 0x00	; 0
     5c4:	85 e4       	ldi	r24, 0x45	; 69
     5c6:	94 e1       	ldi	r25, 0x14	; 20
     5c8:	0e 94 df 4a 	call	0x95be	; 0x95be <eeprom_read_block>
     5cc:	10 91 84 14 	lds	r17, 0x1484	; 0x801484 <calbration_data+0x3f>
     5d0:	6f e3       	ldi	r22, 0x3F	; 63
     5d2:	85 e4       	ldi	r24, 0x45	; 69
     5d4:	94 e1       	ldi	r25, 0x14	; 20
     5d6:	0e 94 56 14 	call	0x28ac	; 0x28ac <_Z11getChecksumPhc>
     5da:	18 17       	cp	r17, r24
     5dc:	21 f0       	breq	.+8      	; 0x5e6 <_Z17eepromReadCalDatav+0x36>
     5de:	21 96       	adiw	r28, 0x01	; 1
     5e0:	c3 30       	cpi	r28, 0x03	; 3
     5e2:	d1 05       	cpc	r29, r1
     5e4:	59 f7       	brne	.-42     	; 0x5bc <_Z17eepromReadCalDatav+0xc>
     5e6:	78 94       	sei
     5e8:	81 e0       	ldi	r24, 0x01	; 1
     5ea:	23 97       	sbiw	r28, 0x03	; 3
     5ec:	0c f0       	brlt	.+2      	; 0x5f0 <_Z17eepromReadCalDatav+0x40>
     5ee:	80 e0       	ldi	r24, 0x00	; 0
     5f0:	df 91       	pop	r29
     5f2:	cf 91       	pop	r28
     5f4:	1f 91       	pop	r17
     5f6:	08 95       	ret

000005f8 <_Z18eepromWriteCalDatav>:
     5f8:	f8 94       	cli
     5fa:	6f e3       	ldi	r22, 0x3F	; 63
     5fc:	85 e4       	ldi	r24, 0x45	; 69
     5fe:	94 e1       	ldi	r25, 0x14	; 20
     600:	0e 94 56 14 	call	0x28ac	; 0x28ac <_Z11getChecksumPhc>
     604:	80 93 84 14 	sts	0x1484, r24	; 0x801484 <calbration_data+0x3f>
     608:	40 e4       	ldi	r20, 0x40	; 64
     60a:	50 e0       	ldi	r21, 0x00	; 0
     60c:	60 e5       	ldi	r22, 0x50	; 80
     60e:	70 e0       	ldi	r23, 0x00	; 0
     610:	85 e4       	ldi	r24, 0x45	; 69
     612:	94 e1       	ldi	r25, 0x14	; 20
     614:	0e 94 10 4b 	call	0x9620	; 0x9620 <eeprom_write_block>
     618:	78 94       	sei
     61a:	08 95       	ret

0000061c <_Z22eepromWriteProductInfov>:
     61c:	f8 94       	cli
     61e:	6f e1       	ldi	r22, 0x1F	; 31
     620:	8a e0       	ldi	r24, 0x0A	; 10
     622:	9b e0       	ldi	r25, 0x0B	; 11
     624:	0e 94 56 14 	call	0x28ac	; 0x28ac <_Z11getChecksumPhc>
     628:	80 93 29 0b 	sts	0x0B29, r24	; 0x800b29 <product_info+0x1f>
     62c:	40 e2       	ldi	r20, 0x20	; 32
     62e:	50 e0       	ldi	r21, 0x00	; 0
     630:	60 e0       	ldi	r22, 0x00	; 0
     632:	70 e0       	ldi	r23, 0x00	; 0
     634:	8a e0       	ldi	r24, 0x0A	; 10
     636:	9b e0       	ldi	r25, 0x0B	; 11
     638:	0e 94 10 4b 	call	0x9620	; 0x9620 <eeprom_write_block>
     63c:	78 94       	sei
     63e:	08 95       	ret

00000640 <_Z21eepromReadProductInfov>:
     640:	1f 93       	push	r17
     642:	cf 93       	push	r28
     644:	df 93       	push	r29
     646:	f8 94       	cli
     648:	c0 e0       	ldi	r28, 0x00	; 0
     64a:	d0 e0       	ldi	r29, 0x00	; 0
     64c:	40 e2       	ldi	r20, 0x20	; 32
     64e:	50 e0       	ldi	r21, 0x00	; 0
     650:	60 e0       	ldi	r22, 0x00	; 0
     652:	70 e0       	ldi	r23, 0x00	; 0
     654:	8a e0       	ldi	r24, 0x0A	; 10
     656:	9b e0       	ldi	r25, 0x0B	; 11
     658:	0e 94 df 4a 	call	0x95be	; 0x95be <eeprom_read_block>
     65c:	10 91 29 0b 	lds	r17, 0x0B29	; 0x800b29 <product_info+0x1f>
     660:	6f e1       	ldi	r22, 0x1F	; 31
     662:	8a e0       	ldi	r24, 0x0A	; 10
     664:	9b e0       	ldi	r25, 0x0B	; 11
     666:	0e 94 56 14 	call	0x28ac	; 0x28ac <_Z11getChecksumPhc>
     66a:	18 17       	cp	r17, r24
     66c:	21 f0       	breq	.+8      	; 0x676 <_Z21eepromReadProductInfov+0x36>
     66e:	21 96       	adiw	r28, 0x01	; 1
     670:	c3 30       	cpi	r28, 0x03	; 3
     672:	d1 05       	cpc	r29, r1
     674:	59 f7       	brne	.-42     	; 0x64c <_Z21eepromReadProductInfov+0xc>
     676:	78 94       	sei
     678:	23 97       	sbiw	r28, 0x03	; 3
     67a:	1c f0       	brlt	.+6      	; 0x682 <_Z21eepromReadProductInfov+0x42>
     67c:	41 9a       	sbi	0x08, 1	; 8
     67e:	80 e0       	ldi	r24, 0x00	; 0
     680:	01 c0       	rjmp	.+2      	; 0x684 <_Z21eepromReadProductInfov+0x44>
     682:	81 e0       	ldi	r24, 0x01	; 1
     684:	df 91       	pop	r29
     686:	cf 91       	pop	r28
     688:	1f 91       	pop	r17
     68a:	08 95       	ret

0000068c <_Z28eepromWriteProductInfoConfigv>:
     68c:	f8 94       	cli
     68e:	6f e0       	ldi	r22, 0x0F	; 15
     690:	8a ef       	ldi	r24, 0xFA	; 250
     692:	9a e0       	ldi	r25, 0x0A	; 10
     694:	0e 94 56 14 	call	0x28ac	; 0x28ac <_Z11getChecksumPhc>
     698:	80 93 09 0b 	sts	0x0B09, r24	; 0x800b09 <product_info_config+0xf>
     69c:	40 e1       	ldi	r20, 0x10	; 16
     69e:	50 e0       	ldi	r21, 0x00	; 0
     6a0:	60 ef       	ldi	r22, 0xF0	; 240
     6a2:	70 e0       	ldi	r23, 0x00	; 0
     6a4:	8a ef       	ldi	r24, 0xFA	; 250
     6a6:	9a e0       	ldi	r25, 0x0A	; 10
     6a8:	0e 94 10 4b 	call	0x9620	; 0x9620 <eeprom_write_block>
     6ac:	78 94       	sei
     6ae:	08 95       	ret

000006b0 <_Z27eepromReadProductInfoConfigv>:
     6b0:	1f 93       	push	r17
     6b2:	cf 93       	push	r28
     6b4:	df 93       	push	r29
     6b6:	f8 94       	cli
     6b8:	c0 e0       	ldi	r28, 0x00	; 0
     6ba:	d0 e0       	ldi	r29, 0x00	; 0
     6bc:	40 e1       	ldi	r20, 0x10	; 16
     6be:	50 e0       	ldi	r21, 0x00	; 0
     6c0:	60 ef       	ldi	r22, 0xF0	; 240
     6c2:	70 e0       	ldi	r23, 0x00	; 0
     6c4:	8a ef       	ldi	r24, 0xFA	; 250
     6c6:	9a e0       	ldi	r25, 0x0A	; 10
     6c8:	0e 94 df 4a 	call	0x95be	; 0x95be <eeprom_read_block>
     6cc:	10 91 09 0b 	lds	r17, 0x0B09	; 0x800b09 <product_info_config+0xf>
     6d0:	6f e0       	ldi	r22, 0x0F	; 15
     6d2:	8a ef       	ldi	r24, 0xFA	; 250
     6d4:	9a e0       	ldi	r25, 0x0A	; 10
     6d6:	0e 94 56 14 	call	0x28ac	; 0x28ac <_Z11getChecksumPhc>
     6da:	18 17       	cp	r17, r24
     6dc:	21 f0       	breq	.+8      	; 0x6e6 <_Z27eepromReadProductInfoConfigv+0x36>
     6de:	21 96       	adiw	r28, 0x01	; 1
     6e0:	c3 30       	cpi	r28, 0x03	; 3
     6e2:	d1 05       	cpc	r29, r1
     6e4:	59 f7       	brne	.-42     	; 0x6bc <_Z27eepromReadProductInfoConfigv+0xc>
     6e6:	78 94       	sei
     6e8:	23 97       	sbiw	r28, 0x03	; 3
     6ea:	1c f0       	brlt	.+6      	; 0x6f2 <_Z27eepromReadProductInfoConfigv+0x42>
     6ec:	41 9a       	sbi	0x08, 1	; 8
     6ee:	80 e0       	ldi	r24, 0x00	; 0
     6f0:	01 c0       	rjmp	.+2      	; 0x6f4 <_Z27eepromReadProductInfoConfigv+0x44>
     6f2:	81 e0       	ldi	r24, 0x01	; 1
     6f4:	df 91       	pop	r29
     6f6:	cf 91       	pop	r28
     6f8:	1f 91       	pop	r17
     6fa:	08 95       	ret

000006fc <_Z26write_default_product_infov>:
     6fc:	cf 93       	push	r28
     6fe:	df 93       	push	r29
     700:	f8 94       	cli
     702:	ca e0       	ldi	r28, 0x0A	; 10
     704:	db e0       	ldi	r29, 0x0B	; 11
     706:	88 81       	ld	r24, Y
     708:	99 81       	ldd	r25, Y+1	; 0x01
     70a:	20 e2       	ldi	r18, 0x20	; 32
     70c:	fe 01       	movw	r30, r28
     70e:	11 92       	st	Z+, r1
     710:	2a 95       	dec	r18
     712:	e9 f7       	brne	.-6      	; 0x70e <_Z26write_default_product_infov+0x12>
     714:	99 83       	std	Y+1, r25	; 0x01
     716:	88 83       	st	Y, r24
     718:	84 e6       	ldi	r24, 0x64	; 100
     71a:	90 e0       	ldi	r25, 0x00	; 0
     71c:	9b 83       	std	Y+3, r25	; 0x03
     71e:	8a 83       	std	Y+2, r24	; 0x02
     720:	8a e0       	ldi	r24, 0x0A	; 10
     722:	ee e3       	ldi	r30, 0x3E	; 62
     724:	f2 e0       	ldi	r31, 0x02	; 2
     726:	ae e0       	ldi	r26, 0x0E	; 14
     728:	bb e0       	ldi	r27, 0x0B	; 11
     72a:	01 90       	ld	r0, Z+
     72c:	0d 92       	st	X+, r0
     72e:	8a 95       	dec	r24
     730:	e1 f7       	brne	.-8      	; 0x72a <_Z26write_default_product_infov+0x2e>
     732:	88 ec       	ldi	r24, 0xC8	; 200
     734:	90 e0       	ldi	r25, 0x00	; 0
     736:	99 8f       	std	Y+25, r25	; 0x19
     738:	88 8f       	std	Y+24, r24	; 0x18
     73a:	8c ed       	ldi	r24, 0xDC	; 220
     73c:	95 e0       	ldi	r25, 0x05	; 5
     73e:	9b 8f       	std	Y+27, r25	; 0x1b
     740:	8a 8f       	std	Y+26, r24	; 0x1a
     742:	6c df       	rcall	.-296    	; 0x61c <_Z22eepromWriteProductInfov>
     744:	ea ef       	ldi	r30, 0xFA	; 250
     746:	fa e0       	ldi	r31, 0x0A	; 10
     748:	88 e7       	ldi	r24, 0x78	; 120
     74a:	95 e0       	ldi	r25, 0x05	; 5
     74c:	91 83       	std	Z+1, r25	; 0x01
     74e:	80 83       	st	Z, r24
     750:	83 e0       	ldi	r24, 0x03	; 3
     752:	82 83       	std	Z+2, r24	; 0x02
     754:	81 e0       	ldi	r24, 0x01	; 1
     756:	83 83       	std	Z+3, r24	; 0x03
     758:	99 df       	rcall	.-206    	; 0x68c <_Z28eepromWriteProductInfoConfigv>
     75a:	78 94       	sei
     75c:	df 91       	pop	r29
     75e:	cf 91       	pop	r28
     760:	08 95       	ret

00000762 <_Z22eepromUpdateHexFileHdrv>:
     762:	f8 94       	cli
     764:	67 e0       	ldi	r22, 0x07	; 7
     766:	8c ee       	ldi	r24, 0xEC	; 236
     768:	9a e0       	ldi	r25, 0x0A	; 10
     76a:	0e 94 56 14 	call	0x28ac	; 0x28ac <_Z11getChecksumPhc>
     76e:	80 93 f3 0a 	sts	0x0AF3, r24	; 0x800af3 <e2p_hex_file_hdr+0x7>
     772:	48 e0       	ldi	r20, 0x08	; 8
     774:	50 e0       	ldi	r21, 0x00	; 0
     776:	68 e6       	ldi	r22, 0x68	; 104
     778:	71 e0       	ldi	r23, 0x01	; 1
     77a:	8c ee       	ldi	r24, 0xEC	; 236
     77c:	9a e0       	ldi	r25, 0x0A	; 10
     77e:	0e 94 ef 4a 	call	0x95de	; 0x95de <eeprom_update_block>
     782:	78 94       	sei
     784:	08 95       	ret

00000786 <_Z20eepromReadHexFileHdrv>:
     786:	1f 93       	push	r17
     788:	cf 93       	push	r28
     78a:	df 93       	push	r29
     78c:	f8 94       	cli
     78e:	c0 e0       	ldi	r28, 0x00	; 0
     790:	d0 e0       	ldi	r29, 0x00	; 0
     792:	48 e0       	ldi	r20, 0x08	; 8
     794:	50 e0       	ldi	r21, 0x00	; 0
     796:	68 e6       	ldi	r22, 0x68	; 104
     798:	71 e0       	ldi	r23, 0x01	; 1
     79a:	8c ee       	ldi	r24, 0xEC	; 236
     79c:	9a e0       	ldi	r25, 0x0A	; 10
     79e:	0e 94 df 4a 	call	0x95be	; 0x95be <eeprom_read_block>
     7a2:	10 91 f3 0a 	lds	r17, 0x0AF3	; 0x800af3 <e2p_hex_file_hdr+0x7>
     7a6:	67 e0       	ldi	r22, 0x07	; 7
     7a8:	8c ee       	ldi	r24, 0xEC	; 236
     7aa:	9a e0       	ldi	r25, 0x0A	; 10
     7ac:	0e 94 56 14 	call	0x28ac	; 0x28ac <_Z11getChecksumPhc>
     7b0:	18 17       	cp	r17, r24
     7b2:	21 f0       	breq	.+8      	; 0x7bc <_Z20eepromReadHexFileHdrv+0x36>
     7b4:	21 96       	adiw	r28, 0x01	; 1
     7b6:	c3 30       	cpi	r28, 0x03	; 3
     7b8:	d1 05       	cpc	r29, r1
     7ba:	59 f7       	brne	.-42     	; 0x792 <_Z20eepromReadHexFileHdrv+0xc>
     7bc:	78 94       	sei
     7be:	81 e0       	ldi	r24, 0x01	; 1
     7c0:	23 97       	sbiw	r28, 0x03	; 3
     7c2:	0c f0       	brlt	.+2      	; 0x7c6 <_Z20eepromReadHexFileHdrv+0x40>
     7c4:	80 e0       	ldi	r24, 0x00	; 0
     7c6:	df 91       	pop	r29
     7c8:	cf 91       	pop	r28
     7ca:	1f 91       	pop	r17
     7cc:	08 95       	ret

000007ce <_Z14hex_file_readyh>:
     7ce:	80 93 ec 0a 	sts	0x0AEC, r24	; 0x800aec <e2p_hex_file_hdr>
     7d2:	c7 cf       	rjmp	.-114    	; 0x762 <_Z22eepromUpdateHexFileHdrv>
     7d4:	08 95       	ret

000007d6 <_Z18update_e2p_frm_verPc>:
     7d6:	fc 01       	movw	r30, r24
     7d8:	95 e0       	ldi	r25, 0x05	; 5
     7da:	ad ee       	ldi	r26, 0xED	; 237
     7dc:	ba e0       	ldi	r27, 0x0A	; 10
     7de:	01 90       	ld	r0, Z+
     7e0:	0d 92       	st	X+, r0
     7e2:	9a 95       	dec	r25
     7e4:	e1 f7       	brne	.-8      	; 0x7de <_Z18update_e2p_frm_verPc+0x8>
     7e6:	bd cf       	rjmp	.-134    	; 0x762 <_Z22eepromUpdateHexFileHdrv>
     7e8:	08 95       	ret

000007ea <_Z15get_e2p_frm_verv>:
     7ea:	8d ee       	ldi	r24, 0xED	; 237
     7ec:	9a e0       	ldi	r25, 0x0A	; 10
     7ee:	08 95       	ret

000007f0 <_Z15get_gprs_configPc>:
     7f0:	fc 01       	movw	r30, r24
     7f2:	80 81       	ld	r24, Z
     7f4:	82 30       	cpi	r24, 0x02	; 2
     7f6:	19 f0       	breq	.+6      	; 0x7fe <_Z15get_gprs_configPc+0xe>
     7f8:	84 eb       	ldi	r24, 0xB4	; 180
     7fa:	92 e1       	ldi	r25, 0x12	; 18
     7fc:	08 95       	ret
     7fe:	84 e9       	ldi	r24, 0x94	; 148
     800:	92 e1       	ldi	r25, 0x12	; 18
     802:	08 95       	ret

00000804 <_Z18update_gprs_configPc>:
     804:	cf 93       	push	r28
     806:	df 93       	push	r29
     808:	ec 01       	movw	r28, r24
     80a:	a4 de       	rcall	.-696    	; 0x554 <_Z20eepromreadGPRSConfigv>
     80c:	88 81       	ld	r24, Y
     80e:	81 30       	cpi	r24, 0x01	; 1
     810:	91 f4       	brne	.+36     	; 0x836 <_Z18update_gprs_configPc+0x32>
     812:	80 e2       	ldi	r24, 0x20	; 32
     814:	e4 eb       	ldi	r30, 0xB4	; 180
     816:	f2 e1       	ldi	r31, 0x12	; 18
     818:	df 01       	movw	r26, r30
     81a:	1d 92       	st	X+, r1
     81c:	8a 95       	dec	r24
     81e:	e9 f7       	brne	.-6      	; 0x81a <_Z18update_gprs_configPc+0x16>
     820:	99 81       	ldd	r25, Y+1	; 0x01
     822:	99 23       	and	r25, r25
     824:	d9 f0       	breq	.+54     	; 0x85c <_Z18update_gprs_configPc+0x58>
     826:	df 01       	movw	r26, r30
     828:	fe 01       	movw	r30, r28
     82a:	32 96       	adiw	r30, 0x02	; 2
     82c:	9d 93       	st	X+, r25
     82e:	91 91       	ld	r25, Z+
     830:	91 11       	cpse	r25, r1
     832:	fc cf       	rjmp	.-8      	; 0x82c <_Z18update_gprs_configPc+0x28>
     834:	13 c0       	rjmp	.+38     	; 0x85c <_Z18update_gprs_configPc+0x58>
     836:	82 30       	cpi	r24, 0x02	; 2
     838:	89 f4       	brne	.+34     	; 0x85c <_Z18update_gprs_configPc+0x58>
     83a:	80 e2       	ldi	r24, 0x20	; 32
     83c:	e4 e9       	ldi	r30, 0x94	; 148
     83e:	f2 e1       	ldi	r31, 0x12	; 18
     840:	df 01       	movw	r26, r30
     842:	1d 92       	st	X+, r1
     844:	8a 95       	dec	r24
     846:	e9 f7       	brne	.-6      	; 0x842 <_Z18update_gprs_configPc+0x3e>
     848:	99 81       	ldd	r25, Y+1	; 0x01
     84a:	99 23       	and	r25, r25
     84c:	39 f0       	breq	.+14     	; 0x85c <_Z18update_gprs_configPc+0x58>
     84e:	df 01       	movw	r26, r30
     850:	fe 01       	movw	r30, r28
     852:	32 96       	adiw	r30, 0x02	; 2
     854:	9d 93       	st	X+, r25
     856:	91 91       	ld	r25, Z+
     858:	91 11       	cpse	r25, r1
     85a:	fc cf       	rjmp	.-8      	; 0x854 <_Z18update_gprs_configPc+0x50>
     85c:	84 e9       	ldi	r24, 0x94	; 148
     85e:	92 e1       	ldi	r25, 0x12	; 18
     860:	37 de       	rcall	.-914    	; 0x4d0 <_Z21eepromWriteGPRSConfigP18gprs_config_data_t>
     862:	df 91       	pop	r29
     864:	cf 91       	pop	r28
     866:	08 95       	ret

00000868 <_Z16e2p_read_y_totalv>:
     868:	f8 94       	cli
     86a:	44 e0       	ldi	r20, 0x04	; 4
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	60 e7       	ldi	r22, 0x70	; 112
     870:	71 e0       	ldi	r23, 0x01	; 1
     872:	88 ee       	ldi	r24, 0xE8	; 232
     874:	9a e0       	ldi	r25, 0x0A	; 10
     876:	0e 94 df 4a 	call	0x95be	; 0x95be <eeprom_read_block>
     87a:	78 94       	sei
     87c:	81 e0       	ldi	r24, 0x01	; 1
     87e:	08 95       	ret

00000880 <_Z17e2p_write_y_totalv>:
     880:	f8 94       	cli
     882:	44 e0       	ldi	r20, 0x04	; 4
     884:	50 e0       	ldi	r21, 0x00	; 0
     886:	60 e7       	ldi	r22, 0x70	; 112
     888:	71 e0       	ldi	r23, 0x01	; 1
     88a:	88 ee       	ldi	r24, 0xE8	; 232
     88c:	9a e0       	ldi	r25, 0x0A	; 10
     88e:	0e 94 10 4b 	call	0x9620	; 0x9620 <eeprom_write_block>
     892:	78 94       	sei
     894:	08 95       	ret

00000896 <_Z27eeprom_write_online_cfg_cntv>:
	set_online_cfg_ver_cnt(vercount);
	eeprom_write_online_cfg_cnt();
}

void eeprom_write_online_cfg_cnt()
{
     896:	cf 93       	push	r28
     898:	df 93       	push	r29
     89a:	1f 92       	push	r1
     89c:	cd b7       	in	r28, 0x3d	; 61
     89e:	de b7       	in	r29, 0x3e	; 62
	cli();
     8a0:	f8 94       	cli
	int addr = E2P_ONLINE_CFG_CNT;
	e2p_online_cnfg_t temp_ver_cnt;
	temp_ver_cnt.online_cfg_version_count = get_online_cfg_ver_cnt();
     8a2:	0e 94 72 30 	call	0x60e4	; 0x60e4 <_Z22get_online_cfg_ver_cntv>
     8a6:	89 83       	std	Y+1, r24	; 0x01
	eeprom_write_block((const void *)&temp_ver_cnt, (void*)addr, sizeof(e2p_online_cnfg_t));
     8a8:	41 e0       	ldi	r20, 0x01	; 1
     8aa:	50 e0       	ldi	r21, 0x00	; 0
     8ac:	60 e0       	ldi	r22, 0x00	; 0
     8ae:	71 e0       	ldi	r23, 0x01	; 1
     8b0:	ce 01       	movw	r24, r28
     8b2:	01 96       	adiw	r24, 0x01	; 1
     8b4:	0e 94 10 4b 	call	0x9620	; 0x9620 <eeprom_write_block>
	sei();
     8b8:	78 94       	sei
}
     8ba:	0f 90       	pop	r0
     8bc:	df 91       	pop	r29
     8be:	cf 91       	pop	r28
     8c0:	08 95       	ret

000008c2 <_Z17update_rtu_configP12online_cfg_th>:
	sei();
}

#ifdef ONLINE_CONFIG_EN
void update_rtu_config(online_cfg_t *data, unsigned char vercount)
{
     8c2:	cf 93       	push	r28
     8c4:	c6 2f       	mov	r28, r22
	product_info.daily_limit	=	data->daily_limit;
     8c6:	ea e0       	ldi	r30, 0x0A	; 10
     8c8:	fb e0       	ldi	r31, 0x0B	; 11
     8ca:	dc 01       	movw	r26, r24
     8cc:	59 96       	adiw	r26, 0x19	; 25
     8ce:	2d 91       	ld	r18, X+
     8d0:	3c 91       	ld	r19, X
     8d2:	5a 97       	sbiw	r26, 0x1a	; 26
     8d4:	33 83       	std	Z+3, r19	; 0x03
     8d6:	22 83       	std	Z+2, r18	; 0x02
	product_info.daily_limit_dp	=	data->daily_limit_dp;
     8d8:	5b 96       	adiw	r26, 0x1b	; 27
     8da:	8c 91       	ld	r24, X
     8dc:	84 8f       	std	Z+28, r24	; 0x1c


	eepromWriteProductInfo();
     8de:	9e de       	rcall	.-708    	; 0x61c <_Z22eepromWriteProductInfov>
	
	set_online_cfg_ver_cnt(vercount);
     8e0:	8c 2f       	mov	r24, r28
     8e2:	0e 94 75 30 	call	0x60ea	; 0x60ea <_Z22set_online_cfg_ver_cnth>
	eeprom_write_online_cfg_cnt();
     8e6:	d7 df       	rcall	.-82     	; 0x896 <_Z27eeprom_write_online_cfg_cntv>
}
     8e8:	cf 91       	pop	r28
     8ea:	08 95       	ret

000008ec <_Z26eeprom_read_online_cfg_cntv>:
	eeprom_write_block((const void *)&temp_ver_cnt, (void*)addr, sizeof(e2p_online_cnfg_t));
	sei();
}

char eeprom_read_online_cfg_cnt()
{
     8ec:	0f 93       	push	r16
     8ee:	1f 93       	push	r17
     8f0:	cf 93       	push	r28
     8f2:	df 93       	push	r29
     8f4:	1f 92       	push	r1
     8f6:	cd b7       	in	r28, 0x3d	; 61
     8f8:	de b7       	in	r29, 0x3e	; 62
	char read_ok = 1;
	int i=0;
	e2p_online_cnfg_t temp_ver_cnt;
	int addr = E2P_ONLINE_CFG_CNT;
	cli();
     8fa:	f8 94       	cli
	for(i=0 ; i<3 ; i++)
     8fc:	00 e0       	ldi	r16, 0x00	; 0
     8fe:	10 e0       	ldi	r17, 0x00	; 0
	{
		eeprom_read_block(&temp_ver_cnt,(void*)addr,sizeof(e2p_online_cnfg_t));
     900:	41 e0       	ldi	r20, 0x01	; 1
     902:	50 e0       	ldi	r21, 0x00	; 0
     904:	60 e0       	ldi	r22, 0x00	; 0
     906:	71 e0       	ldi	r23, 0x01	; 1
     908:	ce 01       	movw	r24, r28
     90a:	01 96       	adiw	r24, 0x01	; 1
     90c:	0e 94 df 4a 	call	0x95be	; 0x95be <eeprom_read_block>
		if(temp_ver_cnt.online_cfg_version_count <= 100)
     910:	89 81       	ldd	r24, Y+1	; 0x01
     912:	85 36       	cpi	r24, 0x65	; 101
     914:	18 f4       	brcc	.+6      	; 0x91c <_Z26eeprom_read_online_cfg_cntv+0x30>
		{
			set_online_cfg_ver_cnt(temp_ver_cnt.online_cfg_version_count);
     916:	0e 94 75 30 	call	0x60ea	; 0x60ea <_Z22set_online_cfg_ver_cnth>
			break;
     91a:	05 c0       	rjmp	.+10     	; 0x926 <_Z26eeprom_read_online_cfg_cntv+0x3a>
	char read_ok = 1;
	int i=0;
	e2p_online_cnfg_t temp_ver_cnt;
	int addr = E2P_ONLINE_CFG_CNT;
	cli();
	for(i=0 ; i<3 ; i++)
     91c:	0f 5f       	subi	r16, 0xFF	; 255
     91e:	1f 4f       	sbci	r17, 0xFF	; 255
     920:	03 30       	cpi	r16, 0x03	; 3
     922:	11 05       	cpc	r17, r1
     924:	69 f7       	brne	.-38     	; 0x900 <_Z26eeprom_read_online_cfg_cntv+0x14>
		{
			set_online_cfg_ver_cnt(temp_ver_cnt.online_cfg_version_count);
			break;
		}
	}
	sei();
     926:	78 94       	sei
	if(i>=3)
	{
		read_ok = 0;
	}
	return read_ok;
     928:	81 e0       	ldi	r24, 0x01	; 1
     92a:	03 30       	cpi	r16, 0x03	; 3
     92c:	11 05       	cpc	r17, r1
     92e:	0c f0       	brlt	.+2      	; 0x932 <_Z26eeprom_read_online_cfg_cntv+0x46>
     930:	80 e0       	ldi	r24, 0x00	; 0
}
     932:	0f 90       	pop	r0
     934:	df 91       	pop	r29
     936:	cf 91       	pop	r28
     938:	1f 91       	pop	r17
     93a:	0f 91       	pop	r16
     93c:	08 95       	ret

0000093e <_Z14welcome_screenv>:

void config_screen(void)
{
	GLCD_ClearScreen();
	GLCD_GoTo(1,0);
	GLCD_WriteString((char*)CONFIG);
     93e:	cf 93       	push	r28
     940:	0e 94 0c 31 	call	0x6218	; 0x6218 <_Z16GLCD_ClearScreenv>
     944:	60 e0       	ldi	r22, 0x00	; 0
     946:	81 e0       	ldi	r24, 0x01	; 1
     948:	0e 94 e2 30 	call	0x61c4	; 0x61c4 <_Z9GLCD_GoTohh>
     94c:	89 e4       	ldi	r24, 0x49	; 73
     94e:	92 e0       	ldi	r25, 0x02	; 2
     950:	0e 94 5f 31 	call	0x62be	; 0x62be <_Z16GLCD_WriteStringPc>
     954:	62 e0       	ldi	r22, 0x02	; 2
     956:	88 e2       	ldi	r24, 0x28	; 40
     958:	0e 94 e2 30 	call	0x61c4	; 0x61c4 <_Z9GLCD_GoTohh>
     95c:	8f e5       	ldi	r24, 0x5F	; 95
     95e:	92 e0       	ldi	r25, 0x02	; 2
     960:	0e 94 5f 31 	call	0x62be	; 0x62be <_Z16GLCD_WriteStringPc>
     964:	64 e0       	ldi	r22, 0x04	; 4
     966:	82 e3       	ldi	r24, 0x32	; 50
     968:	0e 94 e2 30 	call	0x61c4	; 0x61c4 <_Z9GLCD_GoTohh>
     96c:	8a e6       	ldi	r24, 0x6A	; 106
     96e:	92 e0       	ldi	r25, 0x02	; 2
     970:	0e 94 5f 31 	call	0x62be	; 0x62be <_Z16GLCD_WriteStringPc>
     974:	66 e0       	ldi	r22, 0x06	; 6
     976:	80 e0       	ldi	r24, 0x00	; 0
     978:	0e 94 e2 30 	call	0x61c4	; 0x61c4 <_Z9GLCD_GoTohh>
     97c:	80 e7       	ldi	r24, 0x70	; 112
     97e:	92 e0       	ldi	r25, 0x02	; 2
     980:	0e 94 5f 31 	call	0x62be	; 0x62be <_Z16GLCD_WriteStringPc>
     984:	67 e0       	ldi	r22, 0x07	; 7
     986:	81 e0       	ldi	r24, 0x01	; 1
     988:	0e 94 e2 30 	call	0x61c4	; 0x61c4 <_Z9GLCD_GoTohh>
     98c:	89 e4       	ldi	r24, 0x49	; 73
     98e:	92 e0       	ldi	r25, 0x02	; 2
     990:	0e 94 5f 31 	call	0x62be	; 0x62be <_Z16GLCD_WriteStringPc>
     994:	c1 e0       	ldi	r28, 0x01	; 1
     996:	6c 2f       	mov	r22, r28
     998:	80 e0       	ldi	r24, 0x00	; 0
     99a:	0e 94 e2 30 	call	0x61c4	; 0x61c4 <_Z9GLCD_GoTohh>
     99e:	8c e7       	ldi	r24, 0x7C	; 124
     9a0:	0e 94 1e 31 	call	0x623c	; 0x623c <_Z14GLCD_WriteCharc>
     9a4:	6c 2f       	mov	r22, r28
     9a6:	8a e7       	ldi	r24, 0x7A	; 122
     9a8:	0e 94 e2 30 	call	0x61c4	; 0x61c4 <_Z9GLCD_GoTohh>
     9ac:	8c e7       	ldi	r24, 0x7C	; 124
     9ae:	0e 94 1e 31 	call	0x623c	; 0x623c <_Z14GLCD_WriteCharc>
     9b2:	cf 5f       	subi	r28, 0xFF	; 255
     9b4:	c7 30       	cpi	r28, 0x07	; 7
     9b6:	79 f7       	brne	.-34     	; 0x996 <_Z14welcome_screenv+0x58>
     9b8:	cf 91       	pop	r28
     9ba:	08 95       	ret

000009bc <_Z11data_screenv>:
	
}
void data_screen(void)
{
     9bc:	4f 92       	push	r4
     9be:	5f 92       	push	r5
     9c0:	6f 92       	push	r6
     9c2:	7f 92       	push	r7
     9c4:	af 92       	push	r10
     9c6:	bf 92       	push	r11
     9c8:	cf 92       	push	r12
     9ca:	df 92       	push	r13
     9cc:	ef 92       	push	r14
     9ce:	ff 92       	push	r15
     9d0:	0f 93       	push	r16
     9d2:	1f 93       	push	r17
     9d4:	cf 93       	push	r28
     9d6:	df 93       	push	r29
     9d8:	cd b7       	in	r28, 0x3d	; 61
     9da:	de b7       	in	r29, 0x3e	; 62
     9dc:	6d 97       	sbiw	r28, 0x1d	; 29
     9de:	0f b6       	in	r0, 0x3f	; 63
     9e0:	f8 94       	cli
     9e2:	de bf       	out	0x3e, r29	; 62
     9e4:	0f be       	out	0x3f, r0	; 63
     9e6:	cd bf       	out	0x3d, r28	; 61
	
	char tmpstr[25];
	static char flg = 0;
	memset(tmpstr,' ',sizeof(tmpstr));
     9e8:	49 e1       	ldi	r20, 0x19	; 25
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e2       	ldi	r22, 0x20	; 32
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	ce 01       	movw	r24, r28
     9f2:	01 96       	adiw	r24, 0x01	; 1
     9f4:	0e 94 af 47 	call	0x8f5e	; 0x8f5e <memset>
	
	unsigned int comp_id = product_info.industry_id;
     9f8:	ea e0       	ldi	r30, 0x0A	; 10
     9fa:	fb e0       	ldi	r31, 0x0B	; 11
     9fc:	b0 80       	ld	r11, Z
     9fe:	a1 80       	ldd	r10, Z+1	; 0x01
	char status_icon = 'X';
	char supply_state = 'M';
	
	if(ram_data.status & (1 << MAIN_CUTOFF))
     a00:	80 91 ad 13 	lds	r24, 0x13AD	; 0x8013ad <ram_data+0x10>
     a04:	81 ff       	sbrs	r24, 1
     a06:	02 c0       	rjmp	.+4      	; 0xa0c <_Z11data_screenv+0x50>
	{
		supply_state = 'B';
     a08:	12 e4       	ldi	r17, 0x42	; 66
     a0a:	01 c0       	rjmp	.+2      	; 0xa0e <_Z11data_screenv+0x52>
	static char flg = 0;
	memset(tmpstr,' ',sizeof(tmpstr));
	
	unsigned int comp_id = product_info.industry_id;
	char status_icon = 'X';
	char supply_state = 'M';
     a0c:	1d e4       	ldi	r17, 0x4D	; 77
	
	if(ram_data.status & (1 << MAIN_CUTOFF))
	{
		supply_state = 'B';
	}
	if (getGPRSConnSts() == AVBL)
     a0e:	0e 94 49 20 	call	0x4092	; 0x4092 <_Z14getGPRSConnStsv>
     a12:	81 30       	cpi	r24, 0x01	; 1
     a14:	89 f4       	brne	.+34     	; 0xa38 <_Z11data_screenv+0x7c>
	{
		if (check_unsent_log())
     a16:	0e 94 fc 32 	call	0x65f8	; 0x65f8 <_Z16check_unsent_logv>
     a1a:	88 23       	and	r24, r24
     a1c:	79 f0       	breq	.+30     	; 0xa3c <_Z11data_screenv+0x80>
		{
			if (flg)
     a1e:	80 91 f6 0a 	lds	r24, 0x0AF6	; 0x800af6 <_ZZ11data_screenvE3flg>
     a22:	88 23       	and	r24, r24
     a24:	21 f0       	breq	.+8      	; 0xa2e <_Z11data_screenv+0x72>
			{
				status_icon = ' ';
				flg = 0;
     a26:	10 92 f6 0a 	sts	0x0AF6, r1	; 0x800af6 <_ZZ11data_screenvE3flg>
	{
		if (check_unsent_log())
		{
			if (flg)
			{
				status_icon = ' ';
     a2a:	00 e2       	ldi	r16, 0x20	; 32
     a2c:	08 c0       	rjmp	.+16     	; 0xa3e <_Z11data_screenv+0x82>
				flg = 0;
			}
			else
			{
				status_icon = '^';
				flg = 1;
     a2e:	81 e0       	ldi	r24, 0x01	; 1
     a30:	80 93 f6 0a 	sts	0x0AF6, r24	; 0x800af6 <_ZZ11data_screenvE3flg>
				status_icon = ' ';
				flg = 0;
			}
			else
			{
				status_icon = '^';
     a34:	0e e5       	ldi	r16, 0x5E	; 94
     a36:	03 c0       	rjmp	.+6      	; 0xa3e <_Z11data_screenv+0x82>
	{
		
	}*/
	else
	{
		status_icon = 'X';
     a38:	08 e5       	ldi	r16, 0x58	; 88
     a3a:	01 c0       	rjmp	.+2      	; 0xa3e <_Z11data_screenv+0x82>
				flg = 1;
			}
		}
		else
		{
			status_icon = 'G';
     a3c:	07 e4       	ldi	r16, 0x47	; 71
	}*/
	else
	{
		status_icon = 'X';
	}
	GLCD_GoTo(0,0);
     a3e:	60 e0       	ldi	r22, 0x00	; 0
     a40:	80 e0       	ldi	r24, 0x00	; 0
     a42:	0e 94 e2 30 	call	0x61c4	; 0x61c4 <_Z9GLCD_GoTohh>
	//sprintf(tmpstr,"%02d/%02d/%02d %02d:%02d:%02d    ",ram_data.time.dd,ram_data.time.mm,ram_data.time.yr,ram_data.time.hr,ram_data.time.min,ram_data.time.sec);
	sprintf(tmpstr,"%02d/%02d/%02d %02d:%02d:%02d %c %c",ram_data.time.dd,ram_data.time.mm,ram_data.time.yr,ram_data.time.hr,ram_data.time.min,ram_data.time.sec,status_icon, supply_state);		//03-05-2021 SK: this is new screen in which gprs and main battery state is shown in first line
     a46:	1f 92       	push	r1
     a48:	1f 93       	push	r17
     a4a:	1f 92       	push	r1
     a4c:	0f 93       	push	r16
     a4e:	0f 2e       	mov	r0, r31
     a50:	fd e9       	ldi	r31, 0x9D	; 157
     a52:	ef 2e       	mov	r14, r31
     a54:	f3 e1       	ldi	r31, 0x13	; 19
     a56:	ff 2e       	mov	r15, r31
     a58:	f0 2d       	mov	r31, r0
     a5a:	f7 01       	movw	r30, r14
     a5c:	87 89       	ldd	r24, Z+23	; 0x17
     a5e:	1f 92       	push	r1
     a60:	8f 93       	push	r24
     a62:	86 89       	ldd	r24, Z+22	; 0x16
     a64:	1f 92       	push	r1
     a66:	8f 93       	push	r24
     a68:	85 89       	ldd	r24, Z+21	; 0x15
     a6a:	1f 92       	push	r1
     a6c:	8f 93       	push	r24
     a6e:	82 89       	ldd	r24, Z+18	; 0x12
     a70:	1f 92       	push	r1
     a72:	8f 93       	push	r24
     a74:	83 89       	ldd	r24, Z+19	; 0x13
     a76:	1f 92       	push	r1
     a78:	8f 93       	push	r24
     a7a:	84 89       	ldd	r24, Z+20	; 0x14
     a7c:	1f 92       	push	r1
     a7e:	8f 93       	push	r24
     a80:	84 e9       	ldi	r24, 0x94	; 148
     a82:	92 e0       	ldi	r25, 0x02	; 2
     a84:	9f 93       	push	r25
     a86:	8f 93       	push	r24
     a88:	8e 01       	movw	r16, r28
     a8a:	0f 5f       	subi	r16, 0xFF	; 255
     a8c:	1f 4f       	sbci	r17, 0xFF	; 255
     a8e:	1f 93       	push	r17
     a90:	0f 93       	push	r16
     a92:	0e 94 f4 47 	call	0x8fe8	; 0x8fe8 <sprintf>
	GLCD_WriteString(tmpstr);
     a96:	c8 01       	movw	r24, r16
     a98:	0e 94 5f 31 	call	0x62be	; 0x62be <_Z16GLCD_WriteStringPc>
	memset(&tmpstr,' ',sizeof(tmpstr));
     a9c:	49 e1       	ldi	r20, 0x19	; 25
     a9e:	50 e0       	ldi	r21, 0x00	; 0
     aa0:	60 e2       	ldi	r22, 0x20	; 32
     aa2:	70 e0       	ldi	r23, 0x00	; 0
     aa4:	c8 01       	movw	r24, r16
     aa6:	0e 94 af 47 	call	0x8f5e	; 0x8f5e <memset>
	
	GLCD_GoTo(0,1);
     aaa:	61 e0       	ldi	r22, 0x01	; 1
     aac:	80 e0       	ldi	r24, 0x00	; 0
     aae:	0e 94 e2 30 	call	0x61c4	; 0x61c4 <_Z9GLCD_GoTohh>
	GLCD_WriteString((char*)PARTION_LINE);
     ab2:	88 eb       	ldi	r24, 0xB8	; 184
     ab4:	92 e0       	ldi	r25, 0x02	; 2
     ab6:	0e 94 5f 31 	call	0x62be	; 0x62be <_Z16GLCD_WriteStringPc>
	
	GLCD_GoTo(0,2);
     aba:	62 e0       	ldi	r22, 0x02	; 2
     abc:	80 e0       	ldi	r24, 0x00	; 0
     abe:	0e 94 e2 30 	call	0x61c4	; 0x61c4 <_Z9GLCD_GoTohh>
	//sprintf(tmpstr,"%s %7u.00 %s",LIMIT,product_info.daily_limit,KL);
	sprintf(tmpstr,"%s %7u.%02u %s",LIMIT,product_info.daily_limit,product_info.daily_limit_dp%100,KL);
     ac2:	0f 2e       	mov	r0, r31
     ac4:	fe ec       	ldi	r31, 0xCE	; 206
     ac6:	cf 2e       	mov	r12, r31
     ac8:	f2 e0       	ldi	r31, 0x02	; 2
     aca:	df 2e       	mov	r13, r31
     acc:	f0 2d       	mov	r31, r0
     ace:	df 92       	push	r13
     ad0:	cf 92       	push	r12
     ad2:	ea e0       	ldi	r30, 0x0A	; 10
     ad4:	fb e0       	ldi	r31, 0x0B	; 11
     ad6:	94 8d       	ldd	r25, Z+28	; 0x1c
     ad8:	89 e2       	ldi	r24, 0x29	; 41
     ada:	98 9f       	mul	r25, r24
     adc:	81 2d       	mov	r24, r1
     ade:	11 24       	eor	r1, r1
     ae0:	82 95       	swap	r24
     ae2:	8f 70       	andi	r24, 0x0F	; 15
     ae4:	24 e6       	ldi	r18, 0x64	; 100
     ae6:	82 9f       	mul	r24, r18
     ae8:	90 19       	sub	r25, r0
     aea:	11 24       	eor	r1, r1
     aec:	1f 92       	push	r1
     aee:	9f 93       	push	r25
     af0:	83 81       	ldd	r24, Z+3	; 0x03
     af2:	8f 93       	push	r24
     af4:	82 81       	ldd	r24, Z+2	; 0x02
     af6:	8f 93       	push	r24
     af8:	81 ed       	ldi	r24, 0xD1	; 209
     afa:	92 e0       	ldi	r25, 0x02	; 2
     afc:	9f 93       	push	r25
     afe:	8f 93       	push	r24
     b00:	88 ed       	ldi	r24, 0xD8	; 216
     b02:	92 e0       	ldi	r25, 0x02	; 2
     b04:	9f 93       	push	r25
     b06:	8f 93       	push	r24
     b08:	1f 93       	push	r17
     b0a:	0f 93       	push	r16
     b0c:	0e 94 f4 47 	call	0x8fe8	; 0x8fe8 <sprintf>
	GLCD_WriteString(tmpstr);
     b10:	0f b6       	in	r0, 0x3f	; 63
     b12:	f8 94       	cli
     b14:	de bf       	out	0x3e, r29	; 62
     b16:	0f be       	out	0x3f, r0	; 63
     b18:	cd bf       	out	0x3d, r28	; 61
     b1a:	c8 01       	movw	r24, r16
     b1c:	0e 94 5f 31 	call	0x62be	; 0x62be <_Z16GLCD_WriteStringPc>
	memset(&tmpstr,' ',sizeof(tmpstr));
     b20:	49 e1       	ldi	r20, 0x19	; 25
     b22:	50 e0       	ldi	r21, 0x00	; 0
     b24:	60 e2       	ldi	r22, 0x20	; 32
     b26:	70 e0       	ldi	r23, 0x00	; 0
     b28:	c8 01       	movw	r24, r16
     b2a:	0e 94 af 47 	call	0x8f5e	; 0x8f5e <memset>
	
	GLCD_GoTo(0,3);
     b2e:	63 e0       	ldi	r22, 0x03	; 3
     b30:	80 e0       	ldi	r24, 0x00	; 0
     b32:	0e 94 e2 30 	call	0x61c4	; 0x61c4 <_Z9GLCD_GoTohh>
	sprintf(tmpstr,"%s %7ld.%02ld %s",TODAY_TOTAL,ram_data.todays_total/1000,(ram_data.todays_total%1000)/10,KL);
     b36:	f7 01       	movw	r30, r14
     b38:	64 81       	ldd	r22, Z+4	; 0x04
     b3a:	75 81       	ldd	r23, Z+5	; 0x05
     b3c:	86 81       	ldd	r24, Z+6	; 0x06
     b3e:	97 81       	ldd	r25, Z+7	; 0x07
     b40:	df 92       	push	r13
     b42:	cf 92       	push	r12
     b44:	28 ee       	ldi	r18, 0xE8	; 232
     b46:	33 e0       	ldi	r19, 0x03	; 3
     b48:	40 e0       	ldi	r20, 0x00	; 0
     b4a:	50 e0       	ldi	r21, 0x00	; 0
     b4c:	0e 94 d8 46 	call	0x8db0	; 0x8db0 <__udivmodsi4>
     b50:	f2 2e       	mov	r15, r18
     b52:	e3 2e       	mov	r14, r19
     b54:	d4 2e       	mov	r13, r20
     b56:	c5 2e       	mov	r12, r21
     b58:	2a e0       	ldi	r18, 0x0A	; 10
     b5a:	30 e0       	ldi	r19, 0x00	; 0
     b5c:	40 e0       	ldi	r20, 0x00	; 0
     b5e:	50 e0       	ldi	r21, 0x00	; 0
     b60:	0e 94 d8 46 	call	0x8db0	; 0x8db0 <__udivmodsi4>
     b64:	5f 93       	push	r21
     b66:	4f 93       	push	r20
     b68:	3f 93       	push	r19
     b6a:	2f 93       	push	r18
     b6c:	cf 92       	push	r12
     b6e:	df 92       	push	r13
     b70:	ef 92       	push	r14
     b72:	ff 92       	push	r15
     b74:	87 ee       	ldi	r24, 0xE7	; 231
     b76:	92 e0       	ldi	r25, 0x02	; 2
     b78:	9f 93       	push	r25
     b7a:	8f 93       	push	r24
     b7c:	8e ee       	ldi	r24, 0xEE	; 238
     b7e:	92 e0       	ldi	r25, 0x02	; 2
     b80:	9f 93       	push	r25
     b82:	8f 93       	push	r24
     b84:	1f 93       	push	r17
     b86:	0f 93       	push	r16
     b88:	0e 94 f4 47 	call	0x8fe8	; 0x8fe8 <sprintf>
	GLCD_WriteString(tmpstr);
     b8c:	c8 01       	movw	r24, r16
     b8e:	0e 94 5f 31 	call	0x62be	; 0x62be <_Z16GLCD_WriteStringPc>
	memset(&tmpstr,' ',sizeof(tmpstr));
     b92:	49 e1       	ldi	r20, 0x19	; 25
     b94:	50 e0       	ldi	r21, 0x00	; 0
     b96:	60 e2       	ldi	r22, 0x20	; 32
     b98:	70 e0       	ldi	r23, 0x00	; 0
     b9a:	c8 01       	movw	r24, r16
     b9c:	0e 94 af 47 	call	0x8f5e	; 0x8f5e <memset>
	
	GLCD_GoTo(0,4);
     ba0:	64 e0       	ldi	r22, 0x04	; 4
     ba2:	80 e0       	ldi	r24, 0x00	; 0
     ba4:	0e 94 e2 30 	call	0x61c4	; 0x61c4 <_Z9GLCD_GoTohh>
#if 0
	sprintf(tmpstr,"%s %7ld.%02ld %s",MONTHLY_TOTAL,ram_data.months_total/1000,(ram_data.months_total%1000)/10,KL);
#endif
	if(yest_total==0xffffffff)
     ba8:	60 91 1f 13 	lds	r22, 0x131F	; 0x80131f <yest_total>
     bac:	70 91 20 13 	lds	r23, 0x1320	; 0x801320 <yest_total+0x1>
     bb0:	80 91 21 13 	lds	r24, 0x1321	; 0x801321 <yest_total+0x2>
     bb4:	90 91 22 13 	lds	r25, 0x1322	; 0x801322 <yest_total+0x3>
     bb8:	0f b6       	in	r0, 0x3f	; 63
     bba:	f8 94       	cli
     bbc:	de bf       	out	0x3e, r29	; 62
     bbe:	0f be       	out	0x3f, r0	; 63
     bc0:	cd bf       	out	0x3d, r28	; 61
     bc2:	6f 3f       	cpi	r22, 0xFF	; 255
     bc4:	3f ef       	ldi	r19, 0xFF	; 255
     bc6:	73 07       	cpc	r23, r19
     bc8:	83 07       	cpc	r24, r19
     bca:	93 07       	cpc	r25, r19
     bcc:	d1 f4       	brne	.+52     	; 0xc02 <_Z11data_screenv+0x246>
		sprintf(tmpstr,"%s %s %s",Y_TOTAL,NA,KL);
     bce:	8e ec       	ldi	r24, 0xCE	; 206
     bd0:	92 e0       	ldi	r25, 0x02	; 2
     bd2:	9f 93       	push	r25
     bd4:	8f 93       	push	r24
     bd6:	8f ef       	ldi	r24, 0xFF	; 255
     bd8:	92 e0       	ldi	r25, 0x02	; 2
     bda:	9f 93       	push	r25
     bdc:	8f 93       	push	r24
     bde:	8a e0       	ldi	r24, 0x0A	; 10
     be0:	93 e0       	ldi	r25, 0x03	; 3
     be2:	9f 93       	push	r25
     be4:	8f 93       	push	r24
     be6:	81 e1       	ldi	r24, 0x11	; 17
     be8:	93 e0       	ldi	r25, 0x03	; 3
     bea:	9f 93       	push	r25
     bec:	8f 93       	push	r24
     bee:	1f 93       	push	r17
     bf0:	0f 93       	push	r16
     bf2:	0e 94 f4 47 	call	0x8fe8	; 0x8fe8 <sprintf>
     bf6:	0f b6       	in	r0, 0x3f	; 63
     bf8:	f8 94       	cli
     bfa:	de bf       	out	0x3e, r29	; 62
     bfc:	0f be       	out	0x3f, r0	; 63
     bfe:	cd bf       	out	0x3d, r28	; 61
     c00:	2f c0       	rjmp	.+94     	; 0xc60 <_Z11data_screenv+0x2a4>
	else
		sprintf(tmpstr,"%s %7ld.%02ld %s",Y_TOTAL,yest_total/1000,(yest_total%1000)/10,KL);
     c02:	2e ec       	ldi	r18, 0xCE	; 206
     c04:	32 e0       	ldi	r19, 0x02	; 2
     c06:	3f 93       	push	r19
     c08:	2f 93       	push	r18
     c0a:	28 ee       	ldi	r18, 0xE8	; 232
     c0c:	33 e0       	ldi	r19, 0x03	; 3
     c0e:	40 e0       	ldi	r20, 0x00	; 0
     c10:	50 e0       	ldi	r21, 0x00	; 0
     c12:	0e 94 d8 46 	call	0x8db0	; 0x8db0 <__udivmodsi4>
     c16:	12 2f       	mov	r17, r18
     c18:	03 2f       	mov	r16, r19
     c1a:	f4 2e       	mov	r15, r20
     c1c:	e5 2e       	mov	r14, r21
     c1e:	2a e0       	ldi	r18, 0x0A	; 10
     c20:	30 e0       	ldi	r19, 0x00	; 0
     c22:	40 e0       	ldi	r20, 0x00	; 0
     c24:	50 e0       	ldi	r21, 0x00	; 0
     c26:	0e 94 d8 46 	call	0x8db0	; 0x8db0 <__udivmodsi4>
     c2a:	5f 93       	push	r21
     c2c:	4f 93       	push	r20
     c2e:	3f 93       	push	r19
     c30:	2f 93       	push	r18
     c32:	ef 92       	push	r14
     c34:	ff 92       	push	r15
     c36:	0f 93       	push	r16
     c38:	1f 93       	push	r17
     c3a:	8a e0       	ldi	r24, 0x0A	; 10
     c3c:	93 e0       	ldi	r25, 0x03	; 3
     c3e:	9f 93       	push	r25
     c40:	8f 93       	push	r24
     c42:	8e ee       	ldi	r24, 0xEE	; 238
     c44:	92 e0       	ldi	r25, 0x02	; 2
     c46:	9f 93       	push	r25
     c48:	8f 93       	push	r24
     c4a:	ce 01       	movw	r24, r28
     c4c:	01 96       	adiw	r24, 0x01	; 1
     c4e:	9f 93       	push	r25
     c50:	8f 93       	push	r24
     c52:	0e 94 f4 47 	call	0x8fe8	; 0x8fe8 <sprintf>
     c56:	0f b6       	in	r0, 0x3f	; 63
     c58:	f8 94       	cli
     c5a:	de bf       	out	0x3e, r29	; 62
     c5c:	0f be       	out	0x3f, r0	; 63
     c5e:	cd bf       	out	0x3d, r28	; 61
	
	GLCD_WriteString(tmpstr);
     c60:	8e 01       	movw	r16, r28
     c62:	0f 5f       	subi	r16, 0xFF	; 255
     c64:	1f 4f       	sbci	r17, 0xFF	; 255
     c66:	c8 01       	movw	r24, r16
     c68:	0e 94 5f 31 	call	0x62be	; 0x62be <_Z16GLCD_WriteStringPc>
	memset(&tmpstr,' ',sizeof(tmpstr));
     c6c:	49 e1       	ldi	r20, 0x19	; 25
     c6e:	50 e0       	ldi	r21, 0x00	; 0
     c70:	60 e2       	ldi	r22, 0x20	; 32
     c72:	70 e0       	ldi	r23, 0x00	; 0
     c74:	c8 01       	movw	r24, r16
     c76:	0e 94 af 47 	call	0x8f5e	; 0x8f5e <memset>

	GLCD_GoTo(0,5);
     c7a:	65 e0       	ldi	r22, 0x05	; 5
     c7c:	80 e0       	ldi	r24, 0x00	; 0
     c7e:	0e 94 e2 30 	call	0x61c4	; 0x61c4 <_Z9GLCD_GoTohh>
	sprintf(tmpstr,"%s %7ld.%02ld %s",COM_TOTAL,(ram_data.cuml_reading/1000)%10000000,(ram_data.cuml_reading%1000)/10,KL);
     c82:	0f 2e       	mov	r0, r31
     c84:	fd e9       	ldi	r31, 0x9D	; 157
     c86:	cf 2e       	mov	r12, r31
     c88:	f3 e1       	ldi	r31, 0x13	; 19
     c8a:	df 2e       	mov	r13, r31
     c8c:	f0 2d       	mov	r31, r0
     c8e:	f6 01       	movw	r30, r12
     c90:	64 85       	ldd	r22, Z+12	; 0x0c
     c92:	75 85       	ldd	r23, Z+13	; 0x0d
     c94:	86 85       	ldd	r24, Z+14	; 0x0e
     c96:	97 85       	ldd	r25, Z+15	; 0x0f
     c98:	2e ec       	ldi	r18, 0xCE	; 206
     c9a:	32 e0       	ldi	r19, 0x02	; 2
     c9c:	3f 93       	push	r19
     c9e:	2f 93       	push	r18
     ca0:	0f 2e       	mov	r0, r31
     ca2:	f8 ee       	ldi	r31, 0xE8	; 232
     ca4:	4f 2e       	mov	r4, r31
     ca6:	f3 e0       	ldi	r31, 0x03	; 3
     ca8:	5f 2e       	mov	r5, r31
     caa:	61 2c       	mov	r6, r1
     cac:	71 2c       	mov	r7, r1
     cae:	f0 2d       	mov	r31, r0
     cb0:	a3 01       	movw	r20, r6
     cb2:	92 01       	movw	r18, r4
     cb4:	0e 94 d8 46 	call	0x8db0	; 0x8db0 <__udivmodsi4>
     cb8:	2a 8f       	std	Y+26, r18	; 0x1a
     cba:	3b 8f       	std	Y+27, r19	; 0x1b
     cbc:	4c 8f       	std	Y+28, r20	; 0x1c
     cbe:	5d 8f       	std	Y+29, r21	; 0x1d
     cc0:	2a e0       	ldi	r18, 0x0A	; 10
     cc2:	30 e0       	ldi	r19, 0x00	; 0
     cc4:	40 e0       	ldi	r20, 0x00	; 0
     cc6:	50 e0       	ldi	r21, 0x00	; 0
     cc8:	0e 94 d8 46 	call	0x8db0	; 0x8db0 <__udivmodsi4>
     ccc:	5f 93       	push	r21
     cce:	4f 93       	push	r20
     cd0:	3f 93       	push	r19
     cd2:	2f 93       	push	r18
     cd4:	6a 8d       	ldd	r22, Y+26	; 0x1a
     cd6:	7b 8d       	ldd	r23, Y+27	; 0x1b
     cd8:	8c 8d       	ldd	r24, Y+28	; 0x1c
     cda:	9d 8d       	ldd	r25, Y+29	; 0x1d
     cdc:	20 e8       	ldi	r18, 0x80	; 128
     cde:	36 e9       	ldi	r19, 0x96	; 150
     ce0:	48 e9       	ldi	r20, 0x98	; 152
     ce2:	50 e0       	ldi	r21, 0x00	; 0
     ce4:	0e 94 d8 46 	call	0x8db0	; 0x8db0 <__udivmodsi4>
     ce8:	9f 93       	push	r25
     cea:	8f 93       	push	r24
     cec:	7f 93       	push	r23
     cee:	6f 93       	push	r22
     cf0:	8a e1       	ldi	r24, 0x1A	; 26
     cf2:	93 e0       	ldi	r25, 0x03	; 3
     cf4:	9f 93       	push	r25
     cf6:	8f 93       	push	r24
     cf8:	8e ee       	ldi	r24, 0xEE	; 238
     cfa:	92 e0       	ldi	r25, 0x02	; 2
     cfc:	9f 93       	push	r25
     cfe:	8f 93       	push	r24
     d00:	1f 93       	push	r17
     d02:	0f 93       	push	r16
     d04:	0e 94 f4 47 	call	0x8fe8	; 0x8fe8 <sprintf>
	GLCD_WriteString(tmpstr);
     d08:	c8 01       	movw	r24, r16
     d0a:	0e 94 5f 31 	call	0x62be	; 0x62be <_Z16GLCD_WriteStringPc>
	
	memset(&tmpstr,' ',sizeof(tmpstr));
     d0e:	49 e1       	ldi	r20, 0x19	; 25
     d10:	50 e0       	ldi	r21, 0x00	; 0
     d12:	60 e2       	ldi	r22, 0x20	; 32
     d14:	70 e0       	ldi	r23, 0x00	; 0
     d16:	c8 01       	movw	r24, r16
     d18:	0e 94 af 47 	call	0x8f5e	; 0x8f5e <memset>
	
	GLCD_GoTo(0,6);
     d1c:	66 e0       	ldi	r22, 0x06	; 6
     d1e:	80 e0       	ldi	r24, 0x00	; 0
     d20:	0e 94 e2 30 	call	0x61c4	; 0x61c4 <_Z9GLCD_GoTohh>
#ifdef DEBUG_HEX_FILE_STORE
	char buff[20];
	sprintf(buff,"%u,%u",dyn_mem_alloc_cnt,dyn_mem_dealloc_cnt);
	GLCD_WriteString(buff);
#else
	GLCD_WriteString((char*)PARTION_LINE);
     d24:	88 eb       	ldi	r24, 0xB8	; 184
     d26:	92 e0       	ldi	r25, 0x02	; 2
     d28:	0e 94 5f 31 	call	0x62be	; 0x62be <_Z16GLCD_WriteStringPc>
#endif
	GLCD_GoTo(0,7);
     d2c:	67 e0       	ldi	r22, 0x07	; 7
     d2e:	80 e0       	ldi	r24, 0x00	; 0
     d30:	0e 94 e2 30 	call	0x61c4	; 0x61c4 <_Z9GLCD_GoTohh>
	//sprintf(tmpstr,"%c %c ", status_icon, supply_state);
	sprintf(tmpstr,"%s ",FIRMWARE_VER);			//03-05-21 SK: firmware is shown on home screen
     d34:	8a e6       	ldi	r24, 0x6A	; 106
     d36:	92 e0       	ldi	r25, 0x02	; 2
     d38:	9f 93       	push	r25
     d3a:	8f 93       	push	r24
     d3c:	81 e2       	ldi	r24, 0x21	; 33
     d3e:	93 e0       	ldi	r25, 0x03	; 3
     d40:	9f 93       	push	r25
     d42:	8f 93       	push	r24
     d44:	1f 93       	push	r17
     d46:	0f 93       	push	r16
     d48:	0e 94 f4 47 	call	0x8fe8	; 0x8fe8 <sprintf>
	GLCD_WriteString(tmpstr);
     d4c:	c8 01       	movw	r24, r16
     d4e:	0e 94 5f 31 	call	0x62be	; 0x62be <_Z16GLCD_WriteStringPc>
	memset(tmpstr,0,sizeof(tmpstr));
     d52:	0f 2e       	mov	r0, r31
     d54:	f9 e1       	ldi	r31, 0x19	; 25
     d56:	ff 2e       	mov	r15, r31
     d58:	f0 2d       	mov	r31, r0
     d5a:	f8 01       	movw	r30, r16
     d5c:	2f 2d       	mov	r18, r15
     d5e:	11 92       	st	Z+, r1
     d60:	2a 95       	dec	r18
     d62:	e9 f7       	brne	.-6      	; 0xd5e <_Z11data_screenv+0x3a2>
	//sprintf(tmpstr,"%4lu.%01lu KL/Hr", ram_data.inst_reading/1000, (ram_data.inst_reading%1000)/100);
	sprintf(tmpstr,"%3lu.%01lu KL/Hr", ram_data.inst_reading/1000, (ram_data.inst_reading%1000)/100);	//03-05-2021 SK: inst flow display changed to 3+1
     d64:	f6 01       	movw	r30, r12
     d66:	60 81       	ld	r22, Z
     d68:	71 81       	ldd	r23, Z+1	; 0x01
     d6a:	82 81       	ldd	r24, Z+2	; 0x02
     d6c:	93 81       	ldd	r25, Z+3	; 0x03
     d6e:	a3 01       	movw	r20, r6
     d70:	92 01       	movw	r18, r4
     d72:	0e 94 d8 46 	call	0x8db0	; 0x8db0 <__udivmodsi4>
     d76:	e2 2e       	mov	r14, r18
     d78:	d3 2e       	mov	r13, r19
     d7a:	c4 2e       	mov	r12, r20
     d7c:	75 2e       	mov	r7, r21
     d7e:	24 e6       	ldi	r18, 0x64	; 100
     d80:	30 e0       	ldi	r19, 0x00	; 0
     d82:	40 e0       	ldi	r20, 0x00	; 0
     d84:	50 e0       	ldi	r21, 0x00	; 0
     d86:	0e 94 d8 46 	call	0x8db0	; 0x8db0 <__udivmodsi4>
     d8a:	5f 93       	push	r21
     d8c:	4f 93       	push	r20
     d8e:	3f 93       	push	r19
     d90:	2f 93       	push	r18
     d92:	7f 92       	push	r7
     d94:	cf 92       	push	r12
     d96:	df 92       	push	r13
     d98:	ef 92       	push	r14
     d9a:	85 e2       	ldi	r24, 0x25	; 37
     d9c:	93 e0       	ldi	r25, 0x03	; 3
     d9e:	9f 93       	push	r25
     da0:	8f 93       	push	r24
     da2:	1f 93       	push	r17
     da4:	0f 93       	push	r16
     da6:	0e 94 f4 47 	call	0x8fe8	; 0x8fe8 <sprintf>
	GLCD_WriteString_inv(tmpstr);
     daa:	0f b6       	in	r0, 0x3f	; 63
     dac:	f8 94       	cli
     dae:	de bf       	out	0x3e, r29	; 62
     db0:	0f be       	out	0x3f, r0	; 63
     db2:	cd bf       	out	0x3d, r28	; 61
     db4:	c8 01       	movw	r24, r16
     db6:	0e 94 6d 31 	call	0x62da	; 0x62da <_Z20GLCD_WriteString_invPc>
	memset(tmpstr,0,sizeof(tmpstr));
     dba:	f8 01       	movw	r30, r16
     dbc:	11 92       	st	Z+, r1
     dbe:	fa 94       	dec	r15
     dc0:	e9 f7       	brne	.-6      	; 0xdbc <_Z11data_screenv+0x400>
	sprintf(tmpstr,"#%03u", comp_id);
     dc2:	af 92       	push	r10
     dc4:	bf 92       	push	r11
     dc6:	86 e3       	ldi	r24, 0x36	; 54
     dc8:	93 e0       	ldi	r25, 0x03	; 3
     dca:	9f 93       	push	r25
     dcc:	8f 93       	push	r24
     dce:	1f 93       	push	r17
     dd0:	0f 93       	push	r16
     dd2:	0e 94 f4 47 	call	0x8fe8	; 0x8fe8 <sprintf>
	GLCD_WriteString(tmpstr);
     dd6:	c8 01       	movw	r24, r16
     dd8:	0e 94 5f 31 	call	0x62be	; 0x62be <_Z16GLCD_WriteStringPc>
	memset(tmpstr,0,sizeof(tmpstr));
	sprintf(tmpstr,"\n%s %7ld.%02ld %s",COM_TOTAL,(ram_data.cuml_reading/1000)%10000000,(ram_data.cuml_reading%1000)/10,KL);
	UWriteString(tmpstr,UART_PC);
	
#endif
}
     ddc:	0f 90       	pop	r0
     dde:	0f 90       	pop	r0
     de0:	0f 90       	pop	r0
     de2:	0f 90       	pop	r0
     de4:	0f 90       	pop	r0
     de6:	0f 90       	pop	r0
     de8:	6d 96       	adiw	r28, 0x1d	; 29
     dea:	0f b6       	in	r0, 0x3f	; 63
     dec:	f8 94       	cli
     dee:	de bf       	out	0x3e, r29	; 62
     df0:	0f be       	out	0x3f, r0	; 63
     df2:	cd bf       	out	0x3d, r28	; 61
     df4:	df 91       	pop	r29
     df6:	cf 91       	pop	r28
     df8:	1f 91       	pop	r17
     dfa:	0f 91       	pop	r16
     dfc:	ff 90       	pop	r15
     dfe:	ef 90       	pop	r14
     e00:	df 90       	pop	r13
     e02:	cf 90       	pop	r12
     e04:	bf 90       	pop	r11
     e06:	af 90       	pop	r10
     e08:	7f 90       	pop	r7
     e0a:	6f 90       	pop	r6
     e0c:	5f 90       	pop	r5
     e0e:	4f 90       	pop	r4
     e10:	08 95       	ret

00000e12 <_Z21hexFileUpdateRoutinesv>:
	#endif
	//clr_lcd_buff();											// reset the buff of the lcd
	//set_lcd_buff_sts(TRUE);								// requried for printing in lcd

	//set_au_state(AU_FRMWR_UPDATE);						// change the mode of operation
	GLCD_ClearScreen();
     e12:	0e 94 0c 31 	call	0x6218	; 0x6218 <_Z16GLCD_ClearScreenv>
	setRtuState(RTU_FRMWR_UPDATE);
     e16:	84 e0       	ldi	r24, 0x04	; 4
     e18:	0e 94 9b 3a 	call	0x7536	; 0x7536 <_Z11setRtuState11RTU_state_t>
	set_frmwr_update_state(HEX_FILE_UPDATE_CHK);
     e1c:	81 e0       	ldi	r24, 0x01	; 1
     e1e:	0e 94 a9 3d 	call	0x7b52	; 0x7b52 <_Z22set_frmwr_update_state20frmwr_update_state_t>
	set_hex_file_updt_state(HEX_FILE_INIT);
     e22:	80 e0       	ldi	r24, 0x00	; 0
     e24:	0e 94 fc 2f 	call	0x5ff8	; 0x5ff8 <_Z23set_hex_file_updt_state21hex_file_updt_state_t>
	set_flash_file_rqst_type(HEX_NO_RQST);
     e28:	80 e0       	ldi	r24, 0x00	; 0
     e2a:	0c 94 6c 30 	jmp	0x60d8	; 0x60d8 <_Z24set_flash_file_rqst_type26hex_file_updt_gprs_state_t>
     e2e:	08 95       	ret

00000e30 <_Z22manage_hex_file_updatev>:
	#endif
}

void manage_hex_file_update(void)
{
	switch(get_hex_file_updt_state())
     e30:	0e 94 f9 2f 	call	0x5ff2	; 0x5ff2 <_Z23get_hex_file_updt_statev>
     e34:	82 30       	cpi	r24, 0x02	; 2
     e36:	09 f4       	brne	.+2      	; 0xe3a <_Z22manage_hex_file_updatev+0xa>
     e38:	56 c0       	rjmp	.+172    	; 0xee6 <_Z22manage_hex_file_updatev+0xb6>
     e3a:	83 30       	cpi	r24, 0x03	; 3
     e3c:	09 f4       	brne	.+2      	; 0xe40 <_Z22manage_hex_file_updatev+0x10>
     e3e:	7a c0       	rjmp	.+244    	; 0xf34 <_Z22manage_hex_file_updatev+0x104>
     e40:	81 11       	cpse	r24, r1
     e42:	bc c0       	rjmp	.+376    	; 0xfbc <_Z22manage_hex_file_updatev+0x18c>
	{
		case HEX_FILE_INIT:
			GLCD_ClearScreen();
     e44:	0e 94 0c 31 	call	0x6218	; 0x6218 <_Z16GLCD_ClearScreenv>
			GLCD_GoTo(0,1);
     e48:	61 e0       	ldi	r22, 0x01	; 1
     e4a:	80 e0       	ldi	r24, 0x00	; 0
     e4c:	0e 94 e2 30 	call	0x61c4	; 0x61c4 <_Z9GLCD_GoTohh>
			GLCD_WriteString((char*)"CHECKING PENDING");
     e50:	8c e3       	ldi	r24, 0x3C	; 60
     e52:	93 e0       	ldi	r25, 0x03	; 3
     e54:	0e 94 5f 31 	call	0x62be	; 0x62be <_Z16GLCD_WriteStringPc>
			GLCD_GoTo(0,2);
     e58:	62 e0       	ldi	r22, 0x02	; 2
     e5a:	80 e0       	ldi	r24, 0x00	; 0
     e5c:	0e 94 e2 30 	call	0x61c4	; 0x61c4 <_Z9GLCD_GoTohh>
			GLCD_WriteString((char*)"DOWNLOAD");
     e60:	8d e4       	ldi	r24, 0x4D	; 77
     e62:	93 e0       	ldi	r25, 0x03	; 3
     e64:	0e 94 5f 31 	call	0x62be	; 0x62be <_Z16GLCD_WriteStringPc>
			if(check_pending_hex_data())
     e68:	0e 94 ff 2f 	call	0x5ffe	; 0x5ffe <_Z22check_pending_hex_datav>
     e6c:	88 23       	and	r24, r24
     e6e:	e9 f0       	breq	.+58     	; 0xeaa <_Z22manage_hex_file_updatev+0x7a>
				//24-08-2020 SK: This is the case where we have pending file
#ifdef _20x4_LCD
				lcd_clear();
#endif
				//clr_lcd_buff();
				GLCD_ClearScreen();
     e70:	0e 94 0c 31 	call	0x6218	; 0x6218 <_Z16GLCD_ClearScreenv>
				
				//	31-12-2020 SK: add code to print the below lines on graphical lcd according to library
				GLCD_GoTo(0,1);
     e74:	61 e0       	ldi	r22, 0x01	; 1
     e76:	80 e0       	ldi	r24, 0x00	; 0
     e78:	0e 94 e2 30 	call	0x61c4	; 0x61c4 <_Z9GLCD_GoTohh>
				GLCD_WriteString((char*)"1. RESUME       ");
     e7c:	86 e5       	ldi	r24, 0x56	; 86
     e7e:	93 e0       	ldi	r25, 0x03	; 3
     e80:	0e 94 5f 31 	call	0x62be	; 0x62be <_Z16GLCD_WriteStringPc>
				
				GLCD_GoTo(0,2);
     e84:	62 e0       	ldi	r22, 0x02	; 2
     e86:	80 e0       	ldi	r24, 0x00	; 0
     e88:	0e 94 e2 30 	call	0x61c4	; 0x61c4 <_Z9GLCD_GoTohh>
				GLCD_WriteString((char*)"2. RESTART      ");
     e8c:	87 e6       	ldi	r24, 0x67	; 103
     e8e:	93 e0       	ldi	r25, 0x03	; 3
     e90:	0e 94 5f 31 	call	0x62be	; 0x62be <_Z16GLCD_WriteStringPc>
				//copyStrToLcdBuff(hex_file_resume_line, 1);
				//copyStrToLcdBuff(hex_file_restart_line, 2);
				set_hex_file_updt_state(RESUME_PENDING);
     e94:	83 e0       	ldi	r24, 0x03	; 3
     e96:	0e 94 fc 2f 	call	0x5ff8	; 0x5ff8 <_Z23set_hex_file_updt_state21hex_file_updt_state_t>
				if(get_hex_file_updt_mode() == HEX_FILE_UPDT_AUTO)
     e9a:	0e 94 78 30 	call	0x60f0	; 0x60f0 <_Z22get_hex_file_updt_modev>
     e9e:	81 30       	cpi	r24, 0x01	; 1
     ea0:	09 f0       	breq	.+2      	; 0xea4 <_Z22manage_hex_file_updatev+0x74>
     ea2:	8c c0       	rjmp	.+280    	; 0xfbc <_Z22manage_hex_file_updatev+0x18c>
				{
					set_frmwr_choice(1);		//12-04-21 SK: forcefully resume firmware download
     ea4:	0c 94 b2 3d 	jmp	0x7b64	; 0x7b64 <_Z16set_frmwr_choiceh>
     ea8:	08 95       	ret
#ifdef _20x4_LCD
				lcd_clear();
#endif
				//clr_lcd_buff();
				
				GLCD_ClearScreen();
     eaa:	0e 94 0c 31 	call	0x6218	; 0x6218 <_Z16GLCD_ClearScreenv>
				
				//	31-12-2020 SK: add code to print the below lines on graphical lcd according to library
				GLCD_GoTo(0,1);
     eae:	61 e0       	ldi	r22, 0x01	; 1
     eb0:	80 e0       	ldi	r24, 0x00	; 0
     eb2:	0e 94 e2 30 	call	0x61c4	; 0x61c4 <_Z9GLCD_GoTohh>
				GLCD_WriteString((char*)"DOWNLOAD UPDATE?");
     eb6:	88 e7       	ldi	r24, 0x78	; 120
     eb8:	93 e0       	ldi	r25, 0x03	; 3
     eba:	0e 94 5f 31 	call	0x62be	; 0x62be <_Z16GLCD_WriteStringPc>
				
				GLCD_GoTo(0,2);
     ebe:	62 e0       	ldi	r22, 0x02	; 2
     ec0:	80 e0       	ldi	r24, 0x00	; 0
     ec2:	0e 94 e2 30 	call	0x61c4	; 0x61c4 <_Z9GLCD_GoTohh>
				GLCD_WriteString((char*)" ENTER      ESC ");
     ec6:	89 e8       	ldi	r24, 0x89	; 137
     ec8:	93 e0       	ldi	r25, 0x03	; 3
     eca:	0e 94 5f 31 	call	0x62be	; 0x62be <_Z16GLCD_WriteStringPc>
				//copyStrToLcdBuff(cnfrm_dwnload_line1, 1);
				//copyStrToLcdBuff(power_key_lcd_line2, 2);
				set_hex_file_updt_state(CNFRM_DWNLD);
     ece:	82 e0       	ldi	r24, 0x02	; 2
     ed0:	0e 94 fc 2f 	call	0x5ff8	; 0x5ff8 <_Z23set_hex_file_updt_state21hex_file_updt_state_t>
				if(get_hex_file_updt_mode() == HEX_FILE_UPDT_AUTO)
     ed4:	0e 94 78 30 	call	0x60f0	; 0x60f0 <_Z22get_hex_file_updt_modev>
     ed8:	81 30       	cpi	r24, 0x01	; 1
     eda:	09 f0       	breq	.+2      	; 0xede <_Z22manage_hex_file_updatev+0xae>
     edc:	6f c0       	rjmp	.+222    	; 0xfbc <_Z22manage_hex_file_updatev+0x18c>
				{
					#ifdef DEBUG_HEX_FILE_STORE
					UWriteString("set_fw_ch0:",UART_PC);
					#endif	
					set_frmwr_choice(0);		//12-04-21 SK: forcefully check for new update
     ede:	80 e0       	ldi	r24, 0x00	; 0
     ee0:	0c 94 b2 3d 	jmp	0x7b64	; 0x7b64 <_Z16set_frmwr_choiceh>
     ee4:	08 95       	ret
			//set_lcd_buff_sts(TRUE);
		break;
		case CNFRM_DWNLD:
		{
			//download fresh file
			if (get_frmwr_choice() == 0)
     ee6:	0e 94 af 3d 	call	0x7b5e	; 0x7b5e <_Z16get_frmwr_choicev>
     eea:	81 11       	cpse	r24, r1
     eec:	67 c0       	rjmp	.+206    	; 0xfbc <_Z22manage_hex_file_updatev+0x18c>
				#ifdef DEBUG_HEX_FILE_STORE
				UWriteString("cnf_dwn:",UART_PC);
				#endif
				//if(allot_extra_mem())
				{
					flash_hexfile.addr = FL_HEX_FILE_START_ADDR;
     eee:	80 e0       	ldi	r24, 0x00	; 0
     ef0:	90 e0       	ldi	r25, 0x00	; 0
     ef2:	a0 e6       	ldi	r26, 0x60	; 96
     ef4:	b0 e0       	ldi	r27, 0x00	; 0
     ef6:	80 93 fe 12 	sts	0x12FE, r24	; 0x8012fe <flash_hexfile>
     efa:	90 93 ff 12 	sts	0x12FF, r25	; 0x8012ff <flash_hexfile+0x1>
     efe:	a0 93 00 13 	sts	0x1300, r26	; 0x801300 <flash_hexfile+0x2>
     f02:	b0 93 01 13 	sts	0x1301, r27	; 0x801301 <flash_hexfile+0x3>
					set_frmwr_choice(0xFF);
     f06:	8f ef       	ldi	r24, 0xFF	; 255
     f08:	0e 94 b2 3d 	call	0x7b64	; 0x7b64 <_Z16set_frmwr_choiceh>
					set_hex_file_updt_state(CHK_UPDT);
     f0c:	81 e0       	ldi	r24, 0x01	; 1
     f0e:	0e 94 fc 2f 	call	0x5ff8	; 0x5ff8 <_Z23set_hex_file_updt_state21hex_file_updt_state_t>
					set_flash_file_rqst_type(HEX_CHK_FRMWR_UPDT);
     f12:	81 e0       	ldi	r24, 0x01	; 1
     f14:	0e 94 6c 30 	call	0x60d8	; 0x60d8 <_Z24set_flash_file_rqst_type26hex_file_updt_gprs_state_t>
					//flashClrHexFile();	//22-06-21 SK: it should not done here. if new firmware is not available then there is no need to clear the file.
					//clr_lcd_buff();
					
					GLCD_ClearScreen();
     f18:	0e 94 0c 31 	call	0x6218	; 0x6218 <_Z16GLCD_ClearScreenv>
					
					//	31-12-2020 SK: add code to print the below lines on graphical lcd according to library
					GLCD_GoTo(0,1);
     f1c:	61 e0       	ldi	r22, 0x01	; 1
     f1e:	80 e0       	ldi	r24, 0x00	; 0
     f20:	0e 94 e2 30 	call	0x61c4	; 0x61c4 <_Z9GLCD_GoTohh>
					GLCD_WriteString((char*)"    CHECKING    ");
     f24:	8a e9       	ldi	r24, 0x9A	; 154
     f26:	93 e0       	ldi	r25, 0x03	; 3
     f28:	0e 94 5f 31 	call	0x62be	; 0x62be <_Z16GLCD_WriteStringPc>
					//copyStrToLcdBuff(hex_file_init_update_line1, 1);
					set_frmwr_update_state(HEX_FILE_UPDATE_PRG);
     f2c:	82 e0       	ldi	r24, 0x02	; 2
     f2e:	0c 94 a9 3d 	jmp	0x7b52	; 0x7b52 <_Z22set_frmwr_update_state20frmwr_update_state_t>
     f32:	08 95       	ret
			}
		}
		break;
		case RESUME_PENDING:
		{
			if(get_frmwr_choice() == 1)
     f34:	0e 94 af 3d 	call	0x7b5e	; 0x7b5e <_Z16get_frmwr_choicev>
     f38:	81 30       	cpi	r24, 0x01	; 1
     f3a:	c1 f4       	brne	.+48     	; 0xf6c <_Z22manage_hex_file_updatev+0x13c>
				UWriteString("resum:",UART_PC);
				#endif
				//Resume download
				//if(allot_extra_mem())
				{
					set_frmwr_choice(0xFF);
     f3c:	8f ef       	ldi	r24, 0xFF	; 255
     f3e:	0e 94 b2 3d 	call	0x7b64	; 0x7b64 <_Z16set_frmwr_choiceh>
					set_hex_file_updt_state(DOWNLOADING);
     f42:	87 e0       	ldi	r24, 0x07	; 7
     f44:	0e 94 fc 2f 	call	0x5ff8	; 0x5ff8 <_Z23set_hex_file_updt_state21hex_file_updt_state_t>
					set_flash_file_rqst_type(HEX_RQST_NEW_REC);
     f48:	82 e0       	ldi	r24, 0x02	; 2
     f4a:	0e 94 6c 30 	call	0x60d8	; 0x60d8 <_Z24set_flash_file_rqst_type26hex_file_updt_gprs_state_t>
					eepromReadHexFileHdr();	//lets restore the last pending hex file name from eeprom.
     f4e:	1b dc       	rcall	.-1994   	; 0x786 <_Z20eepromReadHexFileHdrv>
					//clr_lcd_buff();
					GLCD_ClearScreen();
     f50:	0e 94 0c 31 	call	0x6218	; 0x6218 <_Z16GLCD_ClearScreenv>
					
					//	31-12-2020 SK: add code to print the below lines on graphical lcd according to library
					GLCD_GoTo(0,1);
     f54:	61 e0       	ldi	r22, 0x01	; 1
     f56:	80 e0       	ldi	r24, 0x00	; 0
     f58:	0e 94 e2 30 	call	0x61c4	; 0x61c4 <_Z9GLCD_GoTohh>
					GLCD_WriteString((char*)"   DOWNLOADING  ");
     f5c:	8b ea       	ldi	r24, 0xAB	; 171
     f5e:	93 e0       	ldi	r25, 0x03	; 3
     f60:	0e 94 5f 31 	call	0x62be	; 0x62be <_Z16GLCD_WriteStringPc>
					//copyStrToLcdBuff(hex_file_update_line2, 1);
					set_frmwr_update_state(HEX_FILE_UPDATE_PRG);
     f64:	82 e0       	ldi	r24, 0x02	; 2
     f66:	0c 94 a9 3d 	jmp	0x7b52	; 0x7b52 <_Z22set_frmwr_update_state20frmwr_update_state_t>
     f6a:	08 95       	ret
				{
					//write code to handle if dynamic memory is not created.
					set_hex_file_updt_state(UPDATE_FAIL);
				}*/
			}
			else if(get_frmwr_choice() == 2)
     f6c:	0e 94 af 3d 	call	0x7b5e	; 0x7b5e <_Z16get_frmwr_choicev>
     f70:	82 30       	cpi	r24, 0x02	; 2
     f72:	21 f5       	brne	.+72     	; 0xfbc <_Z22manage_hex_file_updatev+0x18c>
				UWriteString("rstrt:",UART_PC);
				#endif
				//Restart download
				//if (allot_extra_mem())
				{
					flash_hexfile.addr = FL_HEX_FILE_START_ADDR;
     f74:	80 e0       	ldi	r24, 0x00	; 0
     f76:	90 e0       	ldi	r25, 0x00	; 0
     f78:	a0 e6       	ldi	r26, 0x60	; 96
     f7a:	b0 e0       	ldi	r27, 0x00	; 0
     f7c:	80 93 fe 12 	sts	0x12FE, r24	; 0x8012fe <flash_hexfile>
     f80:	90 93 ff 12 	sts	0x12FF, r25	; 0x8012ff <flash_hexfile+0x1>
     f84:	a0 93 00 13 	sts	0x1300, r26	; 0x801300 <flash_hexfile+0x2>
     f88:	b0 93 01 13 	sts	0x1301, r27	; 0x801301 <flash_hexfile+0x3>
					set_frmwr_choice(0xFF);
     f8c:	8f ef       	ldi	r24, 0xFF	; 255
     f8e:	0e 94 b2 3d 	call	0x7b64	; 0x7b64 <_Z16set_frmwr_choiceh>
					set_hex_file_updt_state(CHK_UPDT);
     f92:	81 e0       	ldi	r24, 0x01	; 1
     f94:	0e 94 fc 2f 	call	0x5ff8	; 0x5ff8 <_Z23set_hex_file_updt_state21hex_file_updt_state_t>
					set_flash_file_rqst_type(HEX_CHK_FRMWR_UPDT);
     f98:	81 e0       	ldi	r24, 0x01	; 1
     f9a:	0e 94 6c 30 	call	0x60d8	; 0x60d8 <_Z24set_flash_file_rqst_type26hex_file_updt_gprs_state_t>
					//flashClrHexFile();	//22-06-21 SK: it should not done here. if new firmware is not available then there is no need to clear the file.
					hex_file_ready(FALSE);
     f9e:	80 e0       	ldi	r24, 0x00	; 0
     fa0:	16 dc       	rcall	.-2004   	; 0x7ce <_Z14hex_file_readyh>
					//clr_lcd_buff();
					GLCD_ClearScreen();
     fa2:	0e 94 0c 31 	call	0x6218	; 0x6218 <_Z16GLCD_ClearScreenv>
					
					//	31-12-2020 SK: add code to print the below lines on graphical lcd according to library
					GLCD_GoTo(0,1);
     fa6:	61 e0       	ldi	r22, 0x01	; 1
     fa8:	80 e0       	ldi	r24, 0x00	; 0
     faa:	0e 94 e2 30 	call	0x61c4	; 0x61c4 <_Z9GLCD_GoTohh>
					GLCD_WriteString((char*)"    CHECKING    ");
     fae:	8a e9       	ldi	r24, 0x9A	; 154
     fb0:	93 e0       	ldi	r25, 0x03	; 3
     fb2:	0e 94 5f 31 	call	0x62be	; 0x62be <_Z16GLCD_WriteStringPc>
					//copyStrToLcdBuff(hex_file_init_update_line1, 1);
					set_frmwr_update_state(HEX_FILE_UPDATE_PRG);
     fb6:	82 e0       	ldi	r24, 0x02	; 2
     fb8:	0c 94 a9 3d 	jmp	0x7b52	; 0x7b52 <_Z22set_frmwr_update_state20frmwr_update_state_t>
     fbc:	08 95       	ret

00000fbe <_Z23flash_hex_file_progressv>:
}
void flash_hex_file_progress(void)
{
	static unsigned int time = 0;
	static unsigned char blink_flag = TRUE;
	switch(get_hex_file_updt_state())
     fbe:	0e 94 f9 2f 	call	0x5ff2	; 0x5ff2 <_Z23get_hex_file_updt_statev>
     fc2:	90 e0       	ldi	r25, 0x00	; 0
     fc4:	fc 01       	movw	r30, r24
     fc6:	31 97       	sbiw	r30, 0x01	; 1
     fc8:	eb 30       	cpi	r30, 0x0B	; 11
     fca:	f1 05       	cpc	r31, r1
     fcc:	08 f0       	brcs	.+2      	; 0xfd0 <_Z23flash_hex_file_progressv+0x12>
     fce:	da c0       	rjmp	.+436    	; 0x1184 <_Z23flash_hex_file_progressv+0x1c6>
     fd0:	88 27       	eor	r24, r24
     fd2:	ee 58       	subi	r30, 0x8E	; 142
     fd4:	ff 4f       	sbci	r31, 0xFF	; 255
     fd6:	8f 4f       	sbci	r24, 0xFF	; 255
     fd8:	0c 94 fa 46 	jmp	0x8df4	; 0x8df4 <__tablejump2__>
	{
		case CHK_UPDT:
		{
			if(++time >= BLINK_TIME)
     fdc:	80 91 f4 0a 	lds	r24, 0x0AF4	; 0x800af4 <_ZZ23flash_hex_file_progressvE4time>
     fe0:	90 91 f5 0a 	lds	r25, 0x0AF5	; 0x800af5 <_ZZ23flash_hex_file_progressvE4time+0x1>
     fe4:	01 96       	adiw	r24, 0x01	; 1
     fe6:	85 30       	cpi	r24, 0x05	; 5
     fe8:	91 05       	cpc	r25, r1
     fea:	28 f4       	brcc	.+10     	; 0xff6 <_Z23flash_hex_file_progressv+0x38>
     fec:	90 93 f5 0a 	sts	0x0AF5, r25	; 0x800af5 <_ZZ23flash_hex_file_progressvE4time+0x1>
     ff0:	80 93 f4 0a 	sts	0x0AF4, r24	; 0x800af4 <_ZZ23flash_hex_file_progressvE4time>
     ff4:	08 95       	ret
			{
				time = 0;
     ff6:	10 92 f5 0a 	sts	0x0AF5, r1	; 0x800af5 <_ZZ23flash_hex_file_progressvE4time+0x1>
     ffa:	10 92 f4 0a 	sts	0x0AF4, r1	; 0x800af4 <_ZZ23flash_hex_file_progressvE4time>
				
				//	31-12-2020 SK: add code to print the below lines on graphical lcd according to library
				
				if(blink_flag)
     ffe:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
    1002:	88 23       	and	r24, r24
    1004:	59 f0       	breq	.+22     	; 0x101c <_Z23flash_hex_file_progressv+0x5e>
				{
					blink_flag = FALSE;
    1006:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <__data_start>
					GLCD_GoTo(0,1);
    100a:	61 e0       	ldi	r22, 0x01	; 1
    100c:	80 e0       	ldi	r24, 0x00	; 0
    100e:	0e 94 e2 30 	call	0x61c4	; 0x61c4 <_Z9GLCD_GoTohh>
					GLCD_WriteString((char*)"    CHECKING    ");
    1012:	8a e9       	ldi	r24, 0x9A	; 154
    1014:	93 e0       	ldi	r25, 0x03	; 3
    1016:	0c 94 5f 31 	jmp	0x62be	; 0x62be <_Z16GLCD_WriteStringPc>
    101a:	08 95       	ret
					//copyStrToLcdBuff(hex_file_init_update_line1, 1);
				}
				else
				{
					blink_flag = TRUE;
    101c:	81 e0       	ldi	r24, 0x01	; 1
    101e:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__data_start>
					GLCD_GoTo(0,1);
    1022:	61 e0       	ldi	r22, 0x01	; 1
    1024:	80 e0       	ldi	r24, 0x00	; 0
    1026:	0e 94 e2 30 	call	0x61c4	; 0x61c4 <_Z9GLCD_GoTohh>
					GLCD_WriteString((char*)"                ");
    102a:	8c eb       	ldi	r24, 0xBC	; 188
    102c:	93 e0       	ldi	r25, 0x03	; 3
    102e:	0c 94 5f 31 	jmp	0x62be	; 0x62be <_Z16GLCD_WriteStringPc>
    1032:	08 95       	ret
			}
		}
		break;
		case DWNLD_CMPLT:
			//clr_lcd_buff();
			GLCD_ClearScreen();
    1034:	0e 94 0c 31 	call	0x6218	; 0x6218 <_Z16GLCD_ClearScreenv>
			
			//	31-12-2020 SK: add code to print the below lines on graphical lcd according to library
			GLCD_GoTo(0,1);
    1038:	61 e0       	ldi	r22, 0x01	; 1
    103a:	80 e0       	ldi	r24, 0x00	; 0
    103c:	0e 94 e2 30 	call	0x61c4	; 0x61c4 <_Z9GLCD_GoTohh>
			GLCD_WriteString((char*)" DOWNLOAD  DONE ");
    1040:	8d ec       	ldi	r24, 0xCD	; 205
    1042:	93 e0       	ldi	r25, 0x03	; 3
    1044:	0e 94 5f 31 	call	0x62be	; 0x62be <_Z16GLCD_WriteStringPc>
			//copyStrToLcdBuff(download_complete_line, 1);
			//set_lcd_buff_sts(TRUE);
			set_hex_file_updt_state(DISPLAY_HOLD);
    1048:	89 e0       	ldi	r24, 0x09	; 9
    104a:	0e 94 fc 2f 	call	0x5ff8	; 0x5ff8 <_Z23set_hex_file_updt_state21hex_file_updt_state_t>
			reset_avr();		//15-04-21 SK: lets reset the controller when the downloading is complete
    104e:	0c 94 70 3f 	jmp	0x7ee0	; 0x7ee0 <_Z9reset_avrv>
			//jump_to_bootloader();
			//release_hex_file_states();
			//display_time = 0;
		break;
    1052:	08 95       	ret
		case FILE_NOT_FOUND:
			//clr_lcd_buff();
			GLCD_ClearScreen();
    1054:	0e 94 0c 31 	call	0x6218	; 0x6218 <_Z16GLCD_ClearScreenv>
			
			//	31-12-2020 SK: add code to print the below lines on graphical lcd according to library
			GLCD_GoTo(0,1);
    1058:	61 e0       	ldi	r22, 0x01	; 1
    105a:	80 e0       	ldi	r24, 0x00	; 0
    105c:	0e 94 e2 30 	call	0x61c4	; 0x61c4 <_Z9GLCD_GoTohh>
			GLCD_WriteString((char*)" FILE NOT FOUND ");
    1060:	8e ed       	ldi	r24, 0xDE	; 222
    1062:	93 e0       	ldi	r25, 0x03	; 3
    1064:	0e 94 5f 31 	call	0x62be	; 0x62be <_Z16GLCD_WriteStringPc>
			//copyStrToLcdBuff(file_not_found_line, 1);
			//set_lcd_buff_sts(TRUE);
			set_hex_file_updt_state(DISPLAY_HOLD);
    1068:	89 e0       	ldi	r24, 0x09	; 9
    106a:	0c 94 fc 2f 	jmp	0x5ff8	; 0x5ff8 <_Z23set_hex_file_updt_state21hex_file_updt_state_t>
			//release_hex_file_states();
			//display_time = 0;
		break;
    106e:	08 95       	ret
		case CONN_ERROR:
			//clr_lcd_buff();
			GLCD_ClearScreen();
    1070:	0e 94 0c 31 	call	0x6218	; 0x6218 <_Z16GLCD_ClearScreenv>
			
			//	31-12-2020 SK: add code to print the below lines on graphical lcd according to library
			GLCD_GoTo(0,1);
    1074:	61 e0       	ldi	r22, 0x01	; 1
    1076:	80 e0       	ldi	r24, 0x00	; 0
    1078:	0e 94 e2 30 	call	0x61c4	; 0x61c4 <_Z9GLCD_GoTohh>
			GLCD_WriteString((char*)"CONNECTION ERROR");
    107c:	8f ee       	ldi	r24, 0xEF	; 239
    107e:	93 e0       	ldi	r25, 0x03	; 3
    1080:	0e 94 5f 31 	call	0x62be	; 0x62be <_Z16GLCD_WriteStringPc>
			//copyStrToLcdBuff(conn_error_line, 1);
			//set_lcd_buff_sts(TRUE);
			set_hex_file_updt_state(DISPLAY_HOLD);
    1084:	89 e0       	ldi	r24, 0x09	; 9
    1086:	0c 94 fc 2f 	jmp	0x5ff8	; 0x5ff8 <_Z23set_hex_file_updt_state21hex_file_updt_state_t>
			//release_hex_file_states();
			//display_time = 0;
		break;
    108a:	08 95       	ret
		case DOWNLOADING:
			if(++time >= BLINK_TIME)
    108c:	80 91 f4 0a 	lds	r24, 0x0AF4	; 0x800af4 <_ZZ23flash_hex_file_progressvE4time>
    1090:	90 91 f5 0a 	lds	r25, 0x0AF5	; 0x800af5 <_ZZ23flash_hex_file_progressvE4time+0x1>
    1094:	01 96       	adiw	r24, 0x01	; 1
    1096:	85 30       	cpi	r24, 0x05	; 5
    1098:	91 05       	cpc	r25, r1
    109a:	28 f4       	brcc	.+10     	; 0x10a6 <_Z23flash_hex_file_progressv+0xe8>
    109c:	90 93 f5 0a 	sts	0x0AF5, r25	; 0x800af5 <_ZZ23flash_hex_file_progressvE4time+0x1>
    10a0:	80 93 f4 0a 	sts	0x0AF4, r24	; 0x800af4 <_ZZ23flash_hex_file_progressvE4time>
    10a4:	08 95       	ret
			{
				time = 0;
    10a6:	10 92 f5 0a 	sts	0x0AF5, r1	; 0x800af5 <_ZZ23flash_hex_file_progressvE4time+0x1>
    10aa:	10 92 f4 0a 	sts	0x0AF4, r1	; 0x800af4 <_ZZ23flash_hex_file_progressvE4time>
				//GLCD_ClearScreen();
				
				//	31-12-2020 SK: add code to print the below lines on graphical lcd according to library
				
				if(blink_flag)
    10ae:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
    10b2:	88 23       	and	r24, r24
    10b4:	59 f0       	breq	.+22     	; 0x10cc <_Z23flash_hex_file_progressv+0x10e>
				{
					blink_flag = FALSE;
    10b6:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <__data_start>
					GLCD_GoTo(0,1);
    10ba:	61 e0       	ldi	r22, 0x01	; 1
    10bc:	80 e0       	ldi	r24, 0x00	; 0
    10be:	0e 94 e2 30 	call	0x61c4	; 0x61c4 <_Z9GLCD_GoTohh>
					GLCD_WriteString((char*)"   DOWNLOADING  ");
    10c2:	8b ea       	ldi	r24, 0xAB	; 171
    10c4:	93 e0       	ldi	r25, 0x03	; 3
    10c6:	0c 94 5f 31 	jmp	0x62be	; 0x62be <_Z16GLCD_WriteStringPc>
    10ca:	08 95       	ret
					//copyStrToLcdBuff(hex_file_update_line2, 1);
				}
				else
				{
					blink_flag = TRUE;
    10cc:	81 e0       	ldi	r24, 0x01	; 1
    10ce:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__data_start>
					GLCD_GoTo(0,1);
    10d2:	61 e0       	ldi	r22, 0x01	; 1
    10d4:	80 e0       	ldi	r24, 0x00	; 0
    10d6:	0e 94 e2 30 	call	0x61c4	; 0x61c4 <_Z9GLCD_GoTohh>
					GLCD_WriteString((char*)"                ");
    10da:	8c eb       	ldi	r24, 0xBC	; 188
    10dc:	93 e0       	ldi	r25, 0x03	; 3
    10de:	0c 94 5f 31 	jmp	0x62be	; 0x62be <_Z16GLCD_WriteStringPc>
    10e2:	08 95       	ret
			}
		break;
		case NO_UPDATE:
			//clr_lcd_buff();
			
			GLCD_ClearScreen();
    10e4:	0e 94 0c 31 	call	0x6218	; 0x6218 <_Z16GLCD_ClearScreenv>
			
			//	31-12-2020 SK: add code to print the below lines on graphical lcd according to library
			GLCD_GoTo(0,1);
    10e8:	61 e0       	ldi	r22, 0x01	; 1
    10ea:	80 e0       	ldi	r24, 0x00	; 0
    10ec:	0e 94 e2 30 	call	0x61c4	; 0x61c4 <_Z9GLCD_GoTohh>
			GLCD_WriteString((char*)"   NO  UPDATE   ");
    10f0:	80 e0       	ldi	r24, 0x00	; 0
    10f2:	94 e0       	ldi	r25, 0x04	; 4
    10f4:	0e 94 5f 31 	call	0x62be	; 0x62be <_Z16GLCD_WriteStringPc>
			//sprintf(buff,"%u,%u",dyn_mem_alloc_cnt,dyn_mem_dealloc_cnt);
			//GLCD_GoTo(0,2);
			//GLCD_WriteString(buff);
			//copyStrToLcdBuff(no_update_line, 1);
			//set_lcd_buff_sts(TRUE);
			set_hex_file_updt_state(DISPLAY_HOLD);
    10f8:	89 e0       	ldi	r24, 0x09	; 9
    10fa:	0c 94 fc 2f 	jmp	0x5ff8	; 0x5ff8 <_Z23set_hex_file_updt_state21hex_file_updt_state_t>
			//release_hex_file_states();
			//display_time = 0;
		break;
    10fe:	08 95       	ret
		case UPDATE_FAIL:
		{
			//clr_lcd_buff();
			GLCD_ClearScreen();
    1100:	0e 94 0c 31 	call	0x6218	; 0x6218 <_Z16GLCD_ClearScreenv>
			
			//	31-12-2020 SK: add code to print the below lines on graphical lcd according to library
			GLCD_GoTo(0,1);
    1104:	61 e0       	ldi	r22, 0x01	; 1
    1106:	80 e0       	ldi	r24, 0x00	; 0
    1108:	0e 94 e2 30 	call	0x61c4	; 0x61c4 <_Z9GLCD_GoTohh>
			GLCD_WriteString((char*)"   UPDATE FAILED    ");
    110c:	81 e1       	ldi	r24, 0x11	; 17
    110e:	94 e0       	ldi	r25, 0x04	; 4
    1110:	0e 94 5f 31 	call	0x62be	; 0x62be <_Z16GLCD_WriteStringPc>
			//copyStrToLcdBuff(gprs_config_lcd_line3, 1);
			//set_lcd_buff_sts(TRUE);
			//release_hex_file_states();
			set_hex_file_updt_state(DISPLAY_HOLD);
    1114:	89 e0       	ldi	r24, 0x09	; 9
    1116:	0c 94 fc 2f 	jmp	0x5ff8	; 0x5ff8 <_Z23set_hex_file_updt_state21hex_file_updt_state_t>
		}
		break;
    111a:	08 95       	ret
		case VERIFYING:
			if(++time >= BLINK_TIME)
    111c:	80 91 f4 0a 	lds	r24, 0x0AF4	; 0x800af4 <_ZZ23flash_hex_file_progressvE4time>
    1120:	90 91 f5 0a 	lds	r25, 0x0AF5	; 0x800af5 <_ZZ23flash_hex_file_progressvE4time+0x1>
    1124:	01 96       	adiw	r24, 0x01	; 1
    1126:	85 30       	cpi	r24, 0x05	; 5
    1128:	91 05       	cpc	r25, r1
    112a:	28 f4       	brcc	.+10     	; 0x1136 <_Z23flash_hex_file_progressv+0x178>
    112c:	90 93 f5 0a 	sts	0x0AF5, r25	; 0x800af5 <_ZZ23flash_hex_file_progressvE4time+0x1>
    1130:	80 93 f4 0a 	sts	0x0AF4, r24	; 0x800af4 <_ZZ23flash_hex_file_progressvE4time>
    1134:	08 95       	ret
			{
				time = 0;
    1136:	10 92 f5 0a 	sts	0x0AF5, r1	; 0x800af5 <_ZZ23flash_hex_file_progressvE4time+0x1>
    113a:	10 92 f4 0a 	sts	0x0AF4, r1	; 0x800af4 <_ZZ23flash_hex_file_progressvE4time>
				//GLCD_ClearScreen();
				
				//	31-12-2020 SK: add code to print the below lines on graphical lcd according to library
				
				if(blink_flag)
    113e:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
    1142:	88 23       	and	r24, r24
    1144:	59 f0       	breq	.+22     	; 0x115c <_Z23flash_hex_file_progressv+0x19e>
				{
					blink_flag = FALSE;
    1146:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <__data_start>
					GLCD_GoTo(0,1);
    114a:	61 e0       	ldi	r22, 0x01	; 1
    114c:	80 e0       	ldi	r24, 0x00	; 0
    114e:	0e 94 e2 30 	call	0x61c4	; 0x61c4 <_Z9GLCD_GoTohh>
					GLCD_WriteString((char*)"    VERIFYING   ");
    1152:	86 e2       	ldi	r24, 0x26	; 38
    1154:	94 e0       	ldi	r25, 0x04	; 4
    1156:	0c 94 5f 31 	jmp	0x62be	; 0x62be <_Z16GLCD_WriteStringPc>
    115a:	08 95       	ret
					//copyStrToLcdBuff(conn_verify_line, 1);
				}
				else
				{
					blink_flag = TRUE;
    115c:	81 e0       	ldi	r24, 0x01	; 1
    115e:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__data_start>
					GLCD_GoTo(0,1);
    1162:	61 e0       	ldi	r22, 0x01	; 1
    1164:	80 e0       	ldi	r24, 0x00	; 0
    1166:	0e 94 e2 30 	call	0x61c4	; 0x61c4 <_Z9GLCD_GoTohh>
					GLCD_WriteString((char*)"                ");
    116a:	8c eb       	ldi	r24, 0xBC	; 188
    116c:	93 e0       	ldi	r25, 0x03	; 3
    116e:	0c 94 5f 31 	jmp	0x62be	; 0x62be <_Z16GLCD_WriteStringPc>
    1172:	08 95       	ret
				}
				//set_lcd_buff_sts(TRUE);
			}
		break;
		case DISPLAY_HOLD:
			release_hex_file_states();
    1174:	0e 94 f8 2f 	call	0x5ff0	; 0x5ff0 <_Z23release_hex_file_statesv>
			set_frmwr_update_state(HEX_FILE_UPDATE_RELEASE);
    1178:	84 e0       	ldi	r24, 0x04	; 4
    117a:	0e 94 a9 3d 	call	0x7b52	; 0x7b52 <_Z22set_frmwr_update_state20frmwr_update_state_t>
			set_hex_file_updt_state(DEFAULT);
    117e:	8c e0       	ldi	r24, 0x0C	; 12
    1180:	0c 94 fc 2f 	jmp	0x5ff8	; 0x5ff8 <_Z23set_hex_file_updt_state21hex_file_updt_state_t>
    1184:	08 95       	ret

00001186 <_Z10UWriteDataci>:
	if(immediateSend)
	{
		Tx_Buff[uart_no].tx_ready = FALSE;
		Usendbuffer(uart_no);
	}
}
    1186:	61 30       	cpi	r22, 0x01	; 1
    1188:	71 05       	cpc	r23, r1
    118a:	99 f0       	breq	.+38     	; 0x11b2 <_Z10UWriteDataci+0x2c>
    118c:	1c f4       	brge	.+6      	; 0x1194 <_Z10UWriteDataci+0xe>
    118e:	67 2b       	or	r22, r23
    1190:	41 f0       	breq	.+16     	; 0x11a2 <_Z10UWriteDataci+0x1c>
    1192:	08 95       	ret
    1194:	62 30       	cpi	r22, 0x02	; 2
    1196:	71 05       	cpc	r23, r1
    1198:	a1 f0       	breq	.+40     	; 0x11c2 <_Z10UWriteDataci+0x3c>
    119a:	63 30       	cpi	r22, 0x03	; 3
    119c:	71 05       	cpc	r23, r1
    119e:	c9 f0       	breq	.+50     	; 0x11d2 <_Z10UWriteDataci+0x4c>
    11a0:	08 95       	ret
    11a2:	e0 ec       	ldi	r30, 0xC0	; 192
    11a4:	f0 e0       	ldi	r31, 0x00	; 0
    11a6:	90 81       	ld	r25, Z
    11a8:	95 ff       	sbrs	r25, 5
    11aa:	fd cf       	rjmp	.-6      	; 0x11a6 <_Z10UWriteDataci+0x20>
    11ac:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    11b0:	08 95       	ret
    11b2:	e8 ec       	ldi	r30, 0xC8	; 200
    11b4:	f0 e0       	ldi	r31, 0x00	; 0
    11b6:	90 81       	ld	r25, Z
    11b8:	95 ff       	sbrs	r25, 5
    11ba:	fd cf       	rjmp	.-6      	; 0x11b6 <_Z10UWriteDataci+0x30>
    11bc:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    11c0:	08 95       	ret
    11c2:	e0 ed       	ldi	r30, 0xD0	; 208
    11c4:	f0 e0       	ldi	r31, 0x00	; 0
    11c6:	90 81       	ld	r25, Z
    11c8:	95 ff       	sbrs	r25, 5
    11ca:	fd cf       	rjmp	.-6      	; 0x11c6 <_Z10UWriteDataci+0x40>
    11cc:	80 93 d6 00 	sts	0x00D6, r24	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    11d0:	08 95       	ret
    11d2:	e0 e3       	ldi	r30, 0x30	; 48
    11d4:	f1 e0       	ldi	r31, 0x01	; 1
    11d6:	90 81       	ld	r25, Z
    11d8:	95 ff       	sbrs	r25, 5
    11da:	fd cf       	rjmp	.-6      	; 0x11d6 <_Z10UWriteDataci+0x50>
    11dc:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    11e0:	08 95       	ret

000011e2 <_Z12UWriteStringPKci>:
    11e2:	0f 93       	push	r16
    11e4:	1f 93       	push	r17
    11e6:	cf 93       	push	r28
    11e8:	df 93       	push	r29
    11ea:	ec 01       	movw	r28, r24
    11ec:	8b 01       	movw	r16, r22
    11ee:	67 2b       	or	r22, r23
    11f0:	21 f0       	breq	.+8      	; 0x11fa <_Z12UWriteStringPKci+0x18>
    11f2:	88 81       	ld	r24, Y
    11f4:	81 11       	cpse	r24, r1
    11f6:	2f c0       	rjmp	.+94     	; 0x1256 <_Z12UWriteStringPKci+0x74>
    11f8:	34 c0       	rjmp	.+104    	; 0x1262 <_Z12UWriteStringPKci+0x80>
    11fa:	88 81       	ld	r24, Y
    11fc:	88 23       	and	r24, r24
    11fe:	b1 f1       	breq	.+108    	; 0x126c <_Z12UWriteStringPKci+0x8a>
    1200:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
    1204:	85 ff       	sbrs	r24, 5
    1206:	34 c0       	rjmp	.+104    	; 0x1270 <_Z12UWriteStringPKci+0x8e>
    1208:	fe 01       	movw	r30, r28
    120a:	01 90       	ld	r0, Z+
    120c:	00 20       	and	r0, r0
    120e:	e9 f7       	brne	.-6      	; 0x120a <_Z12UWriteStringPKci+0x28>
    1210:	31 97       	sbiw	r30, 0x01	; 1
    1212:	ec 1b       	sub	r30, r28
    1214:	fd 0b       	sbc	r31, r29
    1216:	e0 3c       	cpi	r30, 0xC0	; 192
    1218:	f1 05       	cpc	r31, r1
    121a:	30 f4       	brcc	.+12     	; 0x1228 <_Z12UWriteStringPKci+0x46>
    121c:	be 01       	movw	r22, r28
    121e:	8b ec       	ldi	r24, 0xCB	; 203
    1220:	91 e1       	ldi	r25, 0x11	; 17
    1222:	0e 94 b6 47 	call	0x8f6c	; 0x8f6c <strcpy>
    1226:	09 c0       	rjmp	.+18     	; 0x123a <_Z12UWriteStringPKci+0x58>
    1228:	82 e1       	ldi	r24, 0x12	; 18
    122a:	e7 e3       	ldi	r30, 0x37	; 55
    122c:	f4 e0       	ldi	r31, 0x04	; 4
    122e:	ab ec       	ldi	r26, 0xCB	; 203
    1230:	b1 e1       	ldi	r27, 0x11	; 17
    1232:	01 90       	ld	r0, Z+
    1234:	0d 92       	st	X+, r0
    1236:	8a 95       	dec	r24
    1238:	e1 f7       	brne	.-8      	; 0x1232 <_Z12UWriteStringPKci+0x50>
    123a:	80 e0       	ldi	r24, 0x00	; 0
    123c:	90 e0       	ldi	r25, 0x00	; 0
    123e:	0e 94 3f 43 	call	0x867e	; 0x867e <_Z14enable_tx_intri>
    1242:	80 91 cb 11 	lds	r24, 0x11CB	; 0x8011cb <gprs_tx_buff+0x1>
    1246:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    124a:	10 92 8c 12 	sts	0x128C, r1	; 0x80128c <gprs_tx_buff+0xc2>
    124e:	10 92 8b 12 	sts	0x128B, r1	; 0x80128b <gprs_tx_buff+0xc1>
    1252:	81 e0       	ldi	r24, 0x01	; 1
    1254:	0e c0       	rjmp	.+28     	; 0x1272 <_Z12UWriteStringPKci+0x90>
    1256:	21 96       	adiw	r28, 0x01	; 1
    1258:	b8 01       	movw	r22, r16
    125a:	95 df       	rcall	.-214    	; 0x1186 <_Z10UWriteDataci>
    125c:	89 91       	ld	r24, Y+
    125e:	81 11       	cpse	r24, r1
    1260:	fb cf       	rjmp	.-10     	; 0x1258 <_Z12UWriteStringPKci+0x76>
    1262:	b8 01       	movw	r22, r16
    1264:	80 e0       	ldi	r24, 0x00	; 0
    1266:	8f df       	rcall	.-226    	; 0x1186 <_Z10UWriteDataci>
    1268:	80 e0       	ldi	r24, 0x00	; 0
    126a:	03 c0       	rjmp	.+6      	; 0x1272 <_Z12UWriteStringPKci+0x90>
    126c:	81 e0       	ldi	r24, 0x01	; 1
    126e:	01 c0       	rjmp	.+2      	; 0x1272 <_Z12UWriteStringPKci+0x90>
    1270:	80 e0       	ldi	r24, 0x00	; 0
    1272:	df 91       	pop	r29
    1274:	cf 91       	pop	r28
    1276:	1f 91       	pop	r17
    1278:	0f 91       	pop	r16
    127a:	08 95       	ret

0000127c <_Z9UWriteIntmc>:
    127c:	1f 93       	push	r17
    127e:	cf 93       	push	r28
    1280:	df 93       	push	r29
    1282:	cd b7       	in	r28, 0x3d	; 61
    1284:	de b7       	in	r29, 0x3e	; 62
    1286:	6e 97       	sbiw	r28, 0x1e	; 30
    1288:	0f b6       	in	r0, 0x3f	; 63
    128a:	f8 94       	cli
    128c:	de bf       	out	0x3e, r29	; 62
    128e:	0f be       	out	0x3f, r0	; 63
    1290:	cd bf       	out	0x3d, r28	; 61
    1292:	14 2f       	mov	r17, r20
    1294:	2a e0       	ldi	r18, 0x0A	; 10
    1296:	ae 01       	movw	r20, r28
    1298:	4f 5f       	subi	r20, 0xFF	; 255
    129a:	5f 4f       	sbci	r21, 0xFF	; 255
    129c:	0e 94 bd 47 	call	0x8f7a	; 0x8f7a <__ltoa_ncheck>
    12a0:	61 2f       	mov	r22, r17
    12a2:	70 e0       	ldi	r23, 0x00	; 0
    12a4:	ce 01       	movw	r24, r28
    12a6:	01 96       	adiw	r24, 0x01	; 1
    12a8:	9c df       	rcall	.-200    	; 0x11e2 <_Z12UWriteStringPKci>
    12aa:	6e 96       	adiw	r28, 0x1e	; 30
    12ac:	0f b6       	in	r0, 0x3f	; 63
    12ae:	f8 94       	cli
    12b0:	de bf       	out	0x3e, r29	; 62
    12b2:	0f be       	out	0x3f, r0	; 63
    12b4:	cd bf       	out	0x3d, r28	; 61
    12b6:	df 91       	pop	r29
    12b8:	cf 91       	pop	r28
    12ba:	1f 91       	pop	r17
    12bc:	08 95       	ret

000012be <_Z11Usendbufferi>:
    12be:	cf 92       	push	r12
    12c0:	df 92       	push	r13
    12c2:	ef 92       	push	r14
    12c4:	ff 92       	push	r15
    12c6:	0f 93       	push	r16
    12c8:	1f 93       	push	r17
    12ca:	cf 93       	push	r28
    12cc:	df 93       	push	r29
    12ce:	8c 01       	movw	r16, r24
    12d0:	89 2b       	or	r24, r25
    12d2:	71 f0       	breq	.+28     	; 0x12f0 <_Z11Usendbufferi+0x32>
    12d4:	89 e4       	ldi	r24, 0x49	; 73
    12d6:	80 9f       	mul	r24, r16
    12d8:	f0 01       	movw	r30, r0
    12da:	81 9f       	mul	r24, r17
    12dc:	f0 0d       	add	r31, r0
    12de:	11 24       	eor	r1, r1
    12e0:	ed 52       	subi	r30, 0x2D	; 45
    12e2:	fb 4e       	sbci	r31, 0xEB	; 235
    12e4:	80 81       	ld	r24, Z
    12e6:	91 81       	ldd	r25, Z+1	; 0x01
    12e8:	18 16       	cp	r1, r24
    12ea:	19 06       	cpc	r1, r25
    12ec:	b4 f0       	brlt	.+44     	; 0x131a <_Z11Usendbufferi+0x5c>
    12ee:	32 c0       	rjmp	.+100    	; 0x1354 <_Z11Usendbufferi+0x96>
    12f0:	80 91 cb 11 	lds	r24, 0x11CB	; 0x8011cb <gprs_tx_buff+0x1>
    12f4:	88 23       	and	r24, r24
    12f6:	71 f1       	breq	.+92     	; 0x1354 <_Z11Usendbufferi+0x96>
    12f8:	c0 e0       	ldi	r28, 0x00	; 0
    12fa:	d0 e0       	ldi	r29, 0x00	; 0
    12fc:	fe 01       	movw	r30, r28
    12fe:	e6 53       	subi	r30, 0x36	; 54
    1300:	fe 4e       	sbci	r31, 0xEE	; 238
    1302:	81 81       	ldd	r24, Z+1	; 0x01
    1304:	60 e0       	ldi	r22, 0x00	; 0
    1306:	70 e0       	ldi	r23, 0x00	; 0
    1308:	3e df       	rcall	.-388    	; 0x1186 <_Z10UWriteDataci>
    130a:	21 96       	adiw	r28, 0x01	; 1
    130c:	fe 01       	movw	r30, r28
    130e:	e6 53       	subi	r30, 0x36	; 54
    1310:	fe 4e       	sbci	r31, 0xEE	; 238
    1312:	81 81       	ldd	r24, Z+1	; 0x01
    1314:	81 11       	cpse	r24, r1
    1316:	f2 cf       	rjmp	.-28     	; 0x12fc <_Z11Usendbufferi+0x3e>
    1318:	1d c0       	rjmp	.+58     	; 0x1354 <_Z11Usendbufferi+0x96>
    131a:	c0 e0       	ldi	r28, 0x00	; 0
    131c:	d0 e0       	ldi	r29, 0x00	; 0
    131e:	29 e4       	ldi	r18, 0x49	; 73
    1320:	20 9f       	mul	r18, r16
    1322:	c0 01       	movw	r24, r0
    1324:	21 9f       	mul	r18, r17
    1326:	90 0d       	add	r25, r0
    1328:	11 24       	eor	r1, r1
    132a:	9c 01       	movw	r18, r24
    132c:	2d 56       	subi	r18, 0x6D	; 109
    132e:	3b 4e       	sbci	r19, 0xEB	; 235
    1330:	79 01       	movw	r14, r18
    1332:	69 01       	movw	r12, r18
    1334:	30 e4       	ldi	r19, 0x40	; 64
    1336:	c3 0e       	add	r12, r19
    1338:	d1 1c       	adc	r13, r1
    133a:	f7 01       	movw	r30, r14
    133c:	ec 0f       	add	r30, r28
    133e:	fd 1f       	adc	r31, r29
    1340:	80 81       	ld	r24, Z
    1342:	b8 01       	movw	r22, r16
    1344:	20 df       	rcall	.-448    	; 0x1186 <_Z10UWriteDataci>
    1346:	21 96       	adiw	r28, 0x01	; 1
    1348:	f6 01       	movw	r30, r12
    134a:	80 81       	ld	r24, Z
    134c:	91 81       	ldd	r25, Z+1	; 0x01
    134e:	c8 17       	cp	r28, r24
    1350:	d9 07       	cpc	r29, r25
    1352:	9c f3       	brlt	.-26     	; 0x133a <_Z11Usendbufferi+0x7c>
    1354:	df 91       	pop	r29
    1356:	cf 91       	pop	r28
    1358:	1f 91       	pop	r17
    135a:	0f 91       	pop	r16
    135c:	ff 90       	pop	r15
    135e:	ef 90       	pop	r14
    1360:	df 90       	pop	r13
    1362:	cf 90       	pop	r12
    1364:	08 95       	ret

00001366 <_Z13flushTxBufferi>:
    1366:	83 30       	cpi	r24, 0x03	; 3
    1368:	91 05       	cpc	r25, r1
    136a:	bc f4       	brge	.+46     	; 0x139a <_Z13flushTxBufferi+0x34>
    136c:	29 e4       	ldi	r18, 0x49	; 73
    136e:	28 9f       	mul	r18, r24
    1370:	f0 01       	movw	r30, r0
    1372:	29 9f       	mul	r18, r25
    1374:	f0 0d       	add	r31, r0
    1376:	11 24       	eor	r1, r1
    1378:	ed 56       	subi	r30, 0x6D	; 109
    137a:	fb 4e       	sbci	r31, 0xEB	; 235
    137c:	20 e4       	ldi	r18, 0x40	; 64
    137e:	df 01       	movw	r26, r30
    1380:	1d 92       	st	X+, r1
    1382:	2a 95       	dec	r18
    1384:	e9 f7       	brne	.-6      	; 0x1380 <_Z13flushTxBufferi+0x1a>
    1386:	82 30       	cpi	r24, 0x02	; 2
    1388:	91 05       	cpc	r25, r1
    138a:	39 f4       	brne	.+14     	; 0x139a <_Z13flushTxBufferi+0x34>
    138c:	10 92 66 15 	sts	0x1566, r1	; 0x801566 <Tx_Buff+0xd3>
    1390:	10 92 65 15 	sts	0x1565, r1	; 0x801565 <Tx_Buff+0xd2>
    1394:	10 92 67 15 	sts	0x1567, r1	; 0x801567 <Tx_Buff+0xd4>
    1398:	08 95       	ret
    139a:	89 2b       	or	r24, r25
    139c:	39 f4       	brne	.+14     	; 0x13ac <_Z13flushTxBufferi+0x46>
    139e:	83 ec       	ldi	r24, 0xC3	; 195
    13a0:	ea ec       	ldi	r30, 0xCA	; 202
    13a2:	f1 e1       	ldi	r31, 0x11	; 17
    13a4:	df 01       	movw	r26, r30
    13a6:	1d 92       	st	X+, r1
    13a8:	8a 95       	dec	r24
    13aa:	e9 f7       	brne	.-6      	; 0x13a6 <_Z13flushTxBufferi+0x40>
    13ac:	08 95       	ret

000013ae <_Z13flushRxBufferi>:
    13ae:	83 30       	cpi	r24, 0x03	; 3
    13b0:	91 05       	cpc	r25, r1
    13b2:	64 f4       	brge	.+24     	; 0x13cc <_Z13flushRxBufferi+0x1e>
    13b4:	25 e4       	ldi	r18, 0x45	; 69
    13b6:	28 9f       	mul	r18, r24
    13b8:	f0 01       	movw	r30, r0
    13ba:	29 9f       	mul	r18, r25
    13bc:	f0 0d       	add	r31, r0
    13be:	11 24       	eor	r1, r1
    13c0:	e2 59       	subi	r30, 0x92	; 146
    13c2:	fa 4e       	sbci	r31, 0xEA	; 234
    13c4:	df 01       	movw	r26, r30
    13c6:	1d 92       	st	X+, r1
    13c8:	2a 95       	dec	r18
    13ca:	e9 f7       	brne	.-6      	; 0x13c6 <_Z13flushRxBufferi+0x18>
    13cc:	89 2b       	or	r24, r25
    13ce:	71 f4       	brne	.+28     	; 0x13ec <_Z13flushRxBufferi+0x3e>
    13d0:	10 92 4e 0c 	sts	0x0C4E, r1	; 0x800c4e <gprs_rx_isr_handler+0x1>
    13d4:	10 92 4d 0c 	sts	0x0C4D, r1	; 0x800c4d <gprs_rx_isr_handler>
    13d8:	8b e7       	ldi	r24, 0x7B	; 123
    13da:	95 e0       	ldi	r25, 0x05	; 5
    13dc:	ef e4       	ldi	r30, 0x4F	; 79
    13de:	fc e0       	ldi	r31, 0x0C	; 12
    13e0:	df 01       	movw	r26, r30
    13e2:	9c 01       	movw	r18, r24
    13e4:	1d 92       	st	X+, r1
    13e6:	21 50       	subi	r18, 0x01	; 1
    13e8:	30 40       	sbci	r19, 0x00	; 0
    13ea:	e1 f7       	brne	.-8      	; 0x13e4 <_Z13flushRxBufferi+0x36>
    13ec:	08 95       	ret

000013ee <_Z21prepareResponsePacketi5cmd_tPch>:
    13ee:	cf 92       	push	r12
    13f0:	df 92       	push	r13
    13f2:	ef 92       	push	r14
    13f4:	ff 92       	push	r15
    13f6:	0f 93       	push	r16
    13f8:	1f 93       	push	r17
    13fa:	cf 93       	push	r28
    13fc:	df 93       	push	r29
    13fe:	6c 01       	movw	r12, r24
    1400:	06 2f       	mov	r16, r22
    1402:	7a 01       	movw	r14, r20
    1404:	12 2f       	mov	r17, r18
    1406:	af df       	rcall	.-162    	; 0x1366 <_Z13flushTxBufferi>
    1408:	29 e4       	ldi	r18, 0x49	; 73
    140a:	2c 9d       	mul	r18, r12
    140c:	c0 01       	movw	r24, r0
    140e:	2d 9d       	mul	r18, r13
    1410:	90 0d       	add	r25, r0
    1412:	11 24       	eor	r1, r1
    1414:	8d 56       	subi	r24, 0x6D	; 109
    1416:	9b 4e       	sbci	r25, 0xEB	; 235
    1418:	fc 01       	movw	r30, r24
    141a:	e0 5c       	subi	r30, 0xC0	; 192
    141c:	ff 4f       	sbci	r31, 0xFF	; 255
    141e:	11 82       	std	Z+1, r1	; 0x01
    1420:	10 82       	st	Z, r1
    1422:	20 81       	ld	r18, Z
    1424:	31 81       	ldd	r19, Z+1	; 0x01
    1426:	a9 01       	movw	r20, r18
    1428:	4f 5f       	subi	r20, 0xFF	; 255
    142a:	5f 4f       	sbci	r21, 0xFF	; 255
    142c:	51 83       	std	Z+1, r21	; 0x01
    142e:	40 83       	st	Z, r20
    1430:	dc 01       	movw	r26, r24
    1432:	a2 0f       	add	r26, r18
    1434:	b3 1f       	adc	r27, r19
    1436:	4a ea       	ldi	r20, 0xAA	; 170
    1438:	4c 93       	st	X, r20
    143a:	20 81       	ld	r18, Z
    143c:	31 81       	ldd	r19, Z+1	; 0x01
    143e:	a9 01       	movw	r20, r18
    1440:	4f 5f       	subi	r20, 0xFF	; 255
    1442:	5f 4f       	sbci	r21, 0xFF	; 255
    1444:	51 83       	std	Z+1, r21	; 0x01
    1446:	40 83       	st	Z, r20
    1448:	dc 01       	movw	r26, r24
    144a:	a2 0f       	add	r26, r18
    144c:	b3 1f       	adc	r27, r19
    144e:	1c 93       	st	X, r17
    1450:	20 81       	ld	r18, Z
    1452:	31 81       	ldd	r19, Z+1	; 0x01
    1454:	a9 01       	movw	r20, r18
    1456:	4f 5f       	subi	r20, 0xFF	; 255
    1458:	5f 4f       	sbci	r21, 0xFF	; 255
    145a:	51 83       	std	Z+1, r21	; 0x01
    145c:	40 83       	st	Z, r20
    145e:	00 68       	ori	r16, 0x80	; 128
    1460:	fc 01       	movw	r30, r24
    1462:	e2 0f       	add	r30, r18
    1464:	f3 1f       	adc	r31, r19
    1466:	00 83       	st	Z, r16
    1468:	81 2f       	mov	r24, r17
    146a:	90 e0       	ldi	r25, 0x00	; 0
    146c:	01 97       	sbiw	r24, 0x01	; 1
    146e:	18 16       	cp	r1, r24
    1470:	19 06       	cpc	r1, r25
    1472:	04 f5       	brge	.+64     	; 0x14b4 <_Z21prepareResponsePacketi5cmd_tPch+0xc6>
    1474:	e7 01       	movw	r28, r14
    1476:	ac 01       	movw	r20, r24
    1478:	4e 0d       	add	r20, r14
    147a:	5f 1d       	adc	r21, r15
    147c:	89 e4       	ldi	r24, 0x49	; 73
    147e:	8c 9d       	mul	r24, r12
    1480:	b0 01       	movw	r22, r0
    1482:	8d 9d       	mul	r24, r13
    1484:	70 0d       	add	r23, r0
    1486:	11 24       	eor	r1, r1
    1488:	6d 56       	subi	r22, 0x6D	; 109
    148a:	7b 4e       	sbci	r23, 0xEB	; 235
    148c:	db 01       	movw	r26, r22
    148e:	a0 5c       	subi	r26, 0xC0	; 192
    1490:	bf 4f       	sbci	r27, 0xFF	; 255
    1492:	ed 91       	ld	r30, X+
    1494:	fc 91       	ld	r31, X
    1496:	11 97       	sbiw	r26, 0x01	; 1
    1498:	89 91       	ld	r24, Y+
    149a:	e6 0f       	add	r30, r22
    149c:	f7 1f       	adc	r31, r23
    149e:	80 83       	st	Z, r24
    14a0:	8d 91       	ld	r24, X+
    14a2:	9c 91       	ld	r25, X
    14a4:	11 97       	sbiw	r26, 0x01	; 1
    14a6:	01 96       	adiw	r24, 0x01	; 1
    14a8:	11 96       	adiw	r26, 0x01	; 1
    14aa:	9c 93       	st	X, r25
    14ac:	8e 93       	st	-X, r24
    14ae:	c4 17       	cp	r28, r20
    14b0:	d5 07       	cpc	r29, r21
    14b2:	79 f7       	brne	.-34     	; 0x1492 <_Z21prepareResponsePacketi5cmd_tPch+0xa4>
    14b4:	29 e4       	ldi	r18, 0x49	; 73
    14b6:	2c 9d       	mul	r18, r12
    14b8:	c0 01       	movw	r24, r0
    14ba:	2d 9d       	mul	r18, r13
    14bc:	90 0d       	add	r25, r0
    14be:	11 24       	eor	r1, r1
    14c0:	ec 01       	movw	r28, r24
    14c2:	cd 56       	subi	r28, 0x6D	; 109
    14c4:	db 4e       	sbci	r29, 0xEB	; 235
    14c6:	7e 01       	movw	r14, r28
    14c8:	20 e4       	ldi	r18, 0x40	; 64
    14ca:	e2 0e       	add	r14, r18
    14cc:	f1 1c       	adc	r15, r1
    14ce:	f7 01       	movw	r30, r14
    14d0:	c0 80       	ld	r12, Z
    14d2:	d1 80       	ldd	r13, Z+1	; 0x01
    14d4:	96 01       	movw	r18, r12
    14d6:	2f 5f       	subi	r18, 0xFF	; 255
    14d8:	3f 4f       	sbci	r19, 0xFF	; 255
    14da:	31 83       	std	Z+1, r19	; 0x01
    14dc:	20 83       	st	Z, r18
    14de:	61 2f       	mov	r22, r17
    14e0:	8b 56       	subi	r24, 0x6B	; 107
    14e2:	9b 4e       	sbci	r25, 0xEB	; 235
    14e4:	0e 94 56 14 	call	0x28ac	; 0x28ac <_Z11getChecksumPhc>
    14e8:	fe 01       	movw	r30, r28
    14ea:	ec 0d       	add	r30, r12
    14ec:	fd 1d       	adc	r31, r13
    14ee:	80 83       	st	Z, r24
    14f0:	f7 01       	movw	r30, r14
    14f2:	80 81       	ld	r24, Z
    14f4:	91 81       	ldd	r25, Z+1	; 0x01
    14f6:	9c 01       	movw	r18, r24
    14f8:	2f 5f       	subi	r18, 0xFF	; 255
    14fa:	3f 4f       	sbci	r19, 0xFF	; 255
    14fc:	31 83       	std	Z+1, r19	; 0x01
    14fe:	20 83       	st	Z, r18
    1500:	fe 01       	movw	r30, r28
    1502:	e8 0f       	add	r30, r24
    1504:	f9 1f       	adc	r31, r25
    1506:	25 e5       	ldi	r18, 0x55	; 85
    1508:	20 83       	st	Z, r18
    150a:	ce 5b       	subi	r28, 0xBE	; 190
    150c:	df 4f       	sbci	r29, 0xFF	; 255
    150e:	81 e0       	ldi	r24, 0x01	; 1
    1510:	88 83       	st	Y, r24
    1512:	df 91       	pop	r29
    1514:	cf 91       	pop	r28
    1516:	1f 91       	pop	r17
    1518:	0f 91       	pop	r16
    151a:	ff 90       	pop	r15
    151c:	ef 90       	pop	r14
    151e:	df 90       	pop	r13
    1520:	cf 90       	pop	r12
    1522:	08 95       	ret

00001524 <_Z22reRoueMBResponsePacketv>:

void reRoueMBResponsePacket(void)		//
{
    1524:	ef 92       	push	r14
    1526:	ff 92       	push	r15
    1528:	0f 93       	push	r16
    152a:	1f 93       	push	r17
    152c:	cf 93       	push	r28
    152e:	df 93       	push	r29
    1530:	cd b7       	in	r28, 0x3d	; 61
    1532:	de b7       	in	r29, 0x3e	; 62
    1534:	c0 54       	subi	r28, 0x40	; 64
    1536:	d1 09       	sbc	r29, r1
    1538:	0f b6       	in	r0, 0x3f	; 63
    153a:	f8 94       	cli
    153c:	de bf       	out	0x3e, r29	; 62
    153e:	0f be       	out	0x3f, r0	; 63
    1540:	cd bf       	out	0x3d, r28	; 61
	
	
	int i=0, uart_no = UART_PC ;
	int len = Tx_Buff[uart_no].tx_indx;
    1542:	60 91 65 15 	lds	r22, 0x1565	; 0x801565 <Tx_Buff+0xd2>
    1546:	70 91 66 15 	lds	r23, 0x1566	; 0x801566 <Tx_Buff+0xd3>
	char temp[TX_BUFFER_MAX];

	while(i<len)
    154a:	16 16       	cp	r1, r22
    154c:	17 06       	cpc	r1, r23
    154e:	6c f4       	brge	.+26     	; 0x156a <_Z22reRoueMBResponsePacketv+0x46>
    1550:	fe 01       	movw	r30, r28
    1552:	31 96       	adiw	r30, 0x01	; 1
    1554:	80 e0       	ldi	r24, 0x00	; 0
    1556:	90 e0       	ldi	r25, 0x00	; 0
	{
		temp[i] = Tx_Buff[uart_no].tx_buffer[i];
    1558:	dc 01       	movw	r26, r24
    155a:	ab 5d       	subi	r26, 0xDB	; 219
    155c:	ba 4e       	sbci	r27, 0xEA	; 234
    155e:	2c 91       	ld	r18, X
    1560:	21 93       	st	Z+, r18
		i++;
    1562:	01 96       	adiw	r24, 0x01	; 1
	
	int i=0, uart_no = UART_PC ;
	int len = Tx_Buff[uart_no].tx_indx;
	char temp[TX_BUFFER_MAX];

	while(i<len)
    1564:	68 17       	cp	r22, r24
    1566:	79 07       	cpc	r23, r25
    1568:	b9 f7       	brne	.-18     	; 0x1558 <_Z22reRoueMBResponsePacketv+0x34>
	{
		temp[i] = Tx_Buff[uart_no].tx_buffer[i];
		i++;
	}
	
	Tx_Buff[uart_no].tx_indx = 0;
    156a:	e5 e6       	ldi	r30, 0x65	; 101
    156c:	f5 e1       	ldi	r31, 0x15	; 21
    156e:	11 82       	std	Z+1, r1	; 0x01
    1570:	10 82       	st	Z, r1
	
	Tx_Buff[uart_no].tx_buffer[Tx_Buff[uart_no].tx_indx++] = 0xAA;
    1572:	80 81       	ld	r24, Z
    1574:	91 81       	ldd	r25, Z+1	; 0x01
    1576:	9c 01       	movw	r18, r24
    1578:	2f 5f       	subi	r18, 0xFF	; 255
    157a:	3f 4f       	sbci	r19, 0xFF	; 255
    157c:	31 83       	std	Z+1, r19	; 0x01
    157e:	20 83       	st	Z, r18
    1580:	dc 01       	movw	r26, r24
    1582:	ab 5d       	subi	r26, 0xDB	; 219
    1584:	ba 4e       	sbci	r27, 0xEA	; 234
    1586:	2a ea       	ldi	r18, 0xAA	; 170
    1588:	2c 93       	st	X, r18
	
	Tx_Buff[uart_no].tx_buffer[Tx_Buff[uart_no].tx_indx++] = len;
    158a:	80 81       	ld	r24, Z
    158c:	91 81       	ldd	r25, Z+1	; 0x01
    158e:	9c 01       	movw	r18, r24
    1590:	2f 5f       	subi	r18, 0xFF	; 255
    1592:	3f 4f       	sbci	r19, 0xFF	; 255
    1594:	31 83       	std	Z+1, r19	; 0x01
    1596:	20 83       	st	Z, r18
    1598:	dc 01       	movw	r26, r24
    159a:	ab 5d       	subi	r26, 0xDB	; 219
    159c:	ba 4e       	sbci	r27, 0xEA	; 234
    159e:	6c 93       	st	X, r22
	
	Tx_Buff[uart_no].tx_buffer[Tx_Buff[uart_no].tx_indx++] = (CMD_MB_QUERY | 0x80);		//Anand 21.05.2014
    15a0:	80 81       	ld	r24, Z
    15a2:	91 81       	ldd	r25, Z+1	; 0x01
    15a4:	9c 01       	movw	r18, r24
    15a6:	2f 5f       	subi	r18, 0xFF	; 255
    15a8:	3f 4f       	sbci	r19, 0xFF	; 255
    15aa:	31 83       	std	Z+1, r19	; 0x01
    15ac:	20 83       	st	Z, r18
    15ae:	fc 01       	movw	r30, r24
    15b0:	eb 5d       	subi	r30, 0xDB	; 219
    15b2:	fa 4e       	sbci	r31, 0xEA	; 234
    15b4:	2a e9       	ldi	r18, 0x9A	; 154
    15b6:	20 83       	st	Z, r18
	
	i=0;
	while(i<(len-1))
    15b8:	cb 01       	movw	r24, r22
    15ba:	01 97       	sbiw	r24, 0x01	; 1
    15bc:	18 16       	cp	r1, r24
    15be:	19 06       	cpc	r1, r25
    15c0:	cc f4       	brge	.+50     	; 0x15f4 <_Z22reRoueMBResponsePacketv+0xd0>
    15c2:	fe 01       	movw	r30, r28
    15c4:	31 96       	adiw	r30, 0x01	; 1
    15c6:	ae 01       	movw	r20, r28
    15c8:	46 0f       	add	r20, r22
    15ca:	57 1f       	adc	r21, r23
	{
		Tx_Buff[uart_no].tx_buffer[Tx_Buff[uart_no].tx_indx++] = temp[i];
    15cc:	05 e6       	ldi	r16, 0x65	; 101
    15ce:	15 e1       	ldi	r17, 0x15	; 21
    15d0:	d8 01       	movw	r26, r16
    15d2:	8d 91       	ld	r24, X+
    15d4:	9c 91       	ld	r25, X
    15d6:	11 97       	sbiw	r26, 0x01	; 1
    15d8:	9c 01       	movw	r18, r24
    15da:	2f 5f       	subi	r18, 0xFF	; 255
    15dc:	3f 4f       	sbci	r19, 0xFF	; 255
    15de:	11 96       	adiw	r26, 0x01	; 1
    15e0:	3c 93       	st	X, r19
    15e2:	2e 93       	st	-X, r18
    15e4:	21 91       	ld	r18, Z+
    15e6:	8b 5d       	subi	r24, 0xDB	; 219
    15e8:	9a 4e       	sbci	r25, 0xEA	; 234
    15ea:	dc 01       	movw	r26, r24
    15ec:	2c 93       	st	X, r18
	Tx_Buff[uart_no].tx_buffer[Tx_Buff[uart_no].tx_indx++] = len;
	
	Tx_Buff[uart_no].tx_buffer[Tx_Buff[uart_no].tx_indx++] = (CMD_MB_QUERY | 0x80);		//Anand 21.05.2014
	
	i=0;
	while(i<(len-1))
    15ee:	e4 17       	cp	r30, r20
    15f0:	f5 07       	cpc	r31, r21
    15f2:	71 f7       	brne	.-36     	; 0x15d0 <_Z22reRoueMBResponsePacketv+0xac>
		Tx_Buff[uart_no].tx_buffer[Tx_Buff[uart_no].tx_indx++] = temp[i];
		i++;
		
	}
	
	Tx_Buff[uart_no].tx_buffer[Tx_Buff[uart_no].tx_indx++] = getChecksum((unsigned char*)&Tx_Buff[uart_no].tx_buffer[CMD_INDX], len);
    15f4:	05 e6       	ldi	r16, 0x65	; 101
    15f6:	15 e1       	ldi	r17, 0x15	; 21
    15f8:	f8 01       	movw	r30, r16
    15fa:	e0 80       	ld	r14, Z
    15fc:	f1 80       	ldd	r15, Z+1	; 0x01
    15fe:	c7 01       	movw	r24, r14
    1600:	01 96       	adiw	r24, 0x01	; 1
    1602:	91 83       	std	Z+1, r25	; 0x01
    1604:	80 83       	st	Z, r24
    1606:	87 e2       	ldi	r24, 0x27	; 39
    1608:	95 e1       	ldi	r25, 0x15	; 21
    160a:	0e 94 56 14 	call	0x28ac	; 0x28ac <_Z11getChecksumPhc>
    160e:	f7 01       	movw	r30, r14
    1610:	eb 5d       	subi	r30, 0xDB	; 219
    1612:	fa 4e       	sbci	r31, 0xEA	; 234
    1614:	80 83       	st	Z, r24
	
	Tx_Buff[uart_no].tx_buffer[Tx_Buff[uart_no].tx_indx++] = 0x55;
    1616:	d8 01       	movw	r26, r16
    1618:	8d 91       	ld	r24, X+
    161a:	9c 91       	ld	r25, X
    161c:	11 97       	sbiw	r26, 0x01	; 1
    161e:	9c 01       	movw	r18, r24
    1620:	2f 5f       	subi	r18, 0xFF	; 255
    1622:	3f 4f       	sbci	r19, 0xFF	; 255
    1624:	11 96       	adiw	r26, 0x01	; 1
    1626:	3c 93       	st	X, r19
    1628:	2e 93       	st	-X, r18
    162a:	fc 01       	movw	r30, r24
    162c:	eb 5d       	subi	r30, 0xDB	; 219
    162e:	fa 4e       	sbci	r31, 0xEA	; 234
    1630:	25 e5       	ldi	r18, 0x55	; 85
    1632:	20 83       	st	Z, r18
	
	Tx_Buff[uart_no].tx_ready = TRUE;		//Anand 21.05.2014
    1634:	81 e0       	ldi	r24, 0x01	; 1
    1636:	80 93 67 15 	sts	0x1567, r24	; 0x801567 <Tx_Buff+0xd4>
}
    163a:	c0 5c       	subi	r28, 0xC0	; 192
    163c:	df 4f       	sbci	r29, 0xFF	; 255
    163e:	0f b6       	in	r0, 0x3f	; 63
    1640:	f8 94       	cli
    1642:	de bf       	out	0x3e, r29	; 62
    1644:	0f be       	out	0x3f, r0	; 63
    1646:	cd bf       	out	0x3d, r28	; 61
    1648:	df 91       	pop	r29
    164a:	cf 91       	pop	r28
    164c:	1f 91       	pop	r17
    164e:	0f 91       	pop	r16
    1650:	ff 90       	pop	r15
    1652:	ef 90       	pop	r14
    1654:	08 95       	ret

00001656 <_Z10clear_logsv>:
}

void clear_logs(void)
{
	
	flashClrRTULogs();
    1656:	0e 94 18 1a 	call	0x3430	; 0x3430 <_Z15flashClrRTULogsv>
	flashClrMRBR();
    165a:	0e 94 3a 1a 	call	0x3474	; 0x3474 <_Z12flashClrMRBRv>
	
	updateFlashCurrAddr();		//Anand 19.04.2014	
    165e:	0c 94 d9 17 	jmp	0x2fb2	; 0x2fb2 <_Z19updateFlashCurrAddrv>
    1662:	08 95       	ret

00001664 <_Z8response5cmd_t>:
	
	Tx_Buff[uart_no].tx_ready = TRUE;		//Anand 21.05.2014
}

void response(cmd_t cmd)
{
    1664:	4f 92       	push	r4
    1666:	5f 92       	push	r5
    1668:	6f 92       	push	r6
    166a:	7f 92       	push	r7
    166c:	8f 92       	push	r8
    166e:	9f 92       	push	r9
    1670:	af 92       	push	r10
    1672:	bf 92       	push	r11
    1674:	ff 92       	push	r15
    1676:	0f 93       	push	r16
    1678:	1f 93       	push	r17
    167a:	cf 93       	push	r28
    167c:	df 93       	push	r29
    167e:	cd b7       	in	r28, 0x3d	; 61
    1680:	de b7       	in	r29, 0x3e	; 62
    1682:	e5 97       	sbiw	r28, 0x35	; 53
    1684:	0f b6       	in	r0, 0x3f	; 63
    1686:	f8 94       	cli
    1688:	de bf       	out	0x3e, r29	; 62
    168a:	0f be       	out	0x3f, r0	; 63
    168c:	cd bf       	out	0x3d, r28	; 61
    168e:	f8 2e       	mov	r15, r24

	
	char resp[3];		//Anand 04-07-15
	resp[0] = FALSE;	//Anand 22.05.2014
    1690:	19 82       	std	Y+1, r1	; 0x01
	
	switch (cmd)
    1692:	90 e0       	ldi	r25, 0x00	; 0
    1694:	fc 01       	movw	r30, r24
    1696:	31 97       	sbiw	r30, 0x01	; 1
    1698:	e7 32       	cpi	r30, 0x27	; 39
    169a:	f1 05       	cpc	r31, r1
    169c:	08 f0       	brcs	.+2      	; 0x16a0 <_Z8response5cmd_t+0x3c>
    169e:	57 c4       	rjmp	.+2222   	; 0x1f4e <_Z8response5cmd_t+0x8ea>
    16a0:	88 27       	eor	r24, r24
    16a2:	e3 58       	subi	r30, 0x83	; 131
    16a4:	ff 4f       	sbci	r31, 0xFF	; 255
    16a6:	8f 4f       	sbci	r24, 0xFF	; 255
    16a8:	0c 94 fa 46 	jmp	0x8df4	; 0x8df4 <__tablejump2__>
	{
		case CMD_CONNECT :
			setRtuState(RTU_UART_CONFIG);
    16ac:	82 e0       	ldi	r24, 0x02	; 2
    16ae:	0e 94 9b 3a 	call	0x7536	; 0x7536 <_Z11setRtuState11RTU_state_t>
			GLCD_ClearScreen();
    16b2:	0e 94 0c 31 	call	0x6218	; 0x6218 <_Z16GLCD_ClearScreenv>
			GLCD_GoTo(0,4);
    16b6:	64 e0       	ldi	r22, 0x04	; 4
    16b8:	80 e0       	ldi	r24, 0x00	; 0
    16ba:	0e 94 e2 30 	call	0x61c4	; 0x61c4 <_Z9GLCD_GoTohh>
			GLCD_WriteString((char*)"      PC CONFIG      ");
    16be:	89 e4       	ldi	r24, 0x49	; 73
    16c0:	94 e0       	ldi	r25, 0x04	; 4
    16c2:	0e 94 5f 31 	call	0x62be	; 0x62be <_Z16GLCD_WriteStringPc>
			resp[0] = ACK;
    16c6:	81 e4       	ldi	r24, 0x41	; 65
    16c8:	89 83       	std	Y+1, r24	; 0x01

		break;
    16ca:	47 c4       	rjmp	.+2190   	; 0x1f5a <_Z8response5cmd_t+0x8f6>
		case CMD_DISCONNECT:
			setRtuState(RTU_NORMAL);
    16cc:	80 e0       	ldi	r24, 0x00	; 0
    16ce:	0e 94 9b 3a 	call	0x7536	; 0x7536 <_Z11setRtuState11RTU_state_t>
			GLCD_ClearScreen();
    16d2:	0e 94 0c 31 	call	0x6218	; 0x6218 <_Z16GLCD_ClearScreenv>
			data_screen();
    16d6:	72 d9       	rcall	.-3356   	; 0x9bc <_Z11data_screenv>
			resp[0] = ACK;
    16d8:	81 e4       	ldi	r24, 0x41	; 65
    16da:	89 83       	std	Y+1, r24	; 0x01

		break;
    16dc:	3e c4       	rjmp	.+2172   	; 0x1f5a <_Z8response5cmd_t+0x8f6>
			case CMD_UPDATE_DATE_TIME :
			if(getRtuState() == RTU_UART_CONFIG)
    16de:	0e 94 98 3a 	call	0x7530	; 0x7530 <_Z11getRtuStatev>
    16e2:	82 30       	cpi	r24, 0x02	; 2
    16e4:	31 f4       	brne	.+12     	; 0x16f2 <_Z8response5cmd_t+0x8e>
			{
				int indx = DATA_INDX;
				
				set_rtc((unsigned char *)&Rx_Buff[UART_PC].rx_buffer[indx]);
    16e6:	8b ef       	ldi	r24, 0xFB	; 251
    16e8:	95 e1       	ldi	r25, 0x15	; 21
    16ea:	59 d5       	rcall	.+2738   	; 0x219e <_Z7set_rtcPh>

				resp[0] = ACK;
    16ec:	81 e4       	ldi	r24, 0x41	; 65
    16ee:	89 83       	std	Y+1, r24	; 0x01
    16f0:	34 c4       	rjmp	.+2152   	; 0x1f5a <_Z8response5cmd_t+0x8f6>
			}
			else
			{
				resp[0] = ERROR_INVALID_SYS_STATE;
    16f2:	82 ea       	ldi	r24, 0xA2	; 162
    16f4:	89 83       	std	Y+1, r24	; 0x01
    16f6:	31 c4       	rjmp	.+2146   	; 0x1f5a <_Z8response5cmd_t+0x8f6>
			}
		break;
		case CMD_FACTORY_DEFAULTS:
			if(getRtuState() == RTU_UART_CONFIG)
    16f8:	0e 94 98 3a 	call	0x7530	; 0x7530 <_Z11getRtuStatev>
    16fc:	82 30       	cpi	r24, 0x02	; 2
			{
#ifdef FLASH_LOG_DATA
				clear_logs();
    16fe:	09 f5       	brne	.+66     	; 0x1742 <_Z8response5cmd_t+0xde>
    1700:	aa df       	rcall	.-172    	; 0x1656 <_Z10clear_logsv>
				flashClrTransID();
    1702:	0e 94 12 1a 	call	0x3424	; 0x3424 <_Z15flashClrTransIDv>
#ifdef FLASH_WP_ENABLE
				remove_block_protection();
    1706:	0e 94 d6 15 	call	0x2bac	; 0x2bac <_Z23remove_block_protectionv>
#endif
				WREN();
    170a:	0e 94 cc 15 	call	0x2b98	; 0x2b98 <_Z4WRENv>
				Chip_Erase();
    170e:	0e 94 14 16 	call	0x2c28	; 0x2c28 <_Z10Chip_Erasev>
				Wait_Busy();
    1712:	0e 94 dd 16 	call	0x2dba	; 0x2dba <_Z9Wait_Busyv>
				WRDI();				// HJ 29-12-2015    // Write Disable 
    1716:	0e 94 d1 15 	call	0x2ba2	; 0x2ba2 <_Z4WRDIv>
#ifdef FLASH_WP_ENABLE
				WBPR(0);
    171a:	80 e0       	ldi	r24, 0x00	; 0
    171c:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <_Z4WBPRc>
#endif
#else	//FLASH_LOG_DATA
				clear_e2p_log();
#endif	//FLASH_LOG_DATA
				//////////
				writeDefaults();
    1720:	0e 94 5a 37 	call	0x6eb4	; 0x6eb4 <_Z13writeDefaultsv>
				GLCD_ClearScreen();
    1724:	0e 94 0c 31 	call	0x6218	; 0x6218 <_Z16GLCD_ClearScreenv>
				GLCD_GoTo(0,3);
    1728:	63 e0       	ldi	r22, 0x03	; 3
    172a:	80 e0       	ldi	r24, 0x00	; 0
    172c:	0e 94 e2 30 	call	0x61c4	; 0x61c4 <_Z9GLCD_GoTohh>
				GLCD_WriteString((char*)"     PRESS RESET     ");
    1730:	8f e5       	ldi	r24, 0x5F	; 95
    1732:	94 e0       	ldi	r25, 0x04	; 4
    1734:	0e 94 5f 31 	call	0x62be	; 0x62be <_Z16GLCD_WriteStringPc>
				
				resp[0] = ACK;
    1738:	81 e4       	ldi	r24, 0x41	; 65
    173a:	89 83       	std	Y+1, r24	; 0x01
				ACTIVITY_LED_PORT &= ~(1 << ACTIVITY_LED);
    173c:	40 98       	cbi	0x08, 0	; 8
				while(1)
				{
					wdt_reset();
    173e:	a8 95       	wdr
    1740:	fe cf       	rjmp	.-4      	; 0x173e <_Z8response5cmd_t+0xda>
				}
			}
			else
			{
				resp[0] = ERROR_INVALID_SYS_STATE;
    1742:	82 ea       	ldi	r24, 0xA2	; 162
    1744:	89 83       	std	Y+1, r24	; 0x01
			}
		break;
    1746:	09 c4       	rjmp	.+2066   	; 0x1f5a <_Z8response5cmd_t+0x8f6>
#ifdef GPRS_ENABLE	
		case CMD_GET_GPRS_CFG:
			if(getRtuState() == RTU_UART_CONFIG)
    1748:	0e 94 98 3a 	call	0x7530	; 0x7530 <_Z11getRtuStatev>
    174c:	82 30       	cpi	r24, 0x02	; 2
    174e:	51 f4       	brne	.+20     	; 0x1764 <_Z8response5cmd_t+0x100>
			{
				eepromreadGPRSConfig();		
    1750:	0e 94 aa 02 	call	0x554	; 0x554 <_Z20eepromreadGPRSConfigv>
				prepareResponsePacket(UART_PC, CMD_GET_GPRS_CFG, (char*)&gprs_config_data.apn, APN_LEN + 1);
    1754:	21 e2       	ldi	r18, 0x21	; 33
    1756:	44 eb       	ldi	r20, 0xB4	; 180
    1758:	52 e1       	ldi	r21, 0x12	; 18
    175a:	67 e0       	ldi	r22, 0x07	; 7
    175c:	82 e0       	ldi	r24, 0x02	; 2
    175e:	90 e0       	ldi	r25, 0x00	; 0
    1760:	46 de       	rcall	.-884    	; 0x13ee <_Z21prepareResponsePacketi5cmd_tPch>
    1762:	f8 c3       	rjmp	.+2032   	; 0x1f54 <_Z8response5cmd_t+0x8f0>
			}
			else
			{
				resp[0] = ERROR_INVALID_SYS_STATE;
    1764:	82 ea       	ldi	r24, 0xA2	; 162
    1766:	89 83       	std	Y+1, r24	; 0x01
    1768:	f8 c3       	rjmp	.+2032   	; 0x1f5a <_Z8response5cmd_t+0x8f6>
			}
		break;
		
		case CMD_SET_GPRS_CFG:		//Anand 22-4-15
			if(getRtuState() == RTU_UART_CONFIG)
    176a:	0e 94 98 3a 	call	0x7530	; 0x7530 <_Z11getRtuStatev>
    176e:	82 30       	cpi	r24, 0x02	; 2
    1770:	69 f5       	brne	.+90     	; 0x17cc <_Z8response5cmd_t+0x168>
			{				
				int indx = DATA_INDX, i;
							
				memset(&gprs_config_data.apn, 0, sizeof(gprs_config_data.apn));
    1772:	80 e2       	ldi	r24, 0x20	; 32
    1774:	e4 eb       	ldi	r30, 0xB4	; 180
    1776:	f2 e1       	ldi	r31, 0x12	; 18
    1778:	df 01       	movw	r26, r30
    177a:	1d 92       	st	X+, r1
    177c:	8a 95       	dec	r24
    177e:	e9 f7       	brne	.-6      	; 0x177a <_Z8response5cmd_t+0x116>
				//
				for (i=0; Rx_Buff[UART_PC].rx_buffer[indx]!= '\0'; i++)		//Anand 22-4-15 / *i<* /
    1780:	80 91 fb 15 	lds	r24, 0x15FB	; 0x8015fb <Rx_Buff+0x8d>
    1784:	88 23       	and	r24, r24
    1786:	a9 f0       	breq	.+42     	; 0x17b2 <_Z8response5cmd_t+0x14e>
    1788:	83 e0       	ldi	r24, 0x03	; 3
    178a:	90 e0       	ldi	r25, 0x00	; 0
				{
					gprs_config_data.apn[i] = Rx_Buff[UART_PC].rx_buffer[indx++];
    178c:	9c 01       	movw	r18, r24
    178e:	2f 5f       	subi	r18, 0xFF	; 255
    1790:	3f 4f       	sbci	r19, 0xFF	; 255
    1792:	dc 01       	movw	r26, r24
    1794:	a8 50       	subi	r26, 0x08	; 8
    1796:	ba 4e       	sbci	r27, 0xEA	; 234
    1798:	4c 91       	ld	r20, X
    179a:	41 93       	st	Z+, r20
    179c:	ac 01       	movw	r20, r24
    179e:	42 50       	subi	r20, 0x02	; 2
    17a0:	51 09       	sbc	r21, r1
			{				
				int indx = DATA_INDX, i;
							
				memset(&gprs_config_data.apn, 0, sizeof(gprs_config_data.apn));
				//
				for (i=0; Rx_Buff[UART_PC].rx_buffer[indx]!= '\0'; i++)		//Anand 22-4-15 / *i<* /
    17a2:	d9 01       	movw	r26, r18
    17a4:	a8 50       	subi	r26, 0x08	; 8
    17a6:	ba 4e       	sbci	r27, 0xEA	; 234
    17a8:	6c 91       	ld	r22, X
				{
					gprs_config_data.apn[i] = Rx_Buff[UART_PC].rx_buffer[indx++];
    17aa:	c9 01       	movw	r24, r18
			{				
				int indx = DATA_INDX, i;
							
				memset(&gprs_config_data.apn, 0, sizeof(gprs_config_data.apn));
				//
				for (i=0; Rx_Buff[UART_PC].rx_buffer[indx]!= '\0'; i++)		//Anand 22-4-15 / *i<* /
    17ac:	61 11       	cpse	r22, r1
    17ae:	ee cf       	rjmp	.-36     	; 0x178c <_Z8response5cmd_t+0x128>
    17b0:	02 c0       	rjmp	.+4      	; 0x17b6 <_Z8response5cmd_t+0x152>
    17b2:	40 e0       	ldi	r20, 0x00	; 0
    17b4:	50 e0       	ldi	r21, 0x00	; 0
				{
					gprs_config_data.apn[i] = Rx_Buff[UART_PC].rx_buffer[indx++];
				}
				gprs_config_data.apn[i] = '\0';
    17b6:	fa 01       	movw	r30, r20
    17b8:	ec 56       	subi	r30, 0x6C	; 108
    17ba:	fd 4e       	sbci	r31, 0xED	; 237
    17bc:	10 a2       	std	Z+32, r1	; 0x20
				

				eepromWriteGPRSConfig(&gprs_config_data);			//Packet Updated, Now Update the E2P Data
    17be:	84 e9       	ldi	r24, 0x94	; 148
    17c0:	92 e1       	ldi	r25, 0x12	; 18
    17c2:	0e 94 68 02 	call	0x4d0	; 0x4d0 <_Z21eepromWriteGPRSConfigP18gprs_config_data_t>

				resp[0] = ACK;
    17c6:	81 e4       	ldi	r24, 0x41	; 65
    17c8:	89 83       	std	Y+1, r24	; 0x01
    17ca:	c7 c3       	rjmp	.+1934   	; 0x1f5a <_Z8response5cmd_t+0x8f6>
			}
			else
			{
				resp[0] = ERROR_INVALID_SYS_STATE;
    17cc:	82 ea       	ldi	r24, 0xA2	; 162
    17ce:	89 83       	std	Y+1, r24	; 0x01
    17d0:	c4 c3       	rjmp	.+1928   	; 0x1f5a <_Z8response5cmd_t+0x8f6>
			}
		break;
		case CMD_GET_PORT_ADDR :
			if(getRtuState() == RTU_UART_CONFIG)
    17d2:	0e 94 98 3a 	call	0x7530	; 0x7530 <_Z11getRtuStatev>
    17d6:	82 30       	cpi	r24, 0x02	; 2
    17d8:	61 f4       	brne	.+24     	; 0x17f2 <_Z8response5cmd_t+0x18e>
			{
				eepromreadGPRSConfig();
    17da:	0e 94 aa 02 	call	0x554	; 0x554 <_Z20eepromreadGPRSConfigv>
				prepareResponsePacket(UART_PC, CMD_GET_PORT_ADDR, (char*)&gprs_config_data.port_address, sizeof(gprs_config_data.port_address) + 1);
    17de:	23 e0       	ldi	r18, 0x03	; 3
    17e0:	44 ed       	ldi	r20, 0xD4	; 212
    17e2:	52 e1       	ldi	r21, 0x12	; 18
    17e4:	6b e0       	ldi	r22, 0x0B	; 11
    17e6:	82 e0       	ldi	r24, 0x02	; 2
    17e8:	90 e0       	ldi	r25, 0x00	; 0
    17ea:	01 de       	rcall	.-1022   	; 0x13ee <_Z21prepareResponsePacketi5cmd_tPch>
				

				resp[0] = ACK;
    17ec:	81 e4       	ldi	r24, 0x41	; 65
    17ee:	89 83       	std	Y+1, r24	; 0x01
    17f0:	b4 c3       	rjmp	.+1896   	; 0x1f5a <_Z8response5cmd_t+0x8f6>
			}
			else
			{
				resp[0] = ERROR_INVALID_SYS_STATE;
    17f2:	82 ea       	ldi	r24, 0xA2	; 162
    17f4:	89 83       	std	Y+1, r24	; 0x01
    17f6:	b1 c3       	rjmp	.+1890   	; 0x1f5a <_Z8response5cmd_t+0x8f6>
			}
		break;
		
		case CMD_SET_PORT_ADDR :
			if(getRtuState() == RTU_UART_CONFIG)
    17f8:	0e 94 98 3a 	call	0x7530	; 0x7530 <_Z11getRtuStatev>
    17fc:	82 30       	cpi	r24, 0x02	; 2
    17fe:	69 f4       	brne	.+26     	; 0x181a <_Z8response5cmd_t+0x1b6>
			{								
				gprs_config_data.port_address = 0;
				gprs_config_data.port_address = (unsigned int)Rx_Buff[UART_PC].rx_buffer[DATA_INDX];
    1800:	80 91 fb 15 	lds	r24, 0x15FB	; 0x8015fb <Rx_Buff+0x8d>
				gprs_config_data.port_address |= (unsigned int)Rx_Buff[UART_PC].rx_buffer[DATA_INDX + 1] << 8;
    1804:	20 91 fc 15 	lds	r18, 0x15FC	; 0x8015fc <Rx_Buff+0x8e>
    1808:	90 e0       	ldi	r25, 0x00	; 0
    180a:	92 2b       	or	r25, r18
    180c:	90 93 d5 12 	sts	0x12D5, r25	; 0x8012d5 <gprs_config_data+0x41>
    1810:	80 93 d4 12 	sts	0x12D4, r24	; 0x8012d4 <gprs_config_data+0x40>
					eepromWriteGPRSConfig(&gprs_config_data);	
				}
				
			

				resp[0] = ACK;
    1814:	81 e4       	ldi	r24, 0x41	; 65
    1816:	89 83       	std	Y+1, r24	; 0x01
    1818:	a0 c3       	rjmp	.+1856   	; 0x1f5a <_Z8response5cmd_t+0x8f6>
			}
			else
			{
				resp[0] = ERROR_INVALID_SYS_STATE;
    181a:	82 ea       	ldi	r24, 0xA2	; 162
    181c:	89 83       	std	Y+1, r24	; 0x01
    181e:	9d c3       	rjmp	.+1850   	; 0x1f5a <_Z8response5cmd_t+0x8f6>
			}
		break;
		

		case CMD_GET_CUM_DATA :
			if(getRtuState() == RTU_UART_CONFIG)
    1820:	0e 94 98 3a 	call	0x7530	; 0x7530 <_Z11getRtuStatev>
    1824:	82 30       	cpi	r24, 0x02	; 2
    1826:	21 f5       	brne	.+72     	; 0x1870 <_Z8response5cmd_t+0x20c>
			{
				// need to update with cumlative_struct with flash 12/12/2018 VC:
				FL_rtu_log_t temp_data;			//HJ 06-08-2016
				unsigned long addr = 0;
				unsigned long int temp_cum_data; 
				addr = flashGetCurrDataWriteAddr(RTU) - FL_RTU_LOG_LEN;
    1828:	80 e0       	ldi	r24, 0x00	; 0
    182a:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <_Z25flashGetCurrDataWriteAddrc>
    182e:	4b 01       	movw	r8, r22
    1830:	5c 01       	movw	r10, r24
				
				cli();
    1832:	f8 94       	cli
				WREN();
    1834:	0e 94 cc 15 	call	0x2b98	; 0x2b98 <_Z4WRENv>
				readContToBuff(addr, FL_RTU_LOG_LEN, (char *)&temp_data);
    1838:	c5 01       	movw	r24, r10
    183a:	b4 01       	movw	r22, r8
    183c:	60 52       	subi	r22, 0x20	; 32
    183e:	71 09       	sbc	r23, r1
    1840:	81 09       	sbc	r24, r1
    1842:	91 09       	sbc	r25, r1
    1844:	8e 01       	movw	r16, r28
    1846:	0c 5f       	subi	r16, 0xFC	; 252
    1848:	1f 4f       	sbci	r17, 0xFF	; 255
    184a:	20 e2       	ldi	r18, 0x20	; 32
    184c:	30 e0       	ldi	r19, 0x00	; 0
    184e:	40 e0       	ldi	r20, 0x00	; 0
    1850:	50 e0       	ldi	r21, 0x00	; 0
    1852:	0e 94 6c 16 	call	0x2cd8	; 0x2cd8 <_Z14readContToBuffmmPc>
				Wait_Busy();
    1856:	0e 94 dd 16 	call	0x2dba	; 0x2dba <_Z9Wait_Busyv>
				WRDI();				   // Write Disable
    185a:	0e 94 d1 15 	call	0x2ba2	; 0x2ba2 <_Z4WRDIv>
				sei();
    185e:	78 94       	sei
				
				temp_cum_data = temp_data.ram_data.cuml_reading;
				prepareResponsePacket(UART_PC, CMD_GET_CUM_DATA,(char *)temp_cum_data,sizeof(temp_data.ram_data.cuml_reading)+1);
    1860:	4b 89       	ldd	r20, Y+19	; 0x13
    1862:	5c 89       	ldd	r21, Y+20	; 0x14
    1864:	25 e0       	ldi	r18, 0x05	; 5
    1866:	6f e0       	ldi	r22, 0x0F	; 15
    1868:	82 e0       	ldi	r24, 0x02	; 2
    186a:	90 e0       	ldi	r25, 0x00	; 0
    186c:	c0 dd       	rcall	.-1152   	; 0x13ee <_Z21prepareResponsePacketi5cmd_tPch>
    186e:	72 c3       	rjmp	.+1764   	; 0x1f54 <_Z8response5cmd_t+0x8f0>

				
			}
			else
			{
				resp[0] = ERROR_INVALID_SYS_STATE;
    1870:	82 ea       	ldi	r24, 0xA2	; 162
    1872:	89 83       	std	Y+1, r24	; 0x01
    1874:	72 c3       	rjmp	.+1764   	; 0x1f5a <_Z8response5cmd_t+0x8f6>
			}
		break;
		case CMD_SET_CUM_DATA :
			if(getRtuState() == RTU_UART_CONFIG)
    1876:	0e 94 98 3a 	call	0x7530	; 0x7530 <_Z11getRtuStatev>
    187a:	82 30       	cpi	r24, 0x02	; 2
    187c:	19 f4       	brne	.+6      	; 0x1884 <_Z8response5cmd_t+0x220>
			{
			// need to update with cumlative_struct with flash 12/12/2018 VC:

				
				resp[0] = ACK;
    187e:	81 e4       	ldi	r24, 0x41	; 65
    1880:	89 83       	std	Y+1, r24	; 0x01
    1882:	6b c3       	rjmp	.+1750   	; 0x1f5a <_Z8response5cmd_t+0x8f6>
			}
			else
			{
				resp[0] = ERROR_INVALID_SYS_STATE;
    1884:	82 ea       	ldi	r24, 0xA2	; 162
    1886:	89 83       	std	Y+1, r24	; 0x01
    1888:	68 c3       	rjmp	.+1744   	; 0x1f5a <_Z8response5cmd_t+0x8f6>
			}
		break;
		case CMD_GET_CALIB_FACTOR :
			if(getRtuState() == RTU_UART_CONFIG)
    188a:	0e 94 98 3a 	call	0x7530	; 0x7530 <_Z11getRtuStatev>
    188e:	82 30       	cpi	r24, 0x02	; 2
    1890:	61 f4       	brne	.+24     	; 0x18aa <_Z8response5cmd_t+0x246>
			{
				eepromReadProductInfo();
    1892:	0e 94 20 03 	call	0x640	; 0x640 <_Z21eepromReadProductInfov>
				prepareResponsePacket(UART_PC, CMD_GET_CALIB_FACTOR, (char*)&product_info.ADC_offset, CALIB_FACTOR_LEN + 1);
    1896:	25 e0       	ldi	r18, 0x05	; 5
    1898:	42 e2       	ldi	r20, 0x22	; 34
    189a:	5b e0       	ldi	r21, 0x0B	; 11
    189c:	61 e1       	ldi	r22, 0x11	; 17
    189e:	82 e0       	ldi	r24, 0x02	; 2
    18a0:	90 e0       	ldi	r25, 0x00	; 0
    18a2:	a5 dd       	rcall	.-1206   	; 0x13ee <_Z21prepareResponsePacketi5cmd_tPch>

				resp[0] = ACK;
    18a4:	81 e4       	ldi	r24, 0x41	; 65
    18a6:	89 83       	std	Y+1, r24	; 0x01
    18a8:	58 c3       	rjmp	.+1712   	; 0x1f5a <_Z8response5cmd_t+0x8f6>
			}
			else
			{
				resp[0] = ERROR_INVALID_SYS_STATE;
    18aa:	82 ea       	ldi	r24, 0xA2	; 162
    18ac:	89 83       	std	Y+1, r24	; 0x01
    18ae:	55 c3       	rjmp	.+1706   	; 0x1f5a <_Z8response5cmd_t+0x8f6>
			}
		break;
		
		case CMD_SET_CALIB_FACTOR :
			if(getRtuState() == RTU_UART_CONFIG)
    18b0:	0e 94 98 3a 	call	0x7530	; 0x7530 <_Z11getRtuStatev>
    18b4:	82 30       	cpi	r24, 0x02	; 2
    18b6:	b9 f4       	brne	.+46     	; 0x18e6 <_Z8response5cmd_t+0x282>
			{
				unsigned long temp1,temp2;	
				temp1 = ((unsigned long)Rx_Buff[UART_PC].rx_buffer[DATA_INDX])|((unsigned long)Rx_Buff[UART_PC].rx_buffer[DATA_INDX + 1]<<8);
    18b8:	40 91 fb 15 	lds	r20, 0x15FB	; 0x8015fb <Rx_Buff+0x8d>
    18bc:	90 91 fc 15 	lds	r25, 0x15FC	; 0x8015fc <Rx_Buff+0x8e>
				temp2 = ((unsigned long)Rx_Buff[UART_PC].rx_buffer[DATA_INDX + 2])|((unsigned long)Rx_Buff[UART_PC].rx_buffer[DATA_INDX + 3]<<8);
    18c0:	80 91 fd 15 	lds	r24, 0x15FD	; 0x8015fd <Rx_Buff+0x8f>
    18c4:	20 91 fe 15 	lds	r18, 0x15FE	; 0x8015fe <Rx_Buff+0x90>
				
				product_info.ADC_offset = temp1;
    18c8:	ea e0       	ldi	r30, 0x0A	; 10
    18ca:	fb e0       	ldi	r31, 0x0B	; 11
    18cc:	50 e0       	ldi	r21, 0x00	; 0
    18ce:	59 2b       	or	r21, r25
    18d0:	51 8f       	std	Z+25, r21	; 0x19
    18d2:	40 8f       	std	Z+24, r20	; 0x18
				product_info.calib_factor = temp2;
    18d4:	90 e0       	ldi	r25, 0x00	; 0
    18d6:	92 2b       	or	r25, r18
    18d8:	93 8f       	std	Z+27, r25	; 0x1b
    18da:	82 8f       	std	Z+26, r24	; 0x1a
				eepromWriteProductInfo();	
    18dc:	0e 94 0e 03 	call	0x61c	; 0x61c <_Z22eepromWriteProductInfov>



				resp[0] = ACK;
    18e0:	81 e4       	ldi	r24, 0x41	; 65
    18e2:	89 83       	std	Y+1, r24	; 0x01
    18e4:	3a c3       	rjmp	.+1652   	; 0x1f5a <_Z8response5cmd_t+0x8f6>
			}
			else
			{
				resp[0] = ERROR_INVALID_SYS_STATE;
    18e6:	82 ea       	ldi	r24, 0xA2	; 162
    18e8:	89 83       	std	Y+1, r24	; 0x01
    18ea:	37 c3       	rjmp	.+1646   	; 0x1f5a <_Z8response5cmd_t+0x8f6>
			}
		break;
		case CMD_GET_DATA_LOG :
			if(getRtuState() == RTU_UART_CONFIG)
    18ec:	0e 94 98 3a 	call	0x7530	; 0x7530 <_Z11getRtuStatev>
    18f0:	82 30       	cpi	r24, 0x02	; 2
    18f2:	09 f0       	breq	.+2      	; 0x18f6 <_Z8response5cmd_t+0x292>
    18f4:	65 c0       	rjmp	.+202    	; 0x19c0 <_Z8response5cmd_t+0x35c>
			{
				
				unsigned long num_of_records = ((flashGetCurrDataWriteAddr(RTU) - flashGetCurrUploadAddr(RTU))/FL_RTU_LOG_LEN);
    18f6:	80 e0       	ldi	r24, 0x00	; 0
    18f8:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <_Z25flashGetCurrDataWriteAddrc>
    18fc:	4b 01       	movw	r8, r22
    18fe:	5c 01       	movw	r10, r24
    1900:	80 e0       	ldi	r24, 0x00	; 0
    1902:	0e 94 c7 16 	call	0x2d8e	; 0x2d8e <_Z22flashGetCurrUploadAddrc>
    1906:	86 1a       	sub	r8, r22
    1908:	97 0a       	sbc	r9, r23
    190a:	a8 0a       	sbc	r10, r24
    190c:	b9 0a       	sbc	r11, r25
    190e:	68 94       	set
    1910:	14 f8       	bld	r1, 4
    1912:	b6 94       	lsr	r11
    1914:	a7 94       	ror	r10
    1916:	97 94       	ror	r9
    1918:	87 94       	ror	r8
    191a:	16 94       	lsr	r1
    191c:	d1 f7       	brne	.-12     	; 0x1912 <_Z8response5cmd_t+0x2ae>
				

				if(flashGetCurrUploadAddr(RTU) > flashGetCurrDataWriteAddr(RTU))
    191e:	80 e0       	ldi	r24, 0x00	; 0
    1920:	0e 94 c7 16 	call	0x2d8e	; 0x2d8e <_Z22flashGetCurrUploadAddrc>
    1924:	2b 01       	movw	r4, r22
    1926:	3c 01       	movw	r6, r24
    1928:	80 e0       	ldi	r24, 0x00	; 0
    192a:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <_Z25flashGetCurrDataWriteAddrc>
    192e:	64 15       	cp	r22, r4
    1930:	75 05       	cpc	r23, r5
    1932:	86 05       	cpc	r24, r6
    1934:	97 05       	cpc	r25, r7
    1936:	d8 f4       	brcc	.+54     	; 0x196e <_Z8response5cmd_t+0x30a>
				{
					num_of_records = ((( FL_RTU_MAX_ADDR - flashGetCurrUploadAddr(RTU) ) + (flashGetCurrDataWriteAddr(RTU) - FL_RTU_START_ADDR))/FL_RTU_LOG_LEN);
    1938:	80 e0       	ldi	r24, 0x00	; 0
    193a:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <_Z25flashGetCurrDataWriteAddrc>
    193e:	4b 01       	movw	r8, r22
    1940:	5c 01       	movw	r10, r24
    1942:	80 e0       	ldi	r24, 0x00	; 0
    1944:	0e 94 c7 16 	call	0x2d8e	; 0x2d8e <_Z22flashGetCurrUploadAddrc>
    1948:	b0 e2       	ldi	r27, 0x20	; 32
    194a:	8b 1a       	sub	r8, r27
    194c:	91 08       	sbc	r9, r1
    194e:	b0 ee       	ldi	r27, 0xE0	; 224
    1950:	ab 0a       	sbc	r10, r27
    1952:	bf ef       	ldi	r27, 0xFF	; 255
    1954:	bb 0a       	sbc	r11, r27
    1956:	86 1a       	sub	r8, r22
    1958:	97 0a       	sbc	r9, r23
    195a:	a8 0a       	sbc	r10, r24
    195c:	b9 0a       	sbc	r11, r25
    195e:	68 94       	set
    1960:	14 f8       	bld	r1, 4
    1962:	b6 94       	lsr	r11
    1964:	a7 94       	ror	r10
    1966:	97 94       	ror	r9
    1968:	87 94       	ror	r8
    196a:	16 94       	lsr	r1
    196c:	d1 f7       	brne	.-12     	; 0x1962 <_Z8response5cmd_t+0x2fe>
				}

				if(Rx_Buff[UART_PC].rx_buffer[CMD_INDX + 1] == ACK)
    196e:	80 91 fb 15 	lds	r24, 0x15FB	; 0x8015fb <Rx_Buff+0x8d>
    1972:	81 34       	cpi	r24, 0x41	; 65
    1974:	91 f4       	brne	.+36     	; 0x199a <_Z8response5cmd_t+0x336>
				{
					Tx_Buff[UART_PC].wait_for_ack = FALSE;
    1976:	10 92 6d 15 	sts	0x156D, r1	; 0x80156d <Tx_Buff+0xda>
					Tx_Buff[UART_PC].pending_command = cmd;
    197a:	83 e1       	ldi	r24, 0x13	; 19
    197c:	80 93 68 15 	sts	0x1568, r24	; 0x801568 <Tx_Buff+0xd5>
					Tx_Buff[UART_PC].curr_pck_num = 1;
    1980:	81 e0       	ldi	r24, 0x01	; 1
    1982:	90 e0       	ldi	r25, 0x00	; 0
    1984:	a0 e0       	ldi	r26, 0x00	; 0
    1986:	b0 e0       	ldi	r27, 0x00	; 0
    1988:	80 93 69 15 	sts	0x1569, r24	; 0x801569 <Tx_Buff+0xd6>
    198c:	90 93 6a 15 	sts	0x156A, r25	; 0x80156a <Tx_Buff+0xd7>
    1990:	a0 93 6b 15 	sts	0x156B, r26	; 0x80156b <Tx_Buff+0xd8>
    1994:	b0 93 6c 15 	sts	0x156C, r27	; 0x80156c <Tx_Buff+0xd9>
    1998:	dd c2       	rjmp	.+1466   	; 0x1f54 <_Z8response5cmd_t+0x8f0>

				}
				else
				{
					if(num_of_records)		//Anand 09.07.2014
    199a:	81 14       	cp	r8, r1
    199c:	91 04       	cpc	r9, r1
    199e:	a1 04       	cpc	r10, r1
    19a0:	b1 04       	cpc	r11, r1
    19a2:	19 f0       	breq	.+6      	; 0x19aa <_Z8response5cmd_t+0x346>
					Tx_Buff[UART_PC].wait_for_ack = TRUE;
    19a4:	81 e0       	ldi	r24, 0x01	; 1
    19a6:	80 93 6d 15 	sts	0x156D, r24	; 0x80156d <Tx_Buff+0xda>

					resp[0] = num_of_records & 0xff;		//Anand 24.05.2014
    19aa:	89 82       	std	Y+1, r8	; 0x01
					resp[1] = (num_of_records>>8) & 0xff;
    19ac:	9a 82       	std	Y+2, r9	; 0x02
					prepareResponsePacket(UART_PC, CMD_GET_DATA_LOG, resp, 3);		//Anand 21.05.2014
    19ae:	23 e0       	ldi	r18, 0x03	; 3
    19b0:	ae 01       	movw	r20, r28
    19b2:	4f 5f       	subi	r20, 0xFF	; 255
    19b4:	5f 4f       	sbci	r21, 0xFF	; 255
    19b6:	63 e1       	ldi	r22, 0x13	; 19
    19b8:	82 e0       	ldi	r24, 0x02	; 2
    19ba:	90 e0       	ldi	r25, 0x00	; 0
    19bc:	18 dd       	rcall	.-1488   	; 0x13ee <_Z21prepareResponsePacketi5cmd_tPch>
    19be:	ca c2       	rjmp	.+1428   	; 0x1f54 <_Z8response5cmd_t+0x8f0>


			}
			else
			{
				resp[0] = ERROR_INVALID_SYS_STATE;
    19c0:	82 ea       	ldi	r24, 0xA2	; 162
    19c2:	89 83       	std	Y+1, r24	; 0x01
    19c4:	ca c2       	rjmp	.+1428   	; 0x1f5a <_Z8response5cmd_t+0x8f6>
			}
		break;
		case CMD_CLEAR_DATA_LOG : // clear
			if(getRtuState() == RTU_UART_CONFIG)
    19c6:	0e 94 98 3a 	call	0x7530	; 0x7530 <_Z11getRtuStatev>
    19ca:	82 30       	cpi	r24, 0x02	; 2
    19cc:	a1 f4       	brne	.+40     	; 0x19f6 <_Z8response5cmd_t+0x392>
			{
#ifdef FLASH_LOG_DATA
				freq_updated_data.cnt = 0;
    19ce:	e3 e3       	ldi	r30, 0x33	; 51
    19d0:	f3 e1       	ldi	r31, 0x13	; 19
    19d2:	10 82       	st	Z, r1
				freq_updated_data.unsent_rtu_logs_GPRS = 0;
    19d4:	12 82       	std	Z+2, r1	; 0x02
    19d6:	11 82       	std	Z+1, r1	; 0x01
				FL_rtu_log.transaction_id_MSB_rtu_log = 0;
    19d8:	ed e7       	ldi	r30, 0x7D	; 125
    19da:	f3 e1       	ldi	r31, 0x13	; 19
				FL_rtu_log.transaction_id_rtu_log = 0;
    19dc:	12 82       	std	Z+2, r1	; 0x02
    19de:	11 82       	std	Z+1, r1	; 0x01

				flashClearFreqUpdatedConfig();
    19e0:	10 82       	st	Z, r1
    19e2:	0e 94 78 1a 	call	0x34f0	; 0x34f0 <_Z27flashClearFreqUpdatedConfigv>

				flashClrTransID();
    19e6:	0e 94 12 1a 	call	0x3424	; 0x3424 <_Z15flashClrTransIDv>
				clear_logs();
    19ea:	35 de       	rcall	.-918    	; 0x1656 <_Z10clear_logsv>
#else	//FLASH_LOG_DATA
				clear_e2p_log();
				
#endif	//FLASH_LOG_DATA
				clear_ram_logs();
    19ec:	0e 94 3a 3f 	call	0x7e74	; 0x7e74 <_Z14clear_ram_logsv>
				

				resp[0] = ACK;
    19f0:	81 e4       	ldi	r24, 0x41	; 65
    19f2:	89 83       	std	Y+1, r24	; 0x01
    19f4:	b2 c2       	rjmp	.+1380   	; 0x1f5a <_Z8response5cmd_t+0x8f6>
			}
			else
			{
				resp[0] = ERROR_INVALID_SYS_STATE;
    19f6:	82 ea       	ldi	r24, 0xA2	; 162
    19f8:	89 83       	std	Y+1, r24	; 0x01
    19fa:	af c2       	rjmp	.+1374   	; 0x1f5a <_Z8response5cmd_t+0x8f6>
			}
		break;
		case CMD_GET_KWH :
			if(getRtuState() == RTU_UART_CONFIG)
    19fc:	0e 94 98 3a 	call	0x7530	; 0x7530 <_Z11getRtuStatev>
    1a00:	82 30       	cpi	r24, 0x02	; 2
			{
				
				/*eepromReadEmInfo();*/
				prepareResponsePacket(UART_PC, CMD_GET_KWH, (char*)&em_data.kwh_offset, sizeof(em_data.kwh_offset) + 1);
    1a02:	51 f4       	brne	.+20     	; 0x1a18 <_Z8response5cmd_t+0x3b4>
    1a04:	25 e0       	ldi	r18, 0x05	; 5
    1a06:	49 e2       	ldi	r20, 0x29	; 41
    1a08:	53 e1       	ldi	r21, 0x13	; 19
    1a0a:	65 e1       	ldi	r22, 0x15	; 21
    1a0c:	82 e0       	ldi	r24, 0x02	; 2
    1a0e:	90 e0       	ldi	r25, 0x00	; 0
    1a10:	ee dc       	rcall	.-1572   	; 0x13ee <_Z21prepareResponsePacketi5cmd_tPch>

				resp[0] = ACK;
    1a12:	81 e4       	ldi	r24, 0x41	; 65
    1a14:	89 83       	std	Y+1, r24	; 0x01
    1a16:	a1 c2       	rjmp	.+1346   	; 0x1f5a <_Z8response5cmd_t+0x8f6>
			}
			else
			{
				resp[0] = ERROR_INVALID_SYS_STATE;
    1a18:	82 ea       	ldi	r24, 0xA2	; 162
    1a1a:	89 83       	std	Y+1, r24	; 0x01
    1a1c:	9e c2       	rjmp	.+1340   	; 0x1f5a <_Z8response5cmd_t+0x8f6>
			}
		break;
		
		case CMD_SET_KWH :
			if(getRtuState() == RTU_UART_CONFIG)
    1a1e:	0e 94 98 3a 	call	0x7530	; 0x7530 <_Z11getRtuStatev>
    1a22:	82 30       	cpi	r24, 0x02	; 2
    1a24:	e1 f4       	brne	.+56     	; 0x1a5e <_Z8response5cmd_t+0x3fa>
			{
				em_data.kwh_offset = 0;
				em_data.kwh_offset = (unsigned long)Rx_Buff[UART_PC].rx_buffer[DATA_INDX];
    1a26:	30 91 fb 15 	lds	r19, 0x15FB	; 0x8015fb <Rx_Buff+0x8d>
				em_data.kwh_offset |= (unsigned long)Rx_Buff[UART_PC].rx_buffer[DATA_INDX + 1]<<8;
    1a2a:	40 91 fc 15 	lds	r20, 0x15FC	; 0x8015fc <Rx_Buff+0x8e>
				em_data.kwh_offset |= (unsigned long)Rx_Buff[UART_PC].rx_buffer[DATA_INDX + 2]<<16;
    1a2e:	80 91 fd 15 	lds	r24, 0x15FD	; 0x8015fd <Rx_Buff+0x8f>
				em_data.kwh_offset |= (unsigned long)Rx_Buff[UART_PC].rx_buffer[DATA_INDX + 3]<<24;
    1a32:	20 91 fe 15 	lds	r18, 0x15FE	; 0x8015fe <Rx_Buff+0x90>
    1a36:	90 e0       	ldi	r25, 0x00	; 0
    1a38:	a0 e0       	ldi	r26, 0x00	; 0
    1a3a:	b0 e0       	ldi	r27, 0x00	; 0
    1a3c:	dc 01       	movw	r26, r24
    1a3e:	99 27       	eor	r25, r25
    1a40:	88 27       	eor	r24, r24
    1a42:	94 2b       	or	r25, r20
    1a44:	83 2b       	or	r24, r19
    1a46:	b2 2b       	or	r27, r18
    1a48:	80 93 29 13 	sts	0x1329, r24	; 0x801329 <em_data>
    1a4c:	90 93 2a 13 	sts	0x132A, r25	; 0x80132a <em_data+0x1>
    1a50:	a0 93 2b 13 	sts	0x132B, r26	; 0x80132b <em_data+0x2>
    1a54:	b0 93 2c 13 	sts	0x132C, r27	; 0x80132c <em_data+0x3>
				
			

				resp[0] = ACK;
    1a58:	81 e4       	ldi	r24, 0x41	; 65
    1a5a:	89 83       	std	Y+1, r24	; 0x01
    1a5c:	7e c2       	rjmp	.+1276   	; 0x1f5a <_Z8response5cmd_t+0x8f6>
			}
			else
			{
				resp[0] = ERROR_INVALID_SYS_STATE;
    1a5e:	82 ea       	ldi	r24, 0xA2	; 162
    1a60:	89 83       	std	Y+1, r24	; 0x01
    1a62:	7b c2       	rjmp	.+1270   	; 0x1f5a <_Z8response5cmd_t+0x8f6>
			}
		break;
		
		case CMD_GET_KWAH :
			if(getRtuState() == RTU_UART_CONFIG)
    1a64:	0e 94 98 3a 	call	0x7530	; 0x7530 <_Z11getRtuStatev>
    1a68:	82 30       	cpi	r24, 0x02	; 2
			{
				
				prepareResponsePacket(UART_PC, CMD_GET_KWAH, (char*)&em_data.kwah_offset, sizeof(em_data.kwah_offset) + 1);
    1a6a:	51 f4       	brne	.+20     	; 0x1a80 <_Z8response5cmd_t+0x41c>
    1a6c:	25 e0       	ldi	r18, 0x05	; 5
    1a6e:	4d e2       	ldi	r20, 0x2D	; 45
    1a70:	53 e1       	ldi	r21, 0x13	; 19
    1a72:	67 e1       	ldi	r22, 0x17	; 23
    1a74:	82 e0       	ldi	r24, 0x02	; 2
    1a76:	90 e0       	ldi	r25, 0x00	; 0
    1a78:	ba dc       	rcall	.-1676   	; 0x13ee <_Z21prepareResponsePacketi5cmd_tPch>
				

				resp[0] = ACK;
    1a7a:	81 e4       	ldi	r24, 0x41	; 65
    1a7c:	89 83       	std	Y+1, r24	; 0x01
    1a7e:	6d c2       	rjmp	.+1242   	; 0x1f5a <_Z8response5cmd_t+0x8f6>
			}
			else
			{
				resp[0] = ERROR_INVALID_SYS_STATE;
    1a80:	82 ea       	ldi	r24, 0xA2	; 162
    1a82:	89 83       	std	Y+1, r24	; 0x01
    1a84:	6a c2       	rjmp	.+1236   	; 0x1f5a <_Z8response5cmd_t+0x8f6>
			}
		break;
		
		case CMD_SET_KWAH :
			if(getRtuState() == RTU_UART_CONFIG)
    1a86:	0e 94 98 3a 	call	0x7530	; 0x7530 <_Z11getRtuStatev>
    1a8a:	82 30       	cpi	r24, 0x02	; 2
    1a8c:	e1 f4       	brne	.+56     	; 0x1ac6 <_Z8response5cmd_t+0x462>
			{
				em_data.kwah_offset = 0;
				em_data.kwah_offset = Rx_Buff[UART_PC].rx_buffer[DATA_INDX];
    1a8e:	30 91 fb 15 	lds	r19, 0x15FB	; 0x8015fb <Rx_Buff+0x8d>
				em_data.kwah_offset |= (unsigned long)Rx_Buff[UART_PC].rx_buffer[DATA_INDX + 1] << 8;
    1a92:	40 91 fc 15 	lds	r20, 0x15FC	; 0x8015fc <Rx_Buff+0x8e>
				em_data.kwah_offset |= (unsigned long)Rx_Buff[UART_PC].rx_buffer[DATA_INDX + 2] << 16;
    1a96:	80 91 fd 15 	lds	r24, 0x15FD	; 0x8015fd <Rx_Buff+0x8f>
				em_data.kwah_offset |= (unsigned long)Rx_Buff[UART_PC].rx_buffer[DATA_INDX + 3] << 24;
    1a9a:	20 91 fe 15 	lds	r18, 0x15FE	; 0x8015fe <Rx_Buff+0x90>
    1a9e:	90 e0       	ldi	r25, 0x00	; 0
    1aa0:	a0 e0       	ldi	r26, 0x00	; 0
    1aa2:	b0 e0       	ldi	r27, 0x00	; 0
    1aa4:	dc 01       	movw	r26, r24
    1aa6:	99 27       	eor	r25, r25
    1aa8:	88 27       	eor	r24, r24
    1aaa:	94 2b       	or	r25, r20
    1aac:	83 2b       	or	r24, r19
    1aae:	b2 2b       	or	r27, r18
    1ab0:	80 93 2d 13 	sts	0x132D, r24	; 0x80132d <em_data+0x4>
    1ab4:	90 93 2e 13 	sts	0x132E, r25	; 0x80132e <em_data+0x5>
    1ab8:	a0 93 2f 13 	sts	0x132F, r26	; 0x80132f <em_data+0x6>
    1abc:	b0 93 30 13 	sts	0x1330, r27	; 0x801330 <em_data+0x7>
				
			

				resp[0] = ACK;
    1ac0:	81 e4       	ldi	r24, 0x41	; 65
    1ac2:	89 83       	std	Y+1, r24	; 0x01
    1ac4:	4a c2       	rjmp	.+1172   	; 0x1f5a <_Z8response5cmd_t+0x8f6>
			}
			else
			{
				resp[0] = ERROR_INVALID_SYS_STATE;
    1ac6:	82 ea       	ldi	r24, 0xA2	; 162
    1ac8:	89 83       	std	Y+1, r24	; 0x01
    1aca:	47 c2       	rjmp	.+1166   	; 0x1f5a <_Z8response5cmd_t+0x8f6>
			}
		break;
		case CMD_GET_CALIBRATION :
			if(getRtuState() == RTU_UART_CONFIG)
    1acc:	0e 94 98 3a 	call	0x7530	; 0x7530 <_Z11getRtuStatev>
    1ad0:	82 30       	cpi	r24, 0x02	; 2
    1ad2:	41 f5       	brne	.+80     	; 0x1b24 <_Z8response5cmd_t+0x4c0>
			{
				unsigned char cal_cmd = Rx_Buff[UART_PC].rx_buffer[CMD_INDX + 1];
    1ad4:	80 91 fb 15 	lds	r24, 0x15FB	; 0x8015fb <Rx_Buff+0x8d>
				switch(cal_cmd)
    1ad8:	81 30       	cpi	r24, 0x01	; 1
    1ada:	71 f0       	breq	.+28     	; 0x1af8 <_Z8response5cmd_t+0x494>
    1adc:	18 f0       	brcs	.+6      	; 0x1ae4 <_Z8response5cmd_t+0x480>
    1ade:	82 30       	cpi	r24, 0x02	; 2
    1ae0:	a9 f0       	breq	.+42     	; 0x1b0c <_Z8response5cmd_t+0x4a8>
				{
					case CAL_FLOW:
						eepromReadCalData();
    1ae2:	1d c0       	rjmp	.+58     	; 0x1b1e <_Z8response5cmd_t+0x4ba>
    1ae4:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <_Z17eepromReadCalDatav>
						prepareResponsePacket(UART_PC, CMD_GET_CALIBRATION, (char*)&calbration_data.cal_data_flow1, sizeof(calbration_data.cal_data_flow1) + 1);
    1ae8:	23 e0       	ldi	r18, 0x03	; 3
    1aea:	45 e4       	ldi	r20, 0x45	; 69
    1aec:	54 e1       	ldi	r21, 0x14	; 20
    1aee:	63 e0       	ldi	r22, 0x03	; 3
    1af0:	82 e0       	ldi	r24, 0x02	; 2
    1af2:	90 e0       	ldi	r25, 0x00	; 0
					break;
    1af4:	7c dc       	rcall	.-1800   	; 0x13ee <_Z21prepareResponsePacketi5cmd_tPch>
					case CAL_PRESSURE:
						eepromReadCalData();
    1af6:	13 c0       	rjmp	.+38     	; 0x1b1e <_Z8response5cmd_t+0x4ba>
    1af8:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <_Z17eepromReadCalDatav>
						prepareResponsePacket(UART_PC, CMD_GET_CALIBRATION, (char*)&calbration_data.cal_data_pressure1, sizeof(calbration_data.cal_data_pressure1) + 1);
    1afc:	23 e0       	ldi	r18, 0x03	; 3
    1afe:	49 e4       	ldi	r20, 0x49	; 73
    1b00:	54 e1       	ldi	r21, 0x14	; 20
    1b02:	63 e0       	ldi	r22, 0x03	; 3
    1b04:	82 e0       	ldi	r24, 0x02	; 2
    1b06:	90 e0       	ldi	r25, 0x00	; 0
					break;
    1b08:	72 dc       	rcall	.-1820   	; 0x13ee <_Z21prepareResponsePacketi5cmd_tPch>
					case CAL_LVL:
						eepromReadCalData();
    1b0a:	09 c0       	rjmp	.+18     	; 0x1b1e <_Z8response5cmd_t+0x4ba>
    1b0c:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <_Z17eepromReadCalDatav>
						prepareResponsePacket(UART_PC, CMD_GET_CALIBRATION, (char*)&calbration_data.cal_data_lvl1, sizeof(calbration_data.cal_data_lvl1) + 1);
    1b10:	23 e0       	ldi	r18, 0x03	; 3
    1b12:	4d e4       	ldi	r20, 0x4D	; 77
    1b14:	54 e1       	ldi	r21, 0x14	; 20
    1b16:	63 e0       	ldi	r22, 0x03	; 3
    1b18:	82 e0       	ldi	r24, 0x02	; 2
    1b1a:	90 e0       	ldi	r25, 0x00	; 0
    1b1c:	68 dc       	rcall	.-1840   	; 0x13ee <_Z21prepareResponsePacketi5cmd_tPch>
					
					default:
					break;		
				}

				resp[0] = ACK;
    1b1e:	81 e4       	ldi	r24, 0x41	; 65
    1b20:	89 83       	std	Y+1, r24	; 0x01
    1b22:	1b c2       	rjmp	.+1078   	; 0x1f5a <_Z8response5cmd_t+0x8f6>
			}
			else
			{
				resp[0] = ERROR_INVALID_SYS_STATE;
    1b24:	82 ea       	ldi	r24, 0xA2	; 162
    1b26:	89 83       	std	Y+1, r24	; 0x01
    1b28:	18 c2       	rjmp	.+1072   	; 0x1f5a <_Z8response5cmd_t+0x8f6>
			}
		break;
		case CMD_SET_CALIBRATION :
			if(getRtuState() == RTU_UART_CONFIG)
    1b2a:	0e 94 98 3a 	call	0x7530	; 0x7530 <_Z11getRtuStatev>
    1b2e:	82 30       	cpi	r24, 0x02	; 2
    1b30:	89 f5       	brne	.+98     	; 0x1b94 <_Z8response5cmd_t+0x530>
			{
				unsigned char cal_cmd = Rx_Buff[UART_PC].rx_buffer[CMD_INDX + 1];
    1b32:	80 91 fb 15 	lds	r24, 0x15FB	; 0x8015fb <Rx_Buff+0x8d>
				switch(cal_cmd)
    1b36:	81 30       	cpi	r24, 0x01	; 1
    1b38:	89 f0       	breq	.+34     	; 0x1b5c <_Z8response5cmd_t+0x4f8>
    1b3a:	18 f0       	brcs	.+6      	; 0x1b42 <_Z8response5cmd_t+0x4de>
    1b3c:	82 30       	cpi	r24, 0x02	; 2
    1b3e:	d9 f0       	breq	.+54     	; 0x1b76 <_Z8response5cmd_t+0x512>
    1b40:	26 c0       	rjmp	.+76     	; 0x1b8e <_Z8response5cmd_t+0x52a>
				{
					case CAL_FLOW: 
						calbration_data.cal_data_flow1 = (unsigned int)Rx_Buff[UART_PC].rx_buffer[DATA_INDX + 1];
    1b42:	80 91 fc 15 	lds	r24, 0x15FC	; 0x8015fc <Rx_Buff+0x8e>
						calbration_data.cal_data_flow1 |= (unsigned int)Rx_Buff[UART_PC].rx_buffer[DATA_INDX + 2] << 8;
    1b46:	20 91 fd 15 	lds	r18, 0x15FD	; 0x8015fd <Rx_Buff+0x8f>
    1b4a:	90 e0       	ldi	r25, 0x00	; 0
    1b4c:	92 2b       	or	r25, r18
    1b4e:	90 93 46 14 	sts	0x1446, r25	; 0x801446 <calbration_data+0x1>
    1b52:	80 93 45 14 	sts	0x1445, r24	; 0x801445 <calbration_data>
						
						eepromWriteCalData();
    1b56:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <_Z18eepromWriteCalDatav>
					break;
    1b5a:	19 c0       	rjmp	.+50     	; 0x1b8e <_Z8response5cmd_t+0x52a>
					case CAL_PRESSURE:
						calbration_data.cal_data_pressure1 = (unsigned int)Rx_Buff[UART_PC].rx_buffer[DATA_INDX + 1];
    1b5c:	80 91 fc 15 	lds	r24, 0x15FC	; 0x8015fc <Rx_Buff+0x8e>
						calbration_data.cal_data_pressure1 |= (unsigned int)Rx_Buff[UART_PC].rx_buffer[DATA_INDX + 2] << 8;
    1b60:	20 91 fd 15 	lds	r18, 0x15FD	; 0x8015fd <Rx_Buff+0x8f>
    1b64:	90 e0       	ldi	r25, 0x00	; 0
    1b66:	92 2b       	or	r25, r18
    1b68:	90 93 4a 14 	sts	0x144A, r25	; 0x80144a <calbration_data+0x5>
    1b6c:	80 93 49 14 	sts	0x1449, r24	; 0x801449 <calbration_data+0x4>
						
						eepromWriteCalData();
    1b70:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <_Z18eepromWriteCalDatav>
					break;
    1b74:	0c c0       	rjmp	.+24     	; 0x1b8e <_Z8response5cmd_t+0x52a>
					case CAL_LVL:
						calbration_data.cal_data_lvl1 = (unsigned int)Rx_Buff[UART_PC].rx_buffer[DATA_INDX + 1];
    1b76:	80 91 fc 15 	lds	r24, 0x15FC	; 0x8015fc <Rx_Buff+0x8e>
						calbration_data.cal_data_lvl1 |= (unsigned int)Rx_Buff[UART_PC].rx_buffer[DATA_INDX + 2] << 8;
    1b7a:	20 91 fd 15 	lds	r18, 0x15FD	; 0x8015fd <Rx_Buff+0x8f>
    1b7e:	90 e0       	ldi	r25, 0x00	; 0
    1b80:	92 2b       	or	r25, r18
    1b82:	90 93 4e 14 	sts	0x144E, r25	; 0x80144e <calbration_data+0x9>
    1b86:	80 93 4d 14 	sts	0x144D, r24	; 0x80144d <calbration_data+0x8>
					
						eepromWriteCalData();
    1b8a:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <_Z18eepromWriteCalDatav>
					default:
					break;
				}	
					

				resp[0] = ACK;
    1b8e:	81 e4       	ldi	r24, 0x41	; 65
    1b90:	89 83       	std	Y+1, r24	; 0x01
    1b92:	e3 c1       	rjmp	.+966    	; 0x1f5a <_Z8response5cmd_t+0x8f6>
			}
			else
			{
				resp[0] = ERROR_INVALID_SYS_STATE;
    1b94:	82 ea       	ldi	r24, 0xA2	; 162
    1b96:	89 83       	std	Y+1, r24	; 0x01
    1b98:	e0 c1       	rjmp	.+960    	; 0x1f5a <_Z8response5cmd_t+0x8f6>
			}
		break;
#endif
		case CMD_GET_SIM_NUM:
			if(getRtuState() == RTU_UART_CONFIG)
    1b9a:	0e 94 98 3a 	call	0x7530	; 0x7530 <_Z11getRtuStatev>
    1b9e:	82 30       	cpi	r24, 0x02	; 2
    1ba0:	09 f4       	brne	.+2      	; 0x1ba4 <_Z8response5cmd_t+0x540>
    1ba2:	d8 c1       	rjmp	.+944    	; 0x1f54 <_Z8response5cmd_t+0x8f0>
			{
				
			}
			else
			{
				resp[0] = ERROR_INVALID_SYS_STATE;
    1ba4:	82 ea       	ldi	r24, 0xA2	; 162
    1ba6:	89 83       	std	Y+1, r24	; 0x01
    1ba8:	d8 c1       	rjmp	.+944    	; 0x1f5a <_Z8response5cmd_t+0x8f6>
			}
		break;
		case CMD_SET_SIM_NUM:
			if(getRtuState() == RTU_UART_CONFIG)
    1baa:	0e 94 98 3a 	call	0x7530	; 0x7530 <_Z11getRtuStatev>
    1bae:	82 30       	cpi	r24, 0x02	; 2
    1bb0:	09 f4       	brne	.+2      	; 0x1bb4 <_Z8response5cmd_t+0x550>
    1bb2:	d0 c1       	rjmp	.+928    	; 0x1f54 <_Z8response5cmd_t+0x8f0>
				}
				
			}
			else
			{
				resp[0] = ERROR_INVALID_SYS_STATE;
    1bb4:	82 ea       	ldi	r24, 0xA2	; 162
    1bb6:	89 83       	std	Y+1, r24	; 0x01
    1bb8:	d0 c1       	rjmp	.+928    	; 0x1f5a <_Z8response5cmd_t+0x8f6>
		break;
			
		
		case CMD_REPET_SEND_DATA_LOGS :
			unsigned long pck_num;
			if(getRtuState() == RTU_UART_CONFIG)
    1bba:	0e 94 98 3a 	call	0x7530	; 0x7530 <_Z11getRtuStatev>
    1bbe:	82 30       	cpi	r24, 0x02	; 2
    1bc0:	09 f0       	breq	.+2      	; 0x1bc4 <_Z8response5cmd_t+0x560>
    1bc2:	71 c0       	rjmp	.+226    	; 0x1ca6 <_Z8response5cmd_t+0x642>
			{
				pck_num = Rx_Buff[UART_PC].rx_buffer[CMD_INDX + 1];
    1bc4:	20 91 fb 15 	lds	r18, 0x15FB	; 0x8015fb <Rx_Buff+0x8d>
				pck_num += (((unsigned long)Rx_Buff[UART_PC].rx_buffer[CMD_INDX + 2])<<8);		//Anand 06-07-15
    1bc8:	80 90 fc 15 	lds	r8, 0x15FC	; 0x8015fc <Rx_Buff+0x8e>
				pck_num += (((unsigned long)Rx_Buff[UART_PC].rx_buffer[CMD_INDX + 3])<<16);		//Anand 06-07-15
    1bcc:	80 91 fd 15 	lds	r24, 0x15FD	; 0x8015fd <Rx_Buff+0x8f>
    1bd0:	91 2c       	mov	r9, r1
    1bd2:	a1 2c       	mov	r10, r1
    1bd4:	b1 2c       	mov	r11, r1
    1bd6:	ba 2c       	mov	r11, r10
    1bd8:	a9 2c       	mov	r10, r9
    1bda:	98 2c       	mov	r9, r8
    1bdc:	88 24       	eor	r8, r8
    1bde:	90 e0       	ldi	r25, 0x00	; 0
    1be0:	a0 e0       	ldi	r26, 0x00	; 0
    1be2:	b0 e0       	ldi	r27, 0x00	; 0
    1be4:	dc 01       	movw	r26, r24
    1be6:	99 27       	eor	r25, r25
    1be8:	88 27       	eor	r24, r24
    1bea:	88 0e       	add	r8, r24
    1bec:	99 1e       	adc	r9, r25
    1bee:	aa 1e       	adc	r10, r26
    1bf0:	bb 1e       	adc	r11, r27
    1bf2:	82 0e       	add	r8, r18
    1bf4:	91 1c       	adc	r9, r1
    1bf6:	a1 1c       	adc	r10, r1
    1bf8:	b1 1c       	adc	r11, r1
				
				{

					if(pck_num >  (((flashGetCurrDataWriteAddr(RTU) - FL_RTU_START_ADDR))/FL_RTU_LOG_LEN))
    1bfa:	80 e0       	ldi	r24, 0x00	; 0
    1bfc:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <_Z25flashGetCurrDataWriteAddrc>
    1c00:	dc 01       	movw	r26, r24
    1c02:	cb 01       	movw	r24, r22
    1c04:	90 52       	subi	r25, 0x20	; 32
    1c06:	a1 09       	sbc	r26, r1
    1c08:	b1 09       	sbc	r27, r1
    1c0a:	68 94       	set
    1c0c:	14 f8       	bld	r1, 4
    1c0e:	b6 95       	lsr	r27
    1c10:	a7 95       	ror	r26
    1c12:	97 95       	ror	r25
    1c14:	87 95       	ror	r24
    1c16:	16 94       	lsr	r1
    1c18:	d1 f7       	brne	.-12     	; 0x1c0e <_Z8response5cmd_t+0x5aa>
    1c1a:	88 15       	cp	r24, r8
    1c1c:	99 05       	cpc	r25, r9
    1c1e:	aa 05       	cpc	r26, r10
    1c20:	bb 05       	cpc	r27, r11
					{
														
						resp[0] = pck_num;
    1c22:	e8 f4       	brcc	.+58     	; 0x1c5e <_Z8response5cmd_t+0x5fa>
						resp[1] = pck_num<<8;
    1c24:	89 82       	std	Y+1, r8	; 0x01
						resp[2] = pck_num<<16;
    1c26:	1a 82       	std	Y+2, r1	; 0x02
						prepareResponsePacket(UART_PC, CMD_GET_DATA_LOG, resp, 4);		
    1c28:	1b 82       	std	Y+3, r1	; 0x03
    1c2a:	24 e0       	ldi	r18, 0x04	; 4
    1c2c:	ae 01       	movw	r20, r28
    1c2e:	4f 5f       	subi	r20, 0xFF	; 255
    1c30:	5f 4f       	sbci	r21, 0xFF	; 255
    1c32:	63 e1       	ldi	r22, 0x13	; 19
    1c34:	82 e0       	ldi	r24, 0x02	; 2
    1c36:	90 e0       	ldi	r25, 0x00	; 0
    1c38:	da db       	rcall	.-2124   	; 0x13ee <_Z21prepareResponsePacketi5cmd_tPch>
						Tx_Buff[UART_PC].wait_for_ack = FALSE;
    1c3a:	10 92 6d 15 	sts	0x156D, r1	; 0x80156d <Tx_Buff+0xda>
						Tx_Buff[UART_PC].pending_command = cmd;
    1c3e:	89 e1       	ldi	r24, 0x19	; 25
    1c40:	80 93 68 15 	sts	0x1568, r24	; 0x801568 <Tx_Buff+0xd5>
						Tx_Buff[UART_PC].curr_pck_num = 1;		
    1c44:	81 e0       	ldi	r24, 0x01	; 1
    1c46:	90 e0       	ldi	r25, 0x00	; 0
    1c48:	a0 e0       	ldi	r26, 0x00	; 0
    1c4a:	b0 e0       	ldi	r27, 0x00	; 0
    1c4c:	80 93 69 15 	sts	0x1569, r24	; 0x801569 <Tx_Buff+0xd6>
    1c50:	90 93 6a 15 	sts	0x156A, r25	; 0x80156a <Tx_Buff+0xd7>
    1c54:	a0 93 6b 15 	sts	0x156B, r26	; 0x80156b <Tx_Buff+0xd8>
    1c58:	b0 93 6c 15 	sts	0x156C, r27	; 0x80156c <Tx_Buff+0xd9>
    1c5c:	21 c0       	rjmp	.+66     	; 0x1ca0 <_Z8response5cmd_t+0x63c>
					}
					else
					{
						Tx_Buff[UART_PC].wait_for_ack = FALSE;
    1c5e:	10 92 6d 15 	sts	0x156D, r1	; 0x80156d <Tx_Buff+0xda>
						Tx_Buff[UART_PC].pending_command = cmd;
    1c62:	89 e1       	ldi	r24, 0x19	; 25
    1c64:	80 93 68 15 	sts	0x1568, r24	; 0x801568 <Tx_Buff+0xd5>



						Tx_Buff[UART_PC].curr_pck_num = ((((flashGetCurrDataWriteAddr(RTU) - FL_RTU_START_ADDR))/FL_RTU_LOG_LEN) - pck_num) ;				
    1c68:	80 e0       	ldi	r24, 0x00	; 0
    1c6a:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <_Z25flashGetCurrDataWriteAddrc>
    1c6e:	dc 01       	movw	r26, r24
    1c70:	cb 01       	movw	r24, r22
    1c72:	90 52       	subi	r25, 0x20	; 32
    1c74:	a1 09       	sbc	r26, r1
    1c76:	b1 09       	sbc	r27, r1
    1c78:	68 94       	set
    1c7a:	14 f8       	bld	r1, 4
    1c7c:	b6 95       	lsr	r27
    1c7e:	a7 95       	ror	r26
    1c80:	97 95       	ror	r25
    1c82:	87 95       	ror	r24
    1c84:	16 94       	lsr	r1
    1c86:	d1 f7       	brne	.-12     	; 0x1c7c <_Z8response5cmd_t+0x618>
    1c88:	88 19       	sub	r24, r8
    1c8a:	99 09       	sbc	r25, r9
    1c8c:	aa 09       	sbc	r26, r10
    1c8e:	bb 09       	sbc	r27, r11
    1c90:	80 93 69 15 	sts	0x1569, r24	; 0x801569 <Tx_Buff+0xd6>
    1c94:	90 93 6a 15 	sts	0x156A, r25	; 0x80156a <Tx_Buff+0xd7>
    1c98:	a0 93 6b 15 	sts	0x156B, r26	; 0x80156b <Tx_Buff+0xd8>
    1c9c:	b0 93 6c 15 	sts	0x156C, r27	; 0x80156c <Tx_Buff+0xd9>

					}
				}
				resp[0] = ACK;
    1ca0:	81 e4       	ldi	r24, 0x41	; 65
    1ca2:	89 83       	std	Y+1, r24	; 0x01
    1ca4:	5a c1       	rjmp	.+692    	; 0x1f5a <_Z8response5cmd_t+0x8f6>
			}
			else
			{
				resp[0] = ERROR_INVALID_SYS_STATE;
    1ca6:	82 ea       	ldi	r24, 0xA2	; 162
    1ca8:	89 83       	std	Y+1, r24	; 0x01
    1caa:	57 c1       	rjmp	.+686    	; 0x1f5a <_Z8response5cmd_t+0x8f6>
			}
		break;
		case SET_DAILY_LIMIT:
		if(getRtuState() == RTU_UART_CONFIG)
    1cac:	0e 94 98 3a 	call	0x7530	; 0x7530 <_Z11getRtuStatev>
    1cb0:	82 30       	cpi	r24, 0x02	; 2
    1cb2:	b9 f4       	brne	.+46     	; 0x1ce2 <_Z8response5cmd_t+0x67e>
		{
			resp[0] = NACK;		//If everything's OK we'll make it ACK :)
    1cb4:	8e e4       	ldi	r24, 0x4E	; 78
    1cb6:	89 83       	std	Y+1, r24	; 0x01
			
			product_info.daily_limit = Rx_Buff[UART_PC].rx_buffer[CMD_INDX + 1] + (((unsigned long)Rx_Buff[UART_PC].rx_buffer[CMD_INDX + 2]) << 8);// + (((unsigned long)Rx_Buff[uart_no].rx_buffer[CMD_INDX + 3]) << 16) + (((unsigned long)Rx_Buff[uart_no].rx_buffer[CMD_INDX + 4]) << 24);
    1cb8:	20 91 fb 15 	lds	r18, 0x15FB	; 0x8015fb <Rx_Buff+0x8d>
    1cbc:	80 91 fc 15 	lds	r24, 0x15FC	; 0x8015fc <Rx_Buff+0x8e>
    1cc0:	ea e0       	ldi	r30, 0x0A	; 10
    1cc2:	fb e0       	ldi	r31, 0x0B	; 11
    1cc4:	90 e0       	ldi	r25, 0x00	; 0
    1cc6:	98 2f       	mov	r25, r24
    1cc8:	88 27       	eor	r24, r24
    1cca:	82 0f       	add	r24, r18
    1ccc:	91 1d       	adc	r25, r1
    1cce:	93 83       	std	Z+3, r25	; 0x03
    1cd0:	82 83       	std	Z+2, r24	; 0x02
			product_info.daily_limit_dp = Rx_Buff[UART_PC].rx_buffer[CMD_INDX + 3];
    1cd2:	80 91 fd 15 	lds	r24, 0x15FD	; 0x8015fd <Rx_Buff+0x8f>
    1cd6:	84 8f       	std	Z+28, r24	; 0x1c
			eepromWriteProductInfo();		//Packet Updated, Now Update the E2P Data
    1cd8:	0e 94 0e 03 	call	0x61c	; 0x61c <_Z22eepromWriteProductInfov>
			resp[0] = ACK;
    1cdc:	81 e4       	ldi	r24, 0x41	; 65
    1cde:	89 83       	std	Y+1, r24	; 0x01
    1ce0:	3c c1       	rjmp	.+632    	; 0x1f5a <_Z8response5cmd_t+0x8f6>
		}
		else
		{
			resp[0] = ERROR_INVALID_SYS_STATE;
    1ce2:	82 ea       	ldi	r24, 0xA2	; 162
    1ce4:	89 83       	std	Y+1, r24	; 0x01
    1ce6:	39 c1       	rjmp	.+626    	; 0x1f5a <_Z8response5cmd_t+0x8f6>
		}
		break;
		case GET_DAILY_LIMIT:
		if(getRtuState() == RTU_UART_CONFIG)
    1ce8:	0e 94 98 3a 	call	0x7530	; 0x7530 <_Z11getRtuStatev>
    1cec:	82 30       	cpi	r24, 0x02	; 2
    1cee:	89 f4       	brne	.+34     	; 0x1d12 <_Z8response5cmd_t+0x6ae>
		{
			char data[10];
			
			memcpy(&data[0],&product_info.daily_limit,sizeof(unsigned int));
    1cf0:	ea e0       	ldi	r30, 0x0A	; 10
    1cf2:	fb e0       	ldi	r31, 0x0B	; 11
    1cf4:	82 81       	ldd	r24, Z+2	; 0x02
    1cf6:	93 81       	ldd	r25, Z+3	; 0x03
    1cf8:	9d 83       	std	Y+5, r25	; 0x05
			memcpy(&data[2],&product_info.daily_limit_dp,sizeof(unsigned char));
    1cfa:	8c 83       	std	Y+4, r24	; 0x04
    1cfc:	84 8d       	ldd	r24, Z+28	; 0x1c
			prepareResponsePacket(UART_PC, GET_PRODUCT_SER_NUM, (char *)data, 3+1);		//KP 20-5-15
    1cfe:	8e 83       	std	Y+6, r24	; 0x06
    1d00:	24 e0       	ldi	r18, 0x04	; 4
    1d02:	ae 01       	movw	r20, r28
    1d04:	4c 5f       	subi	r20, 0xFC	; 252
    1d06:	5f 4f       	sbci	r21, 0xFF	; 255
    1d08:	62 e2       	ldi	r22, 0x22	; 34
    1d0a:	82 e0       	ldi	r24, 0x02	; 2
    1d0c:	90 e0       	ldi	r25, 0x00	; 0
    1d0e:	6f db       	rcall	.-2338   	; 0x13ee <_Z21prepareResponsePacketi5cmd_tPch>
    1d10:	21 c1       	rjmp	.+578    	; 0x1f54 <_Z8response5cmd_t+0x8f0>
		}
		else
		{
			resp[0] = ERROR_INVALID_SYS_STATE;
    1d12:	82 ea       	ldi	r24, 0xA2	; 162
    1d14:	89 83       	std	Y+1, r24	; 0x01
		}
		break;
		case READ_GPRS_CFG:
		if(getRtuState() == RTU_UART_CONFIG)
    1d16:	21 c1       	rjmp	.+578    	; 0x1f5a <_Z8response5cmd_t+0x8f6>
    1d18:	0e 94 98 3a 	call	0x7530	; 0x7530 <_Z11getRtuStatev>
    1d1c:	82 30       	cpi	r24, 0x02	; 2
		{
			char *data = get_gprs_config((char *)&Rx_Buff[UART_PC].rx_buffer[CMD_INDX+1]);
    1d1e:	59 f4       	brne	.+22     	; 0x1d36 <_Z8response5cmd_t+0x6d2>
    1d20:	8b ef       	ldi	r24, 0xFB	; 251
    1d22:	95 e1       	ldi	r25, 0x15	; 21
    1d24:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <_Z15get_gprs_configPc>
			prepareResponsePacket(UART_PC, READ_GPRS_CFG, data, APN_LEN + 1);
    1d28:	21 e2       	ldi	r18, 0x21	; 33
    1d2a:	ac 01       	movw	r20, r24
    1d2c:	60 e2       	ldi	r22, 0x20	; 32
    1d2e:	82 e0       	ldi	r24, 0x02	; 2
    1d30:	90 e0       	ldi	r25, 0x00	; 0
    1d32:	5d db       	rcall	.-2374   	; 0x13ee <_Z21prepareResponsePacketi5cmd_tPch>
    1d34:	0f c1       	rjmp	.+542    	; 0x1f54 <_Z8response5cmd_t+0x8f0>
		}
		else
		{
			resp[0] = ERROR_INVALID_SYS_STATE;
    1d36:	82 ea       	ldi	r24, 0xA2	; 162
    1d38:	89 83       	std	Y+1, r24	; 0x01
    1d3a:	0f c1       	rjmp	.+542    	; 0x1f5a <_Z8response5cmd_t+0x8f6>
		}
		break;
		
		
		case EDIT_GPRS_CFG:		//Anand 22-4-15
		if(getRtuState() == RTU_UART_CONFIG)
    1d3c:	0e 94 98 3a 	call	0x7530	; 0x7530 <_Z11getRtuStatev>
    1d40:	82 30       	cpi	r24, 0x02	; 2
    1d42:	39 f4       	brne	.+14     	; 0x1d52 <_Z8response5cmd_t+0x6ee>
		{
			update_gprs_config((char *)&Rx_Buff[UART_PC].rx_buffer[CMD_INDX+1]);
    1d44:	8b ef       	ldi	r24, 0xFB	; 251
    1d46:	95 e1       	ldi	r25, 0x15	; 21
    1d48:	0e 94 02 04 	call	0x804	; 0x804 <_Z18update_gprs_configPc>

			resp[0] = ACK;
    1d4c:	81 e4       	ldi	r24, 0x41	; 65
    1d4e:	89 83       	std	Y+1, r24	; 0x01
    1d50:	04 c1       	rjmp	.+520    	; 0x1f5a <_Z8response5cmd_t+0x8f6>
		}
		else
		{
			resp[0] = ERROR_INVALID_SYS_STATE;
    1d52:	82 ea       	ldi	r24, 0xA2	; 162
    1d54:	89 83       	std	Y+1, r24	; 0x01
    1d56:	01 c1       	rjmp	.+514    	; 0x1f5a <_Z8response5cmd_t+0x8f6>
		}
		break;
		
		case SET_PRODUCT_SER_NUM:
		if(getRtuState() == RTU_UART_CONFIG)
    1d58:	0e 94 98 3a 	call	0x7530	; 0x7530 <_Z11getRtuStatev>
    1d5c:	82 30       	cpi	r24, 0x02	; 2
    1d5e:	a1 f4       	brne	.+40     	; 0x1d88 <_Z8response5cmd_t+0x724>
		{
			resp[0] = NACK;		//If everything's OK we'll make it ACK :)
    1d60:	8e e4       	ldi	r24, 0x4E	; 78
    1d62:	89 83       	std	Y+1, r24	; 0x01
			
			product_info.industry_id = Rx_Buff[UART_PC].rx_buffer[CMD_INDX + 1] + (((unsigned long)Rx_Buff[UART_PC].rx_buffer[CMD_INDX + 2]) << 8);// + (((unsigned long)Rx_Buff[uart_no].rx_buffer[CMD_INDX + 3]) << 16) + (((unsigned long)Rx_Buff[uart_no].rx_buffer[CMD_INDX + 4]) << 24);
    1d64:	20 91 fb 15 	lds	r18, 0x15FB	; 0x8015fb <Rx_Buff+0x8d>
    1d68:	80 91 fc 15 	lds	r24, 0x15FC	; 0x8015fc <Rx_Buff+0x8e>
    1d6c:	90 e0       	ldi	r25, 0x00	; 0
    1d6e:	98 2f       	mov	r25, r24
    1d70:	88 27       	eor	r24, r24
    1d72:	82 0f       	add	r24, r18
    1d74:	91 1d       	adc	r25, r1
    1d76:	90 93 0b 0b 	sts	0x0B0B, r25	; 0x800b0b <product_info+0x1>
    1d7a:	80 93 0a 0b 	sts	0x0B0A, r24	; 0x800b0a <product_info>
			eepromWriteProductInfo();		//Packet Updated, Now Update the E2P Data
    1d7e:	0e 94 0e 03 	call	0x61c	; 0x61c <_Z22eepromWriteProductInfov>
			resp[0] = ACK;
    1d82:	81 e4       	ldi	r24, 0x41	; 65
    1d84:	89 83       	std	Y+1, r24	; 0x01
		}
		else
		{
			resp[0] = ERROR_INVALID_SYS_STATE;
    1d86:	e9 c0       	rjmp	.+466    	; 0x1f5a <_Z8response5cmd_t+0x8f6>
    1d88:	82 ea       	ldi	r24, 0xA2	; 162
    1d8a:	89 83       	std	Y+1, r24	; 0x01
		}
		break;
		case GET_PRODUCT_SER_NUM:
		if(getRtuState() == RTU_UART_CONFIG)
    1d8c:	e6 c0       	rjmp	.+460    	; 0x1f5a <_Z8response5cmd_t+0x8f6>
    1d8e:	0e 94 98 3a 	call	0x7530	; 0x7530 <_Z11getRtuStatev>
    1d92:	82 30       	cpi	r24, 0x02	; 2
		{
			prepareResponsePacket(UART_PC, GET_PRODUCT_SER_NUM, (char *)&product_info.industry_id, (sizeof(unsigned int) + 1));		//KP 20-5-15
    1d94:	41 f4       	brne	.+16     	; 0x1da6 <_Z8response5cmd_t+0x742>
    1d96:	23 e0       	ldi	r18, 0x03	; 3
    1d98:	4a e0       	ldi	r20, 0x0A	; 10
    1d9a:	5b e0       	ldi	r21, 0x0B	; 11
    1d9c:	62 e2       	ldi	r22, 0x22	; 34
    1d9e:	82 e0       	ldi	r24, 0x02	; 2
    1da0:	90 e0       	ldi	r25, 0x00	; 0
    1da2:	25 db       	rcall	.-2486   	; 0x13ee <_Z21prepareResponsePacketi5cmd_tPch>
    1da4:	d7 c0       	rjmp	.+430    	; 0x1f54 <_Z8response5cmd_t+0x8f0>
		}
		else
		{
			resp[0] = ERROR_INVALID_SYS_STATE;
    1da6:	82 ea       	ldi	r24, 0xA2	; 162
    1da8:	89 83       	std	Y+1, r24	; 0x01
		}
		break;
	
		case GET_TOTALIZER://abdul majeed
		if(getRtuState() == RTU_UART_CONFIG)
    1daa:	d7 c0       	rjmp	.+430    	; 0x1f5a <_Z8response5cmd_t+0x8f6>
    1dac:	0e 94 98 3a 	call	0x7530	; 0x7530 <_Z11getRtuStatev>
    1db0:	82 30       	cpi	r24, 0x02	; 2
		{
			FL_rtu_log_t temp_data;
			unsigned long addr = 0;
			char temp_buff[18];
			memset(temp_buff,0,sizeof(temp_buff));
    1db2:	09 f0       	breq	.+2      	; 0x1db6 <_Z8response5cmd_t+0x752>
    1db4:	3b c0       	rjmp	.+118    	; 0x1e2c <_Z8response5cmd_t+0x7c8>
    1db6:	5e 01       	movw	r10, r28
    1db8:	e4 e2       	ldi	r30, 0x24	; 36
    1dba:	ae 0e       	add	r10, r30
    1dbc:	b1 1c       	adc	r11, r1
    1dbe:	82 e1       	ldi	r24, 0x12	; 18
    1dc0:	d5 01       	movw	r26, r10
    1dc2:	1d 92       	st	X+, r1
			
			
			addr = flashGetCurrDataWriteAddr(RTU) - FL_RTU_LOG_LEN;
    1dc4:	8a 95       	dec	r24
    1dc6:	e9 f7       	brne	.-6      	; 0x1dc2 <_Z8response5cmd_t+0x75e>
    1dc8:	80 e0       	ldi	r24, 0x00	; 0
			cli();
    1dca:	d2 d7       	rcall	.+4004   	; 0x2d70 <_Z25flashGetCurrDataWriteAddrc>
			WREN();
    1dcc:	2b 01       	movw	r4, r22
			readContToBuff(addr, FL_RTU_LOG_LEN, (char *)&temp_data);
    1dce:	3c 01       	movw	r6, r24
    1dd0:	f8 94       	cli
    1dd2:	e2 d6       	rcall	.+3524   	; 0x2b98 <_Z4WRENv>
    1dd4:	c3 01       	movw	r24, r6
    1dd6:	b2 01       	movw	r22, r4
    1dd8:	60 52       	subi	r22, 0x20	; 32
    1dda:	71 09       	sbc	r23, r1
    1ddc:	81 09       	sbc	r24, r1
    1dde:	91 09       	sbc	r25, r1
    1de0:	8e 01       	movw	r16, r28
    1de2:	0c 5f       	subi	r16, 0xFC	; 252
    1de4:	1f 4f       	sbci	r17, 0xFF	; 255
    1de6:	20 e2       	ldi	r18, 0x20	; 32
    1de8:	30 e0       	ldi	r19, 0x00	; 0
    1dea:	40 e0       	ldi	r20, 0x00	; 0
			Wait_Busy();
    1dec:	50 e0       	ldi	r21, 0x00	; 0
    1dee:	74 d7       	rcall	.+3816   	; 0x2cd8 <_Z14readContToBuffmmPc>
			WRDI();				   // Write Disable
    1df0:	e4 d7       	rcall	.+4040   	; 0x2dba <_Z9Wait_Busyv>
    1df2:	d7 d6       	rcall	.+3502   	; 0x2ba2 <_Z4WRDIv>
			sei();
    1df4:	78 94       	sei
			memcpy(&temp_buff,&temp_data.ram_data.todays_total,(sizeof(ram_data.todays_total)+sizeof(ram_data.months_total)+sizeof(ram_data.cuml_reading)));
    1df6:	8c e0       	ldi	r24, 0x0C	; 12
    1df8:	fe 01       	movw	r30, r28
    1dfa:	3b 96       	adiw	r30, 0x0b	; 11
    1dfc:	d5 01       	movw	r26, r10
    1dfe:	01 90       	ld	r0, Z+
    1e00:	0d 92       	st	X+, r0
    1e02:	8a 95       	dec	r24
			memcpy(&temp_buff[12],&yest_total,sizeof(yest_total));
    1e04:	e1 f7       	brne	.-8      	; 0x1dfe <_Z8response5cmd_t+0x79a>
    1e06:	80 91 1f 13 	lds	r24, 0x131F	; 0x80131f <yest_total>
    1e0a:	90 91 20 13 	lds	r25, 0x1320	; 0x801320 <yest_total+0x1>
    1e0e:	a0 91 21 13 	lds	r26, 0x1321	; 0x801321 <yest_total+0x2>
    1e12:	b0 91 22 13 	lds	r27, 0x1322	; 0x801322 <yest_total+0x3>
    1e16:	88 ab       	std	Y+48, r24	; 0x30
    1e18:	99 ab       	std	Y+49, r25	; 0x31
    1e1a:	aa ab       	std	Y+50, r26	; 0x32
			

			prepareResponsePacket(UART_PC, GET_TOTALIZER, temp_buff, (sizeof(ram_data.todays_total)+sizeof(ram_data.months_total)+sizeof(ram_data.cuml_reading)+sizeof(yest_total)+1));//size of today tot+mon tot+cum tot+1
    1e1c:	bb ab       	std	Y+51, r27	; 0x33
    1e1e:	21 e1       	ldi	r18, 0x11	; 17
    1e20:	a5 01       	movw	r20, r10
    1e22:	64 e2       	ldi	r22, 0x24	; 36
    1e24:	82 e0       	ldi	r24, 0x02	; 2
    1e26:	90 e0       	ldi	r25, 0x00	; 0
    1e28:	e2 da       	rcall	.-2620   	; 0x13ee <_Z21prepareResponsePacketi5cmd_tPch>
    1e2a:	94 c0       	rjmp	.+296    	; 0x1f54 <_Z8response5cmd_t+0x8f0>
			
		}
		else
		{
			resp[0] = ERROR_INVALID_SYS_STATE;
    1e2c:	82 ea       	ldi	r24, 0xA2	; 162
    1e2e:	89 83       	std	Y+1, r24	; 0x01
    1e30:	94 c0       	rjmp	.+296    	; 0x1f5a <_Z8response5cmd_t+0x8f6>
		}
		break;
		
		case SET_TOTALIZER:
		if(getRtuState() == RTU_UART_CONFIG)
    1e32:	0e 94 98 3a 	call	0x7530	; 0x7530 <_Z11getRtuStatev>
    1e36:	82 30       	cpi	r24, 0x02	; 2
    1e38:	09 f0       	breq	.+2      	; 0x1e3c <_Z8response5cmd_t+0x7d8>
    1e3a:	67 c0       	rjmp	.+206    	; 0x1f0a <_Z8response5cmd_t+0x8a6>
		{
			resp[0] = NACK;		//If everything's OK we'll make it ACK :)
    1e3c:	8e e4       	ldi	r24, 0x4E	; 78
    1e3e:	89 83       	std	Y+1, r24	; 0x01
			
			
			ram_data.todays_total =	((unsigned long)Rx_Buff[UART_PC].rx_buffer[DATA_INDX])|((unsigned long)Rx_Buff[UART_PC].rx_buffer[DATA_INDX + 1] << 8);
    1e40:	30 91 fb 15 	lds	r19, 0x15FB	; 0x8015fb <Rx_Buff+0x8d>
    1e44:	40 91 fc 15 	lds	r20, 0x15FC	; 0x8015fc <Rx_Buff+0x8e>
			ram_data.todays_total |=((unsigned long)Rx_Buff[UART_PC].rx_buffer[DATA_INDX + 2] << 16)|((unsigned long)Rx_Buff[UART_PC].rx_buffer[DATA_INDX + 3] << 24);
    1e48:	80 91 fd 15 	lds	r24, 0x15FD	; 0x8015fd <Rx_Buff+0x8f>
    1e4c:	20 91 fe 15 	lds	r18, 0x15FE	; 0x8015fe <Rx_Buff+0x90>
    1e50:	ed e9       	ldi	r30, 0x9D	; 157
    1e52:	f3 e1       	ldi	r31, 0x13	; 19
    1e54:	90 e0       	ldi	r25, 0x00	; 0
    1e56:	a0 e0       	ldi	r26, 0x00	; 0
    1e58:	b0 e0       	ldi	r27, 0x00	; 0
    1e5a:	dc 01       	movw	r26, r24
    1e5c:	99 27       	eor	r25, r25
    1e5e:	88 27       	eor	r24, r24
    1e60:	94 2b       	or	r25, r20
    1e62:	83 2b       	or	r24, r19
    1e64:	b2 2b       	or	r27, r18
    1e66:	84 83       	std	Z+4, r24	; 0x04
    1e68:	95 83       	std	Z+5, r25	; 0x05
    1e6a:	a6 83       	std	Z+6, r26	; 0x06
    1e6c:	b7 83       	std	Z+7, r27	; 0x07
			
			ram_data.months_total = ((unsigned long)Rx_Buff[UART_PC].rx_buffer[DATA_INDX+4])|((unsigned long)Rx_Buff[UART_PC].rx_buffer[DATA_INDX + 5] << 8);
    1e6e:	30 91 ff 15 	lds	r19, 0x15FF	; 0x8015ff <Rx_Buff+0x91>
    1e72:	40 91 00 16 	lds	r20, 0x1600	; 0x801600 <Rx_Buff+0x92>
			ram_data.months_total |=((unsigned long)Rx_Buff[UART_PC].rx_buffer[DATA_INDX + 6] << 16)|((unsigned long)Rx_Buff[UART_PC].rx_buffer[DATA_INDX + 7] << 24);
    1e76:	80 91 01 16 	lds	r24, 0x1601	; 0x801601 <Rx_Buff+0x93>
    1e7a:	20 91 02 16 	lds	r18, 0x1602	; 0x801602 <Rx_Buff+0x94>
    1e7e:	90 e0       	ldi	r25, 0x00	; 0
    1e80:	a0 e0       	ldi	r26, 0x00	; 0
    1e82:	b0 e0       	ldi	r27, 0x00	; 0
    1e84:	dc 01       	movw	r26, r24
    1e86:	99 27       	eor	r25, r25
    1e88:	88 27       	eor	r24, r24
    1e8a:	94 2b       	or	r25, r20
    1e8c:	83 2b       	or	r24, r19
    1e8e:	b2 2b       	or	r27, r18
    1e90:	80 87       	std	Z+8, r24	; 0x08
    1e92:	91 87       	std	Z+9, r25	; 0x09
    1e94:	a2 87       	std	Z+10, r26	; 0x0a
    1e96:	b3 87       	std	Z+11, r27	; 0x0b
			
			ram_data.cuml_reading = ((unsigned long)Rx_Buff[UART_PC].rx_buffer[DATA_INDX+8]) |((unsigned long)Rx_Buff[UART_PC].rx_buffer[DATA_INDX + 9] << 8);
    1e98:	30 91 03 16 	lds	r19, 0x1603	; 0x801603 <Rx_Buff+0x95>
    1e9c:	40 91 04 16 	lds	r20, 0x1604	; 0x801604 <Rx_Buff+0x96>
			ram_data.cuml_reading |=((unsigned long)Rx_Buff[UART_PC].rx_buffer[DATA_INDX + 10] << 16)|((unsigned long)Rx_Buff[UART_PC].rx_buffer[DATA_INDX + 11] << 24);
    1ea0:	80 91 05 16 	lds	r24, 0x1605	; 0x801605 <Rx_Buff+0x97>
    1ea4:	20 91 06 16 	lds	r18, 0x1606	; 0x801606 <Rx_Buff+0x98>
    1ea8:	90 e0       	ldi	r25, 0x00	; 0
    1eaa:	a0 e0       	ldi	r26, 0x00	; 0
    1eac:	b0 e0       	ldi	r27, 0x00	; 0
    1eae:	dc 01       	movw	r26, r24
    1eb0:	99 27       	eor	r25, r25
    1eb2:	88 27       	eor	r24, r24
    1eb4:	94 2b       	or	r25, r20
    1eb6:	83 2b       	or	r24, r19
    1eb8:	b2 2b       	or	r27, r18
    1eba:	84 87       	std	Z+12, r24	; 0x0c
    1ebc:	95 87       	std	Z+13, r25	; 0x0d
    1ebe:	a6 87       	std	Z+14, r26	; 0x0e
    1ec0:	b7 87       	std	Z+15, r27	; 0x0f
			
			yest_total = ((unsigned long)Rx_Buff[UART_PC].rx_buffer[DATA_INDX+ 12])|((unsigned long)Rx_Buff[UART_PC].rx_buffer[DATA_INDX + 13] << 8);
    1ec2:	30 91 07 16 	lds	r19, 0x1607	; 0x801607 <Rx_Buff+0x99>
    1ec6:	40 91 08 16 	lds	r20, 0x1608	; 0x801608 <Rx_Buff+0x9a>
			yest_total |= ((unsigned long)Rx_Buff[UART_PC].rx_buffer[DATA_INDX + 14] << 16)|((unsigned long)Rx_Buff[UART_PC].rx_buffer[DATA_INDX + 15] << 24);
    1eca:	80 91 09 16 	lds	r24, 0x1609	; 0x801609 <Rx_Buff+0x9b>
    1ece:	20 91 0a 16 	lds	r18, 0x160A	; 0x80160a <Rx_Buff+0x9c>
    1ed2:	90 e0       	ldi	r25, 0x00	; 0
    1ed4:	a0 e0       	ldi	r26, 0x00	; 0
    1ed6:	b0 e0       	ldi	r27, 0x00	; 0
    1ed8:	dc 01       	movw	r26, r24
    1eda:	99 27       	eor	r25, r25
    1edc:	88 27       	eor	r24, r24
    1ede:	94 2b       	or	r25, r20
    1ee0:	83 2b       	or	r24, r19
    1ee2:	b2 2b       	or	r27, r18
    1ee4:	80 93 1f 13 	sts	0x131F, r24	; 0x80131f <yest_total>
    1ee8:	90 93 20 13 	sts	0x1320, r25	; 0x801320 <yest_total+0x1>
    1eec:	a0 93 21 13 	sts	0x1321, r26	; 0x801321 <yest_total+0x2>
    1ef0:	b0 93 22 13 	sts	0x1322, r27	; 0x801322 <yest_total+0x3>
			
			
#ifdef FLASH_LOG_DATA
				prepare_FL_LogData();
    1ef4:	0e 94 b6 32 	call	0x656c	; 0x656c <_Z18prepare_FL_LogDatav>
				save_FL_rtu_data();
    1ef8:	0e 94 53 37 	call	0x6ea6	; 0x6ea6 <_Z16save_FL_rtu_datav>
#else
				prepare_e2p_logdata();
				e2p_write_log_data();
#endif
			prepare_e2p_y_total();
    1efc:	0e 94 c2 32 	call	0x6584	; 0x6584 <_Z19prepare_e2p_y_totalv>
			e2p_write_y_total();
    1f00:	0e 94 40 04 	call	0x880	; 0x880 <_Z17e2p_write_y_totalv>
			resp[0] = ACK;
    1f04:	81 e4       	ldi	r24, 0x41	; 65
    1f06:	89 83       	std	Y+1, r24	; 0x01
			
		}
		else
		{
			resp[0] = ERROR_INVALID_SYS_STATE;
    1f08:	28 c0       	rjmp	.+80     	; 0x1f5a <_Z8response5cmd_t+0x8f6>
    1f0a:	82 ea       	ldi	r24, 0xA2	; 162
    1f0c:	89 83       	std	Y+1, r24	; 0x01
		}		
		break;
	
		case DEBUG_RS485_CMD:
		{
			flushTxBuffer(UART_485);
    1f0e:	25 c0       	rjmp	.+74     	; 0x1f5a <_Z8response5cmd_t+0x8f6>
    1f10:	81 e0       	ldi	r24, 0x01	; 1
    1f12:	90 e0       	ldi	r25, 0x00	; 0
    1f14:	28 da       	rcall	.-2992   	; 0x1366 <_Z13flushTxBufferi>
			memcpy((void *)&Tx_Buff[UART_485].tx_buffer[0],(void *)&Rx_Buff[UART_PC].rx_buffer[DATA_INDX],(Rx_Buff[UART_PC].rx_indx - 5));
    1f16:	08 e3       	ldi	r16, 0x38	; 56
    1f18:	16 e1       	ldi	r17, 0x16	; 22
    1f1a:	f8 01       	movw	r30, r16
    1f1c:	40 81       	ld	r20, Z
    1f1e:	51 81       	ldd	r21, Z+1	; 0x01
    1f20:	45 50       	subi	r20, 0x05	; 5
    1f22:	51 09       	sbc	r21, r1
    1f24:	6b ef       	ldi	r22, 0xFB	; 251
    1f26:	75 e1       	ldi	r23, 0x15	; 21
    1f28:	8c ed       	ldi	r24, 0xDC	; 220
    1f2a:	94 e1       	ldi	r25, 0x14	; 20
			Tx_Buff[UART_485].tx_indx = Rx_Buff[UART_PC].rx_indx - 5;
    1f2c:	0e 94 a6 47 	call	0x8f4c	; 0x8f4c <memcpy>
    1f30:	d8 01       	movw	r26, r16
    1f32:	8d 91       	ld	r24, X+
    1f34:	9c 91       	ld	r25, X
    1f36:	05 97       	sbiw	r24, 0x05	; 5
    1f38:	90 93 1d 15 	sts	0x151D, r25	; 0x80151d <Tx_Buff+0x8a>
			
			Usendbuffer(UART_485);
    1f3c:	80 93 1c 15 	sts	0x151C, r24	; 0x80151c <Tx_Buff+0x89>
    1f40:	81 e0       	ldi	r24, 0x01	; 1

			flushRxBuffer(UART_485);
    1f42:	90 e0       	ldi	r25, 0x00	; 0
    1f44:	bc d9       	rcall	.-3208   	; 0x12be <_Z11Usendbufferi>
    1f46:	81 e0       	ldi	r24, 0x01	; 1
    1f48:	90 e0       	ldi	r25, 0x00	; 0

			
		}
		break;
    1f4a:	31 da       	rcall	.-2974   	; 0x13ae <_Z13flushRxBufferi>

		default:
			{
				resp[0] = ERROR_CMD;
    1f4c:	03 c0       	rjmp	.+6      	; 0x1f54 <_Z8response5cmd_t+0x8f0>
    1f4e:	81 e0       	ldi	r24, 0x01	; 1
			}
		break;
    1f50:	89 83       	std	Y+1, r24	; 0x01
	}
	
	if(resp[0] && (!Tx_Buff[UART_PC].tx_ready))
    1f52:	03 c0       	rjmp	.+6      	; 0x1f5a <_Z8response5cmd_t+0x8f6>
    1f54:	89 81       	ldd	r24, Y+1	; 0x01
    1f56:	88 23       	and	r24, r24
    1f58:	61 f0       	breq	.+24     	; 0x1f72 <_Z8response5cmd_t+0x90e>
    1f5a:	80 91 67 15 	lds	r24, 0x1567	; 0x801567 <Tx_Buff+0xd4>
    1f5e:	81 11       	cpse	r24, r1
	{
		prepareResponsePacket(UART_PC, cmd, resp, 2);		//Anand 21.05.2014
    1f60:	08 c0       	rjmp	.+16     	; 0x1f72 <_Z8response5cmd_t+0x90e>
    1f62:	22 e0       	ldi	r18, 0x02	; 2
    1f64:	ae 01       	movw	r20, r28
    1f66:	4f 5f       	subi	r20, 0xFF	; 255
    1f68:	5f 4f       	sbci	r21, 0xFF	; 255
    1f6a:	6f 2d       	mov	r22, r15
    1f6c:	82 e0       	ldi	r24, 0x02	; 2
    1f6e:	90 e0       	ldi	r25, 0x00	; 0
    1f70:	3e da       	rcall	.-2948   	; 0x13ee <_Z21prepareResponsePacketi5cmd_tPch>
	}

}
    1f72:	e5 96       	adiw	r28, 0x35	; 53
    1f74:	0f b6       	in	r0, 0x3f	; 63
    1f76:	f8 94       	cli
    1f78:	de bf       	out	0x3e, r29	; 62
    1f7a:	0f be       	out	0x3f, r0	; 63
    1f7c:	cd bf       	out	0x3d, r28	; 61
    1f7e:	df 91       	pop	r29
    1f80:	cf 91       	pop	r28
    1f82:	1f 91       	pop	r17
    1f84:	0f 91       	pop	r16
    1f86:	ff 90       	pop	r15
    1f88:	bf 90       	pop	r11
    1f8a:	af 90       	pop	r10
    1f8c:	9f 90       	pop	r9
    1f8e:	8f 90       	pop	r8
    1f90:	7f 90       	pop	r7
    1f92:	6f 90       	pop	r6
    1f94:	5f 90       	pop	r5
    1f96:	4f 90       	pop	r4
    1f98:	08 95       	ret

00001f9a <_Z14decodeMsgUart0v>:
#endif
}


void decodeMsgUart0(void) // need to be change the name 
{
    1f9a:	cf 93       	push	r28
    1f9c:	df 93       	push	r29
	
	static unsigned int timeout = 0;	
	unsigned char slave_id;
	
	
	switch (UI_handler_state)
    1f9e:	80 91 f9 0a 	lds	r24, 0x0AF9	; 0x800af9 <_ZZ14decodeMsgUart0vE16UI_handler_state>
    1fa2:	88 23       	and	r24, r24
    1fa4:	21 f0       	breq	.+8      	; 0x1fae <_Z14decodeMsgUart0v+0x14>
    1fa6:	81 30       	cpi	r24, 0x01	; 1
    1fa8:	09 f4       	brne	.+2      	; 0x1fac <_Z14decodeMsgUart0v+0x12>
    1faa:	44 c0       	rjmp	.+136    	; 0x2034 <_Z14decodeMsgUart0v+0x9a>
    1fac:	69 c0       	rjmp	.+210    	; 0x2080 <_Z14decodeMsgUart0v+0xe6>
	{
		case UI_IDLE:
			if(Rx_Buff[UART_PC].rx_state == READY)
    1fae:	80 91 3c 16 	lds	r24, 0x163C	; 0x80163c <Rx_Buff+0xce>
    1fb2:	82 30       	cpi	r24, 0x02	; 2
    1fb4:	09 f0       	breq	.+2      	; 0x1fb8 <_Z14decodeMsgUart0v+0x1e>
    1fb6:	64 c0       	rjmp	.+200    	; 0x2080 <_Z14decodeMsgUart0v+0xe6>
			{
				cmd = (cmd_t)Rx_Buff[UART_PC].rx_buffer[CMD_INDX];
    1fb8:	80 91 fa 15 	lds	r24, 0x15FA	; 0x8015fa <Rx_Buff+0x8c>
				
				if(cmd == CMD_MB_QUERY)
    1fbc:	8a 31       	cpi	r24, 0x1A	; 26
    1fbe:	99 f5       	brne	.+102    	; 0x2026 <_Z14decodeMsgUart0v+0x8c>
				{
					slave_id = Rx_Buff[UART_PC].rx_buffer[DATA_INDX];
    1fc0:	80 91 fb 15 	lds	r24, 0x15FB	; 0x8015fb <Rx_Buff+0x8d>
					 

					//check the destination
					if(slave_id == product_info.industry_id)
    1fc4:	48 2f       	mov	r20, r24
    1fc6:	50 e0       	ldi	r21, 0x00	; 0
    1fc8:	20 91 0a 0b 	lds	r18, 0x0B0A	; 0x800b0a <product_info>
    1fcc:	30 91 0b 0b 	lds	r19, 0x0B0B	; 0x800b0b <product_info+0x1>
    1fd0:	42 17       	cp	r20, r18
    1fd2:	53 07       	cpc	r21, r19
    1fd4:	59 f1       	breq	.+86     	; 0x202c <_Z14decodeMsgUart0v+0x92>
					{
						 
					}
					else 	// command for slave device 
					{ 
						if((slave_id < DEFAULT_RTU_SLV_ADDR) && (slave_id < MAX_NUM_MB_DEVICES))
    1fd6:	82 30       	cpi	r24, 0x02	; 2
    1fd8:	48 f5       	brcc	.+82     	; 0x202c <_Z14decodeMsgUart0v+0x92>
						{	
						
							if(Tx_Buff[UART_485].tx_ready != READY)
    1fda:	80 91 1e 15 	lds	r24, 0x151E	; 0x80151e <Tx_Buff+0x8b>
    1fde:	82 30       	cpi	r24, 0x02	; 2
    1fe0:	29 f1       	breq	.+74     	; 0x202c <_Z14decodeMsgUart0v+0x92>
							{
			
								memcpy((void*)Tx_Buff[UART_485].tx_buffer,(const void*)&Rx_Buff[UART_PC].rx_buffer[DATA_INDX],Rx_Buff[UART_PC].rx_buffer[LEN_INDX]-1);
    1fe2:	c9 ef       	ldi	r28, 0xF9	; 249
    1fe4:	d5 e1       	ldi	r29, 0x15	; 21
    1fe6:	48 81       	ld	r20, Y
    1fe8:	50 e0       	ldi	r21, 0x00	; 0
    1fea:	41 50       	subi	r20, 0x01	; 1
    1fec:	51 09       	sbc	r21, r1
    1fee:	6b ef       	ldi	r22, 0xFB	; 251
    1ff0:	75 e1       	ldi	r23, 0x15	; 21
    1ff2:	8c ed       	ldi	r24, 0xDC	; 220
    1ff4:	94 e1       	ldi	r25, 0x14	; 20
    1ff6:	0e 94 a6 47 	call	0x8f4c	; 0x8f4c <memcpy>
						
								Tx_Buff[UART_485].tx_indx = Rx_Buff[UART_PC].rx_buffer[LEN_INDX]-1;
    1ffa:	88 81       	ld	r24, Y
    1ffc:	90 e0       	ldi	r25, 0x00	; 0
    1ffe:	01 97       	sbiw	r24, 0x01	; 1
    2000:	90 93 1d 15 	sts	0x151D, r25	; 0x80151d <Tx_Buff+0x8a>
    2004:	80 93 1c 15 	sts	0x151C, r24	; 0x80151c <Tx_Buff+0x89>
								Tx_Buff[UART_485].tx_ready = TRUE;
    2008:	81 e0       	ldi	r24, 0x01	; 1
    200a:	80 93 1e 15 	sts	0x151E, r24	; 0x80151e <Tx_Buff+0x8b>
							
								timeout = 0;
    200e:	10 92 f8 0a 	sts	0x0AF8, r1	; 0x800af8 <_ZZ14decodeMsgUart0vE7timeout+0x1>
    2012:	10 92 f7 0a 	sts	0x0AF7, r1	; 0x800af7 <_ZZ14decodeMsgUart0vE7timeout>
								UI_handler_state = UI_MB_RSP_WAIT;
    2016:	80 93 f9 0a 	sts	0x0AF9, r24	; 0x800af9 <_ZZ14decodeMsgUart0vE16UI_handler_state>
								RS485_device_handler.set_req_port(UART_PC);
    201a:	62 e0       	ldi	r22, 0x02	; 2
    201c:	8f e3       	ldi	r24, 0x3F	; 63
    201e:	94 e1       	ldi	r25, 0x14	; 20
    2020:	0e 94 52 41 	call	0x82a4	; 0x82a4 <_ZN12RS485_device12set_req_portEh>
    2024:	03 c0       	rjmp	.+6      	; 0x202c <_Z14decodeMsgUart0v+0x92>
					}
				}
				else
				{	
					//Lets handle commands other than MB cmd 
					response((cmd_t)Rx_Buff[UART_PC].rx_buffer[CMD_INDX]);
    2026:	80 91 fa 15 	lds	r24, 0x15FA	; 0x8015fa <Rx_Buff+0x8c>
    202a:	1c db       	rcall	.-2504   	; 0x1664 <_Z8response5cmd_t>
				}
				
				flushRxBuffer(UART_PC);
    202c:	82 e0       	ldi	r24, 0x02	; 2
    202e:	90 e0       	ldi	r25, 0x00	; 0
    2030:	be d9       	rcall	.-3204   	; 0x13ae <_Z13flushRxBufferi>
    2032:	26 c0       	rjmp	.+76     	; 0x2080 <_Z14decodeMsgUart0v+0xe6>
			}
		break;
		case UI_MB_RSP_WAIT:

				if(Tx_Buff[UART_PC].tx_ready == TRUE)
    2034:	80 91 67 15 	lds	r24, 0x1567	; 0x801567 <Tx_Buff+0xd4>
    2038:	81 30       	cpi	r24, 0x01	; 1
    203a:	61 f4       	brne	.+24     	; 0x2054 <_Z14decodeMsgUart0v+0xba>
				{
					Tx_Buff[UART_PC].tx_ready = FALSE;					
    203c:	10 92 67 15 	sts	0x1567, r1	; 0x801567 <Tx_Buff+0xd4>
					
					
					reRoueMBResponsePacket();
					Usendbuffer(UART_PC);		//Send data
    2040:	71 da       	rcall	.-2846   	; 0x1524 <_Z22reRoueMBResponsePacketv>
    2042:	82 e0       	ldi	r24, 0x02	; 2
    2044:	90 e0       	ldi	r25, 0x00	; 0
					flushTxBuffer(UART_PC);		//Flush buffer
    2046:	3b d9       	rcall	.-3466   	; 0x12be <_Z11Usendbufferi>
    2048:	82 e0       	ldi	r24, 0x02	; 2
    204a:	90 e0       	ldi	r25, 0x00	; 0
    204c:	8c d9       	rcall	.-3304   	; 0x1366 <_Z13flushTxBufferi>
					UI_handler_state = UI_IDLE;				
    204e:	10 92 f9 0a 	sts	0x0AF9, r1	; 0x800af9 <_ZZ14decodeMsgUart0vE16UI_handler_state>
    2052:	16 c0       	rjmp	.+44     	; 0x2080 <_Z14decodeMsgUart0v+0xe6>
			
				}
				else
				{
					//timeout
					if(timeout++>= PORT_RSP_TIMEOUT )	//3
    2054:	80 91 f7 0a 	lds	r24, 0x0AF7	; 0x800af7 <_ZZ14decodeMsgUart0vE7timeout>
    2058:	90 91 f8 0a 	lds	r25, 0x0AF8	; 0x800af8 <_ZZ14decodeMsgUart0vE7timeout+0x1>
    205c:	83 30       	cpi	r24, 0x03	; 3
    205e:	91 05       	cpc	r25, r1
    2060:	30 f4       	brcc	.+12     	; 0x206e <_Z14decodeMsgUart0v+0xd4>
    2062:	01 96       	adiw	r24, 0x01	; 1
    2064:	90 93 f8 0a 	sts	0x0AF8, r25	; 0x800af8 <_ZZ14decodeMsgUart0vE7timeout+0x1>
    2068:	80 93 f7 0a 	sts	0x0AF7, r24	; 0x800af7 <_ZZ14decodeMsgUart0vE7timeout>
    206c:	09 c0       	rjmp	.+18     	; 0x2080 <_Z14decodeMsgUart0v+0xe6>
					{
						timeout = 0;
    206e:	10 92 f8 0a 	sts	0x0AF8, r1	; 0x800af8 <_ZZ14decodeMsgUart0vE7timeout+0x1>
    2072:	10 92 f7 0a 	sts	0x0AF7, r1	; 0x800af7 <_ZZ14decodeMsgUart0vE7timeout>
					
						flushTxBuffer(UART_PC);		//Flush buffer
    2076:	82 e0       	ldi	r24, 0x02	; 2
    2078:	90 e0       	ldi	r25, 0x00	; 0
    207a:	75 d9       	rcall	.-3350   	; 0x1366 <_Z13flushTxBufferi>
						UI_handler_state = UI_IDLE;
    207c:	10 92 f9 0a 	sts	0x0AF9, r1	; 0x800af9 <_ZZ14decodeMsgUart0vE16UI_handler_state>
				
						
		break;
	}

}
    2080:	df 91       	pop	r29
    2082:	cf 91       	pop	r28
    2084:	08 95       	ret

00002086 <_Z22completePendingCommandv>:
	updateFlashCurrAddr();		//Anand 19.04.2014	
}


void completePendingCommand()
{
    2086:	cf 92       	push	r12
    2088:	df 92       	push	r13
    208a:	ef 92       	push	r14
    208c:	ff 92       	push	r15
    208e:	0f 93       	push	r16
    2090:	1f 93       	push	r17
    2092:	cf 93       	push	r28
    2094:	df 93       	push	r29
    2096:	cd b7       	in	r28, 0x3d	; 61
    2098:	de b7       	in	r29, 0x3e	; 62
    209a:	a3 97       	sbiw	r28, 0x23	; 35
    209c:	0f b6       	in	r0, 0x3f	; 63
    209e:	f8 94       	cli
    20a0:	de bf       	out	0x3e, r29	; 62
    20a2:	0f be       	out	0x3f, r0	; 63
    20a4:	cd bf       	out	0x3d, r28	; 61

	
	FL_rtu_log_t dispense_upload_data;			//HJ 06-08-2016


	addr = flashGetCurrUploadAddr(RTU)  + ((Tx_Buff[UART_PC].curr_pck_num-1)*FL_RTU_LOG_LEN);
    20a6:	80 e0       	ldi	r24, 0x00	; 0
    20a8:	72 d6       	rcall	.+3300   	; 0x2d8e <_Z22flashGetCurrUploadAddrc>
    20aa:	6b 01       	movw	r12, r22
    20ac:	7c 01       	movw	r14, r24
    20ae:	80 91 69 15 	lds	r24, 0x1569	; 0x801569 <Tx_Buff+0xd6>
    20b2:	90 91 6a 15 	lds	r25, 0x156A	; 0x80156a <Tx_Buff+0xd7>
    20b6:	a0 91 6b 15 	lds	r26, 0x156B	; 0x80156b <Tx_Buff+0xd8>
    20ba:	b0 91 6c 15 	lds	r27, 0x156C	; 0x80156c <Tx_Buff+0xd9>
    20be:	01 97       	sbiw	r24, 0x01	; 1
    20c0:	a1 09       	sbc	r26, r1
    20c2:	b8 4f       	sbci	r27, 0xF8	; 248
    20c4:	88 0f       	add	r24, r24
    20c6:	99 1f       	adc	r25, r25
    20c8:	aa 1f       	adc	r26, r26
    20ca:	bb 1f       	adc	r27, r27
    20cc:	88 0f       	add	r24, r24
    20ce:	99 1f       	adc	r25, r25
    20d0:	aa 1f       	adc	r26, r26
    20d2:	bb 1f       	adc	r27, r27
    20d4:	88 0f       	add	r24, r24
    20d6:	99 1f       	adc	r25, r25
    20d8:	aa 1f       	adc	r26, r26
    20da:	bb 1f       	adc	r27, r27
    20dc:	88 0f       	add	r24, r24
    20de:	99 1f       	adc	r25, r25
    20e0:	aa 1f       	adc	r26, r26
    20e2:	bb 1f       	adc	r27, r27
    20e4:	88 0f       	add	r24, r24
    20e6:	99 1f       	adc	r25, r25
    20e8:	aa 1f       	adc	r26, r26
    20ea:	bb 1f       	adc	r27, r27
    20ec:	c8 0e       	add	r12, r24
    20ee:	d9 1e       	adc	r13, r25
    20f0:	ea 1e       	adc	r14, r26
    20f2:	fb 1e       	adc	r15, r27

	if(addr>=FL_RTU_MAX_ADDR)
    20f4:	20 ee       	ldi	r18, 0xE0	; 224
    20f6:	c2 16       	cp	r12, r18
    20f8:	2f e1       	ldi	r18, 0x1F	; 31
    20fa:	d2 06       	cpc	r13, r18
    20fc:	20 e2       	ldi	r18, 0x20	; 32
    20fe:	e2 06       	cpc	r14, r18
    2100:	f1 04       	cpc	r15, r1
    2102:	70 f0       	brcs	.+28     	; 0x2120 <_Z22completePendingCommandv+0x9a>
	{
		addr = ((addr%FL_RTU_MAX_ADDR)+FL_RTU_START_ADDR);		//Anand 16-7-15	Problem at addr=FL_MAX_DR_ADDR so don't need subtraction!
    2104:	c7 01       	movw	r24, r14
    2106:	b6 01       	movw	r22, r12
    2108:	20 ee       	ldi	r18, 0xE0	; 224
    210a:	3f e1       	ldi	r19, 0x1F	; 31
    210c:	40 e2       	ldi	r20, 0x20	; 32
    210e:	50 e0       	ldi	r21, 0x00	; 0
    2110:	0e 94 d8 46 	call	0x8db0	; 0x8db0 <__udivmodsi4>
    2114:	6b 01       	movw	r12, r22
    2116:	7c 01       	movw	r14, r24
    2118:	20 e2       	ldi	r18, 0x20	; 32
    211a:	d2 0e       	add	r13, r18
    211c:	e1 1c       	adc	r14, r1
	}
	

	WREN();
    211e:	f1 1c       	adc	r15, r1
    2120:	3b d5       	rcall	.+2678   	; 0x2b98 <_Z4WRENv>
	
	readContToBuff(addr, FL_RTU_LOG_LEN, (char *)&dispense_upload_data);		//HJ 06-08-2016
    2122:	8e 01       	movw	r16, r28
    2124:	0f 5f       	subi	r16, 0xFF	; 255
    2126:	1f 4f       	sbci	r17, 0xFF	; 255
    2128:	20 e2       	ldi	r18, 0x20	; 32
    212a:	30 e0       	ldi	r19, 0x00	; 0
    212c:	40 e0       	ldi	r20, 0x00	; 0
    212e:	50 e0       	ldi	r21, 0x00	; 0
    2130:	c7 01       	movw	r24, r14
    2132:	b6 01       	movw	r22, r12
	Wait_Busy();	//??
    2134:	d1 d5       	rcall	.+2978   	; 0x2cd8 <_Z14readContToBuffmmPc>
    2136:	41 d6       	rcall	.+3202   	; 0x2dba <_Z9Wait_Busyv>
	WRDI();				// HJ 29-12-2015    // Write Disable
    2138:	34 d5       	rcall	.+2664   	; 0x2ba2 <_Z4WRDIv>
    213a:	2c e1       	ldi	r18, 0x1C	; 28
	
	prepareResponsePacket(UART_PC, CMD_GET_DATA_LOG, (char*)&dispense_upload_data, FL_RTU_LOG_LEN + 1 - FL_RESERVED_BYTE - 1);		//HJ 06-08-2016
    213c:	a8 01       	movw	r20, r16
    213e:	63 e1       	ldi	r22, 0x13	; 19
    2140:	82 e0       	ldi	r24, 0x02	; 2
    2142:	90 e0       	ldi	r25, 0x00	; 0
    2144:	54 d9       	rcall	.-3416   	; 0x13ee <_Z21prepareResponsePacketi5cmd_tPch>

	if(addr == flashGetCurrDataWriteAddr(RTU))
    2146:	80 e0       	ldi	r24, 0x00	; 0
    2148:	13 d6       	rcall	.+3110   	; 0x2d70 <_Z25flashGetCurrDataWriteAddrc>
    214a:	c6 16       	cp	r12, r22
    214c:	d7 06       	cpc	r13, r23
    214e:	e8 06       	cpc	r14, r24
    2150:	f9 06       	cpc	r15, r25
    2152:	b1 f4       	brne	.+44     	; 0x2180 <_Z22completePendingCommandv+0xfa>
    2154:	10 92 68 15 	sts	0x1568, r1	; 0x801568 <Tx_Buff+0xd5>
	{
		
		Tx_Buff[UART_PC].pending_command = FALSE;
    2158:	10 92 69 15 	sts	0x1569, r1	; 0x801569 <Tx_Buff+0xd6>
		Tx_Buff[UART_PC].curr_pck_num = 0;
    215c:	10 92 6a 15 	sts	0x156A, r1	; 0x80156a <Tx_Buff+0xd7>
    2160:	10 92 6b 15 	sts	0x156B, r1	; 0x80156b <Tx_Buff+0xd8>
    2164:	10 92 6c 15 	sts	0x156C, r1	; 0x80156c <Tx_Buff+0xd9>
    2168:	8f ef       	ldi	r24, 0xFF	; 255
		char resp[3];		//Anand 04-07-15
		resp[0] = resp[1] = resp[2] = 0xFF;
    216a:	8b a3       	std	Y+35, r24	; 0x23
    216c:	8a a3       	std	Y+34, r24	; 0x22
    216e:	89 a3       	std	Y+33, r24	; 0x21
    2170:	24 e0       	ldi	r18, 0x04	; 4
		prepareResponsePacket(UART_PC, CMD_GET_DATA_LOG, resp, 4);		//??		//Anand 04-07-15
    2172:	ae 01       	movw	r20, r28
    2174:	4f 5d       	subi	r20, 0xDF	; 223
    2176:	5f 4f       	sbci	r21, 0xFF	; 255
    2178:	63 e1       	ldi	r22, 0x13	; 19
    217a:	82 e0       	ldi	r24, 0x02	; 2
    217c:	90 e0       	ldi	r25, 0x00	; 0
    217e:	37 d9       	rcall	.-3474   	; 0x13ee <_Z21prepareResponsePacketi5cmd_tPch>
    2180:	a3 96       	adiw	r28, 0x23	; 35
	else
	{

	}						
	
    2182:	0f b6       	in	r0, 0x3f	; 63
    2184:	f8 94       	cli
    2186:	de bf       	out	0x3e, r29	; 62
    2188:	0f be       	out	0x3f, r0	; 63
    218a:	cd bf       	out	0x3d, r28	; 61
    218c:	df 91       	pop	r29
    218e:	cf 91       	pop	r28
    2190:	1f 91       	pop	r17
    2192:	0f 91       	pop	r16
    2194:	ff 90       	pop	r15
    2196:	ef 90       	pop	r14
    2198:	df 90       	pop	r13
    219a:	cf 90       	pop	r12
    219c:	08 95       	ret

0000219e <_Z7set_rtcPh>:
    219e:	1f 93       	push	r17
	time_stamp->yr = time_main.year;


}
void set_rtc(unsigned char *time)
{
    21a0:	cf 93       	push	r28
    21a2:	df 93       	push	r29
    21a4:	ec 01       	movw	r28, r24
	int indx = 0;
	
	cli();
    21a6:	f8 94       	cli
	I2CInit();
    21a8:	0e 94 7b 31 	call	0x62f6	; 0x62f6 <_Z7I2CInitv>
	
	time[indx] = ((time[indx]/10)<<4) | (time[indx]%10);		//Year
    21ac:	68 81       	ld	r22, Y
    21ae:	1d ec       	ldi	r17, 0xCD	; 205
    21b0:	61 9f       	mul	r22, r17
    21b2:	81 2d       	mov	r24, r1
    21b4:	11 24       	eor	r1, r1
    21b6:	86 95       	lsr	r24
    21b8:	86 95       	lsr	r24
    21ba:	86 95       	lsr	r24
    21bc:	40 e1       	ldi	r20, 0x10	; 16
    21be:	84 9f       	mul	r24, r20
    21c0:	90 01       	movw	r18, r0
    21c2:	11 24       	eor	r1, r1
    21c4:	88 0f       	add	r24, r24
    21c6:	98 2f       	mov	r25, r24
    21c8:	99 0f       	add	r25, r25
    21ca:	99 0f       	add	r25, r25
    21cc:	89 0f       	add	r24, r25
    21ce:	68 1b       	sub	r22, r24
    21d0:	62 2b       	or	r22, r18
    21d2:	68 83       	st	Y, r22
	RTC_Write(0x06, time[indx++]);		//Year
    21d4:	86 e0       	ldi	r24, 0x06	; 6
    21d6:	0e d4       	rcall	.+2076   	; 0x29f4 <_Z9RTC_Writehh>

	time[indx] = ((time[indx]/10)<<4) | (time[indx]%10);		//Month
    21d8:	69 81       	ldd	r22, Y+1	; 0x01
    21da:	61 9f       	mul	r22, r17
    21dc:	81 2d       	mov	r24, r1
    21de:	11 24       	eor	r1, r1
    21e0:	86 95       	lsr	r24
    21e2:	86 95       	lsr	r24
    21e4:	86 95       	lsr	r24
    21e6:	90 e1       	ldi	r25, 0x10	; 16
    21e8:	89 9f       	mul	r24, r25
    21ea:	90 01       	movw	r18, r0
    21ec:	11 24       	eor	r1, r1
    21ee:	88 0f       	add	r24, r24
    21f0:	98 2f       	mov	r25, r24
    21f2:	99 0f       	add	r25, r25
    21f4:	99 0f       	add	r25, r25
    21f6:	89 0f       	add	r24, r25
    21f8:	68 1b       	sub	r22, r24
    21fa:	26 2b       	or	r18, r22
    21fc:	29 83       	std	Y+1, r18	; 0x01
	RTC_Write(0x05, (time[indx++] & 0x1F));		//Month
    21fe:	62 2f       	mov	r22, r18
    2200:	6f 71       	andi	r22, 0x1F	; 31
    2202:	85 e0       	ldi	r24, 0x05	; 5
    2204:	f7 d3       	rcall	.+2030   	; 0x29f4 <_Z9RTC_Writehh>

	time[indx] = ((time[indx]/10)<<4) | (time[indx]%10);		//Date
    2206:	6a 81       	ldd	r22, Y+2	; 0x02
    2208:	61 9f       	mul	r22, r17
    220a:	11 2d       	mov	r17, r1
    220c:	11 24       	eor	r1, r1
    220e:	16 95       	lsr	r17
    2210:	16 95       	lsr	r17
    2212:	16 95       	lsr	r17
    2214:	20 e1       	ldi	r18, 0x10	; 16
    2216:	12 9f       	mul	r17, r18
    2218:	c0 01       	movw	r24, r0
    221a:	11 24       	eor	r1, r1
    221c:	11 0f       	add	r17, r17
    221e:	91 2f       	mov	r25, r17
    2220:	99 0f       	add	r25, r25
    2222:	99 0f       	add	r25, r25
    2224:	19 0f       	add	r17, r25
    2226:	61 1b       	sub	r22, r17
    2228:	86 2b       	or	r24, r22
    222a:	8a 83       	std	Y+2, r24	; 0x02
	RTC_Write(0x04, (time[indx++] & 0x3F));		//Date
    222c:	68 2f       	mov	r22, r24
    222e:	6f 73       	andi	r22, 0x3F	; 63
    2230:	84 e0       	ldi	r24, 0x04	; 4
    2232:	e0 d3       	rcall	.+1984   	; 0x29f4 <_Z9RTC_Writehh>
	
#ifdef RTC_DS3231
	RTC_Write(0x03, (time[indx++] & 0x07));
    2234:	6b 81       	ldd	r22, Y+3	; 0x03
    2236:	67 70       	andi	r22, 0x07	; 7
    2238:	83 e0       	ldi	r24, 0x03	; 3
    223a:	dc d3       	rcall	.+1976   	; 0x29f4 <_Z9RTC_Writehh>
#endif
#ifdef RTC_MCP79410
	RTC_Write(0x03, ((time[indx++] & 0x07) | (1 << RTC_VBAT_EN_BIT)));		//Day: 1-7, 1=Sunday
#endif	

	if(time[indx] >= 12)
    223c:	8c 81       	ldd	r24, Y+4	; 0x04
    223e:	8c 30       	cpi	r24, 0x0C	; 12
    2240:	30 f1       	brcs	.+76     	; 0x228e <__stack+0x8f>
	{
		if(time[indx] > 12)
    2242:	8d 30       	cpi	r24, 0x0D	; 13
    2244:	70 f0       	brcs	.+28     	; 0x2262 <__stack+0x63>
		{
			time[indx] %= 12;
    2246:	9b ea       	ldi	r25, 0xAB	; 171
    2248:	89 9f       	mul	r24, r25
    224a:	91 2d       	mov	r25, r1
    224c:	11 24       	eor	r1, r1
    224e:	96 95       	lsr	r25
    2250:	96 95       	lsr	r25
    2252:	96 95       	lsr	r25
    2254:	29 2f       	mov	r18, r25
    2256:	22 0f       	add	r18, r18
    2258:	92 0f       	add	r25, r18
    225a:	99 0f       	add	r25, r25
    225c:	99 0f       	add	r25, r25
    225e:	89 1b       	sub	r24, r25
    2260:	8c 83       	std	Y+4, r24	; 0x04
		}

		time[indx] = ((time[indx]/10)<<4) | (time[indx]%10);		//hr
    2262:	9c 81       	ldd	r25, Y+4	; 0x04
		time[indx] |= (1<<5);
    2264:	8d ec       	ldi	r24, 0xCD	; 205
    2266:	98 9f       	mul	r25, r24
    2268:	81 2d       	mov	r24, r1
    226a:	11 24       	eor	r1, r1
    226c:	86 95       	lsr	r24
    226e:	86 95       	lsr	r24
    2270:	86 95       	lsr	r24
    2272:	40 e1       	ldi	r20, 0x10	; 16
    2274:	84 9f       	mul	r24, r20
    2276:	90 01       	movw	r18, r0
    2278:	11 24       	eor	r1, r1
    227a:	88 0f       	add	r24, r24
    227c:	38 2f       	mov	r19, r24
    227e:	33 0f       	add	r19, r19
    2280:	33 0f       	add	r19, r19
    2282:	83 0f       	add	r24, r19
    2284:	98 1b       	sub	r25, r24
    2286:	29 2b       	or	r18, r25
    2288:	20 62       	ori	r18, 0x20	; 32
    228a:	2c 83       	std	Y+4, r18	; 0x04
    228c:	18 c0       	rjmp	.+48     	; 0x22be <__stack+0xbf>
	}
	else
	{
		if(time[indx] == 0)
    228e:	81 11       	cpse	r24, r1
    2290:	02 c0       	rjmp	.+4      	; 0x2296 <__stack+0x97>
		{
			time[indx] = 12;
    2292:	8c e0       	ldi	r24, 0x0C	; 12
    2294:	8c 83       	std	Y+4, r24	; 0x04
		}
		time[indx] = ((time[indx]/10)<<4) | (time[indx]%10);		//hr
    2296:	9c 81       	ldd	r25, Y+4	; 0x04
    2298:	8d ec       	ldi	r24, 0xCD	; 205
    229a:	98 9f       	mul	r25, r24
    229c:	81 2d       	mov	r24, r1
    229e:	11 24       	eor	r1, r1
    22a0:	86 95       	lsr	r24
    22a2:	86 95       	lsr	r24
    22a4:	86 95       	lsr	r24
    22a6:	40 e1       	ldi	r20, 0x10	; 16
    22a8:	84 9f       	mul	r24, r20
    22aa:	90 01       	movw	r18, r0
    22ac:	11 24       	eor	r1, r1
    22ae:	88 0f       	add	r24, r24
    22b0:	38 2f       	mov	r19, r24
    22b2:	33 0f       	add	r19, r19
    22b4:	33 0f       	add	r19, r19
    22b6:	83 0f       	add	r24, r19
    22b8:	98 1b       	sub	r25, r24
    22ba:	92 2b       	or	r25, r18
    22bc:	9c 83       	std	Y+4, r25	; 0x04
	}
	time[indx] |= (1<<6);		//Anand 02.07.2014
    22be:	6c 81       	ldd	r22, Y+4	; 0x04
    22c0:	86 2f       	mov	r24, r22
    22c2:	80 64       	ori	r24, 0x40	; 64

	RTC_Write(0x02, (time[indx++] & 0x7F));		//hr
    22c4:	8c 83       	std	Y+4, r24	; 0x04
    22c6:	6f 77       	andi	r22, 0x7F	; 127
    22c8:	60 64       	ori	r22, 0x40	; 64
    22ca:	82 e0       	ldi	r24, 0x02	; 2
    22cc:	93 d3       	rcall	.+1830   	; 0x29f4 <_Z9RTC_Writehh>

	time[indx] = ((time[indx]/10)<<4) | (time[indx]%10);		//Minute
    22ce:	6d 81       	ldd	r22, Y+5	; 0x05
    22d0:	8d ec       	ldi	r24, 0xCD	; 205
    22d2:	68 9f       	mul	r22, r24
    22d4:	81 2d       	mov	r24, r1
    22d6:	11 24       	eor	r1, r1
    22d8:	86 95       	lsr	r24
    22da:	86 95       	lsr	r24
    22dc:	86 95       	lsr	r24
    22de:	90 e1       	ldi	r25, 0x10	; 16
    22e0:	89 9f       	mul	r24, r25
    22e2:	90 01       	movw	r18, r0
    22e4:	11 24       	eor	r1, r1
    22e6:	88 0f       	add	r24, r24
    22e8:	98 2f       	mov	r25, r24
    22ea:	99 0f       	add	r25, r25
    22ec:	99 0f       	add	r25, r25
    22ee:	89 0f       	add	r24, r25
    22f0:	68 1b       	sub	r22, r24
    22f2:	26 2b       	or	r18, r22
	RTC_Write(0x01, (time[indx] & 0x7F)); //min
    22f4:	2d 83       	std	Y+5, r18	; 0x05
    22f6:	62 2f       	mov	r22, r18
    22f8:	6f 77       	andi	r22, 0x7F	; 127
    22fa:	81 e0       	ldi	r24, 0x01	; 1

#ifdef RTC_DS3231
	RTC_Write(0x00, 0x00);
    22fc:	7b d3       	rcall	.+1782   	; 0x29f4 <_Z9RTC_Writehh>
    22fe:	60 e0       	ldi	r22, 0x00	; 0
    2300:	80 e0       	ldi	r24, 0x00	; 0
    2302:	78 d3       	rcall	.+1776   	; 0x29f4 <_Z9RTC_Writehh>
#endif
#ifdef RTC_MCP79410
	RTC_Write(0x00, (0x30 | (1 << RTC_OSC_EN_BIT)));
#endif	
	I2CDeinit();
    2304:	0e 94 89 31 	call	0x6312	; 0x6312 <_Z9I2CDeinitv>
	sei();
    2308:	78 94       	sei
}
    230a:	df 91       	pop	r29
    230c:	cf 91       	pop	r28
    230e:	1f 91       	pop	r17
    2310:	08 95       	ret

00002312 <_Z22gettime_from_time_mainP12time_stamp_t>:

void gettime_from_time_main(time_stamp_t *time_stamp)
{
    2312:	fc 01       	movw	r30, r24
	time_stamp->sec = time_main.sec;
    2314:	a0 e3       	ldi	r26, 0x30	; 48
    2316:	bb e0       	ldi	r27, 0x0B	; 11
    2318:	12 96       	adiw	r26, 0x02	; 2
    231a:	8c 91       	ld	r24, X
    231c:	12 97       	sbiw	r26, 0x02	; 2
    231e:	85 83       	std	Z+5, r24	; 0x05
	time_stamp->min = time_main.minute;
    2320:	13 96       	adiw	r26, 0x03	; 3
    2322:	8c 91       	ld	r24, X
    2324:	13 97       	sbiw	r26, 0x03	; 3
    2326:	84 83       	std	Z+4, r24	; 0x04
	time_stamp->hr = time_main.hour;
    2328:	14 96       	adiw	r26, 0x04	; 4
    232a:	8c 91       	ld	r24, X
    232c:	14 97       	sbiw	r26, 0x04	; 4
    232e:	83 83       	std	Z+3, r24	; 0x03
	time_stamp->dd = time_main.date;
    2330:	15 96       	adiw	r26, 0x05	; 5
    2332:	8c 91       	ld	r24, X
    2334:	15 97       	sbiw	r26, 0x05	; 5
    2336:	82 83       	std	Z+2, r24	; 0x02
	time_stamp->mm = time_main.month;
    2338:	16 96       	adiw	r26, 0x06	; 6
    233a:	8c 91       	ld	r24, X
    233c:	16 97       	sbiw	r26, 0x06	; 6
    233e:	81 83       	std	Z+1, r24	; 0x01
	time_stamp->yr = time_main.year;
    2340:	17 96       	adiw	r26, 0x07	; 7
    2342:	8c 91       	ld	r24, X
    2344:	80 83       	st	Z, r24
    2346:	08 95       	ret

00002348 <_Z17gettime_from_gprsP12time_stamp_t>:
}

void gettime_from_gprs(time_stamp_t *time_stamp)
{
    2348:	fc 01       	movw	r30, r24
	time_stamp->sec = gprs_date_time.sec;
    234a:	ad e8       	ldi	r26, 0x8D	; 141
    234c:	b2 e1       	ldi	r27, 0x12	; 18
    234e:	15 96       	adiw	r26, 0x05	; 5
    2350:	8c 91       	ld	r24, X
    2352:	15 97       	sbiw	r26, 0x05	; 5
    2354:	85 83       	std	Z+5, r24	; 0x05
	time_stamp->min = gprs_date_time.min;
    2356:	14 96       	adiw	r26, 0x04	; 4
    2358:	8c 91       	ld	r24, X
    235a:	14 97       	sbiw	r26, 0x04	; 4
    235c:	84 83       	std	Z+4, r24	; 0x04
	time_stamp->hr = gprs_date_time.hr;
    235e:	13 96       	adiw	r26, 0x03	; 3
    2360:	8c 91       	ld	r24, X
    2362:	13 97       	sbiw	r26, 0x03	; 3
    2364:	83 83       	std	Z+3, r24	; 0x03
	time_stamp->dd = gprs_date_time.dd;
    2366:	12 96       	adiw	r26, 0x02	; 2
    2368:	8c 91       	ld	r24, X
    236a:	12 97       	sbiw	r26, 0x02	; 2
    236c:	82 83       	std	Z+2, r24	; 0x02
	time_stamp->mm = gprs_date_time.mm;
    236e:	11 96       	adiw	r26, 0x01	; 1
    2370:	8c 91       	ld	r24, X
    2372:	11 97       	sbiw	r26, 0x01	; 1
    2374:	81 83       	std	Z+1, r24	; 0x01
	time_stamp->yr = gprs_date_time.yy;
    2376:	8c 91       	ld	r24, X
    2378:	80 83       	st	Z, r24
    237a:	08 95       	ret

0000237c <_Z9time_syncv>:
}

void time_sync(void)
{
    237c:	ef 92       	push	r14
    237e:	ff 92       	push	r15
    2380:	0f 93       	push	r16
    2382:	1f 93       	push	r17
    2384:	cf 93       	push	r28
    2386:	df 93       	push	r29
    2388:	cd b7       	in	r28, 0x3d	; 61
    238a:	de b7       	in	r29, 0x3e	; 62
    238c:	2c 97       	sbiw	r28, 0x0c	; 12
    238e:	0f b6       	in	r0, 0x3f	; 63
    2390:	f8 94       	cli
    2392:	de bf       	out	0x3e, r29	; 62
    2394:	0f be       	out	0x3f, r0	; 63
    2396:	cd bf       	out	0x3d, r28	; 61
	unsigned char data;
	
	if ((gprs_date_time.yy == time_main.year) && (gprs_date_time.mm == time_main.month) && (gprs_date_time.dd == time_main.date) && (gprs_date_time.hr == time_main.hour))
    2398:	90 91 8d 12 	lds	r25, 0x128D	; 0x80128d <gprs_date_time>
    239c:	80 91 37 0b 	lds	r24, 0x0B37	; 0x800b37 <time_main+0x7>
    23a0:	98 13       	cpse	r25, r24
    23a2:	13 c0       	rjmp	.+38     	; 0x23ca <_Z9time_syncv+0x4e>
    23a4:	90 91 8e 12 	lds	r25, 0x128E	; 0x80128e <gprs_date_time+0x1>
    23a8:	80 91 36 0b 	lds	r24, 0x0B36	; 0x800b36 <time_main+0x6>
    23ac:	98 13       	cpse	r25, r24
    23ae:	0d c0       	rjmp	.+26     	; 0x23ca <_Z9time_syncv+0x4e>
    23b0:	90 91 8f 12 	lds	r25, 0x128F	; 0x80128f <gprs_date_time+0x2>
    23b4:	80 91 35 0b 	lds	r24, 0x0B35	; 0x800b35 <time_main+0x5>
    23b8:	98 13       	cpse	r25, r24
    23ba:	07 c0       	rjmp	.+14     	; 0x23ca <_Z9time_syncv+0x4e>
    23bc:	90 91 90 12 	lds	r25, 0x1290	; 0x801290 <gprs_date_time+0x3>
    23c0:	80 91 34 0b 	lds	r24, 0x0B34	; 0x800b34 <time_main+0x4>
    23c4:	98 17       	cp	r25, r24
    23c6:	09 f4       	brne	.+2      	; 0x23ca <_Z9time_syncv+0x4e>
    23c8:	04 c1       	rjmp	.+520    	; 0x25d2 <_Z9time_syncv+0x256>
	else
	{
		//get time_main in gprs_date_time format
		
		time_stamp_t temp_maintime,temp_gprstime;
		gettime_from_time_main(&temp_maintime);//get data in timestamp_t format from time_main to temp
    23ca:	ce 01       	movw	r24, r28
    23cc:	07 96       	adiw	r24, 0x07	; 7
    23ce:	a1 df       	rcall	.-190    	; 0x2312 <_Z22gettime_from_time_mainP12time_stamp_t>
		gettime_from_gprs(&temp_gprstime);
    23d0:	ce 01       	movw	r24, r28
    23d2:	01 96       	adiw	r24, 0x01	; 1
    23d4:	b9 df       	rcall	.-142    	; 0x2348 <_Z17gettime_from_gprsP12time_stamp_t>
		timeDiff = calcTimeDiff(temp_gprstime,temp_maintime);
    23d6:	ef 80       	ldd	r14, Y+7	; 0x07
    23d8:	f8 84       	ldd	r15, Y+8	; 0x08
    23da:	09 85       	ldd	r16, Y+9	; 0x09
    23dc:	1a 85       	ldd	r17, Y+10	; 0x0a
    23de:	2b 85       	ldd	r18, Y+11	; 0x0b
    23e0:	3c 85       	ldd	r19, Y+12	; 0x0c
    23e2:	49 81       	ldd	r20, Y+1	; 0x01
    23e4:	5a 81       	ldd	r21, Y+2	; 0x02
    23e6:	6b 81       	ldd	r22, Y+3	; 0x03
    23e8:	7c 81       	ldd	r23, Y+4	; 0x04
    23ea:	8d 81       	ldd	r24, Y+5	; 0x05
    23ec:	9e 81       	ldd	r25, Y+6	; 0x06
    23ee:	0e 94 9d 42 	call	0x853a	; 0x853a <_Z12calcTimeDiff12time_stamp_tS_>
    23f2:	20 93 2a 0b 	sts	0x0B2A, r18	; 0x800b2a <timeDiff>
    23f6:	30 93 2b 0b 	sts	0x0B2B, r19	; 0x800b2b <timeDiff+0x1>
    23fa:	40 93 2c 0b 	sts	0x0B2C, r20	; 0x800b2c <timeDiff+0x2>
    23fe:	50 93 2d 0b 	sts	0x0B2D, r21	; 0x800b2d <timeDiff+0x3>
    2402:	60 93 2e 0b 	sts	0x0B2E, r22	; 0x800b2e <timeDiff+0x4>
    2406:	70 93 2f 0b 	sts	0x0B2F, r23	; 0x800b2f <timeDiff+0x5>
		if(timeDiff.diffMins>0	&&	timeDiff.diffMins<=10	&&	timeDiff.diffHrs==0		&&	timeDiff.diffDays==0)
    240a:	31 50       	subi	r19, 0x01	; 1
    240c:	3a 30       	cpi	r19, 0x0A	; 10
    240e:	78 f4       	brcc	.+30     	; 0x242e <_Z9time_syncv+0xb2>
    2410:	21 11       	cpse	r18, r1
    2412:	0d c0       	rjmp	.+26     	; 0x242e <_Z9time_syncv+0xb2>
    2414:	80 91 2c 0b 	lds	r24, 0x0B2C	; 0x800b2c <timeDiff+0x2>
    2418:	90 91 2d 0b 	lds	r25, 0x0B2D	; 0x800b2d <timeDiff+0x3>
    241c:	a0 91 2e 0b 	lds	r26, 0x0B2E	; 0x800b2e <timeDiff+0x4>
    2420:	b0 91 2f 0b 	lds	r27, 0x0B2F	; 0x800b2f <timeDiff+0x5>
    2424:	89 2b       	or	r24, r25
    2426:	8a 2b       	or	r24, r26
    2428:	8b 2b       	or	r24, r27
    242a:	09 f4       	brne	.+2      	; 0x242e <_Z9time_syncv+0xb2>
    242c:	d2 c0       	rjmp	.+420    	; 0x25d2 <_Z9time_syncv+0x256>
		}
		
		
		else
		{
			cli();
    242e:	f8 94       	cli
			I2CInit();
    2430:	0e 94 7b 31 	call	0x62f6	; 0x62f6 <_Z7I2CInitv>
			data = (((gprs_date_time.yy / 10) * 16) | (gprs_date_time.yy % 10));
    2434:	0f 2e       	mov	r0, r31
    2436:	fd e8       	ldi	r31, 0x8D	; 141
    2438:	ef 2e       	mov	r14, r31
    243a:	f2 e1       	ldi	r31, 0x12	; 18
    243c:	ff 2e       	mov	r15, r31
    243e:	f0 2d       	mov	r31, r0
    2440:	f7 01       	movw	r30, r14
    2442:	90 81       	ld	r25, Z
			RTC_Write(0x06, data);		//Year
    2444:	1d ec       	ldi	r17, 0xCD	; 205
    2446:	91 9f       	mul	r25, r17
    2448:	81 2d       	mov	r24, r1
    244a:	11 24       	eor	r1, r1
    244c:	86 95       	lsr	r24
    244e:	86 95       	lsr	r24
    2450:	86 95       	lsr	r24
    2452:	68 2f       	mov	r22, r24
    2454:	62 95       	swap	r22
    2456:	60 7f       	andi	r22, 0xF0	; 240
    2458:	88 0f       	add	r24, r24
    245a:	28 2f       	mov	r18, r24
    245c:	22 0f       	add	r18, r18
    245e:	22 0f       	add	r18, r18
    2460:	82 0f       	add	r24, r18
    2462:	98 1b       	sub	r25, r24
    2464:	69 2b       	or	r22, r25
    2466:	86 e0       	ldi	r24, 0x06	; 6
    2468:	c5 d2       	rcall	.+1418   	; 0x29f4 <_Z9RTC_Writehh>
			data = (((gprs_date_time.mm / 10) * 16) | (gprs_date_time.mm % 10));
    246a:	f7 01       	movw	r30, r14
    246c:	81 81       	ldd	r24, Z+1	; 0x01
			RTC_Write(0x05, data & 0x1F);		//Month
    246e:	81 9f       	mul	r24, r17
    2470:	91 2d       	mov	r25, r1
    2472:	11 24       	eor	r1, r1
    2474:	96 95       	lsr	r25
    2476:	96 95       	lsr	r25
    2478:	96 95       	lsr	r25
    247a:	69 2f       	mov	r22, r25
    247c:	62 95       	swap	r22
    247e:	60 7f       	andi	r22, 0xF0	; 240
    2480:	99 0f       	add	r25, r25
    2482:	29 2f       	mov	r18, r25
    2484:	22 0f       	add	r18, r18
    2486:	22 0f       	add	r18, r18
    2488:	92 0f       	add	r25, r18
    248a:	89 1b       	sub	r24, r25
    248c:	68 2b       	or	r22, r24
    248e:	6f 71       	andi	r22, 0x1F	; 31
    2490:	85 e0       	ldi	r24, 0x05	; 5
    2492:	b0 d2       	rcall	.+1376   	; 0x29f4 <_Z9RTC_Writehh>
			data = (((gprs_date_time.dd / 10) * 16) | (gprs_date_time.dd % 10));
    2494:	f7 01       	movw	r30, r14
    2496:	82 81       	ldd	r24, Z+2	; 0x02
			RTC_Write(0x04, data & 0x3F);		//Date
    2498:	81 9f       	mul	r24, r17
    249a:	11 2d       	mov	r17, r1
    249c:	11 24       	eor	r1, r1
    249e:	16 95       	lsr	r17
    24a0:	16 95       	lsr	r17
    24a2:	16 95       	lsr	r17
    24a4:	61 2f       	mov	r22, r17
    24a6:	62 95       	swap	r22
    24a8:	60 7f       	andi	r22, 0xF0	; 240
    24aa:	11 0f       	add	r17, r17
    24ac:	91 2f       	mov	r25, r17
    24ae:	99 0f       	add	r25, r25
    24b0:	99 0f       	add	r25, r25
    24b2:	19 0f       	add	r17, r25
    24b4:	81 1b       	sub	r24, r17
    24b6:	68 2b       	or	r22, r24
    24b8:	6f 73       	andi	r22, 0x3F	; 63
    24ba:	84 e0       	ldi	r24, 0x04	; 4
#ifdef RTC_DS3231
			RTC_Write(0x03, (1 & 0x07));
    24bc:	9b d2       	rcall	.+1334   	; 0x29f4 <_Z9RTC_Writehh>
    24be:	61 e0       	ldi	r22, 0x01	; 1
    24c0:	83 e0       	ldi	r24, 0x03	; 3
    24c2:	98 d2       	rcall	.+1328   	; 0x29f4 <_Z9RTC_Writehh>
#endif
#ifdef RTC_MCP79410
			RTC_Write(0x03, ((1 & 0x07) | (1 << RTC_VBAT_EN_BIT)));		//Day: 1-7, 1=Sunday
#endif
			if(gprs_date_time.hr >= 12)
    24c4:	f7 01       	movw	r30, r14
    24c6:	83 81       	ldd	r24, Z+3	; 0x03
    24c8:	8c 30       	cpi	r24, 0x0C	; 12
    24ca:	48 f1       	brcs	.+82     	; 0x251e <_Z9time_syncv+0x1a2>
			{
				if(gprs_date_time.hr > 12)
    24cc:	8d 30       	cpi	r24, 0x0D	; 13
    24ce:	78 f0       	brcs	.+30     	; 0x24ee <_Z9time_syncv+0x172>
				{
					gprs_date_time.hr %= 12;
    24d0:	9b ea       	ldi	r25, 0xAB	; 171
    24d2:	89 9f       	mul	r24, r25
    24d4:	91 2d       	mov	r25, r1
    24d6:	11 24       	eor	r1, r1
    24d8:	96 95       	lsr	r25
    24da:	96 95       	lsr	r25
    24dc:	96 95       	lsr	r25
    24de:	29 2f       	mov	r18, r25
    24e0:	22 0f       	add	r18, r18
    24e2:	92 0f       	add	r25, r18
    24e4:	99 0f       	add	r25, r25
    24e6:	99 0f       	add	r25, r25
    24e8:	89 1b       	sub	r24, r25
    24ea:	80 93 90 12 	sts	0x1290, r24	; 0x801290 <gprs_date_time+0x3>
				}
				gprs_date_time.hr = ((gprs_date_time.hr/10)<<4) | (gprs_date_time.hr%10);		//hr
    24ee:	ed e8       	ldi	r30, 0x8D	; 141
    24f0:	f2 e1       	ldi	r31, 0x12	; 18
    24f2:	93 81       	ldd	r25, Z+3	; 0x03
				gprs_date_time.hr |= (1<<5);
    24f4:	8d ec       	ldi	r24, 0xCD	; 205
    24f6:	98 9f       	mul	r25, r24
    24f8:	81 2d       	mov	r24, r1
    24fa:	11 24       	eor	r1, r1
    24fc:	86 95       	lsr	r24
    24fe:	86 95       	lsr	r24
    2500:	86 95       	lsr	r24
    2502:	40 e1       	ldi	r20, 0x10	; 16
    2504:	84 9f       	mul	r24, r20
    2506:	90 01       	movw	r18, r0
    2508:	11 24       	eor	r1, r1
    250a:	88 0f       	add	r24, r24
    250c:	38 2f       	mov	r19, r24
    250e:	33 0f       	add	r19, r19
    2510:	33 0f       	add	r19, r19
    2512:	83 0f       	add	r24, r19
    2514:	98 1b       	sub	r25, r24
    2516:	29 2b       	or	r18, r25
    2518:	20 62       	ori	r18, 0x20	; 32
    251a:	23 83       	std	Z+3, r18	; 0x03
    251c:	1b c0       	rjmp	.+54     	; 0x2554 <_Z9time_syncv+0x1d8>
			}
			else
			{
				if(gprs_date_time.hr == 0)
    251e:	81 11       	cpse	r24, r1
    2520:	03 c0       	rjmp	.+6      	; 0x2528 <_Z9time_syncv+0x1ac>
				{
					gprs_date_time.hr = 12;
    2522:	8c e0       	ldi	r24, 0x0C	; 12
    2524:	80 93 90 12 	sts	0x1290, r24	; 0x801290 <gprs_date_time+0x3>
				}
				gprs_date_time.hr = ((gprs_date_time.hr/10)<<4) | (gprs_date_time.hr%10);		//hr
    2528:	ed e8       	ldi	r30, 0x8D	; 141
    252a:	f2 e1       	ldi	r31, 0x12	; 18
    252c:	93 81       	ldd	r25, Z+3	; 0x03
    252e:	8d ec       	ldi	r24, 0xCD	; 205
    2530:	98 9f       	mul	r25, r24
    2532:	81 2d       	mov	r24, r1
    2534:	11 24       	eor	r1, r1
    2536:	86 95       	lsr	r24
    2538:	86 95       	lsr	r24
    253a:	86 95       	lsr	r24
    253c:	40 e1       	ldi	r20, 0x10	; 16
    253e:	84 9f       	mul	r24, r20
    2540:	90 01       	movw	r18, r0
    2542:	11 24       	eor	r1, r1
    2544:	88 0f       	add	r24, r24
    2546:	38 2f       	mov	r19, r24
    2548:	33 0f       	add	r19, r19
    254a:	33 0f       	add	r19, r19
    254c:	83 0f       	add	r24, r19
    254e:	98 1b       	sub	r25, r24
    2550:	92 2b       	or	r25, r18
    2552:	93 83       	std	Z+3, r25	; 0x03
			}
			gprs_date_time.hr |= (1<<6);		//Anand 02.07.2014
    2554:	0f 2e       	mov	r0, r31
    2556:	fd e8       	ldi	r31, 0x8D	; 141
    2558:	ef 2e       	mov	r14, r31
    255a:	f2 e1       	ldi	r31, 0x12	; 18
    255c:	ff 2e       	mov	r15, r31
    255e:	f0 2d       	mov	r31, r0
    2560:	f7 01       	movw	r30, r14
    2562:	63 81       	ldd	r22, Z+3	; 0x03
    2564:	86 2f       	mov	r24, r22
    2566:	80 64       	ori	r24, 0x40	; 64

			RTC_Write(0x02, (gprs_date_time.hr & 0x7F));		//hr
    2568:	83 83       	std	Z+3, r24	; 0x03
    256a:	6f 77       	andi	r22, 0x7F	; 127
    256c:	60 64       	ori	r22, 0x40	; 64
    256e:	82 e0       	ldi	r24, 0x02	; 2
    2570:	41 d2       	rcall	.+1154   	; 0x29f4 <_Z9RTC_Writehh>
			data = (((gprs_date_time.min / 10) * 16) | (gprs_date_time.min % 10));
    2572:	f7 01       	movw	r30, r14
    2574:	84 81       	ldd	r24, Z+4	; 0x04
			RTC_Write(0x01, (data & 0x7F)); //min
    2576:	1d ec       	ldi	r17, 0xCD	; 205
    2578:	81 9f       	mul	r24, r17
    257a:	91 2d       	mov	r25, r1
    257c:	11 24       	eor	r1, r1
    257e:	96 95       	lsr	r25
    2580:	96 95       	lsr	r25
    2582:	96 95       	lsr	r25
    2584:	69 2f       	mov	r22, r25
    2586:	62 95       	swap	r22
    2588:	60 7f       	andi	r22, 0xF0	; 240
    258a:	99 0f       	add	r25, r25
    258c:	29 2f       	mov	r18, r25
    258e:	22 0f       	add	r18, r18
    2590:	22 0f       	add	r18, r18
    2592:	92 0f       	add	r25, r18
    2594:	89 1b       	sub	r24, r25
    2596:	68 2b       	or	r22, r24
    2598:	6f 77       	andi	r22, 0x7F	; 127
    259a:	81 e0       	ldi	r24, 0x01	; 1
    259c:	2b d2       	rcall	.+1110   	; 0x29f4 <_Z9RTC_Writehh>
			
			data = (((gprs_date_time.sec / 10) * 16) | (gprs_date_time.sec % 10));
    259e:	f7 01       	movw	r30, r14
    25a0:	85 81       	ldd	r24, Z+5	; 0x05
			
#ifdef RTC_DS3231
			RTC_Write(0x00, (data & 0x7F)); //sec
    25a2:	81 9f       	mul	r24, r17
    25a4:	11 2d       	mov	r17, r1
    25a6:	11 24       	eor	r1, r1
    25a8:	16 95       	lsr	r17
    25aa:	16 95       	lsr	r17
    25ac:	16 95       	lsr	r17
    25ae:	61 2f       	mov	r22, r17
    25b0:	62 95       	swap	r22
    25b2:	60 7f       	andi	r22, 0xF0	; 240
    25b4:	11 0f       	add	r17, r17
    25b6:	91 2f       	mov	r25, r17
    25b8:	99 0f       	add	r25, r25
    25ba:	99 0f       	add	r25, r25
    25bc:	19 0f       	add	r17, r25
    25be:	81 1b       	sub	r24, r17
    25c0:	68 2b       	or	r22, r24
    25c2:	6f 77       	andi	r22, 0x7F	; 127
    25c4:	80 e0       	ldi	r24, 0x00	; 0
    25c6:	16 d2       	rcall	.+1068   	; 0x29f4 <_Z9RTC_Writehh>
#endif
#ifdef RTC_MCP79410
			RTC_Write(0x00, ((data & 0x7F) | (1 << RTC_OSC_EN_BIT)));
#endif
			I2CDeinit();		//Anand 13.07.2014
    25c8:	0e 94 89 31 	call	0x6312	; 0x6312 <_Z9I2CDeinitv>
			sei();
    25cc:	78 94       	sei
			
			gprs_date_time.update_time_aval = FALSE;
    25ce:	f7 01       	movw	r30, r14
    25d0:	16 82       	std	Z+6, r1	; 0x06

		}
	}
}
    25d2:	2c 96       	adiw	r28, 0x0c	; 12
    25d4:	0f b6       	in	r0, 0x3f	; 63
    25d6:	f8 94       	cli
    25d8:	de bf       	out	0x3e, r29	; 62
    25da:	0f be       	out	0x3f, r0	; 63
    25dc:	cd bf       	out	0x3d, r28	; 61
    25de:	df 91       	pop	r29
    25e0:	cf 91       	pop	r28
    25e2:	1f 91       	pop	r17
    25e4:	0f 91       	pop	r16
    25e6:	ff 90       	pop	r15
    25e8:	ef 90       	pop	r14
    25ea:	08 95       	ret

000025ec <_Z11getDateTimev>:
time_stamp_t time_stamp;
timeDiff_t timeDiff = {0, 0, 0};//abdul majeed

extern gprs_date_time_t gprs_date_time;
void getDateTime(void)
{
    25ec:	ef 92       	push	r14
    25ee:	ff 92       	push	r15
    25f0:	0f 93       	push	r16
    25f2:	1f 93       	push	r17
    25f4:	cf 93       	push	r28
    25f6:	df 93       	push	r29
    25f8:	1f 92       	push	r1
    25fa:	cd b7       	in	r28, 0x3d	; 61
    25fc:	de b7       	in	r29, 0x3e	; 62
	char error = 0;
	int i;
	cli();
    25fe:	f8 94       	cli
	I2CInit();		//Anand 13.07.2014
    2600:	0e 94 7b 31 	call	0x62f6	; 0x62f6 <_Z7I2CInitv>
	uint8_t data;
	memset((void *)&time_main, 1, sizeof(time_main_t));
    2604:	48 e0       	ldi	r20, 0x08	; 8
    2606:	50 e0       	ldi	r21, 0x00	; 0
    2608:	61 e0       	ldi	r22, 0x01	; 1
    260a:	70 e0       	ldi	r23, 0x00	; 0
    260c:	80 e3       	ldi	r24, 0x30	; 48
    260e:	9b e0       	ldi	r25, 0x0B	; 11
    2610:	0e 94 af 47 	call	0x8f5e	; 0x8f5e <memset>
	for (i = 0; i < 3; i++)
    2614:	e1 2c       	mov	r14, r1
    2616:	f1 2c       	mov	r15, r1
	{	
		error = 0;
		RTC_Read(0x00,&data);  //sec
		time_main.sec = ((((data & 0b01110000) / 16) * 10) + (data & 0b00001111));
    2618:	00 e3       	ldi	r16, 0x30	; 48
    261a:	1b e0       	ldi	r17, 0x0B	; 11
	uint8_t data;
	memset((void *)&time_main, 1, sizeof(time_main_t));
	for (i = 0; i < 3; i++)
	{	
		error = 0;
		RTC_Read(0x00,&data);  //sec
    261c:	be 01       	movw	r22, r28
    261e:	6f 5f       	subi	r22, 0xFF	; 255
    2620:	7f 4f       	sbci	r23, 0xFF	; 255
    2622:	80 e0       	ldi	r24, 0x00	; 0
    2624:	ae d1       	rcall	.+860    	; 0x2982 <_Z8RTC_ReadhPh>
		time_main.sec = ((((data & 0b01110000) / 16) * 10) + (data & 0b00001111));
    2626:	89 81       	ldd	r24, Y+1	; 0x01
    2628:	98 2f       	mov	r25, r24
    262a:	90 77       	andi	r25, 0x70	; 112
    262c:	96 95       	lsr	r25
    262e:	96 95       	lsr	r25
    2630:	96 95       	lsr	r25
    2632:	29 2f       	mov	r18, r25
    2634:	22 0f       	add	r18, r18
    2636:	22 0f       	add	r18, r18
    2638:	92 0f       	add	r25, r18
    263a:	8f 70       	andi	r24, 0x0F	; 15
    263c:	89 0f       	add	r24, r25
    263e:	f8 01       	movw	r30, r16
    2640:	82 83       	std	Z+2, r24	; 0x02
		
		RTC_Read(0x01,&data); //min
    2642:	be 01       	movw	r22, r28
    2644:	6f 5f       	subi	r22, 0xFF	; 255
    2646:	7f 4f       	sbci	r23, 0xFF	; 255
    2648:	81 e0       	ldi	r24, 0x01	; 1
    264a:	9b d1       	rcall	.+822    	; 0x2982 <_Z8RTC_ReadhPh>
		time_main.minute = ((((data & 0b01110000) / 16) * 10) + (data & 0b00001111));
    264c:	89 81       	ldd	r24, Y+1	; 0x01
    264e:	98 2f       	mov	r25, r24
    2650:	90 77       	andi	r25, 0x70	; 112
    2652:	96 95       	lsr	r25
    2654:	96 95       	lsr	r25
    2656:	96 95       	lsr	r25
    2658:	29 2f       	mov	r18, r25
    265a:	22 0f       	add	r18, r18
    265c:	22 0f       	add	r18, r18
    265e:	92 0f       	add	r25, r18
    2660:	8f 70       	andi	r24, 0x0F	; 15
    2662:	89 0f       	add	r24, r25
    2664:	f8 01       	movw	r30, r16
    2666:	83 83       	std	Z+3, r24	; 0x03
		
		RTC_Read(0x02,&data);  //hour
    2668:	be 01       	movw	r22, r28
    266a:	6f 5f       	subi	r22, 0xFF	; 255
    266c:	7f 4f       	sbci	r23, 0xFF	; 255
    266e:	82 e0       	ldi	r24, 0x02	; 2
    2670:	88 d1       	rcall	.+784    	; 0x2982 <_Z8RTC_ReadhPh>
		time_main.hour = ((((data & 0b00010000)/16) * 10) + (data & 0b00001111));
    2672:	29 81       	ldd	r18, Y+1	; 0x01
    2674:	24 fb       	bst	r18, 4
    2676:	88 27       	eor	r24, r24
    2678:	80 f9       	bld	r24, 0
    267a:	88 0f       	add	r24, r24
    267c:	98 2f       	mov	r25, r24
    267e:	99 0f       	add	r25, r25
    2680:	99 0f       	add	r25, r25
    2682:	89 0f       	add	r24, r25
    2684:	92 2f       	mov	r25, r18
    2686:	9f 70       	andi	r25, 0x0F	; 15
    2688:	89 0f       	add	r24, r25
    268a:	f8 01       	movw	r30, r16
    268c:	84 83       	std	Z+4, r24	; 0x04
		
		if(data & 0b00100000)
    268e:	25 ff       	sbrs	r18, 5
    2690:	07 c0       	rjmp	.+14     	; 0x26a0 <_Z11getDateTimev+0xb4>
		{
			time_main.ampm = 1;
    2692:	91 e0       	ldi	r25, 0x01	; 1
    2694:	91 83       	std	Z+1, r25	; 0x01
			if (time_main.hour < 12)
    2696:	8c 30       	cpi	r24, 0x0C	; 12
    2698:	40 f4       	brcc	.+16     	; 0x26aa <_Z11getDateTimev+0xbe>
			{
				time_main.hour = time_main.hour+12;
    269a:	84 5f       	subi	r24, 0xF4	; 244
    269c:	84 83       	std	Z+4, r24	; 0x04
    269e:	05 c0       	rjmp	.+10     	; 0x26aa <_Z11getDateTimev+0xbe>
			}
		}
		else
		{
			time_main.ampm = 0;
    26a0:	f8 01       	movw	r30, r16
    26a2:	11 82       	std	Z+1, r1	; 0x01
			if (time_main.hour == 12)
    26a4:	8c 30       	cpi	r24, 0x0C	; 12
    26a6:	09 f4       	brne	.+2      	; 0x26aa <_Z11getDateTimev+0xbe>
			{
				time_main.hour = 0;
    26a8:	14 82       	std	Z+4, r1	; 0x04
			}
		}
		RTC_Read(0x06,&data); //year
    26aa:	be 01       	movw	r22, r28
    26ac:	6f 5f       	subi	r22, 0xFF	; 255
    26ae:	7f 4f       	sbci	r23, 0xFF	; 255
    26b0:	86 e0       	ldi	r24, 0x06	; 6
    26b2:	67 d1       	rcall	.+718    	; 0x2982 <_Z8RTC_ReadhPh>
		
		time_main.year = ((((data & 0b11110000)/ 16) * 10) +(data & 0b00001111));
    26b4:	89 81       	ldd	r24, Y+1	; 0x01
    26b6:	98 2f       	mov	r25, r24
    26b8:	90 7f       	andi	r25, 0xF0	; 240
    26ba:	96 95       	lsr	r25
    26bc:	96 95       	lsr	r25
    26be:	96 95       	lsr	r25
    26c0:	29 2f       	mov	r18, r25
    26c2:	22 0f       	add	r18, r18
    26c4:	22 0f       	add	r18, r18
    26c6:	92 0f       	add	r25, r18
    26c8:	8f 70       	andi	r24, 0x0F	; 15
    26ca:	89 0f       	add	r24, r25
    26cc:	f8 01       	movw	r30, r16
    26ce:	87 83       	std	Z+7, r24	; 0x07
		
		RTC_Read(0x05,&data); //month
    26d0:	be 01       	movw	r22, r28
    26d2:	6f 5f       	subi	r22, 0xFF	; 255
    26d4:	7f 4f       	sbci	r23, 0xFF	; 255
    26d6:	85 e0       	ldi	r24, 0x05	; 5
    26d8:	54 d1       	rcall	.+680    	; 0x2982 <_Z8RTC_ReadhPh>
		time_main.month = ((((data & 0b00010000) / 16) * 10) + (data & 0b00001111));
    26da:	89 81       	ldd	r24, Y+1	; 0x01
    26dc:	84 fb       	bst	r24, 4
    26de:	99 27       	eor	r25, r25
    26e0:	90 f9       	bld	r25, 0
    26e2:	99 0f       	add	r25, r25
    26e4:	29 2f       	mov	r18, r25
    26e6:	22 0f       	add	r18, r18
    26e8:	22 0f       	add	r18, r18
    26ea:	92 0f       	add	r25, r18
    26ec:	8f 70       	andi	r24, 0x0F	; 15
    26ee:	89 0f       	add	r24, r25
    26f0:	f8 01       	movw	r30, r16
		
		RTC_Read(0x04,&data); //date
    26f2:	86 83       	std	Z+6, r24	; 0x06
    26f4:	be 01       	movw	r22, r28
    26f6:	6f 5f       	subi	r22, 0xFF	; 255
    26f8:	7f 4f       	sbci	r23, 0xFF	; 255
    26fa:	84 e0       	ldi	r24, 0x04	; 4
    26fc:	42 d1       	rcall	.+644    	; 0x2982 <_Z8RTC_ReadhPh>
		time_main.date = ((((data & 0b00110000)/16) * 10) + (data & 0b00001111));
    26fe:	89 81       	ldd	r24, Y+1	; 0x01
    2700:	98 2f       	mov	r25, r24
    2702:	90 73       	andi	r25, 0x30	; 48
    2704:	96 95       	lsr	r25
    2706:	96 95       	lsr	r25
    2708:	96 95       	lsr	r25
    270a:	29 2f       	mov	r18, r25
    270c:	22 0f       	add	r18, r18
    270e:	22 0f       	add	r18, r18
    2710:	92 0f       	add	r25, r18
    2712:	8f 70       	andi	r24, 0x0F	; 15
    2714:	89 0f       	add	r24, r25
    2716:	f8 01       	movw	r30, r16
		
		RTC_Read(0x03,&data); //day
    2718:	85 83       	std	Z+5, r24	; 0x05
    271a:	be 01       	movw	r22, r28
    271c:	6f 5f       	subi	r22, 0xFF	; 255
    271e:	7f 4f       	sbci	r23, 0xFF	; 255
    2720:	83 e0       	ldi	r24, 0x03	; 3
    2722:	2f d1       	rcall	.+606    	; 0x2982 <_Z8RTC_ReadhPh>
		time_main.dan=data & 0b00000111;
    2724:	89 81       	ldd	r24, Y+1	; 0x01
    2726:	87 70       	andi	r24, 0x07	; 7
    2728:	f8 01       	movw	r30, r16
    272a:	80 83       	st	Z, r24
		
		if (((time_main.date <= 0) || (time_main.date > 31)) || 
    272c:	85 81       	ldd	r24, Z+5	; 0x05
    272e:	81 50       	subi	r24, 0x01	; 1
    2730:	8f 31       	cpi	r24, 0x1F	; 31
    2732:	38 f5       	brcc	.+78     	; 0x2782 <_Z11getDateTimev+0x196>
    2734:	86 81       	ldd	r24, Z+6	; 0x06
    2736:	81 50       	subi	r24, 0x01	; 1
    2738:	8c 30       	cpi	r24, 0x0C	; 12
    273a:	18 f5       	brcc	.+70     	; 0x2782 <_Z11getDateTimev+0x196>
			((time_main.month <= 0) || (time_main.month > 12)) || 
    273c:	87 81       	ldd	r24, Z+7	; 0x07
    273e:	80 51       	subi	r24, 0x10	; 16
    2740:	84 35       	cpi	r24, 0x54	; 84
    2742:	f8 f4       	brcc	.+62     	; 0x2782 <_Z11getDateTimev+0x196>
			((time_main.year < 16) || (time_main.year > 99))||			// Assuming that RTC will never go below 2016.
    2744:	84 81       	ldd	r24, Z+4	; 0x04
    2746:	88 31       	cpi	r24, 0x18	; 24
    2748:	e0 f4       	brcc	.+56     	; 0x2782 <_Z11getDateTimev+0x196>
			((time_main.hour < 0) || (time_main.hour > 23)) || 
    274a:	83 81       	ldd	r24, Z+3	; 0x03
    274c:	8c 33       	cpi	r24, 0x3C	; 60
    274e:	c8 f4       	brcc	.+50     	; 0x2782 <_Z11getDateTimev+0x196>
			((time_main.minute < 0) || (time_main.minute > 59)) ||
    2750:	82 81       	ldd	r24, Z+2	; 0x02
    2752:	8c 33       	cpi	r24, 0x3C	; 60
    2754:	b0 f4       	brcc	.+44     	; 0x2782 <_Z11getDateTimev+0x196>

			
			break;
		}
	}
	I2CDeinit();		//Anand 13.07.2014
    2756:	0e 94 89 31 	call	0x6312	; 0x6312 <_Z9I2CDeinitv>
	sei();
    275a:	78 94       	sei
	if (i >= 3)
    275c:	f3 e0       	ldi	r31, 0x03	; 3
    275e:	ef 16       	cp	r14, r31
    2760:	f1 04       	cpc	r15, r1
    2762:	4c f0       	brlt	.+18     	; 0x2776 <_Z11getDateTimev+0x18a>
	{
		// Generate RTC Error flag in diagnosis.
		time_main.date = 1;
    2764:	e0 e3       	ldi	r30, 0x30	; 48
    2766:	fb e0       	ldi	r31, 0x0B	; 11
    2768:	81 e0       	ldi	r24, 0x01	; 1
    276a:	85 83       	std	Z+5, r24	; 0x05
		time_main.month = 1;
    276c:	86 83       	std	Z+6, r24	; 0x06
		time_main.year = 0;
    276e:	17 82       	std	Z+7, r1	; 0x07
		time_main.hour = 0;
		time_main.minute = 1;
    2770:	14 82       	std	Z+4, r1	; 0x04
		time_main.sec = 0;
    2772:	83 83       	std	Z+3, r24	; 0x03
		error = 1;	
		
	}
	
#ifdef GPRS_ENABLE
	if (gprs_date_time.update_time_aval == TRUE)
    2774:	12 82       	std	Z+2, r1	; 0x02
    2776:	80 91 93 12 	lds	r24, 0x1293	; 0x801293 <gprs_date_time+0x6>
    277a:	81 30       	cpi	r24, 0x01	; 1
	{

		time_sync();		//for E4E RTU
    277c:	59 f4       	brne	.+22     	; 0x2794 <_Z11getDateTimev+0x1a8>
    277e:	fe dd       	rcall	.-1028   	; 0x237c <_Z9time_syncv>
	}
#endif
}
    2780:	09 c0       	rjmp	.+18     	; 0x2794 <_Z11getDateTimev+0x1a8>
	int i;
	cli();
	I2CInit();		//Anand 13.07.2014
	uint8_t data;
	memset((void *)&time_main, 1, sizeof(time_main_t));
	for (i = 0; i < 3; i++)
    2782:	8f ef       	ldi	r24, 0xFF	; 255
    2784:	e8 1a       	sub	r14, r24
    2786:	f8 0a       	sbc	r15, r24
    2788:	e3 e0       	ldi	r30, 0x03	; 3
    278a:	ee 16       	cp	r14, r30
    278c:	f1 04       	cpc	r15, r1
    278e:	09 f0       	breq	.+2      	; 0x2792 <_Z11getDateTimev+0x1a6>
    2790:	45 cf       	rjmp	.-374    	; 0x261c <_Z11getDateTimev+0x30>
    2792:	e1 cf       	rjmp	.-62     	; 0x2756 <_Z11getDateTimev+0x16a>
	{

		time_sync();		//for E4E RTU
	}
#endif
}
    2794:	0f 90       	pop	r0
    2796:	df 91       	pop	r29
    2798:	cf 91       	pop	r28
    279a:	1f 91       	pop	r17
    279c:	0f 91       	pop	r16
    279e:	ff 90       	pop	r15
    27a0:	ef 90       	pop	r14
    27a2:	08 95       	ret

000027a4 <_Z16get_present_timeP12time_stamp_t>:
void get_present_time(time_stamp_t *time_stamp)
{
    27a4:	cf 93       	push	r28
    27a6:	df 93       	push	r29
    27a8:	ec 01       	movw	r28, r24
	getDateTime();
    27aa:	20 df       	rcall	.-448    	; 0x25ec <_Z11getDateTimev>
	time_stamp->sec = time_main.sec;
    27ac:	e0 e3       	ldi	r30, 0x30	; 48
    27ae:	fb e0       	ldi	r31, 0x0B	; 11
    27b0:	82 81       	ldd	r24, Z+2	; 0x02
    27b2:	8d 83       	std	Y+5, r24	; 0x05
	time_stamp->min = time_main.minute;
    27b4:	83 81       	ldd	r24, Z+3	; 0x03
    27b6:	8c 83       	std	Y+4, r24	; 0x04
	time_stamp->hr = time_main.hour;
    27b8:	84 81       	ldd	r24, Z+4	; 0x04
    27ba:	8b 83       	std	Y+3, r24	; 0x03
	time_stamp->dd = time_main.date;
    27bc:	85 81       	ldd	r24, Z+5	; 0x05
    27be:	8a 83       	std	Y+2, r24	; 0x02
	time_stamp->mm = time_main.month;
    27c0:	86 81       	ldd	r24, Z+6	; 0x06
    27c2:	89 83       	std	Y+1, r24	; 0x01
	time_stamp->yr = time_main.year;
    27c4:	87 81       	ldd	r24, Z+7	; 0x07
    27c6:	88 83       	st	Y, r24


}
    27c8:	df 91       	pop	r29
    27ca:	cf 91       	pop	r28
    27cc:	08 95       	ret

000027ce <_Z15check_date_timePcS_>:
		}
	}
}

unsigned char check_date_time(char *str, char *arr)
{
    27ce:	cf 92       	push	r12
    27d0:	df 92       	push	r13
    27d2:	ef 92       	push	r14
    27d4:	ff 92       	push	r15
    27d6:	0f 93       	push	r16
    27d8:	1f 93       	push	r17
    27da:	cf 93       	push	r28
    27dc:	df 93       	push	r29
    27de:	8b 01       	movw	r16, r22
	int i = 0;
	char *ptr = arr;
	*ptr = 0;
    27e0:	db 01       	movw	r26, r22
    27e2:	1c 92       	st	X, r1
    27e4:	fc 01       	movw	r30, r24
    27e6:	20 e0       	ldi	r18, 0x00	; 0
    27e8:	30 e0       	ldi	r19, 0x00	; 0
			*ptr *= 10;
			*ptr += (str[i] - '0');
		}
		else
		{
			if ((i + 1) % 3)
    27ea:	0f 2e       	mov	r0, r31
    27ec:	f3 e0       	ldi	r31, 0x03	; 3
    27ee:	ef 2e       	mov	r14, r31
    27f0:	f1 2c       	mov	r15, r1
    27f2:	f0 2d       	mov	r31, r0
    27f4:	02 c0       	rjmp	.+4      	; 0x27fa <_Z15check_date_timePcS_+0x2c>
    27f6:	31 96       	adiw	r30, 0x01	; 1
    27f8:	9e 01       	movw	r18, r28
    27fa:	69 01       	movw	r12, r18
	int i = 0;
	char *ptr = arr;
	*ptr = 0;
	for (i = 0; i < 17; i++)
	{
		if(isdigit(str[i]))
    27fc:	40 81       	ld	r20, Z
    27fe:	e9 01       	movw	r28, r18
    2800:	21 96       	adiw	r28, 0x01	; 1
    2802:	84 2f       	mov	r24, r20
    2804:	90 e0       	ldi	r25, 0x00	; 0
    2806:	c0 97       	sbiw	r24, 0x30	; 48
    2808:	0a 97       	sbiw	r24, 0x0a	; 10
    280a:	68 f4       	brcc	.+26     	; 0x2826 <_Z15check_date_timePcS_+0x58>
		{
			*ptr *= 10;
    280c:	d8 01       	movw	r26, r16
    280e:	8c 91       	ld	r24, X
    2810:	88 0f       	add	r24, r24
    2812:	98 2f       	mov	r25, r24
    2814:	99 0f       	add	r25, r25
    2816:	99 0f       	add	r25, r25
    2818:	89 0f       	add	r24, r25
    281a:	8c 93       	st	X, r24
			*ptr += (str[i] - '0');
    281c:	90 81       	ld	r25, Z
    281e:	89 0f       	add	r24, r25
    2820:	80 53       	subi	r24, 0x30	; 48
    2822:	8c 93       	st	X, r24
    2824:	2f c0       	rjmp	.+94     	; 0x2884 <_Z15check_date_timePcS_+0xb6>
		}
		else
		{
			if ((i + 1) % 3)
    2826:	ce 01       	movw	r24, r28
    2828:	b7 01       	movw	r22, r14
    282a:	0e 94 c5 46 	call	0x8d8a	; 0x8d8a <__divmodhi4>
    282e:	89 2b       	or	r24, r25
    2830:	71 f5       	brne	.+92     	; 0x288e <_Z15check_date_timePcS_+0xc0>
			{
				break;
			}
			else
			{
				switch(i)
    2832:	28 30       	cpi	r18, 0x08	; 8
    2834:	31 05       	cpc	r19, r1
    2836:	b9 f0       	breq	.+46     	; 0x2866 <_Z15check_date_timePcS_+0x98>
    2838:	38 f4       	brcc	.+14     	; 0x2848 <_Z15check_date_timePcS_+0x7a>
    283a:	22 30       	cpi	r18, 0x02	; 2
    283c:	31 05       	cpc	r19, r1
    283e:	59 f0       	breq	.+22     	; 0x2856 <_Z15check_date_timePcS_+0x88>
    2840:	25 30       	cpi	r18, 0x05	; 5
    2842:	31 05       	cpc	r19, r1
    2844:	41 f0       	breq	.+16     	; 0x2856 <_Z15check_date_timePcS_+0x88>
    2846:	1e c0       	rjmp	.+60     	; 0x2884 <_Z15check_date_timePcS_+0xb6>
    2848:	2b 30       	cpi	r18, 0x0B	; 11
    284a:	31 05       	cpc	r19, r1
    284c:	a1 f0       	breq	.+40     	; 0x2876 <_Z15check_date_timePcS_+0xa8>
    284e:	2e 30       	cpi	r18, 0x0E	; 14
    2850:	31 05       	cpc	r19, r1
    2852:	89 f0       	breq	.+34     	; 0x2876 <_Z15check_date_timePcS_+0xa8>
    2854:	17 c0       	rjmp	.+46     	; 0x2884 <_Z15check_date_timePcS_+0xb6>
				{
					case 2:
					case 5:
						if(str[i] == '/')
    2856:	4f 32       	cpi	r20, 0x2F	; 47
    2858:	a9 f4       	brne	.+42     	; 0x2884 <_Z15check_date_timePcS_+0xb6>
						{
							ptr++;
							*ptr = 0;
    285a:	d8 01       	movw	r26, r16
    285c:	11 96       	adiw	r26, 0x01	; 1
    285e:	1c 92       	st	X, r1
				{
					case 2:
					case 5:
						if(str[i] == '/')
						{
							ptr++;
    2860:	0f 5f       	subi	r16, 0xFF	; 255
    2862:	1f 4f       	sbci	r17, 0xFF	; 255
    2864:	0f c0       	rjmp	.+30     	; 0x2884 <_Z15check_date_timePcS_+0xb6>
							*ptr = 0;
						}
					break;
					case 8:
						if(str[i] == ',')
    2866:	4c 32       	cpi	r20, 0x2C	; 44
    2868:	31 f6       	brne	.-116    	; 0x27f6 <_Z15check_date_timePcS_+0x28>
						{
							ptr++;
							*ptr = 0;
    286a:	d8 01       	movw	r26, r16
    286c:	11 96       	adiw	r26, 0x01	; 1
    286e:	1c 92       	st	X, r1
						}
					break;
					case 8:
						if(str[i] == ',')
						{
							ptr++;
    2870:	0f 5f       	subi	r16, 0xFF	; 255
    2872:	1f 4f       	sbci	r17, 0xFF	; 255
    2874:	c0 cf       	rjmp	.-128    	; 0x27f6 <_Z15check_date_timePcS_+0x28>
							*ptr = 0;
						}
					break;
					case 11:
					case 14:
						if(str[i] == ':')
    2876:	4a 33       	cpi	r20, 0x3A	; 58
    2878:	29 f4       	brne	.+10     	; 0x2884 <_Z15check_date_timePcS_+0xb6>
						{
							ptr++;
							*ptr = 0;
    287a:	d8 01       	movw	r26, r16
    287c:	11 96       	adiw	r26, 0x01	; 1
    287e:	1c 92       	st	X, r1
					break;
					case 11:
					case 14:
						if(str[i] == ':')
						{
							ptr++;
    2880:	0f 5f       	subi	r16, 0xFF	; 255
    2882:	1f 4f       	sbci	r17, 0xFF	; 255
unsigned char check_date_time(char *str, char *arr)
{
	int i = 0;
	char *ptr = arr;
	*ptr = 0;
	for (i = 0; i < 17; i++)
    2884:	6e 01       	movw	r12, r28
    2886:	c1 31       	cpi	r28, 0x11	; 17
    2888:	d1 05       	cpc	r29, r1
    288a:	0c f4       	brge	.+2      	; 0x288e <_Z15check_date_timePcS_+0xc0>
    288c:	b4 cf       	rjmp	.-152    	; 0x27f6 <_Z15check_date_timePcS_+0x28>
    288e:	81 e0       	ldi	r24, 0x01	; 1
    2890:	b1 e1       	ldi	r27, 0x11	; 17
    2892:	cb 16       	cp	r12, r27
    2894:	d1 04       	cpc	r13, r1
    2896:	09 f0       	breq	.+2      	; 0x289a <_Z15check_date_timePcS_+0xcc>
    2898:	80 e0       	ldi	r24, 0x00	; 0
	}
	else
	{
		return 0;
	}
}
    289a:	df 91       	pop	r29
    289c:	cf 91       	pop	r28
    289e:	1f 91       	pop	r17
    28a0:	0f 91       	pop	r16
    28a2:	ff 90       	pop	r15
    28a4:	ef 90       	pop	r14
    28a6:	df 90       	pop	r13
    28a8:	cf 90       	pop	r12
    28aa:	08 95       	ret

000028ac <_Z11getChecksumPhc>:
		val_int %= j;
		j /= 10;
	}
	
	result[i] = '\0';
}
    28ac:	66 23       	and	r22, r22
    28ae:	59 f0       	breq	.+22     	; 0x28c6 <_Z11getChecksumPhc+0x1a>
    28b0:	fc 01       	movw	r30, r24
    28b2:	9c 01       	movw	r18, r24
    28b4:	26 0f       	add	r18, r22
    28b6:	31 1d       	adc	r19, r1
    28b8:	80 e0       	ldi	r24, 0x00	; 0
    28ba:	91 91       	ld	r25, Z+
    28bc:	89 0f       	add	r24, r25
    28be:	e2 17       	cp	r30, r18
    28c0:	f3 07       	cpc	r31, r19
    28c2:	d9 f7       	brne	.-10     	; 0x28ba <_Z11getChecksumPhc+0xe>
    28c4:	01 c0       	rjmp	.+2      	; 0x28c8 <_Z11getChecksumPhc+0x1c>
    28c6:	80 e0       	ldi	r24, 0x00	; 0
    28c8:	81 95       	neg	r24
    28ca:	08 95       	ret

000028cc <_Z13isStringDigitPc>:
{
	unsigned char isDigit = 1;
	int i=0;
	while(i < (IMEI_NUM_LEN-1))
	{
		if(!isdigit(str[i]))
    28cc:	fc 01       	movw	r30, r24
    28ce:	20 81       	ld	r18, Z
    28d0:	30 e0       	ldi	r19, 0x00	; 0
    28d2:	20 53       	subi	r18, 0x30	; 48
    28d4:	31 09       	sbc	r19, r1
    28d6:	2a 30       	cpi	r18, 0x0A	; 10
    28d8:	31 05       	cpc	r19, r1
    28da:	70 f4       	brcc	.+28     	; 0x28f8 <_Z13isStringDigitPc+0x2c>
    28dc:	31 96       	adiw	r30, 0x01	; 1
    28de:	0e 96       	adiw	r24, 0x0e	; 14
    28e0:	21 91       	ld	r18, Z+
    28e2:	30 e0       	ldi	r19, 0x00	; 0
    28e4:	20 53       	subi	r18, 0x30	; 48
    28e6:	31 09       	sbc	r19, r1
    28e8:	2a 30       	cpi	r18, 0x0A	; 10
    28ea:	31 05       	cpc	r19, r1
    28ec:	38 f4       	brcc	.+14     	; 0x28fc <_Z13isStringDigitPc+0x30>

unsigned char isStringDigit(char *str)			///16-02-2019 SK
{
	unsigned char isDigit = 1;
	int i=0;
	while(i < (IMEI_NUM_LEN-1))
    28ee:	e8 17       	cp	r30, r24
    28f0:	f9 07       	cpc	r31, r25
    28f2:	b1 f7       	brne	.-20     	; 0x28e0 <_Z13isStringDigitPc+0x14>
	result[i] = '\0';
}

unsigned char isStringDigit(char *str)			///16-02-2019 SK
{
	unsigned char isDigit = 1;
    28f4:	81 e0       	ldi	r24, 0x01	; 1
    28f6:	08 95       	ret
	int i=0;
	while(i < (IMEI_NUM_LEN-1))
	{
		if(!isdigit(str[i]))
		{
			isDigit = 0;
    28f8:	80 e0       	ldi	r24, 0x00	; 0
    28fa:	08 95       	ret
    28fc:	80 e0       	ldi	r24, 0x00	; 0
			break;
		}
		i++;
	}
	return isDigit;
}
    28fe:	08 95       	ret

00002900 <_Z7hex2intPc>:

unsigned char hex2int(char *str)
{
    2900:	ff 92       	push	r15
    2902:	0f 93       	push	r16
    2904:	1f 93       	push	r17
    2906:	cf 93       	push	r28
    2908:	df 93       	push	r29
    290a:	ec 01       	movw	r28, r24
    290c:	21 e0       	ldi	r18, 0x01	; 1
	unsigned char retval = 0,i;
    290e:	30 e0       	ldi	r19, 0x00	; 0
				break;
				case 'F':
				case 'f': temp = 15;
				break;
				
				default: temp = 0;
    2910:	f1 2c       	mov	r15, r1
		else
		{
			switch(*str)
			{
				case 'A':
				case 'a': temp = 10;
    2912:	4a e0       	ldi	r20, 0x0A	; 10
				break;
				case 'E':
				case 'e': temp = 14;
				break;
				case 'F':
				case 'f': temp = 15;
    2914:	0f e0       	ldi	r16, 0x0F	; 15
				break;
				case 'D':
				case 'd': temp = 13;
				break;
				case 'E':
				case 'e': temp = 14;
    2916:	1e e0       	ldi	r17, 0x0E	; 14
				break;
				case 'C':
				case 'c': temp = 12;
				break;
				case 'D':
				case 'd': temp = 13;
    2918:	7d e0       	ldi	r23, 0x0D	; 13
				break;
				case 'B':
				case 'b': temp = 11;
				break;
				case 'C':
				case 'c': temp = 12;
    291a:	6c e0       	ldi	r22, 0x0C	; 12
			{
				case 'A':
				case 'a': temp = 10;
				break;
				case 'B':
				case 'b': temp = 11;
    291c:	5b e0       	ldi	r21, 0x0B	; 11
    291e:	01 c0       	rjmp	.+2      	; 0x2922 <_Z7hex2intPc+0x22>
    2920:	2f 5f       	subi	r18, 0xFF	; 255
{
	unsigned char retval = 0,i;
	unsigned char temp = 0;
	for(i = 0; i < 2; i++)
	{
		if(*str >= '0' && *str <= '9')
    2922:	e9 91       	ld	r30, Y+
    2924:	80 ed       	ldi	r24, 0xD0	; 208
    2926:	8e 0f       	add	r24, r30
    2928:	8a 30       	cpi	r24, 0x0A	; 10
    292a:	d8 f0       	brcs	.+54     	; 0x2962 <_Z7hex2intPc+0x62>
		{
			temp = *str - '0';
		}
		else
		{
			switch(*str)
    292c:	8e 2f       	mov	r24, r30
    292e:	90 e0       	ldi	r25, 0x00	; 0
    2930:	fc 01       	movw	r30, r24
    2932:	e1 54       	subi	r30, 0x41	; 65
    2934:	f1 09       	sbc	r31, r1
    2936:	e6 32       	cpi	r30, 0x26	; 38
    2938:	f1 05       	cpc	r31, r1
    293a:	80 f4       	brcc	.+32     	; 0x295c <_Z7hex2intPc+0x5c>
    293c:	88 27       	eor	r24, r24
    293e:	ec 55       	subi	r30, 0x5C	; 92
    2940:	ff 4f       	sbci	r31, 0xFF	; 255
    2942:	8f 4f       	sbci	r24, 0xFF	; 255
    2944:	0c 94 fa 46 	jmp	0x8df4	; 0x8df4 <__tablejump2__>
			{
				case 'A':
				case 'a': temp = 10;
				break;
				case 'B':
				case 'b': temp = 11;
    2948:	85 2f       	mov	r24, r21
    294a:	0b c0       	rjmp	.+22     	; 0x2962 <_Z7hex2intPc+0x62>
				break;
				case 'C':
				case 'c': temp = 12;
    294c:	86 2f       	mov	r24, r22
				break;
    294e:	09 c0       	rjmp	.+18     	; 0x2962 <_Z7hex2intPc+0x62>
				case 'D':
				case 'd': temp = 13;
    2950:	87 2f       	mov	r24, r23
				break;
    2952:	07 c0       	rjmp	.+14     	; 0x2962 <_Z7hex2intPc+0x62>
				case 'E':
				case 'e': temp = 14;
    2954:	81 2f       	mov	r24, r17
				break;
    2956:	05 c0       	rjmp	.+10     	; 0x2962 <_Z7hex2intPc+0x62>
				case 'F':
				case 'f': temp = 15;
    2958:	80 2f       	mov	r24, r16
				break;
    295a:	03 c0       	rjmp	.+6      	; 0x2962 <_Z7hex2intPc+0x62>
				
				default: temp = 0;
    295c:	8f 2d       	mov	r24, r15
    295e:	01 c0       	rjmp	.+2      	; 0x2962 <_Z7hex2intPc+0x62>
		else
		{
			switch(*str)
			{
				case 'A':
				case 'a': temp = 10;
    2960:	84 2f       	mov	r24, r20
				break;
				
				default: temp = 0;
			}
		}
		if(i == 0)
    2962:	21 30       	cpi	r18, 0x01	; 1
    2964:	21 f4       	brne	.+8      	; 0x296e <_Z7hex2intPc+0x6e>
		{
			retval = temp*16;
    2966:	38 2f       	mov	r19, r24
    2968:	32 95       	swap	r19
    296a:	30 7f       	andi	r19, 0xF0	; 240
    296c:	d9 cf       	rjmp	.-78     	; 0x2920 <_Z7hex2intPc+0x20>
		}
		else
		{
			retval += temp;
    296e:	38 0f       	add	r19, r24

unsigned char hex2int(char *str)
{
	unsigned char retval = 0,i;
	unsigned char temp = 0;
	for(i = 0; i < 2; i++)
    2970:	22 30       	cpi	r18, 0x02	; 2
    2972:	b0 f2       	brcs	.-84     	; 0x2920 <_Z7hex2intPc+0x20>
			retval += temp;
		}
		str++;
	}
	return retval;
}
    2974:	83 2f       	mov	r24, r19
    2976:	df 91       	pop	r29
    2978:	cf 91       	pop	r28
    297a:	1f 91       	pop	r17
    297c:	0f 91       	pop	r16
    297e:	ff 90       	pop	r15
    2980:	08 95       	ret

00002982 <_Z8RTC_ReadhPh>:
#include "I2C.h"
#include "common.h"
#include "ds1307.h"

uint8_t RTC_Read(uint8_t address,uint8_t *data)
{
    2982:	0f 93       	push	r16
    2984:	1f 93       	push	r17
    2986:	cf 93       	push	r28
    2988:	c8 2f       	mov	r28, r24
    298a:	8b 01       	movw	r16, r22
	uint8_t res;	//result
	
	//Start
	res = I2CStart();
    298c:	0e 94 9c 31 	call	0x6338	; 0x6338 <_Z8I2CStartv>
	// HJ 05-07-2017
	if(!res)	return FALSE;
    2990:	88 23       	and	r24, r24
    2992:	01 f1       	breq	.+64     	; 0x29d4 <_Z8RTC_ReadhPh+0x52>
	
	//SLA+W (for dummy write to set register pointer)
	//res=I2CWriteByte(0b11010000);	//DS1307 address + W
	res=I2CWriteByte(RTC_ADDR);	
    2994:	80 ed       	ldi	r24, 0xD0	; 208
    2996:	0e 94 f0 31 	call	0x63e0	; 0x63e0 <_Z12I2CWriteByteh>
	//Error
	if(!res)	return FALSE;
    299a:	88 23       	and	r24, r24
    299c:	e9 f0       	breq	.+58     	; 0x29d8 <_Z8RTC_ReadhPh+0x56>
	
	//Now send the address of required register
	res=I2CWriteByte(address);
    299e:	8c 2f       	mov	r24, r28
    29a0:	0e 94 f0 31 	call	0x63e0	; 0x63e0 <_Z12I2CWriteByteh>
	
	//Error
	if(!res)	return FALSE;
    29a4:	88 23       	and	r24, r24
    29a6:	d1 f0       	breq	.+52     	; 0x29dc <_Z8RTC_ReadhPh+0x5a>
	
	//Repeat Start
	res = I2CStart();
    29a8:	0e 94 9c 31 	call	0x6338	; 0x6338 <_Z8I2CStartv>
	// HJ 05-07-2017
	if(!res)	return FALSE;
    29ac:	88 23       	and	r24, r24
    29ae:	c1 f0       	breq	.+48     	; 0x29e0 <_Z8RTC_ReadhPh+0x5e>
	
	//SLA + R
	//res=I2CWriteByte(0b11010001);	//DS1307 Address + R
	res=I2CWriteByte(RTC_ADDR | 1);	
    29b0:	81 ed       	ldi	r24, 0xD1	; 209
    29b2:	0e 94 f0 31 	call	0x63e0	; 0x63e0 <_Z12I2CWriteByteh>
	//Error
	if(!res)	return FALSE;
    29b6:	88 23       	and	r24, r24
    29b8:	a9 f0       	breq	.+42     	; 0x29e4 <_Z8RTC_ReadhPh+0x62>
	
	//Now read the value with NACK
	res=I2CReadByte(data,0);
    29ba:	60 e0       	ldi	r22, 0x00	; 0
    29bc:	c8 01       	movw	r24, r16
    29be:	0e 94 2c 32 	call	0x6458	; 0x6458 <_Z11I2CReadBytePhh>
	
	//Error
	if(!res)	return FALSE;
    29c2:	88 23       	and	r24, r24
    29c4:	89 f0       	breq	.+34     	; 0x29e8 <_Z8RTC_ReadhPh+0x66>
	
	//STOP
	res = I2CStop();
    29c6:	0e 94 c6 31 	call	0x638c	; 0x638c <_Z7I2CStopv>
	uint8_t res;	//result
	
	//Start
	res = I2CStart();
	// HJ 05-07-2017
	if(!res)	return FALSE;
    29ca:	91 e0       	ldi	r25, 0x01	; 1
    29cc:	81 11       	cpse	r24, r1
    29ce:	0d c0       	rjmp	.+26     	; 0x29ea <_Z8RTC_ReadhPh+0x68>
    29d0:	90 e0       	ldi	r25, 0x00	; 0
    29d2:	0b c0       	rjmp	.+22     	; 0x29ea <_Z8RTC_ReadhPh+0x68>
    29d4:	90 e0       	ldi	r25, 0x00	; 0
    29d6:	09 c0       	rjmp	.+18     	; 0x29ea <_Z8RTC_ReadhPh+0x68>
	
	//SLA+W (for dummy write to set register pointer)
	//res=I2CWriteByte(0b11010000);	//DS1307 address + W
	res=I2CWriteByte(RTC_ADDR);	
	//Error
	if(!res)	return FALSE;
    29d8:	90 e0       	ldi	r25, 0x00	; 0
    29da:	07 c0       	rjmp	.+14     	; 0x29ea <_Z8RTC_ReadhPh+0x68>
	
	//Now send the address of required register
	res=I2CWriteByte(address);
	
	//Error
	if(!res)	return FALSE;
    29dc:	90 e0       	ldi	r25, 0x00	; 0
    29de:	05 c0       	rjmp	.+10     	; 0x29ea <_Z8RTC_ReadhPh+0x68>
	
	//Repeat Start
	res = I2CStart();
	// HJ 05-07-2017
	if(!res)	return FALSE;
    29e0:	90 e0       	ldi	r25, 0x00	; 0
    29e2:	03 c0       	rjmp	.+6      	; 0x29ea <_Z8RTC_ReadhPh+0x68>
	
	//SLA + R
	//res=I2CWriteByte(0b11010001);	//DS1307 Address + R
	res=I2CWriteByte(RTC_ADDR | 1);	
	//Error
	if(!res)	return FALSE;
    29e4:	90 e0       	ldi	r25, 0x00	; 0
    29e6:	01 c0       	rjmp	.+2      	; 0x29ea <_Z8RTC_ReadhPh+0x68>
	
	//Now read the value with NACK
	res=I2CReadByte(data,0);
	
	//Error
	if(!res)	return FALSE;
    29e8:	90 e0       	ldi	r25, 0x00	; 0
	res = I2CStop();
	// HJ 05-07-2017
	if(!res)	return FALSE;
	
	return TRUE;
}
    29ea:	89 2f       	mov	r24, r25
    29ec:	cf 91       	pop	r28
    29ee:	1f 91       	pop	r17
    29f0:	0f 91       	pop	r16
    29f2:	08 95       	ret

000029f4 <_Z9RTC_Writehh>:

uint8_t RTC_Write(uint8_t address,uint8_t data)
{
    29f4:	cf 93       	push	r28
    29f6:	df 93       	push	r29
    29f8:	c8 2f       	mov	r28, r24
    29fa:	d6 2f       	mov	r29, r22
	uint8_t res;	//result
	//Start
	res = I2CStart();
    29fc:	0e 94 9c 31 	call	0x6338	; 0x6338 <_Z8I2CStartv>
	// HJ 05-07-2017
	if(!res)	return FALSE;
    2a00:	88 23       	and	r24, r24
    2a02:	b1 f0       	breq	.+44     	; 0x2a30 <_Z9RTC_Writehh+0x3c>
	
	//SLA+W
	//res=I2CWriteByte(0b11010000);	//DS1307 address + W
	res=I2CWriteByte(RTC_ADDR);	
    2a04:	80 ed       	ldi	r24, 0xD0	; 208
    2a06:	0e 94 f0 31 	call	0x63e0	; 0x63e0 <_Z12I2CWriteByteh>
	//Error
	if(!res)	return FALSE;
    2a0a:	88 23       	and	r24, r24
    2a0c:	99 f0       	breq	.+38     	; 0x2a34 <_Z9RTC_Writehh+0x40>
	
	//Now send the address of required register
	res=I2CWriteByte(address);
    2a0e:	8c 2f       	mov	r24, r28
    2a10:	0e 94 f0 31 	call	0x63e0	; 0x63e0 <_Z12I2CWriteByteh>
	
	//Error
	if(!res)	return FALSE;
    2a14:	88 23       	and	r24, r24
    2a16:	81 f0       	breq	.+32     	; 0x2a38 <_Z9RTC_Writehh+0x44>
	
	//Now write the value
	res=I2CWriteByte(data);
    2a18:	8d 2f       	mov	r24, r29
    2a1a:	0e 94 f0 31 	call	0x63e0	; 0x63e0 <_Z12I2CWriteByteh>
	
	//Error
	if(!res)	return FALSE;
    2a1e:	88 23       	and	r24, r24
    2a20:	69 f0       	breq	.+26     	; 0x2a3c <_Z9RTC_Writehh+0x48>
	
	//STOP
	res = I2CStop();
    2a22:	0e 94 c6 31 	call	0x638c	; 0x638c <_Z7I2CStopv>
{
	uint8_t res;	//result
	//Start
	res = I2CStart();
	// HJ 05-07-2017
	if(!res)	return FALSE;
    2a26:	91 e0       	ldi	r25, 0x01	; 1
    2a28:	81 11       	cpse	r24, r1
    2a2a:	09 c0       	rjmp	.+18     	; 0x2a3e <_Z9RTC_Writehh+0x4a>
    2a2c:	90 e0       	ldi	r25, 0x00	; 0
    2a2e:	07 c0       	rjmp	.+14     	; 0x2a3e <_Z9RTC_Writehh+0x4a>
    2a30:	90 e0       	ldi	r25, 0x00	; 0
    2a32:	05 c0       	rjmp	.+10     	; 0x2a3e <_Z9RTC_Writehh+0x4a>
	
	//SLA+W
	//res=I2CWriteByte(0b11010000);	//DS1307 address + W
	res=I2CWriteByte(RTC_ADDR);	
	//Error
	if(!res)	return FALSE;
    2a34:	90 e0       	ldi	r25, 0x00	; 0
    2a36:	03 c0       	rjmp	.+6      	; 0x2a3e <_Z9RTC_Writehh+0x4a>
	
	//Now send the address of required register
	res=I2CWriteByte(address);
	
	//Error
	if(!res)	return FALSE;
    2a38:	90 e0       	ldi	r25, 0x00	; 0
    2a3a:	01 c0       	rjmp	.+2      	; 0x2a3e <_Z9RTC_Writehh+0x4a>
	
	//Now write the value
	res=I2CWriteByte(data);
	
	//Error
	if(!res)	return FALSE;
    2a3c:	90 e0       	ldi	r25, 0x00	; 0
	res = I2CStop();
	// HJ 05-07-2017
	if(!res)	return FALSE;
	
	return TRUE;
}
    2a3e:	89 2f       	mov	r24, r25
    2a40:	df 91       	pop	r29
    2a42:	cf 91       	pop	r28
    2a44:	08 95       	ret

00002a46 <_Z18init_ext_interruptv>:
//extern instaneous_sensor_data_t instaneous_sensor_data;

volatile unsigned int curr_pulse_cnt = 0;
void init_ext_interrupt(void)
{
	EIMSK |= (1 << INT0);
    2a46:	e8 9a       	sbi	0x1d, 0	; 29
	EICRA |= (1 << ISC01); // faling edge interrupt
    2a48:	e9 e6       	ldi	r30, 0x69	; 105
    2a4a:	f0 e0       	ldi	r31, 0x00	; 0
    2a4c:	80 81       	ld	r24, Z
    2a4e:	82 60       	ori	r24, 0x02	; 2
    2a50:	80 83       	st	Z, r24
    2a52:	08 95       	ret

00002a54 <__vector_1>:
}

ISR(INT0_vect)
{
    2a54:	1f 92       	push	r1
    2a56:	0f 92       	push	r0
    2a58:	0f b6       	in	r0, 0x3f	; 63
    2a5a:	0f 92       	push	r0
    2a5c:	11 24       	eor	r1, r1
    2a5e:	8f 93       	push	r24
    2a60:	9f 93       	push	r25
	cli();	
    2a62:	f8 94       	cli
	curr_pulse_cnt++;
    2a64:	80 91 38 0b 	lds	r24, 0x0B38	; 0x800b38 <curr_pulse_cnt>
    2a68:	90 91 39 0b 	lds	r25, 0x0B39	; 0x800b39 <curr_pulse_cnt+0x1>
    2a6c:	01 96       	adiw	r24, 0x01	; 1
    2a6e:	90 93 39 0b 	sts	0x0B39, r25	; 0x800b39 <curr_pulse_cnt+0x1>
    2a72:	80 93 38 0b 	sts	0x0B38, r24	; 0x800b38 <curr_pulse_cnt>
	sei();
    2a76:	78 94       	sei
    2a78:	9f 91       	pop	r25
    2a7a:	8f 91       	pop	r24
    2a7c:	0f 90       	pop	r0
    2a7e:	0f be       	out	0x3f, r0	; 63
    2a80:	0f 90       	pop	r0
    2a82:	1f 90       	pop	r1
    2a84:	18 95       	reti

00002a86 <_Z10Portassignv>:
			return TRUE;
		}
	}
#endif
	return FALSE;
}
    2a86:	84 b1       	in	r24, 0x04	; 4
    2a88:	86 60       	ori	r24, 0x06	; 6
    2a8a:	84 b9       	out	0x04, r24	; 4
    2a8c:	23 98       	cbi	0x04, 3	; 4
    2a8e:	85 b1       	in	r24, 0x05	; 5
    2a90:	15 b8       	out	0x05, r1	; 5
    2a92:	20 9a       	sbi	0x04, 0	; 4
    2a94:	28 98       	cbi	0x05, 0	; 5
    2a96:	24 9a       	sbi	0x04, 4	; 4
    2a98:	2c 98       	cbi	0x05, 4	; 5
    2a9a:	25 9a       	sbi	0x04, 5	; 4
    2a9c:	2d 98       	cbi	0x05, 5	; 5
    2a9e:	08 95       	ret

00002aa0 <_Z12SetSI_Outputv>:
    2aa0:	22 9a       	sbi	0x04, 2	; 4
    2aa2:	08 95       	ret

00002aa4 <_Z11SetSO_Inputv>:
    2aa4:	23 98       	cbi	0x04, 3	; 4
    2aa6:	08 95       	ret

00002aa8 <_Z7CE_Highv>:
    2aa8:	28 9a       	sbi	0x05, 0	; 5
    2aaa:	08 95       	ret

00002aac <_Z6CE_Lowv>:
    2aac:	28 98       	cbi	0x05, 0	; 5
    2aae:	08 95       	ret

00002ab0 <_Z15Reset_Hold_Highv>:
    2ab0:	2d 9a       	sbi	0x05, 5	; 5
    2ab2:	08 95       	ret

00002ab4 <_Z6WP_Lowv>:
    2ab4:	2c 98       	cbi	0x05, 4	; 5
    2ab6:	08 95       	ret

00002ab8 <_Z7WP_Highv>:
    2ab8:	2c 9a       	sbi	0x05, 4	; 5
    2aba:	08 95       	ret

00002abc <_Z8SCK_Highv>:
    2abc:	29 9a       	sbi	0x05, 1	; 5
    2abe:	08 95       	ret

00002ac0 <_Z7SCK_Lowv>:
    2ac0:	29 98       	cbi	0x05, 1	; 5
    2ac2:	08 95       	ret

00002ac4 <_Z7SI_Highv>:
    2ac4:	2a 9a       	sbi	0x05, 2	; 5
    2ac6:	08 95       	ret

00002ac8 <_Z6SI_Lowv>:
    2ac8:	2a 98       	cbi	0x05, 2	; 5
    2aca:	08 95       	ret

00002acc <_Z9Send_Byteh>:
    2acc:	cf 93       	push	r28
    2ace:	c8 2f       	mov	r28, r24
    2ad0:	e7 df       	rcall	.-50     	; 0x2aa0 <_Z12SetSI_Outputv>
    2ad2:	88 e1       	ldi	r24, 0x18	; 24
    2ad4:	8a 95       	dec	r24
    2ad6:	f1 f7       	brne	.-4      	; 0x2ad4 <_Z9Send_Byteh+0x8>
    2ad8:	00 c0       	rjmp	.+0      	; 0x2ada <_Z9Send_Byteh+0xe>
    2ada:	cc 23       	and	r28, r28
    2adc:	14 f4       	brge	.+4      	; 0x2ae2 <_Z9Send_Byteh+0x16>
    2ade:	f2 df       	rcall	.-28     	; 0x2ac4 <_Z7SI_Highv>
    2ae0:	01 c0       	rjmp	.+2      	; 0x2ae4 <_Z9Send_Byteh+0x18>
    2ae2:	f2 df       	rcall	.-28     	; 0x2ac8 <_Z6SI_Lowv>
    2ae4:	eb df       	rcall	.-42     	; 0x2abc <_Z8SCK_Highv>
    2ae6:	ec df       	rcall	.-40     	; 0x2ac0 <_Z7SCK_Lowv>
    2ae8:	c6 ff       	sbrs	r28, 6
    2aea:	02 c0       	rjmp	.+4      	; 0x2af0 <_Z9Send_Byteh+0x24>
    2aec:	eb df       	rcall	.-42     	; 0x2ac4 <_Z7SI_Highv>
    2aee:	01 c0       	rjmp	.+2      	; 0x2af2 <_Z9Send_Byteh+0x26>
    2af0:	eb df       	rcall	.-42     	; 0x2ac8 <_Z6SI_Lowv>
    2af2:	e4 df       	rcall	.-56     	; 0x2abc <_Z8SCK_Highv>
    2af4:	e5 df       	rcall	.-54     	; 0x2ac0 <_Z7SCK_Lowv>
    2af6:	c5 ff       	sbrs	r28, 5
    2af8:	02 c0       	rjmp	.+4      	; 0x2afe <_Z9Send_Byteh+0x32>
    2afa:	e4 df       	rcall	.-56     	; 0x2ac4 <_Z7SI_Highv>
    2afc:	01 c0       	rjmp	.+2      	; 0x2b00 <_Z9Send_Byteh+0x34>
    2afe:	e4 df       	rcall	.-56     	; 0x2ac8 <_Z6SI_Lowv>
    2b00:	dd df       	rcall	.-70     	; 0x2abc <_Z8SCK_Highv>
    2b02:	de df       	rcall	.-68     	; 0x2ac0 <_Z7SCK_Lowv>
    2b04:	c4 ff       	sbrs	r28, 4
    2b06:	02 c0       	rjmp	.+4      	; 0x2b0c <_Z9Send_Byteh+0x40>
    2b08:	dd df       	rcall	.-70     	; 0x2ac4 <_Z7SI_Highv>
    2b0a:	01 c0       	rjmp	.+2      	; 0x2b0e <_Z9Send_Byteh+0x42>
    2b0c:	dd df       	rcall	.-70     	; 0x2ac8 <_Z6SI_Lowv>
    2b0e:	d6 df       	rcall	.-84     	; 0x2abc <_Z8SCK_Highv>
    2b10:	d7 df       	rcall	.-82     	; 0x2ac0 <_Z7SCK_Lowv>
    2b12:	c3 ff       	sbrs	r28, 3
    2b14:	02 c0       	rjmp	.+4      	; 0x2b1a <_Z9Send_Byteh+0x4e>
    2b16:	d6 df       	rcall	.-84     	; 0x2ac4 <_Z7SI_Highv>
    2b18:	01 c0       	rjmp	.+2      	; 0x2b1c <_Z9Send_Byteh+0x50>
    2b1a:	d6 df       	rcall	.-84     	; 0x2ac8 <_Z6SI_Lowv>
    2b1c:	cf df       	rcall	.-98     	; 0x2abc <_Z8SCK_Highv>
    2b1e:	d0 df       	rcall	.-96     	; 0x2ac0 <_Z7SCK_Lowv>
    2b20:	c2 ff       	sbrs	r28, 2
    2b22:	02 c0       	rjmp	.+4      	; 0x2b28 <_Z9Send_Byteh+0x5c>
    2b24:	cf df       	rcall	.-98     	; 0x2ac4 <_Z7SI_Highv>
    2b26:	01 c0       	rjmp	.+2      	; 0x2b2a <_Z9Send_Byteh+0x5e>
    2b28:	cf df       	rcall	.-98     	; 0x2ac8 <_Z6SI_Lowv>
    2b2a:	c8 df       	rcall	.-112    	; 0x2abc <_Z8SCK_Highv>
    2b2c:	c9 df       	rcall	.-110    	; 0x2ac0 <_Z7SCK_Lowv>
    2b2e:	c1 ff       	sbrs	r28, 1
    2b30:	02 c0       	rjmp	.+4      	; 0x2b36 <_Z9Send_Byteh+0x6a>
    2b32:	c8 df       	rcall	.-112    	; 0x2ac4 <_Z7SI_Highv>
    2b34:	01 c0       	rjmp	.+2      	; 0x2b38 <_Z9Send_Byteh+0x6c>
    2b36:	c8 df       	rcall	.-112    	; 0x2ac8 <_Z6SI_Lowv>
    2b38:	c1 df       	rcall	.-126    	; 0x2abc <_Z8SCK_Highv>
    2b3a:	c2 df       	rcall	.-124    	; 0x2ac0 <_Z7SCK_Lowv>
    2b3c:	c0 ff       	sbrs	r28, 0
    2b3e:	02 c0       	rjmp	.+4      	; 0x2b44 <_Z9Send_Byteh+0x78>
    2b40:	c1 df       	rcall	.-126    	; 0x2ac4 <_Z7SI_Highv>
    2b42:	01 c0       	rjmp	.+2      	; 0x2b46 <_Z9Send_Byteh+0x7a>
    2b44:	c1 df       	rcall	.-126    	; 0x2ac8 <_Z6SI_Lowv>
    2b46:	ba df       	rcall	.-140    	; 0x2abc <_Z8SCK_Highv>
    2b48:	ad df       	rcall	.-166    	; 0x2aa4 <_Z11SetSO_Inputv>
    2b4a:	ba df       	rcall	.-140    	; 0x2ac0 <_Z7SCK_Lowv>
    2b4c:	bd df       	rcall	.-134    	; 0x2ac8 <_Z6SI_Lowv>
    2b4e:	cf 91       	pop	r28
    2b50:	08 95       	ret

00002b52 <_Z8Get_Bytev>:
    2b52:	1f 93       	push	r17
    2b54:	cf 93       	push	r28
    2b56:	df 93       	push	r29
    2b58:	a5 df       	rcall	.-182    	; 0x2aa4 <_Z11SetSO_Inputv>
    2b5a:	88 e1       	ldi	r24, 0x18	; 24
    2b5c:	8a 95       	dec	r24
    2b5e:	f1 f7       	brne	.-4      	; 0x2b5c <_Z8Get_Bytev+0xa>
    2b60:	00 c0       	rjmp	.+0      	; 0x2b62 <_Z8Get_Bytev+0x10>
    2b62:	c8 e0       	ldi	r28, 0x08	; 8
    2b64:	d0 e0       	ldi	r29, 0x00	; 0
    2b66:	dd 0f       	add	r29, r29
    2b68:	13 b1       	in	r17, 0x03	; 3
    2b6a:	a8 df       	rcall	.-176    	; 0x2abc <_Z8SCK_Highv>
    2b6c:	13 fd       	sbrc	r17, 3
    2b6e:	d1 60       	ori	r29, 0x01	; 1
    2b70:	a7 df       	rcall	.-178    	; 0x2ac0 <_Z7SCK_Lowv>
    2b72:	c1 50       	subi	r28, 0x01	; 1
    2b74:	c1 f7       	brne	.-16     	; 0x2b66 <_Z8Get_Bytev+0x14>
    2b76:	8d 2f       	mov	r24, r29
    2b78:	df 91       	pop	r29
    2b7a:	cf 91       	pop	r28
    2b7c:	1f 91       	pop	r17
    2b7e:	08 95       	ret

00002b80 <_Z4WRCRc>:
    2b80:	cf 93       	push	r28
    2b82:	c8 2f       	mov	r28, r24
    2b84:	93 df       	rcall	.-218    	; 0x2aac <_Z6CE_Lowv>
    2b86:	81 e0       	ldi	r24, 0x01	; 1
    2b88:	a1 df       	rcall	.-190    	; 0x2acc <_Z9Send_Byteh>
    2b8a:	80 e0       	ldi	r24, 0x00	; 0
    2b8c:	9f df       	rcall	.-194    	; 0x2acc <_Z9Send_Byteh>
    2b8e:	8c 2f       	mov	r24, r28
    2b90:	9d df       	rcall	.-198    	; 0x2acc <_Z9Send_Byteh>
    2b92:	8a df       	rcall	.-236    	; 0x2aa8 <_Z7CE_Highv>
    2b94:	cf 91       	pop	r28
    2b96:	08 95       	ret

00002b98 <_Z4WRENv>:
    2b98:	89 df       	rcall	.-238    	; 0x2aac <_Z6CE_Lowv>
    2b9a:	86 e0       	ldi	r24, 0x06	; 6
    2b9c:	97 df       	rcall	.-210    	; 0x2acc <_Z9Send_Byteh>
    2b9e:	84 cf       	rjmp	.-248    	; 0x2aa8 <_Z7CE_Highv>
    2ba0:	08 95       	ret

00002ba2 <_Z4WRDIv>:
    2ba2:	84 df       	rcall	.-248    	; 0x2aac <_Z6CE_Lowv>
    2ba4:	84 e0       	ldi	r24, 0x04	; 4
    2ba6:	92 df       	rcall	.-220    	; 0x2acc <_Z9Send_Byteh>
    2ba8:	7f cf       	rjmp	.-258    	; 0x2aa8 <_Z7CE_Highv>
    2baa:	08 95       	ret

00002bac <_Z23remove_block_protectionv>:
    2bac:	f8 94       	cli
    2bae:	84 df       	rcall	.-248    	; 0x2ab8 <_Z7WP_Highv>
    2bb0:	f3 df       	rcall	.-26     	; 0x2b98 <_Z4WRENv>
    2bb2:	7c df       	rcall	.-264    	; 0x2aac <_Z6CE_Lowv>
    2bb4:	88 e9       	ldi	r24, 0x98	; 152
    2bb6:	8a df       	rcall	.-236    	; 0x2acc <_Z9Send_Byteh>
    2bb8:	77 df       	rcall	.-274    	; 0x2aa8 <_Z7CE_Highv>
    2bba:	f3 df       	rcall	.-26     	; 0x2ba2 <_Z4WRDIv>
    2bbc:	7b df       	rcall	.-266    	; 0x2ab4 <_Z6WP_Lowv>
    2bbe:	78 94       	sei
    2bc0:	08 95       	ret

00002bc2 <_Z13enable_wp_pinv>:
    2bc2:	7a df       	rcall	.-268    	; 0x2ab8 <_Z7WP_Highv>
    2bc4:	e9 df       	rcall	.-46     	; 0x2b98 <_Z4WRENv>
    2bc6:	72 df       	rcall	.-284    	; 0x2aac <_Z6CE_Lowv>
    2bc8:	88 e8       	ldi	r24, 0x88	; 136
    2bca:	da df       	rcall	.-76     	; 0x2b80 <_Z4WRCRc>
    2bcc:	6d df       	rcall	.-294    	; 0x2aa8 <_Z7CE_Highv>
    2bce:	e9 df       	rcall	.-46     	; 0x2ba2 <_Z4WRDIv>
    2bd0:	71 cf       	rjmp	.-286    	; 0x2ab4 <_Z6WP_Lowv>
    2bd2:	08 95       	ret

00002bd4 <_Z4WBPRc>:
    2bd4:	1f 93       	push	r17
    2bd6:	cf 93       	push	r28
    2bd8:	df 93       	push	r29
    2bda:	c8 2f       	mov	r28, r24
    2bdc:	11 e0       	ldi	r17, 0x01	; 1
    2bde:	81 11       	cpse	r24, r1
    2be0:	10 e0       	ldi	r17, 0x00	; 0
    2be2:	11 95       	neg	r17
    2be4:	f8 94       	cli
    2be6:	68 df       	rcall	.-304    	; 0x2ab8 <_Z7WP_Highv>
    2be8:	d7 df       	rcall	.-82     	; 0x2b98 <_Z4WRENv>
    2bea:	60 df       	rcall	.-320    	; 0x2aac <_Z6CE_Lowv>
    2bec:	82 e4       	ldi	r24, 0x42	; 66
    2bee:	6e df       	rcall	.-292    	; 0x2acc <_Z9Send_Byteh>
    2bf0:	c1 11       	cpse	r28, r1
    2bf2:	05 c0       	rjmp	.+10     	; 0x2bfe <_Z4WBPRc+0x2a>
    2bf4:	85 e5       	ldi	r24, 0x55	; 85
    2bf6:	6a df       	rcall	.-300    	; 0x2acc <_Z9Send_Byteh>
    2bf8:	85 e5       	ldi	r24, 0x55	; 85
    2bfa:	68 df       	rcall	.-304    	; 0x2acc <_Z9Send_Byteh>
    2bfc:	0e c0       	rjmp	.+28     	; 0x2c1a <_Z4WBPRc+0x46>
    2bfe:	80 e0       	ldi	r24, 0x00	; 0
    2c00:	65 df       	rcall	.-310    	; 0x2acc <_Z9Send_Byteh>
    2c02:	80 e0       	ldi	r24, 0x00	; 0
    2c04:	63 df       	rcall	.-314    	; 0x2acc <_Z9Send_Byteh>
    2c06:	09 c0       	rjmp	.+18     	; 0x2c1a <_Z4WBPRc+0x46>
    2c08:	81 2f       	mov	r24, r17
    2c0a:	60 df       	rcall	.-320    	; 0x2acc <_Z9Send_Byteh>
    2c0c:	21 97       	sbiw	r28, 0x01	; 1
    2c0e:	e1 f7       	brne	.-8      	; 0x2c08 <_Z4WBPRc+0x34>
    2c10:	4b df       	rcall	.-362    	; 0x2aa8 <_Z7CE_Highv>
    2c12:	c7 df       	rcall	.-114    	; 0x2ba2 <_Z4WRDIv>
    2c14:	4f df       	rcall	.-354    	; 0x2ab4 <_Z6WP_Lowv>
    2c16:	78 94       	sei
    2c18:	03 c0       	rjmp	.+6      	; 0x2c20 <_Z4WBPRc+0x4c>
    2c1a:	c0 e1       	ldi	r28, 0x10	; 16
    2c1c:	d0 e0       	ldi	r29, 0x00	; 0
    2c1e:	f4 cf       	rjmp	.-24     	; 0x2c08 <_Z4WBPRc+0x34>
    2c20:	df 91       	pop	r29
    2c22:	cf 91       	pop	r28
    2c24:	1f 91       	pop	r17
    2c26:	08 95       	ret

00002c28 <_Z10Chip_Erasev>:
    2c28:	41 df       	rcall	.-382    	; 0x2aac <_Z6CE_Lowv>
    2c2a:	87 ec       	ldi	r24, 0xC7	; 199
    2c2c:	4f df       	rcall	.-354    	; 0x2acc <_Z9Send_Byteh>
    2c2e:	3c cf       	rjmp	.-392    	; 0x2aa8 <_Z7CE_Highv>
    2c30:	08 95       	ret

00002c32 <_Z12Sector_Erasem>:
    2c32:	1f 93       	push	r17
    2c34:	cf 93       	push	r28
    2c36:	df 93       	push	r29
    2c38:	c6 2f       	mov	r28, r22
    2c3a:	d7 2f       	mov	r29, r23
    2c3c:	18 2f       	mov	r17, r24
    2c3e:	36 df       	rcall	.-404    	; 0x2aac <_Z6CE_Lowv>
    2c40:	80 e2       	ldi	r24, 0x20	; 32
    2c42:	44 df       	rcall	.-376    	; 0x2acc <_Z9Send_Byteh>
    2c44:	81 2f       	mov	r24, r17
    2c46:	42 df       	rcall	.-380    	; 0x2acc <_Z9Send_Byteh>
    2c48:	8d 2f       	mov	r24, r29
    2c4a:	40 df       	rcall	.-384    	; 0x2acc <_Z9Send_Byteh>
    2c4c:	8c 2f       	mov	r24, r28
    2c4e:	3e df       	rcall	.-388    	; 0x2acc <_Z9Send_Byteh>
    2c50:	2b df       	rcall	.-426    	; 0x2aa8 <_Z7CE_Highv>
    2c52:	df 91       	pop	r29
    2c54:	cf 91       	pop	r28
    2c56:	1f 91       	pop	r17
    2c58:	08 95       	ret

00002c5a <_Z18flashPacketProgramPcjm>:
    2c5a:	8f 92       	push	r8
    2c5c:	9f 92       	push	r9
    2c5e:	af 92       	push	r10
    2c60:	bf 92       	push	r11
    2c62:	cf 92       	push	r12
    2c64:	df 92       	push	r13
    2c66:	ef 92       	push	r14
    2c68:	ff 92       	push	r15
    2c6a:	cf 93       	push	r28
    2c6c:	df 93       	push	r29
    2c6e:	d8 2e       	mov	r13, r24
    2c70:	e9 2e       	mov	r14, r25
    2c72:	4b 01       	movw	r8, r22
    2c74:	c2 2f       	mov	r28, r18
    2c76:	d3 2f       	mov	r29, r19
    2c78:	f4 2e       	mov	r15, r20
    2c7a:	f8 94       	cli
    2c7c:	17 df       	rcall	.-466    	; 0x2aac <_Z6CE_Lowv>
    2c7e:	82 e0       	ldi	r24, 0x02	; 2
    2c80:	25 df       	rcall	.-438    	; 0x2acc <_Z9Send_Byteh>
    2c82:	8f 2d       	mov	r24, r15
    2c84:	23 df       	rcall	.-442    	; 0x2acc <_Z9Send_Byteh>
    2c86:	8d 2f       	mov	r24, r29
    2c88:	21 df       	rcall	.-446    	; 0x2acc <_Z9Send_Byteh>
    2c8a:	8c 2f       	mov	r24, r28
    2c8c:	1f df       	rcall	.-450    	; 0x2acc <_Z9Send_Byteh>
    2c8e:	a1 2c       	mov	r10, r1
    2c90:	b1 2c       	mov	r11, r1
    2c92:	81 14       	cp	r8, r1
    2c94:	91 04       	cpc	r9, r1
    2c96:	a1 04       	cpc	r10, r1
    2c98:	b1 04       	cpc	r11, r1
    2c9a:	89 f0       	breq	.+34     	; 0x2cbe <_Z18flashPacketProgramPcjm+0x64>
    2c9c:	cd 2d       	mov	r28, r13
    2c9e:	de 2d       	mov	r29, r14
    2ca0:	c1 2c       	mov	r12, r1
    2ca2:	d1 2c       	mov	r13, r1
    2ca4:	76 01       	movw	r14, r12
    2ca6:	89 91       	ld	r24, Y+
    2ca8:	11 df       	rcall	.-478    	; 0x2acc <_Z9Send_Byteh>
    2caa:	8f ef       	ldi	r24, 0xFF	; 255
    2cac:	c8 1a       	sub	r12, r24
    2cae:	d8 0a       	sbc	r13, r24
    2cb0:	e8 0a       	sbc	r14, r24
    2cb2:	f8 0a       	sbc	r15, r24
    2cb4:	c8 14       	cp	r12, r8
    2cb6:	d9 04       	cpc	r13, r9
    2cb8:	ea 04       	cpc	r14, r10
    2cba:	fb 04       	cpc	r15, r11
    2cbc:	a0 f3       	brcs	.-24     	; 0x2ca6 <_Z18flashPacketProgramPcjm+0x4c>
    2cbe:	f4 de       	rcall	.-536    	; 0x2aa8 <_Z7CE_Highv>
    2cc0:	78 94       	sei
    2cc2:	df 91       	pop	r29
    2cc4:	cf 91       	pop	r28
    2cc6:	ff 90       	pop	r15
    2cc8:	ef 90       	pop	r14
    2cca:	df 90       	pop	r13
    2ccc:	cf 90       	pop	r12
    2cce:	bf 90       	pop	r11
    2cd0:	af 90       	pop	r10
    2cd2:	9f 90       	pop	r9
    2cd4:	8f 90       	pop	r8
    2cd6:	08 95       	ret

00002cd8 <_Z14readContToBuffmmPc>:
    2cd8:	8f 92       	push	r8
    2cda:	9f 92       	push	r9
    2cdc:	af 92       	push	r10
    2cde:	bf 92       	push	r11
    2ce0:	cf 92       	push	r12
    2ce2:	df 92       	push	r13
    2ce4:	ef 92       	push	r14
    2ce6:	ff 92       	push	r15
    2ce8:	0f 93       	push	r16
    2cea:	1f 93       	push	r17
    2cec:	cf 93       	push	r28
    2cee:	df 93       	push	r29
    2cf0:	c6 2f       	mov	r28, r22
    2cf2:	d7 2f       	mov	r29, r23
    2cf4:	f8 2e       	mov	r15, r24
    2cf6:	49 01       	movw	r8, r18
    2cf8:	5a 01       	movw	r10, r20
    2cfa:	f8 94       	cli
    2cfc:	d7 de       	rcall	.-594    	; 0x2aac <_Z6CE_Lowv>
    2cfe:	83 e0       	ldi	r24, 0x03	; 3
    2d00:	e5 de       	rcall	.-566    	; 0x2acc <_Z9Send_Byteh>
    2d02:	8f 2d       	mov	r24, r15
    2d04:	e3 de       	rcall	.-570    	; 0x2acc <_Z9Send_Byteh>
    2d06:	8d 2f       	mov	r24, r29
    2d08:	e1 de       	rcall	.-574    	; 0x2acc <_Z9Send_Byteh>
    2d0a:	8c 2f       	mov	r24, r28
    2d0c:	df de       	rcall	.-578    	; 0x2acc <_Z9Send_Byteh>
    2d0e:	81 14       	cp	r8, r1
    2d10:	91 04       	cpc	r9, r1
    2d12:	a1 04       	cpc	r10, r1
    2d14:	b1 04       	cpc	r11, r1
    2d16:	89 f0       	breq	.+34     	; 0x2d3a <_Z14readContToBuffmmPc+0x62>
    2d18:	c0 2f       	mov	r28, r16
    2d1a:	d1 2f       	mov	r29, r17
    2d1c:	c1 2c       	mov	r12, r1
    2d1e:	d1 2c       	mov	r13, r1
    2d20:	76 01       	movw	r14, r12
    2d22:	17 df       	rcall	.-466    	; 0x2b52 <_Z8Get_Bytev>
    2d24:	89 93       	st	Y+, r24
    2d26:	8f ef       	ldi	r24, 0xFF	; 255
    2d28:	c8 1a       	sub	r12, r24
    2d2a:	d8 0a       	sbc	r13, r24
    2d2c:	e8 0a       	sbc	r14, r24
    2d2e:	f8 0a       	sbc	r15, r24
    2d30:	8c 14       	cp	r8, r12
    2d32:	9d 04       	cpc	r9, r13
    2d34:	ae 04       	cpc	r10, r14
    2d36:	bf 04       	cpc	r11, r15
    2d38:	a1 f7       	brne	.-24     	; 0x2d22 <_Z14readContToBuffmmPc+0x4a>
    2d3a:	b6 de       	rcall	.-660    	; 0x2aa8 <_Z7CE_Highv>
    2d3c:	78 94       	sei
    2d3e:	df 91       	pop	r29
    2d40:	cf 91       	pop	r28
    2d42:	1f 91       	pop	r17
    2d44:	0f 91       	pop	r16
    2d46:	ff 90       	pop	r15
    2d48:	ef 90       	pop	r14
    2d4a:	df 90       	pop	r13
    2d4c:	cf 90       	pop	r12
    2d4e:	bf 90       	pop	r11
    2d50:	af 90       	pop	r10
    2d52:	9f 90       	pop	r9
    2d54:	8f 90       	pop	r8
    2d56:	08 95       	ret

00002d58 <_Z11flashCopyMRPcS_>:
    2d58:	fc 01       	movw	r30, r24
    2d5a:	a6 2f       	mov	r26, r22
    2d5c:	b7 2f       	mov	r27, r23
    2d5e:	9c 01       	movw	r18, r24
    2d60:	20 5e       	subi	r18, 0xE0	; 224
    2d62:	3f 4f       	sbci	r19, 0xFF	; 255
    2d64:	91 91       	ld	r25, Z+
    2d66:	9d 93       	st	X+, r25
    2d68:	e2 17       	cp	r30, r18
    2d6a:	f3 07       	cpc	r31, r19
    2d6c:	d9 f7       	brne	.-10     	; 0x2d64 <_Z11flashCopyMRPcS_+0xc>
    2d6e:	08 95       	ret

00002d70 <_Z25flashGetCurrDataWriteAddrc>:
    2d70:	81 11       	cpse	r24, r1
    2d72:	09 c0       	rjmp	.+18     	; 0x2d86 <_Z25flashGetCurrDataWriteAddrc+0x16>
    2d74:	60 91 02 02 	lds	r22, 0x0202	; 0x800202 <_ZL7FL_data+0x1>
    2d78:	70 91 03 02 	lds	r23, 0x0203	; 0x800203 <_ZL7FL_data+0x2>
    2d7c:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <_ZL7FL_data+0x3>
    2d80:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <_ZL7FL_data+0x4>
    2d84:	08 95       	ret
    2d86:	60 e0       	ldi	r22, 0x00	; 0
    2d88:	70 e0       	ldi	r23, 0x00	; 0
    2d8a:	cb 01       	movw	r24, r22
    2d8c:	08 95       	ret

00002d8e <_Z22flashGetCurrUploadAddrc>:
    2d8e:	81 11       	cpse	r24, r1
    2d90:	09 c0       	rjmp	.+18     	; 0x2da4 <_Z22flashGetCurrUploadAddrc+0x16>
    2d92:	60 91 06 02 	lds	r22, 0x0206	; 0x800206 <_ZL7FL_data+0x5>
    2d96:	70 91 07 02 	lds	r23, 0x0207	; 0x800207 <_ZL7FL_data+0x6>
    2d9a:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <_ZL7FL_data+0x7>
    2d9e:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <_ZL7FL_data+0x8>
    2da2:	08 95       	ret
    2da4:	60 e0       	ldi	r22, 0x00	; 0
    2da6:	70 e0       	ldi	r23, 0x00	; 0
    2da8:	cb 01       	movw	r24, r22
    2daa:	08 95       	ret

00002dac <_Z12flashSwResetv>:
    2dac:	7f de       	rcall	.-770    	; 0x2aac <_Z6CE_Lowv>
    2dae:	86 e6       	ldi	r24, 0x66	; 102
    2db0:	8d de       	rcall	.-742    	; 0x2acc <_Z9Send_Byteh>
    2db2:	89 e9       	ldi	r24, 0x99	; 153
    2db4:	8b de       	rcall	.-746    	; 0x2acc <_Z9Send_Byteh>
    2db6:	78 ce       	rjmp	.-784    	; 0x2aa8 <_Z7CE_Highv>
    2db8:	08 95       	ret

00002dba <_Z9Wait_Busyv>:
    2dba:	cf 93       	push	r28
    2dbc:	df 93       	push	r29
    2dbe:	f8 94       	cli
    2dc0:	71 de       	rcall	.-798    	; 0x2aa4 <_Z11SetSO_Inputv>
    2dc2:	74 de       	rcall	.-792    	; 0x2aac <_Z6CE_Lowv>
    2dc4:	85 e0       	ldi	r24, 0x05	; 5
    2dc6:	82 de       	rcall	.-764    	; 0x2acc <_Z9Send_Byteh>
    2dc8:	79 de       	rcall	.-782    	; 0x2abc <_Z8SCK_Highv>
    2dca:	7a de       	rcall	.-780    	; 0x2ac0 <_Z7SCK_Lowv>
    2dcc:	77 de       	rcall	.-786    	; 0x2abc <_Z8SCK_Highv>
    2dce:	78 de       	rcall	.-784    	; 0x2ac0 <_Z7SCK_Lowv>
    2dd0:	75 de       	rcall	.-790    	; 0x2abc <_Z8SCK_Highv>
    2dd2:	76 de       	rcall	.-788    	; 0x2ac0 <_Z7SCK_Lowv>
    2dd4:	73 de       	rcall	.-794    	; 0x2abc <_Z8SCK_Highv>
    2dd6:	74 de       	rcall	.-792    	; 0x2ac0 <_Z7SCK_Lowv>
    2dd8:	71 de       	rcall	.-798    	; 0x2abc <_Z8SCK_Highv>
    2dda:	72 de       	rcall	.-796    	; 0x2ac0 <_Z7SCK_Lowv>
    2ddc:	6f de       	rcall	.-802    	; 0x2abc <_Z8SCK_Highv>
    2dde:	70 de       	rcall	.-800    	; 0x2ac0 <_Z7SCK_Lowv>
    2de0:	6d de       	rcall	.-806    	; 0x2abc <_Z8SCK_Highv>
    2de2:	6e de       	rcall	.-804    	; 0x2ac0 <_Z7SCK_Lowv>
    2de4:	83 b1       	in	r24, 0x03	; 3
    2de6:	83 b1       	in	r24, 0x03	; 3
    2de8:	83 b1       	in	r24, 0x03	; 3
    2dea:	83 b1       	in	r24, 0x03	; 3
    2dec:	1b 9b       	sbis	0x03, 3	; 3
    2dee:	26 c0       	rjmp	.+76     	; 0x2e3c <_Z9Wait_Busyv+0x82>
    2df0:	c0 e0       	ldi	r28, 0x00	; 0
    2df2:	d0 e0       	ldi	r29, 0x00	; 0
    2df4:	03 c0       	rjmp	.+6      	; 0x2dfc <_Z9Wait_Busyv+0x42>
    2df6:	21 96       	adiw	r28, 0x01	; 1
    2df8:	81 30       	cpi	r24, 0x01	; 1
    2dfa:	01 f5       	brne	.+64     	; 0x2e3c <_Z9Wait_Busyv+0x82>
    2dfc:	5f de       	rcall	.-834    	; 0x2abc <_Z8SCK_Highv>
    2dfe:	60 de       	rcall	.-832    	; 0x2ac0 <_Z7SCK_Lowv>
    2e00:	5d de       	rcall	.-838    	; 0x2abc <_Z8SCK_Highv>
    2e02:	5e de       	rcall	.-836    	; 0x2ac0 <_Z7SCK_Lowv>
    2e04:	5b de       	rcall	.-842    	; 0x2abc <_Z8SCK_Highv>
    2e06:	5c de       	rcall	.-840    	; 0x2ac0 <_Z7SCK_Lowv>
    2e08:	59 de       	rcall	.-846    	; 0x2abc <_Z8SCK_Highv>
    2e0a:	5a de       	rcall	.-844    	; 0x2ac0 <_Z7SCK_Lowv>
    2e0c:	57 de       	rcall	.-850    	; 0x2abc <_Z8SCK_Highv>
    2e0e:	58 de       	rcall	.-848    	; 0x2ac0 <_Z7SCK_Lowv>
    2e10:	55 de       	rcall	.-854    	; 0x2abc <_Z8SCK_Highv>
    2e12:	56 de       	rcall	.-852    	; 0x2ac0 <_Z7SCK_Lowv>
    2e14:	53 de       	rcall	.-858    	; 0x2abc <_Z8SCK_Highv>
    2e16:	54 de       	rcall	.-856    	; 0x2ac0 <_Z7SCK_Lowv>
    2e18:	51 de       	rcall	.-862    	; 0x2abc <_Z8SCK_Highv>
    2e1a:	52 de       	rcall	.-860    	; 0x2ac0 <_Z7SCK_Lowv>
    2e1c:	83 b1       	in	r24, 0x03	; 3
    2e1e:	83 b1       	in	r24, 0x03	; 3
    2e20:	83 b1       	in	r24, 0x03	; 3
    2e22:	83 b1       	in	r24, 0x03	; 3
    2e24:	83 b1       	in	r24, 0x03	; 3
    2e26:	83 fb       	bst	r24, 3
    2e28:	88 27       	eor	r24, r24
    2e2a:	80 f9       	bld	r24, 0
    2e2c:	e3 e3       	ldi	r30, 0x33	; 51
    2e2e:	f7 e0       	ldi	r31, 0x07	; 7
    2e30:	31 97       	sbiw	r30, 0x01	; 1
    2e32:	f1 f7       	brne	.-4      	; 0x2e30 <_Z9Wait_Busyv+0x76>
    2e34:	c5 36       	cpi	r28, 0x65	; 101
    2e36:	d1 05       	cpc	r29, r1
    2e38:	f1 f6       	brne	.-68     	; 0x2df6 <_Z9Wait_Busyv+0x3c>
    2e3a:	b8 df       	rcall	.-144    	; 0x2dac <_Z12flashSwResetv>
    2e3c:	41 de       	rcall	.-894    	; 0x2ac0 <_Z7SCK_Lowv>
    2e3e:	44 de       	rcall	.-888    	; 0x2ac8 <_Z6SI_Lowv>
    2e40:	33 de       	rcall	.-922    	; 0x2aa8 <_Z7CE_Highv>
    2e42:	78 94       	sei
    2e44:	df 91       	pop	r29
    2e46:	cf 91       	pop	r28
    2e48:	08 95       	ret

00002e4a <_Z16flashEraseMasterv>:
    2e4a:	b0 de       	rcall	.-672    	; 0x2bac <_Z23remove_block_protectionv>
    2e4c:	a5 de       	rcall	.-694    	; 0x2b98 <_Z4WRENv>
    2e4e:	60 e0       	ldi	r22, 0x00	; 0
    2e50:	70 e0       	ldi	r23, 0x00	; 0
    2e52:	cb 01       	movw	r24, r22
    2e54:	ee de       	rcall	.-548    	; 0x2c32 <_Z12Sector_Erasem>
    2e56:	b1 df       	rcall	.-158    	; 0x2dba <_Z9Wait_Busyv>
    2e58:	a4 de       	rcall	.-696    	; 0x2ba2 <_Z4WRDIv>
    2e5a:	80 e0       	ldi	r24, 0x00	; 0
    2e5c:	bb ce       	rjmp	.-650    	; 0x2bd4 <_Z4WBPRc>
    2e5e:	08 95       	ret

00002e60 <_Z16flashEraseBackupv>:
    2e60:	a5 de       	rcall	.-694    	; 0x2bac <_Z23remove_block_protectionv>
    2e62:	9a de       	rcall	.-716    	; 0x2b98 <_Z4WRENv>
    2e64:	60 e0       	ldi	r22, 0x00	; 0
    2e66:	70 e1       	ldi	r23, 0x10	; 16
    2e68:	80 e0       	ldi	r24, 0x00	; 0
    2e6a:	90 e0       	ldi	r25, 0x00	; 0
    2e6c:	e2 de       	rcall	.-572    	; 0x2c32 <_Z12Sector_Erasem>
    2e6e:	a5 df       	rcall	.-182    	; 0x2dba <_Z9Wait_Busyv>
    2e70:	98 de       	rcall	.-720    	; 0x2ba2 <_Z4WRDIv>
    2e72:	80 e0       	ldi	r24, 0x00	; 0
    2e74:	af ce       	rjmp	.-674    	; 0x2bd4 <_Z4WBPRc>
    2e76:	08 95       	ret

00002e78 <_Z15flashWriteMR_BRv>:
    2e78:	0f 93       	push	r16
    2e7a:	1f 93       	push	r17
    2e7c:	cf 93       	push	r28
    2e7e:	df 93       	push	r29
    2e80:	cd b7       	in	r28, 0x3d	; 61
    2e82:	de b7       	in	r29, 0x3e	; 62
    2e84:	a0 97       	sbiw	r28, 0x20	; 32
    2e86:	0f b6       	in	r0, 0x3f	; 63
    2e88:	f8 94       	cli
    2e8a:	de bf       	out	0x3e, r29	; 62
    2e8c:	0f be       	out	0x3f, r0	; 63
    2e8e:	cd bf       	out	0x3d, r28	; 61
    2e90:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <_ZL7FL_data>
    2e94:	84 36       	cpi	r24, 0x64	; 100
    2e96:	20 f0       	brcs	.+8      	; 0x2ea0 <_Z15flashWriteMR_BRv+0x28>
    2e98:	d8 df       	rcall	.-80     	; 0x2e4a <_Z16flashEraseMasterv>
    2e9a:	e2 df       	rcall	.-60     	; 0x2e60 <_Z16flashEraseBackupv>
    2e9c:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <_ZL7FL_data>
    2ea0:	01 e0       	ldi	r16, 0x01	; 1
    2ea2:	12 e0       	ldi	r17, 0x02	; 2
    2ea4:	f8 01       	movw	r30, r16
    2ea6:	80 81       	ld	r24, Z
    2ea8:	89 83       	std	Y+1, r24	; 0x01
    2eaa:	21 81       	ldd	r18, Z+1	; 0x01
    2eac:	92 81       	ldd	r25, Z+2	; 0x02
    2eae:	83 81       	ldd	r24, Z+3	; 0x03
    2eb0:	2a 83       	std	Y+2, r18	; 0x02
    2eb2:	9b 83       	std	Y+3, r25	; 0x03
    2eb4:	8c 83       	std	Y+4, r24	; 0x04
    2eb6:	25 81       	ldd	r18, Z+5	; 0x05
    2eb8:	96 81       	ldd	r25, Z+6	; 0x06
    2eba:	87 81       	ldd	r24, Z+7	; 0x07
    2ebc:	2d 83       	std	Y+5, r18	; 0x05
    2ebe:	9e 83       	std	Y+6, r25	; 0x06
    2ec0:	8f 83       	std	Y+7, r24	; 0x07
    2ec2:	91 85       	ldd	r25, Z+9	; 0x09
    2ec4:	82 85       	ldd	r24, Z+10	; 0x0a
    2ec6:	98 87       	std	Y+8, r25	; 0x08
    2ec8:	89 87       	std	Y+9, r24	; 0x09
    2eca:	83 85       	ldd	r24, Z+11	; 0x0b
    2ecc:	8a 87       	std	Y+10, r24	; 0x0a
    2ece:	63 e1       	ldi	r22, 0x13	; 19
    2ed0:	ce 01       	movw	r24, r28
    2ed2:	01 96       	adiw	r24, 0x01	; 1
    2ed4:	eb dc       	rcall	.-1578   	; 0x28ac <_Z11getChecksumPhc>
    2ed6:	88 a3       	std	Y+32, r24	; 0x20
    2ed8:	69 de       	rcall	.-814    	; 0x2bac <_Z23remove_block_protectionv>
    2eda:	5e de       	rcall	.-836    	; 0x2b98 <_Z4WRENv>
    2edc:	f8 01       	movw	r30, r16
    2ede:	20 81       	ld	r18, Z
    2ee0:	82 2f       	mov	r24, r18
    2ee2:	90 e0       	ldi	r25, 0x00	; 0
    2ee4:	a0 e0       	ldi	r26, 0x00	; 0
    2ee6:	b0 e0       	ldi	r27, 0x00	; 0
    2ee8:	88 0f       	add	r24, r24
    2eea:	99 1f       	adc	r25, r25
    2eec:	aa 1f       	adc	r26, r26
    2eee:	bb 1f       	adc	r27, r27
    2ef0:	88 0f       	add	r24, r24
    2ef2:	99 1f       	adc	r25, r25
    2ef4:	aa 1f       	adc	r26, r26
    2ef6:	bb 1f       	adc	r27, r27
    2ef8:	88 0f       	add	r24, r24
    2efa:	99 1f       	adc	r25, r25
    2efc:	aa 1f       	adc	r26, r26
    2efe:	bb 1f       	adc	r27, r27
    2f00:	88 0f       	add	r24, r24
    2f02:	99 1f       	adc	r25, r25
    2f04:	aa 1f       	adc	r26, r26
    2f06:	bb 1f       	adc	r27, r27
    2f08:	9c 01       	movw	r18, r24
    2f0a:	ad 01       	movw	r20, r26
    2f0c:	22 0f       	add	r18, r18
    2f0e:	33 1f       	adc	r19, r19
    2f10:	44 1f       	adc	r20, r20
    2f12:	55 1f       	adc	r21, r21
    2f14:	60 e2       	ldi	r22, 0x20	; 32
    2f16:	70 e0       	ldi	r23, 0x00	; 0
    2f18:	ce 01       	movw	r24, r28
    2f1a:	01 96       	adiw	r24, 0x01	; 1
    2f1c:	9e de       	rcall	.-708    	; 0x2c5a <_Z18flashPacketProgramPcjm>
    2f1e:	4d df       	rcall	.-358    	; 0x2dba <_Z9Wait_Busyv>
    2f20:	40 de       	rcall	.-896    	; 0x2ba2 <_Z4WRDIv>
    2f22:	80 e0       	ldi	r24, 0x00	; 0
    2f24:	57 de       	rcall	.-850    	; 0x2bd4 <_Z4WBPRc>
    2f26:	42 de       	rcall	.-892    	; 0x2bac <_Z23remove_block_protectionv>
    2f28:	37 de       	rcall	.-914    	; 0x2b98 <_Z4WRENv>
    2f2a:	f8 01       	movw	r30, r16
    2f2c:	20 81       	ld	r18, Z
    2f2e:	82 2f       	mov	r24, r18
    2f30:	90 e0       	ldi	r25, 0x00	; 0
    2f32:	a0 e0       	ldi	r26, 0x00	; 0
    2f34:	b0 e0       	ldi	r27, 0x00	; 0
    2f36:	80 58       	subi	r24, 0x80	; 128
    2f38:	9f 4f       	sbci	r25, 0xFF	; 255
    2f3a:	af 4f       	sbci	r26, 0xFF	; 255
    2f3c:	bf 4f       	sbci	r27, 0xFF	; 255
    2f3e:	88 0f       	add	r24, r24
    2f40:	99 1f       	adc	r25, r25
    2f42:	aa 1f       	adc	r26, r26
    2f44:	bb 1f       	adc	r27, r27
    2f46:	88 0f       	add	r24, r24
    2f48:	99 1f       	adc	r25, r25
    2f4a:	aa 1f       	adc	r26, r26
    2f4c:	bb 1f       	adc	r27, r27
    2f4e:	88 0f       	add	r24, r24
    2f50:	99 1f       	adc	r25, r25
    2f52:	aa 1f       	adc	r26, r26
    2f54:	bb 1f       	adc	r27, r27
    2f56:	88 0f       	add	r24, r24
    2f58:	99 1f       	adc	r25, r25
    2f5a:	aa 1f       	adc	r26, r26
    2f5c:	bb 1f       	adc	r27, r27
    2f5e:	9c 01       	movw	r18, r24
    2f60:	ad 01       	movw	r20, r26
    2f62:	22 0f       	add	r18, r18
    2f64:	33 1f       	adc	r19, r19
    2f66:	44 1f       	adc	r20, r20
    2f68:	55 1f       	adc	r21, r21
    2f6a:	60 e2       	ldi	r22, 0x20	; 32
    2f6c:	70 e0       	ldi	r23, 0x00	; 0
    2f6e:	ce 01       	movw	r24, r28
    2f70:	01 96       	adiw	r24, 0x01	; 1
    2f72:	73 de       	rcall	.-794    	; 0x2c5a <_Z18flashPacketProgramPcjm>
    2f74:	22 df       	rcall	.-444    	; 0x2dba <_Z9Wait_Busyv>
    2f76:	15 de       	rcall	.-982    	; 0x2ba2 <_Z4WRDIv>
    2f78:	80 e0       	ldi	r24, 0x00	; 0
    2f7a:	2c de       	rcall	.-936    	; 0x2bd4 <_Z4WBPRc>
    2f7c:	f8 01       	movw	r30, r16
    2f7e:	80 81       	ld	r24, Z
    2f80:	8f 5f       	subi	r24, 0xFF	; 255
    2f82:	80 83       	st	Z, r24
    2f84:	a0 96       	adiw	r28, 0x20	; 32
    2f86:	0f b6       	in	r0, 0x3f	; 63
    2f88:	f8 94       	cli
    2f8a:	de bf       	out	0x3e, r29	; 62
    2f8c:	0f be       	out	0x3f, r0	; 63
    2f8e:	cd bf       	out	0x3d, r28	; 61
    2f90:	df 91       	pop	r29
    2f92:	cf 91       	pop	r28
    2f94:	1f 91       	pop	r17
    2f96:	0f 91       	pop	r16
    2f98:	08 95       	ret

00002f9a <_Z18flashEraseDRSectorv>:
    2f9a:	08 de       	rcall	.-1008   	; 0x2bac <_Z23remove_block_protectionv>
    2f9c:	fd dd       	rcall	.-1030   	; 0x2b98 <_Z4WRENv>
    2f9e:	60 e0       	ldi	r22, 0x00	; 0
    2fa0:	70 e2       	ldi	r23, 0x20	; 32
    2fa2:	80 e0       	ldi	r24, 0x00	; 0
    2fa4:	90 e0       	ldi	r25, 0x00	; 0
    2fa6:	45 de       	rcall	.-886    	; 0x2c32 <_Z12Sector_Erasem>
    2fa8:	08 df       	rcall	.-496    	; 0x2dba <_Z9Wait_Busyv>
    2faa:	fb dd       	rcall	.-1034   	; 0x2ba2 <_Z4WRDIv>
    2fac:	80 e0       	ldi	r24, 0x00	; 0
    2fae:	12 ce       	rjmp	.-988    	; 0x2bd4 <_Z4WBPRc>
    2fb0:	08 95       	ret

00002fb2 <_Z19updateFlashCurrAddrv>:
    2fb2:	bf 92       	push	r11
    2fb4:	cf 92       	push	r12
    2fb6:	df 92       	push	r13
    2fb8:	ef 92       	push	r14
    2fba:	ff 92       	push	r15
    2fbc:	0f 93       	push	r16
    2fbe:	1f 93       	push	r17
    2fc0:	cf 93       	push	r28
    2fc2:	df 93       	push	r29
    2fc4:	cd b7       	in	r28, 0x3d	; 61
    2fc6:	de b7       	in	r29, 0x3e	; 62
    2fc8:	c0 58       	subi	r28, 0x80	; 128
    2fca:	d1 09       	sbc	r29, r1
    2fcc:	0f b6       	in	r0, 0x3f	; 63
    2fce:	f8 94       	cli
    2fd0:	de bf       	out	0x3e, r29	; 62
    2fd2:	0f be       	out	0x3f, r0	; 63
    2fd4:	cd bf       	out	0x3d, r28	; 61
    2fd6:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <_ZL7FL_data>
    2fda:	f8 94       	cli
    2fdc:	dd 24       	eor	r13, r13
    2fde:	d3 94       	inc	r13
    2fe0:	c1 2c       	mov	r12, r1
    2fe2:	0f 2e       	mov	r0, r31
    2fe4:	f1 e0       	ldi	r31, 0x01	; 1
    2fe6:	ef 2e       	mov	r14, r31
    2fe8:	f2 e0       	ldi	r31, 0x02	; 2
    2fea:	ff 2e       	mov	r15, r31
    2fec:	f0 2d       	mov	r31, r0
    2fee:	bb 24       	eor	r11, r11
    2ff0:	b3 94       	inc	r11
    2ff2:	f7 01       	movw	r30, r14
    2ff4:	80 81       	ld	r24, Z
    2ff6:	84 36       	cpi	r24, 0x64	; 100
    2ff8:	08 f0       	brcs	.+2      	; 0x2ffc <_Z19updateFlashCurrAddrv+0x4a>
    2ffa:	87 c0       	rjmp	.+270    	; 0x310a <_Z19updateFlashCurrAddrv+0x158>
    2ffc:	cd dd       	rcall	.-1126   	; 0x2b98 <_Z4WRENv>
    2ffe:	f7 01       	movw	r30, r14
    3000:	60 81       	ld	r22, Z
    3002:	86 2f       	mov	r24, r22
    3004:	90 e0       	ldi	r25, 0x00	; 0
    3006:	a0 e0       	ldi	r26, 0x00	; 0
    3008:	b0 e0       	ldi	r27, 0x00	; 0
    300a:	88 0f       	add	r24, r24
    300c:	99 1f       	adc	r25, r25
    300e:	aa 1f       	adc	r26, r26
    3010:	bb 1f       	adc	r27, r27
    3012:	88 0f       	add	r24, r24
    3014:	99 1f       	adc	r25, r25
    3016:	aa 1f       	adc	r26, r26
    3018:	bb 1f       	adc	r27, r27
    301a:	88 0f       	add	r24, r24
    301c:	99 1f       	adc	r25, r25
    301e:	aa 1f       	adc	r26, r26
    3020:	bb 1f       	adc	r27, r27
    3022:	88 0f       	add	r24, r24
    3024:	99 1f       	adc	r25, r25
    3026:	aa 1f       	adc	r26, r26
    3028:	bb 1f       	adc	r27, r27
    302a:	bc 01       	movw	r22, r24
    302c:	cd 01       	movw	r24, r26
    302e:	66 0f       	add	r22, r22
    3030:	77 1f       	adc	r23, r23
    3032:	88 1f       	adc	r24, r24
    3034:	99 1f       	adc	r25, r25
    3036:	8e 01       	movw	r16, r28
    3038:	0f 5f       	subi	r16, 0xFF	; 255
    303a:	1f 4f       	sbci	r17, 0xFF	; 255
    303c:	20 e2       	ldi	r18, 0x20	; 32
    303e:	30 e0       	ldi	r19, 0x00	; 0
    3040:	40 e0       	ldi	r20, 0x00	; 0
    3042:	50 e0       	ldi	r21, 0x00	; 0
    3044:	49 de       	rcall	.-878    	; 0x2cd8 <_Z14readContToBuffmmPc>
    3046:	b9 de       	rcall	.-654    	; 0x2dba <_Z9Wait_Busyv>
    3048:	ac dd       	rcall	.-1192   	; 0x2ba2 <_Z4WRDIv>
    304a:	a6 dd       	rcall	.-1204   	; 0x2b98 <_Z4WRENv>
    304c:	f7 01       	movw	r30, r14
    304e:	60 81       	ld	r22, Z
    3050:	86 2f       	mov	r24, r22
    3052:	90 e0       	ldi	r25, 0x00	; 0
    3054:	a0 e0       	ldi	r26, 0x00	; 0
    3056:	b0 e0       	ldi	r27, 0x00	; 0
    3058:	80 58       	subi	r24, 0x80	; 128
    305a:	9f 4f       	sbci	r25, 0xFF	; 255
    305c:	af 4f       	sbci	r26, 0xFF	; 255
    305e:	bf 4f       	sbci	r27, 0xFF	; 255
    3060:	88 0f       	add	r24, r24
    3062:	99 1f       	adc	r25, r25
    3064:	aa 1f       	adc	r26, r26
    3066:	bb 1f       	adc	r27, r27
    3068:	88 0f       	add	r24, r24
    306a:	99 1f       	adc	r25, r25
    306c:	aa 1f       	adc	r26, r26
    306e:	bb 1f       	adc	r27, r27
    3070:	88 0f       	add	r24, r24
    3072:	99 1f       	adc	r25, r25
    3074:	aa 1f       	adc	r26, r26
    3076:	bb 1f       	adc	r27, r27
    3078:	88 0f       	add	r24, r24
    307a:	99 1f       	adc	r25, r25
    307c:	aa 1f       	adc	r26, r26
    307e:	bb 1f       	adc	r27, r27
    3080:	bc 01       	movw	r22, r24
    3082:	cd 01       	movw	r24, r26
    3084:	66 0f       	add	r22, r22
    3086:	77 1f       	adc	r23, r23
    3088:	88 1f       	adc	r24, r24
    308a:	99 1f       	adc	r25, r25
    308c:	00 5e       	subi	r16, 0xE0	; 224
    308e:	1f 4f       	sbci	r17, 0xFF	; 255
    3090:	20 e2       	ldi	r18, 0x20	; 32
    3092:	30 e0       	ldi	r19, 0x00	; 0
    3094:	40 e0       	ldi	r20, 0x00	; 0
    3096:	50 e0       	ldi	r21, 0x00	; 0
    3098:	1f de       	rcall	.-962    	; 0x2cd8 <_Z14readContToBuffmmPc>
    309a:	8f de       	rcall	.-738    	; 0x2dba <_Z9Wait_Busyv>
    309c:	82 dd       	rcall	.-1276   	; 0x2ba2 <_Z4WRDIv>
    309e:	89 81       	ldd	r24, Y+1	; 0x01
    30a0:	f7 01       	movw	r30, r14
    30a2:	90 81       	ld	r25, Z
    30a4:	89 13       	cpse	r24, r25
    30a6:	2a c0       	rjmp	.+84     	; 0x30fc <_Z19updateFlashCurrAddrv+0x14a>
    30a8:	18 a1       	ldd	r17, Y+32	; 0x20
    30aa:	63 e1       	ldi	r22, 0x13	; 19
    30ac:	ce 01       	movw	r24, r28
    30ae:	01 96       	adiw	r24, 0x01	; 1
    30b0:	fd db       	rcall	.-2054   	; 0x28ac <_Z11getChecksumPhc>
    30b2:	18 13       	cpse	r17, r24
    30b4:	0c c0       	rjmp	.+24     	; 0x30ce <_Z19updateFlashCurrAddrv+0x11c>
    30b6:	f7 01       	movw	r30, r14
    30b8:	80 81       	ld	r24, Z
    30ba:	8f 5f       	subi	r24, 0xFF	; 255
    30bc:	80 83       	st	Z, r24
    30be:	be 01       	movw	r22, r28
    30c0:	6f 5b       	subi	r22, 0xBF	; 191
    30c2:	7f 4f       	sbci	r23, 0xFF	; 255
    30c4:	ce 01       	movw	r24, r28
    30c6:	01 96       	adiw	r24, 0x01	; 1
    30c8:	47 de       	rcall	.-882    	; 0x2d58 <_Z11flashCopyMRPcS_>
    30ca:	cb 2c       	mov	r12, r11
    30cc:	1a c0       	rjmp	.+52     	; 0x3102 <_Z19updateFlashCurrAddrv+0x150>
    30ce:	21 96       	adiw	r28, 0x01	; 1
    30d0:	1f ad       	ldd	r17, Y+63	; 0x3f
    30d2:	21 97       	sbiw	r28, 0x01	; 1
    30d4:	63 e1       	ldi	r22, 0x13	; 19
    30d6:	ce 01       	movw	r24, r28
    30d8:	81 96       	adiw	r24, 0x21	; 33
    30da:	e8 db       	rcall	.-2096   	; 0x28ac <_Z11getChecksumPhc>
    30dc:	18 13       	cpse	r17, r24
    30de:	0c c0       	rjmp	.+24     	; 0x30f8 <_Z19updateFlashCurrAddrv+0x146>
    30e0:	f7 01       	movw	r30, r14
    30e2:	80 81       	ld	r24, Z
    30e4:	8f 5f       	subi	r24, 0xFF	; 255
    30e6:	80 83       	st	Z, r24
    30e8:	be 01       	movw	r22, r28
    30ea:	6f 5b       	subi	r22, 0xBF	; 191
    30ec:	7f 4f       	sbci	r23, 0xFF	; 255
    30ee:	ce 01       	movw	r24, r28
    30f0:	81 96       	adiw	r24, 0x21	; 33
    30f2:	32 de       	rcall	.-924    	; 0x2d58 <_Z11flashCopyMRPcS_>
    30f4:	cb 2c       	mov	r12, r11
    30f6:	05 c0       	rjmp	.+10     	; 0x3102 <_Z19updateFlashCurrAddrv+0x150>
    30f8:	d3 94       	inc	r13
    30fa:	03 c0       	rjmp	.+6      	; 0x3102 <_Z19updateFlashCurrAddrv+0x150>
    30fc:	8f 3f       	cpi	r24, 0xFF	; 255
    30fe:	29 f0       	breq	.+10     	; 0x310a <_Z19updateFlashCurrAddrv+0x158>
    3100:	d3 94       	inc	r13
    3102:	f3 e0       	ldi	r31, 0x03	; 3
    3104:	fd 15       	cp	r31, r13
    3106:	08 f0       	brcs	.+2      	; 0x310a <_Z19updateFlashCurrAddrv+0x158>
    3108:	74 cf       	rjmp	.-280    	; 0x2ff2 <_Z19updateFlashCurrAddrv+0x40>
    310a:	cc 20       	and	r12, r12
    310c:	09 f4       	brne	.+2      	; 0x3110 <_Z19updateFlashCurrAddrv+0x15e>
    310e:	74 c0       	rjmp	.+232    	; 0x31f8 <_Z19updateFlashCurrAddrv+0x246>
    3110:	e1 e0       	ldi	r30, 0x01	; 1
    3112:	f2 e0       	ldi	r31, 0x02	; 2
    3114:	22 96       	adiw	r28, 0x02	; 2
    3116:	8f ad       	ldd	r24, Y+63	; 0x3f
    3118:	22 97       	sbiw	r28, 0x02	; 2
    311a:	8f 5f       	subi	r24, 0xFF	; 255
    311c:	80 83       	st	Z, r24
    311e:	24 96       	adiw	r28, 0x04	; 4
    3120:	8f ad       	ldd	r24, Y+63	; 0x3f
    3122:	24 97       	sbiw	r28, 0x04	; 4
    3124:	25 96       	adiw	r28, 0x05	; 5
    3126:	4f ad       	ldd	r20, Y+63	; 0x3f
    3128:	25 97       	sbiw	r28, 0x05	; 5
    312a:	50 e0       	ldi	r21, 0x00	; 0
    312c:	60 e0       	ldi	r22, 0x00	; 0
    312e:	70 e0       	ldi	r23, 0x00	; 0
    3130:	ba 01       	movw	r22, r20
    3132:	55 27       	eor	r21, r21
    3134:	44 27       	eor	r20, r20
    3136:	58 2b       	or	r21, r24
    3138:	23 96       	adiw	r28, 0x03	; 3
    313a:	8f ad       	ldd	r24, Y+63	; 0x3f
    313c:	23 97       	sbiw	r28, 0x03	; 3
    313e:	48 2b       	or	r20, r24
    3140:	41 83       	std	Z+1, r20	; 0x01
    3142:	52 83       	std	Z+2, r21	; 0x02
    3144:	63 83       	std	Z+3, r22	; 0x03
    3146:	74 83       	std	Z+4, r23	; 0x04
    3148:	27 96       	adiw	r28, 0x07	; 7
    314a:	2f ad       	ldd	r18, Y+63	; 0x3f
    314c:	27 97       	sbiw	r28, 0x07	; 7
    314e:	28 96       	adiw	r28, 0x08	; 8
    3150:	8f ad       	ldd	r24, Y+63	; 0x3f
    3152:	28 97       	sbiw	r28, 0x08	; 8
    3154:	90 e0       	ldi	r25, 0x00	; 0
    3156:	a0 e0       	ldi	r26, 0x00	; 0
    3158:	b0 e0       	ldi	r27, 0x00	; 0
    315a:	dc 01       	movw	r26, r24
    315c:	99 27       	eor	r25, r25
    315e:	88 27       	eor	r24, r24
    3160:	92 2b       	or	r25, r18
    3162:	26 96       	adiw	r28, 0x06	; 6
    3164:	2f ad       	ldd	r18, Y+63	; 0x3f
    3166:	26 97       	sbiw	r28, 0x06	; 6
    3168:	82 2b       	or	r24, r18
    316a:	85 83       	std	Z+5, r24	; 0x05
    316c:	96 83       	std	Z+6, r25	; 0x06
    316e:	a7 83       	std	Z+7, r26	; 0x07
    3170:	b0 87       	std	Z+8, r27	; 0x08
    3172:	2a 96       	adiw	r28, 0x0a	; 10
    3174:	2f ad       	ldd	r18, Y+63	; 0x3f
    3176:	2a 97       	sbiw	r28, 0x0a	; 10
    3178:	30 e0       	ldi	r19, 0x00	; 0
    317a:	32 2f       	mov	r19, r18
    317c:	22 27       	eor	r18, r18
    317e:	29 96       	adiw	r28, 0x09	; 9
    3180:	1f ad       	ldd	r17, Y+63	; 0x3f
    3182:	29 97       	sbiw	r28, 0x09	; 9
    3184:	21 0f       	add	r18, r17
    3186:	31 1d       	adc	r19, r1
    3188:	32 87       	std	Z+10, r19	; 0x0a
    318a:	21 87       	std	Z+9, r18	; 0x09
    318c:	2b 96       	adiw	r28, 0x0b	; 11
    318e:	2f ad       	ldd	r18, Y+63	; 0x3f
    3190:	2b 97       	sbiw	r28, 0x0b	; 11
    3192:	23 87       	std	Z+11, r18	; 0x0b
    3194:	48 17       	cp	r20, r24
    3196:	59 07       	cpc	r21, r25
    3198:	6a 07       	cpc	r22, r26
    319a:	7b 07       	cpc	r23, r27
    319c:	51 f1       	breq	.+84     	; 0x31f2 <_Z19updateFlashCurrAddrv+0x240>
    319e:	7f 01       	movw	r14, r30
    31a0:	81 e0       	ldi	r24, 0x01	; 1
    31a2:	80 8b       	std	Z+16, r24	; 0x10
    31a4:	f9 dc       	rcall	.-1550   	; 0x2b98 <_Z4WRENv>
    31a6:	f7 01       	movw	r30, r14
    31a8:	65 81       	ldd	r22, Z+5	; 0x05
    31aa:	76 81       	ldd	r23, Z+6	; 0x06
    31ac:	87 81       	ldd	r24, Z+7	; 0x07
    31ae:	90 85       	ldd	r25, Z+8	; 0x08
    31b0:	8e 01       	movw	r16, r28
    31b2:	0f 59       	subi	r16, 0x9F	; 159
    31b4:	1f 4f       	sbci	r17, 0xFF	; 255
    31b6:	20 e2       	ldi	r18, 0x20	; 32
    31b8:	30 e0       	ldi	r19, 0x00	; 0
    31ba:	40 e0       	ldi	r20, 0x00	; 0
    31bc:	50 e0       	ldi	r21, 0x00	; 0
    31be:	8c dd       	rcall	.-1256   	; 0x2cd8 <_Z14readContToBuffmmPc>
    31c0:	fc dd       	rcall	.-1032   	; 0x2dba <_Z9Wait_Busyv>
    31c2:	ef dc       	rcall	.-1570   	; 0x2ba2 <_Z4WRDIv>
    31c4:	a4 96       	adiw	r28, 0x24	; 36
    31c6:	8f ad       	ldd	r24, Y+63	; 0x3f
    31c8:	a4 97       	sbiw	r28, 0x24	; 36
    31ca:	90 e0       	ldi	r25, 0x00	; 0
    31cc:	a0 e0       	ldi	r26, 0x00	; 0
    31ce:	b0 e0       	ldi	r27, 0x00	; 0
    31d0:	dc 01       	movw	r26, r24
    31d2:	99 27       	eor	r25, r25
    31d4:	88 27       	eor	r24, r24
    31d6:	a3 96       	adiw	r28, 0x23	; 35
    31d8:	2e ad       	ldd	r18, Y+62	; 0x3e
    31da:	3f ad       	ldd	r19, Y+63	; 0x3f
    31dc:	a3 97       	sbiw	r28, 0x23	; 35
    31de:	82 0f       	add	r24, r18
    31e0:	93 1f       	adc	r25, r19
    31e2:	a1 1d       	adc	r26, r1
    31e4:	b1 1d       	adc	r27, r1
    31e6:	f7 01       	movw	r30, r14
    31e8:	84 87       	std	Z+12, r24	; 0x0c
    31ea:	95 87       	std	Z+13, r25	; 0x0d
    31ec:	a6 87       	std	Z+14, r26	; 0x0e
    31ee:	b7 87       	std	Z+15, r27	; 0x0f
    31f0:	2a c0       	rjmp	.+84     	; 0x3246 <_Z19updateFlashCurrAddrv+0x294>
    31f2:	10 92 11 02 	sts	0x0211, r1	; 0x800211 <_ZL7FL_data+0x10>
    31f6:	27 c0       	rjmp	.+78     	; 0x3246 <_Z19updateFlashCurrAddrv+0x294>
    31f8:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <_ZL7FL_data>
    31fc:	81 11       	cpse	r24, r1
    31fe:	16 c0       	rjmp	.+44     	; 0x322c <_Z19updateFlashCurrAddrv+0x27a>
    3200:	e1 e0       	ldi	r30, 0x01	; 1
    3202:	f2 e0       	ldi	r31, 0x02	; 2
    3204:	80 e0       	ldi	r24, 0x00	; 0
    3206:	90 e2       	ldi	r25, 0x20	; 32
    3208:	a0 e0       	ldi	r26, 0x00	; 0
    320a:	b0 e0       	ldi	r27, 0x00	; 0
    320c:	81 83       	std	Z+1, r24	; 0x01
    320e:	92 83       	std	Z+2, r25	; 0x02
    3210:	a3 83       	std	Z+3, r26	; 0x03
    3212:	b4 83       	std	Z+4, r27	; 0x04
    3214:	85 83       	std	Z+5, r24	; 0x05
    3216:	96 83       	std	Z+6, r25	; 0x06
    3218:	a7 83       	std	Z+7, r26	; 0x07
    321a:	b0 87       	std	Z+8, r27	; 0x08
    321c:	12 86       	std	Z+10, r1	; 0x0a
    321e:	11 86       	std	Z+9, r1	; 0x09
    3220:	13 86       	std	Z+11, r1	; 0x0b
    3222:	13 de       	rcall	.-986    	; 0x2e4a <_Z16flashEraseMasterv>
    3224:	1d de       	rcall	.-966    	; 0x2e60 <_Z16flashEraseBackupv>
    3226:	b9 de       	rcall	.-654    	; 0x2f9a <_Z18flashEraseDRSectorv>
    3228:	27 de       	rcall	.-946    	; 0x2e78 <_Z15flashWriteMR_BRv>
    322a:	0d c0       	rjmp	.+26     	; 0x3246 <_Z19updateFlashCurrAddrv+0x294>
    322c:	80 e0       	ldi	r24, 0x00	; 0
    322e:	90 e2       	ldi	r25, 0x20	; 32
    3230:	a0 e0       	ldi	r26, 0x00	; 0
    3232:	b0 e0       	ldi	r27, 0x00	; 0
    3234:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <_ZL7FL_data+0x1>
    3238:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <_ZL7FL_data+0x2>
    323c:	a0 93 04 02 	sts	0x0204, r26	; 0x800204 <_ZL7FL_data+0x3>
    3240:	b0 93 05 02 	sts	0x0205, r27	; 0x800205 <_ZL7FL_data+0x4>
    3244:	41 9a       	sbi	0x08, 1	; 8
    3246:	78 94       	sei
    3248:	c0 58       	subi	r28, 0x80	; 128
    324a:	df 4f       	sbci	r29, 0xFF	; 255
    324c:	0f b6       	in	r0, 0x3f	; 63
    324e:	f8 94       	cli
    3250:	de bf       	out	0x3e, r29	; 62
    3252:	0f be       	out	0x3f, r0	; 63
    3254:	cd bf       	out	0x3d, r28	; 61
    3256:	df 91       	pop	r29
    3258:	cf 91       	pop	r28
    325a:	1f 91       	pop	r17
    325c:	0f 91       	pop	r16
    325e:	ff 90       	pop	r15
    3260:	ef 90       	pop	r14
    3262:	df 90       	pop	r13
    3264:	cf 90       	pop	r12
    3266:	bf 90       	pop	r11
    3268:	08 95       	ret

0000326a <_Z16flashEraseSectormm>:
    326a:	cf 92       	push	r12
    326c:	df 92       	push	r13
    326e:	ef 92       	push	r14
    3270:	ff 92       	push	r15
    3272:	62 17       	cp	r22, r18
    3274:	73 07       	cpc	r23, r19
    3276:	84 07       	cpc	r24, r20
    3278:	95 07       	cpc	r25, r21
    327a:	58 f4       	brcc	.+22     	; 0x3292 <_Z16flashEraseSectormm+0x28>
    327c:	6b 01       	movw	r12, r22
    327e:	7c 01       	movw	r14, r24
    3280:	95 dc       	rcall	.-1750   	; 0x2bac <_Z23remove_block_protectionv>
    3282:	8a dc       	rcall	.-1772   	; 0x2b98 <_Z4WRENv>
    3284:	c7 01       	movw	r24, r14
    3286:	b6 01       	movw	r22, r12
    3288:	d4 dc       	rcall	.-1624   	; 0x2c32 <_Z12Sector_Erasem>
    328a:	97 dd       	rcall	.-1234   	; 0x2dba <_Z9Wait_Busyv>
    328c:	8a dc       	rcall	.-1772   	; 0x2ba2 <_Z4WRDIv>
    328e:	80 e0       	ldi	r24, 0x00	; 0
    3290:	a1 dc       	rcall	.-1726   	; 0x2bd4 <_Z4WBPRc>
    3292:	ff 90       	pop	r15
    3294:	ef 90       	pop	r14
    3296:	df 90       	pop	r13
    3298:	cf 90       	pop	r12
    329a:	08 95       	ret

0000329c <_Z12flashWriteLRP12FL_rtu_log_t>:
    329c:	0f 93       	push	r16
    329e:	1f 93       	push	r17
    32a0:	cf 93       	push	r28
    32a2:	df 93       	push	r29
    32a4:	ec 01       	movw	r28, r24
    32a6:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <_ZL7FL_data+0x9>
    32aa:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <_ZL7FL_data+0xa>
    32ae:	8f 3f       	cpi	r24, 0xFF	; 255
    32b0:	2f ef       	ldi	r18, 0xFF	; 255
    32b2:	92 07       	cpc	r25, r18
    32b4:	29 f4       	brne	.+10     	; 0x32c0 <_Z12flashWriteLRP12FL_rtu_log_t+0x24>
    32b6:	e1 e0       	ldi	r30, 0x01	; 1
    32b8:	f2 e0       	ldi	r31, 0x02	; 2
    32ba:	23 85       	ldd	r18, Z+11	; 0x0b
    32bc:	2f 5f       	subi	r18, 0xFF	; 255
    32be:	23 87       	std	Z+11, r18	; 0x0b
    32c0:	01 96       	adiw	r24, 0x01	; 1
    32c2:	e1 e0       	ldi	r30, 0x01	; 1
    32c4:	f2 e0       	ldi	r31, 0x02	; 2
    32c6:	92 87       	std	Z+10, r25	; 0x0a
    32c8:	81 87       	std	Z+9, r24	; 0x09
    32ca:	99 83       	std	Y+1, r25	; 0x01
    32cc:	88 83       	st	Y, r24
    32ce:	83 85       	ldd	r24, Z+11	; 0x0b
    32d0:	8a 83       	std	Y+2, r24	; 0x02
    32d2:	61 81       	ldd	r22, Z+1	; 0x01
    32d4:	72 81       	ldd	r23, Z+2	; 0x02
    32d6:	83 81       	ldd	r24, Z+3	; 0x03
    32d8:	94 81       	ldd	r25, Z+4	; 0x04
    32da:	60 3e       	cpi	r22, 0xE0	; 224
    32dc:	ef e1       	ldi	r30, 0x1F	; 31
    32de:	7e 07       	cpc	r23, r30
    32e0:	e0 e2       	ldi	r30, 0x20	; 32
    32e2:	8e 07       	cpc	r24, r30
    32e4:	91 05       	cpc	r25, r1
    32e6:	f8 f0       	brcs	.+62     	; 0x3326 <_Z12flashWriteLRP12FL_rtu_log_t+0x8a>
    32e8:	01 e0       	ldi	r16, 0x01	; 1
    32ea:	12 e0       	ldi	r17, 0x02	; 2
    32ec:	80 e0       	ldi	r24, 0x00	; 0
    32ee:	90 e3       	ldi	r25, 0x30	; 48
    32f0:	a0 e0       	ldi	r26, 0x00	; 0
    32f2:	b0 e0       	ldi	r27, 0x00	; 0
    32f4:	f8 01       	movw	r30, r16
    32f6:	85 83       	std	Z+5, r24	; 0x05
    32f8:	96 83       	std	Z+6, r25	; 0x06
    32fa:	a7 83       	std	Z+7, r26	; 0x07
    32fc:	b0 87       	std	Z+8, r27	; 0x08
    32fe:	80 e0       	ldi	r24, 0x00	; 0
    3300:	90 e2       	ldi	r25, 0x20	; 32
    3302:	a0 e0       	ldi	r26, 0x00	; 0
    3304:	b0 e0       	ldi	r27, 0x00	; 0
    3306:	81 83       	std	Z+1, r24	; 0x01
    3308:	92 83       	std	Z+2, r25	; 0x02
    330a:	a3 83       	std	Z+3, r26	; 0x03
    330c:	b4 83       	std	Z+4, r27	; 0x04
    330e:	20 ee       	ldi	r18, 0xE0	; 224
    3310:	3f e1       	ldi	r19, 0x1F	; 31
    3312:	40 e2       	ldi	r20, 0x20	; 32
    3314:	50 e0       	ldi	r21, 0x00	; 0
    3316:	60 e0       	ldi	r22, 0x00	; 0
    3318:	70 e2       	ldi	r23, 0x20	; 32
    331a:	80 e0       	ldi	r24, 0x00	; 0
    331c:	90 e0       	ldi	r25, 0x00	; 0
    331e:	a5 df       	rcall	.-182    	; 0x326a <_Z16flashEraseSectormm>
    3320:	f8 01       	movw	r30, r16
    3322:	10 8a       	std	Z+16, r1	; 0x10
    3324:	4a c0       	rjmp	.+148    	; 0x33ba <_Z12flashWriteLRP12FL_rtu_log_t+0x11e>
    3326:	00 91 06 02 	lds	r16, 0x0206	; 0x800206 <_ZL7FL_data+0x5>
    332a:	10 91 07 02 	lds	r17, 0x0207	; 0x800207 <_ZL7FL_data+0x6>
    332e:	20 91 08 02 	lds	r18, 0x0208	; 0x800208 <_ZL7FL_data+0x7>
    3332:	30 91 09 02 	lds	r19, 0x0209	; 0x800209 <_ZL7FL_data+0x8>
    3336:	60 17       	cp	r22, r16
    3338:	71 07       	cpc	r23, r17
    333a:	82 07       	cpc	r24, r18
    333c:	93 07       	cpc	r25, r19
    333e:	e9 f5       	brne	.+122    	; 0x33ba <_Z12flashWriteLRP12FL_rtu_log_t+0x11e>
    3340:	8b 01       	movw	r16, r22
    3342:	9c 01       	movw	r18, r24
    3344:	1f 70       	andi	r17, 0x0F	; 15
    3346:	22 27       	eor	r18, r18
    3348:	33 27       	eor	r19, r19
    334a:	01 2b       	or	r16, r17
    334c:	02 2b       	or	r16, r18
    334e:	03 2b       	or	r16, r19
    3350:	a1 f5       	brne	.+104    	; 0x33ba <_Z12flashWriteLRP12FL_rtu_log_t+0x11e>
    3352:	61 15       	cp	r22, r1
    3354:	f0 e2       	ldi	r31, 0x20	; 32
    3356:	7f 07       	cpc	r23, r31
    3358:	81 05       	cpc	r24, r1
    335a:	91 05       	cpc	r25, r1
    335c:	71 f1       	breq	.+92     	; 0x33ba <_Z12flashWriteLRP12FL_rtu_log_t+0x11e>
    335e:	20 ee       	ldi	r18, 0xE0	; 224
    3360:	3f e1       	ldi	r19, 0x1F	; 31
    3362:	40 e2       	ldi	r20, 0x20	; 32
    3364:	50 e0       	ldi	r21, 0x00	; 0
    3366:	81 df       	rcall	.-254    	; 0x326a <_Z16flashEraseSectormm>
    3368:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <_ZL7FL_data+0x5>
    336c:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <_ZL7FL_data+0x6>
    3370:	a0 91 08 02 	lds	r26, 0x0208	; 0x800208 <_ZL7FL_data+0x7>
    3374:	b0 91 09 02 	lds	r27, 0x0209	; 0x800209 <_ZL7FL_data+0x8>
    3378:	90 5f       	subi	r25, 0xF0	; 240
    337a:	af 4f       	sbci	r26, 0xFF	; 255
    337c:	bf 4f       	sbci	r27, 0xFF	; 255
    337e:	80 3e       	cpi	r24, 0xE0	; 224
    3380:	2f e1       	ldi	r18, 0x1F	; 31
    3382:	92 07       	cpc	r25, r18
    3384:	20 e2       	ldi	r18, 0x20	; 32
    3386:	a2 07       	cpc	r26, r18
    3388:	b1 05       	cpc	r27, r1
    338a:	48 f4       	brcc	.+18     	; 0x339e <_Z12flashWriteLRP12FL_rtu_log_t+0x102>
    338c:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <_ZL7FL_data+0x5>
    3390:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <_ZL7FL_data+0x6>
    3394:	a0 93 08 02 	sts	0x0208, r26	; 0x800208 <_ZL7FL_data+0x7>
    3398:	b0 93 09 02 	sts	0x0209, r27	; 0x800209 <_ZL7FL_data+0x8>
    339c:	0c c0       	rjmp	.+24     	; 0x33b6 <_Z12flashWriteLRP12FL_rtu_log_t+0x11a>
    339e:	80 e0       	ldi	r24, 0x00	; 0
    33a0:	90 e2       	ldi	r25, 0x20	; 32
    33a2:	a0 e0       	ldi	r26, 0x00	; 0
    33a4:	b0 e0       	ldi	r27, 0x00	; 0
    33a6:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <_ZL7FL_data+0x5>
    33aa:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <_ZL7FL_data+0x6>
    33ae:	a0 93 08 02 	sts	0x0208, r26	; 0x800208 <_ZL7FL_data+0x7>
    33b2:	b0 93 09 02 	sts	0x0209, r27	; 0x800209 <_ZL7FL_data+0x8>
    33b6:	10 92 11 02 	sts	0x0211, r1	; 0x800211 <_ZL7FL_data+0x10>
    33ba:	6f e1       	ldi	r22, 0x1F	; 31
    33bc:	ce 01       	movw	r24, r28
    33be:	76 da       	rcall	.-2836   	; 0x28ac <_Z11getChecksumPhc>
    33c0:	8f 8f       	std	Y+31, r24	; 0x1f
    33c2:	f4 db       	rcall	.-2072   	; 0x2bac <_Z23remove_block_protectionv>
    33c4:	e9 db       	rcall	.-2094   	; 0x2b98 <_Z4WRENv>
    33c6:	01 e0       	ldi	r16, 0x01	; 1
    33c8:	12 e0       	ldi	r17, 0x02	; 2
    33ca:	f8 01       	movw	r30, r16
    33cc:	21 81       	ldd	r18, Z+1	; 0x01
    33ce:	32 81       	ldd	r19, Z+2	; 0x02
    33d0:	43 81       	ldd	r20, Z+3	; 0x03
    33d2:	54 81       	ldd	r21, Z+4	; 0x04
    33d4:	60 e2       	ldi	r22, 0x20	; 32
    33d6:	70 e0       	ldi	r23, 0x00	; 0
    33d8:	ce 01       	movw	r24, r28
    33da:	3f dc       	rcall	.-1922   	; 0x2c5a <_Z18flashPacketProgramPcjm>
    33dc:	ee dc       	rcall	.-1572   	; 0x2dba <_Z9Wait_Busyv>
    33de:	e1 db       	rcall	.-2110   	; 0x2ba2 <_Z4WRDIv>
    33e0:	80 e0       	ldi	r24, 0x00	; 0
    33e2:	f8 db       	rcall	.-2064   	; 0x2bd4 <_Z4WBPRc>
    33e4:	f8 01       	movw	r30, r16
    33e6:	81 81       	ldd	r24, Z+1	; 0x01
    33e8:	92 81       	ldd	r25, Z+2	; 0x02
    33ea:	a3 81       	ldd	r26, Z+3	; 0x03
    33ec:	b4 81       	ldd	r27, Z+4	; 0x04
    33ee:	80 96       	adiw	r24, 0x20	; 32
    33f0:	a1 1d       	adc	r26, r1
    33f2:	b1 1d       	adc	r27, r1
    33f4:	81 83       	std	Z+1, r24	; 0x01
    33f6:	92 83       	std	Z+2, r25	; 0x02
    33f8:	a3 83       	std	Z+3, r26	; 0x03
    33fa:	b4 83       	std	Z+4, r27	; 0x04
    33fc:	df 91       	pop	r29
    33fe:	cf 91       	pop	r28
    3400:	1f 91       	pop	r17
    3402:	0f 91       	pop	r16
    3404:	08 95       	ret

00003406 <_Z9flashInitv>:
    3406:	3f db       	rcall	.-2434   	; 0x2a86 <_Z10Portassignv>
    3408:	4f db       	rcall	.-2402   	; 0x2aa8 <_Z7CE_Highv>
    340a:	54 db       	rcall	.-2392   	; 0x2ab4 <_Z6WP_Lowv>
    340c:	51 db       	rcall	.-2398   	; 0x2ab0 <_Z15Reset_Hold_Highv>
    340e:	58 db       	rcall	.-2384   	; 0x2ac0 <_Z7SCK_Lowv>
    3410:	8f ef       	ldi	r24, 0xFF	; 255
    3412:	97 e4       	ldi	r25, 0x47	; 71
    3414:	01 97       	sbiw	r24, 0x01	; 1
    3416:	f1 f7       	brne	.-4      	; 0x3414 <_Z9flashInitv+0xe>
    3418:	00 c0       	rjmp	.+0      	; 0x341a <_Z9flashInitv+0x14>
    341a:	00 00       	nop
    341c:	c7 dc       	rcall	.-1650   	; 0x2dac <_Z12flashSwResetv>
    341e:	d1 db       	rcall	.-2142   	; 0x2bc2 <_Z13enable_wp_pinv>
    3420:	c8 cd       	rjmp	.-1136   	; 0x2fb2 <_Z19updateFlashCurrAddrv>
    3422:	08 95       	ret

00003424 <_Z15flashClrTransIDv>:
    3424:	e1 e0       	ldi	r30, 0x01	; 1
    3426:	f2 e0       	ldi	r31, 0x02	; 2
    3428:	12 86       	std	Z+10, r1	; 0x0a
    342a:	11 86       	std	Z+9, r1	; 0x09
    342c:	13 86       	std	Z+11, r1	; 0x0b
    342e:	08 95       	ret

00003430 <_Z15flashClrRTULogsv>:
    3430:	cf 92       	push	r12
    3432:	df 92       	push	r13
    3434:	ef 92       	push	r14
    3436:	ff 92       	push	r15
    3438:	c1 2c       	mov	r12, r1
    343a:	d1 2c       	mov	r13, r1
    343c:	76 01       	movw	r14, r12
    343e:	68 94       	set
    3440:	d5 f8       	bld	r13, 5
    3442:	a8 95       	wdr
    3444:	b3 db       	rcall	.-2202   	; 0x2bac <_Z23remove_block_protectionv>
    3446:	a8 db       	rcall	.-2224   	; 0x2b98 <_Z4WRENv>
    3448:	c7 01       	movw	r24, r14
    344a:	b6 01       	movw	r22, r12
    344c:	f2 db       	rcall	.-2076   	; 0x2c32 <_Z12Sector_Erasem>
    344e:	b5 dc       	rcall	.-1686   	; 0x2dba <_Z9Wait_Busyv>
    3450:	a8 db       	rcall	.-2224   	; 0x2ba2 <_Z4WRDIv>
    3452:	80 e0       	ldi	r24, 0x00	; 0
    3454:	bf db       	rcall	.-2178   	; 0x2bd4 <_Z4WBPRc>
    3456:	80 e1       	ldi	r24, 0x10	; 16
    3458:	d8 0e       	add	r13, r24
    345a:	e1 1c       	adc	r14, r1
    345c:	f1 1c       	adc	r15, r1
    345e:	c1 14       	cp	r12, r1
    3460:	80 e2       	ldi	r24, 0x20	; 32
    3462:	d8 06       	cpc	r13, r24
    3464:	e8 06       	cpc	r14, r24
    3466:	f1 04       	cpc	r15, r1
    3468:	61 f7       	brne	.-40     	; 0x3442 <_Z15flashClrRTULogsv+0x12>
    346a:	ff 90       	pop	r15
    346c:	ef 90       	pop	r14
    346e:	df 90       	pop	r13
    3470:	cf 90       	pop	r12
    3472:	08 95       	ret

00003474 <_Z12flashClrMRBRv>:
    3474:	9b db       	rcall	.-2250   	; 0x2bac <_Z23remove_block_protectionv>
    3476:	90 db       	rcall	.-2272   	; 0x2b98 <_Z4WRENv>
    3478:	60 e0       	ldi	r22, 0x00	; 0
    347a:	70 e0       	ldi	r23, 0x00	; 0
    347c:	cb 01       	movw	r24, r22
    347e:	d9 db       	rcall	.-2126   	; 0x2c32 <_Z12Sector_Erasem>
    3480:	9c dc       	rcall	.-1736   	; 0x2dba <_Z9Wait_Busyv>
    3482:	8f db       	rcall	.-2274   	; 0x2ba2 <_Z4WRDIv>
    3484:	80 e0       	ldi	r24, 0x00	; 0
    3486:	a6 db       	rcall	.-2228   	; 0x2bd4 <_Z4WBPRc>
    3488:	91 db       	rcall	.-2270   	; 0x2bac <_Z23remove_block_protectionv>
    348a:	86 db       	rcall	.-2292   	; 0x2b98 <_Z4WRENv>
    348c:	60 e0       	ldi	r22, 0x00	; 0
    348e:	70 e1       	ldi	r23, 0x10	; 16
    3490:	80 e0       	ldi	r24, 0x00	; 0
    3492:	90 e0       	ldi	r25, 0x00	; 0
    3494:	ce db       	rcall	.-2148   	; 0x2c32 <_Z12Sector_Erasem>
    3496:	91 dc       	rcall	.-1758   	; 0x2dba <_Z9Wait_Busyv>
    3498:	84 db       	rcall	.-2296   	; 0x2ba2 <_Z4WRDIv>
    349a:	80 e0       	ldi	r24, 0x00	; 0
    349c:	9b cb       	rjmp	.-2250   	; 0x2bd4 <_Z4WBPRc>
    349e:	08 95       	ret

000034a0 <_Z27flashEraseFreqUpdDataSectorv>:
{
	unsigned long addr = FL_FREQ_UPD_DATA_START_ADDR;
	

#ifdef FLASH_WP_ENABLE
		remove_block_protection();
    34a0:	85 db       	rcall	.-2294   	; 0x2bac <_Z23remove_block_protectionv>
#endif
		WREN();
    34a2:	7a db       	rcall	.-2316   	; 0x2b98 <_Z4WRENv>
    34a4:	60 e0       	ldi	r22, 0x00	; 0
		Sector_Erase(addr/*FL_RR_START_ADDR*/);
    34a6:	70 e8       	ldi	r23, 0x80	; 128
    34a8:	80 e4       	ldi	r24, 0x40	; 64
    34aa:	90 e0       	ldi	r25, 0x00	; 0
    34ac:	c2 db       	rcall	.-2172   	; 0x2c32 <_Z12Sector_Erasem>
		Wait_Busy();
    34ae:	85 dc       	rcall	.-1782   	; 0x2dba <_Z9Wait_Busyv>
		WRDI();				// HJ 29-12-2015    // Write Disable
    34b0:	78 db       	rcall	.-2320   	; 0x2ba2 <_Z4WRDIv>
    34b2:	80 e0       	ldi	r24, 0x00	; 0
#ifdef FLASH_WP_ENABLE
		WBPR(0);
    34b4:	8f cb       	rjmp	.-2274   	; 0x2bd4 <_Z4WBPRc>
    34b6:	08 95       	ret

000034b8 <_Z21flashWriteFreqUpdDataP19freq_updated_data_tm>:
    34b8:	cf 92       	push	r12
    34ba:	df 92       	push	r13
#endif
}

void flashWriteFreqUpdData(freq_updated_data_t *log_data, unsigned long addr)
{	
    34bc:	ef 92       	push	r14
    34be:	ff 92       	push	r15
    34c0:	cf 93       	push	r28
    34c2:	df 93       	push	r29
    34c4:	ec 01       	movw	r28, r24
    34c6:	6a 01       	movw	r12, r20
    34c8:	7b 01       	movw	r14, r22
#ifdef FLASH_WP_ENABLE
	remove_block_protection();
    34ca:	70 db       	rcall	.-2336   	; 0x2bac <_Z23remove_block_protectionv>
#endif
	WREN();
    34cc:	65 db       	rcall	.-2358   	; 0x2b98 <_Z4WRENv>
    34ce:	a7 01       	movw	r20, r14
	//flashPacketProgram((char*)log_data, FL_DR_LEN, FL_data.curr_data_write_addr_dispense_log);
	flashPacketProgram((char*)log_data, FL_FREQ_UPD_DATA_SIZE, addr);
    34d0:	96 01       	movw	r18, r12
    34d2:	60 e1       	ldi	r22, 0x10	; 16
    34d4:	70 e0       	ldi	r23, 0x00	; 0
    34d6:	ce 01       	movw	r24, r28
    34d8:	c0 db       	rcall	.-2176   	; 0x2c5a <_Z18flashPacketProgramPcjm>
	Wait_Busy();
    34da:	6f dc       	rcall	.-1826   	; 0x2dba <_Z9Wait_Busyv>
	WRDI();				// HJ 29-12-2015    // Write DisableWRDI();
    34dc:	62 db       	rcall	.-2364   	; 0x2ba2 <_Z4WRDIv>
    34de:	80 e0       	ldi	r24, 0x00	; 0
#ifdef FLASH_WP_ENABLE
	WBPR(0);
    34e0:	79 db       	rcall	.-2318   	; 0x2bd4 <_Z4WBPRc>
    34e2:	df 91       	pop	r29
    34e4:	cf 91       	pop	r28
#endif

}
    34e6:	ff 90       	pop	r15
    34e8:	ef 90       	pop	r14
    34ea:	df 90       	pop	r13
    34ec:	cf 90       	pop	r12
    34ee:	08 95       	ret

000034f0 <_Z27flashClearFreqUpdatedConfigv>:
    34f0:	cf 93       	push	r28
    34f2:	df 93       	push	r29
#endif
	return FALSE;
}
void flashClearFreqUpdatedConfig(void)
{
	cli();
    34f4:	f8 94       	cli
	
	// Lets clear the entire circular buffer
	flashEraseFreqUpdDataSector();
    34f6:	d4 df       	rcall	.-88     	; 0x34a0 <_Z27flashEraseFreqUpdDataSectorv>
	freq_updated_data.cnt = 1;
    34f8:	c3 e3       	ldi	r28, 0x33	; 51
    34fa:	d3 e1       	ldi	r29, 0x13	; 19
    34fc:	81 e0       	ldi	r24, 0x01	; 1
    34fe:	88 83       	st	Y, r24
	//Lets copy latest data on first row
	freq_updated_data.chksum = getChecksum((unsigned char*)(&freq_updated_data), (sizeof(freq_updated_data_t) - 1));		//22.05.2014
    3500:	6f e0       	ldi	r22, 0x0F	; 15
    3502:	ce 01       	movw	r24, r28
    3504:	d3 d9       	rcall	.-3162   	; 0x28ac <_Z11getChecksumPhc>
    3506:	8f 87       	std	Y+15, r24	; 0x0f
	//eeprom_write_block(&bowser_cfg_data_freq_updated_data, (void*)addr, sizeof(freq_updated_data_t));		//R
	flashWriteFreqUpdData(&freq_updated_data, FL_FREQ_UPD_DATA_START_ADDR );		
    3508:	40 e0       	ldi	r20, 0x00	; 0
    350a:	50 e8       	ldi	r21, 0x80	; 128
    350c:	60 e4       	ldi	r22, 0x40	; 64
    350e:	70 e0       	ldi	r23, 0x00	; 0
    3510:	ce 01       	movw	r24, r28
    3512:	d2 df       	rcall	.-92     	; 0x34b8 <_Z21flashWriteFreqUpdDataP19freq_updated_data_tm>
#ifdef _DEBUG_UNSENT_LOGS
UWriteString("freq_clear:",UART_PC);
#endif
	sei();
    3514:	78 94       	sei
}
    3516:	df 91       	pop	r29
    3518:	cf 91       	pop	r28
    351a:	08 95       	ret

0000351c <_Z27flashWriteFreqUpdatedConfigv>:

void flashWriteFreqUpdatedConfig(void)
{
    351c:	cf 92       	push	r12
    351e:	df 92       	push	r13
    3520:	ef 92       	push	r14
    3522:	ff 92       	push	r15
#ifdef _DEBUG_UNSENT_LOGS
	UWriteString((char*)"unsent:", UART_PC);		//Debug
#endif
	cli();
    3524:	f8 94       	cli
	++freq_updated_data.cnt;
    3526:	e3 e3       	ldi	r30, 0x33	; 51
    3528:	f3 e1       	ldi	r31, 0x13	; 19
    352a:	80 81       	ld	r24, Z
    352c:	8f 5f       	subi	r24, 0xFF	; 255
    352e:	80 83       	st	Z, r24
	unsigned long addr = FL_FREQ_UPD_DATA_START_ADDR + ((freq_updated_data.cnt - 1) * sizeof(freq_updated_data_t));
    3530:	c8 2e       	mov	r12, r24
    3532:	d1 2c       	mov	r13, r1
    3534:	91 e0       	ldi	r25, 0x01	; 1
    3536:	c9 1a       	sub	r12, r25
    3538:	d1 08       	sbc	r13, r1
    353a:	cc 0c       	add	r12, r12
    353c:	dd 1c       	adc	r13, r13
    353e:	cc 0c       	add	r12, r12
    3540:	dd 1c       	adc	r13, r13
    3542:	cc 0c       	add	r12, r12
    3544:	dd 1c       	adc	r13, r13
    3546:	cc 0c       	add	r12, r12
    3548:	dd 1c       	adc	r13, r13
    354a:	e1 2c       	mov	r14, r1
    354c:	f1 2c       	mov	r15, r1
    354e:	90 e8       	ldi	r25, 0x80	; 128
    3550:	d9 0e       	add	r13, r25
    3552:	90 e4       	ldi	r25, 0x40	; 64
    3554:	e9 1e       	adc	r14, r25
    3556:	f1 1c       	adc	r15, r1
	if((addr < FL_FREQ_UPD_DATA_MAX_ADDR) && freq_updated_data.cnt)
    3558:	90 e4       	ldi	r25, 0x40	; 64
    355a:	c9 16       	cp	r12, r25
    355c:	96 e8       	ldi	r25, 0x86	; 134
    355e:	d9 06       	cpc	r13, r25
    3560:	90 e4       	ldi	r25, 0x40	; 64
    3562:	e9 06       	cpc	r14, r25
    3564:	f1 04       	cpc	r15, r1
    3566:	68 f4       	brcc	.+26     	; 0x3582 <_Z27flashWriteFreqUpdatedConfigv+0x66>
    3568:	88 23       	and	r24, r24
    356a:	59 f0       	breq	.+22     	; 0x3582 <_Z27flashWriteFreqUpdatedConfigv+0x66>
	{
		freq_updated_data.chksum = getChecksum((unsigned char*)(&freq_updated_data), (sizeof(freq_updated_data_t) - 1/* - BD_FREQ_UNUSED_LEN*/));
    356c:	6f e0       	ldi	r22, 0x0F	; 15
    356e:	cf 01       	movw	r24, r30
    3570:	9d d9       	rcall	.-3270   	; 0x28ac <_Z11getChecksumPhc>
    3572:	80 93 42 13 	sts	0x1342, r24	; 0x801342 <freq_updated_data+0xf>
		flashWriteFreqUpdData(&freq_updated_data, addr );		//R
    3576:	b7 01       	movw	r22, r14
    3578:	a6 01       	movw	r20, r12
    357a:	83 e3       	ldi	r24, 0x33	; 51
    357c:	93 e1       	ldi	r25, 0x13	; 19
    357e:	9c df       	rcall	.-200    	; 0x34b8 <_Z21flashWriteFreqUpdDataP19freq_updated_data_tm>
    3580:	04 c0       	rjmp	.+8      	; 0x358a <_Z27flashWriteFreqUpdatedConfigv+0x6e>
#endif
	}

	else
	{
		freq_updated_data.cnt = 1;			//Lets keep cnt within 1 to 10, otherwise it will create problem after 255 transactions.
    3582:	81 e0       	ldi	r24, 0x01	; 1
    3584:	80 93 33 13 	sts	0x1333, r24	; 0x801333 <freq_updated_data>
		flashClearFreqUpdatedConfig();
    3588:	b3 df       	rcall	.-154    	; 0x34f0 <_Z27flashClearFreqUpdatedConfigv>
#ifdef _DEBUG_UNSENT_LOGS
		UWriteString((char*)"clrW:", UART_PC);		//Debug
#endif
	}

	sei();
    358a:	78 94       	sei
}
    358c:	ff 90       	pop	r15
    358e:	ef 90       	pop	r14
    3590:	df 90       	pop	r13
    3592:	cf 90       	pop	r12
    3594:	08 95       	ret

00003596 <_Z20flashReadFreqUpdDataP19freq_updated_data_tmi>:
#endif

}

void flashReadFreqUpdData(freq_updated_data_t *freq_updated_data, unsigned long addr,int size)
{
    3596:	cf 92       	push	r12
    3598:	df 92       	push	r13
    359a:	ef 92       	push	r14
    359c:	ff 92       	push	r15
    359e:	0f 93       	push	r16
    35a0:	1f 93       	push	r17
    35a2:	cf 93       	push	r28
    35a4:	df 93       	push	r29
    35a6:	8c 01       	movw	r16, r24
    35a8:	6a 01       	movw	r12, r20
    35aa:	7b 01       	movw	r14, r22
    35ac:	e9 01       	movw	r28, r18
	WREN();
    35ae:	f4 da       	rcall	.-2584   	; 0x2b98 <_Z4WRENv>
	readContToBuff(addr, size, (char *)freq_updated_data);
    35b0:	9e 01       	movw	r18, r28
    35b2:	dd 0f       	add	r29, r29
    35b4:	44 0b       	sbc	r20, r20
    35b6:	55 0b       	sbc	r21, r21
    35b8:	c7 01       	movw	r24, r14
    35ba:	b6 01       	movw	r22, r12
	WRDI();				// HJ 29-12-2015    // Write Disable
    35bc:	8d db       	rcall	.-2278   	; 0x2cd8 <_Z14readContToBuffmmPc>
    35be:	f1 da       	rcall	.-2590   	; 0x2ba2 <_Z4WRDIv>
}
    35c0:	df 91       	pop	r29
    35c2:	cf 91       	pop	r28
    35c4:	1f 91       	pop	r17
    35c6:	0f 91       	pop	r16
    35c8:	ff 90       	pop	r15
    35ca:	ef 90       	pop	r14
    35cc:	df 90       	pop	r13
    35ce:	cf 90       	pop	r12
    35d0:	08 95       	ret

000035d2 <_Z21readFreqUpdData_flashv>:
char readFreqUpdData_flash(void)
{
    35d2:	6f 92       	push	r6
    35d4:	7f 92       	push	r7
    35d6:	8f 92       	push	r8
    35d8:	9f 92       	push	r9
    35da:	af 92       	push	r10
    35dc:	bf 92       	push	r11
    35de:	cf 92       	push	r12
    35e0:	df 92       	push	r13
    35e2:	ef 92       	push	r14
    35e4:	ff 92       	push	r15
    35e6:	0f 93       	push	r16
    35e8:	1f 93       	push	r17
    35ea:	cf 93       	push	r28
    35ec:	df 93       	push	r29
    35ee:	cd b7       	in	r28, 0x3d	; 61
    35f0:	de b7       	in	r29, 0x3e	; 62
    35f2:	60 97       	sbiw	r28, 0x10	; 16
    35f4:	0f b6       	in	r0, 0x3f	; 63
    35f6:	f8 94       	cli
    35f8:	de bf       	out	0x3e, r29	; 62
    35fa:	0f be       	out	0x3f, r0	; 63
    35fc:	cd bf       	out	0x3d, r28	; 61
	int i = 0;
	unsigned long addr;
	freq_updated_data_t freq_updated_data_;
	unsigned char j=0;
	j = 1;
	cli();		//Anand 20.06.2014
    35fe:	f8 94       	cli
	for(i=0 ; i<3 ; i++)
    3600:	a1 2c       	mov	r10, r1
    3602:	b1 2c       	mov	r11, r1
	readContToBuff(addr, size, (char *)freq_updated_data);
	WRDI();				// HJ 29-12-2015    // Write Disable
}
char readFreqUpdData_flash(void)
{
	char read_ok = 1;
    3604:	88 24       	eor	r8, r8
    3606:	83 94       	inc	r8
	int i = 0;
	unsigned long addr;
	freq_updated_data_t freq_updated_data_;
	unsigned char j=0;
	j = 1;
    3608:	99 24       	eor	r9, r9
    360a:	93 94       	inc	r9
					break;
				}
			}
			else
			{
				memcpy(&freq_updated_data, &freq_updated_data_, FL_FREQ_UPD_DATA_SIZE);		//At the end the second one is holding the Gold
    360c:	03 e3       	ldi	r16, 0x33	; 51
    360e:	13 e1       	ldi	r17, 0x13	; 19
				//lets erase the sector and put this on first location
				freq_updated_data.cnt = 1;
    3610:	66 24       	eor	r6, r6
    3612:	63 94       	inc	r6
		{
			break;
		}
		else
		{
			read_ok = 0;
    3614:	71 2c       	mov	r7, r1
	char read_ok = 1;
	int i = 0;
	unsigned long addr;
	freq_updated_data_t freq_updated_data_;
	unsigned char j=0;
	j = 1;
    3616:	c9 2c       	mov	r12, r9
	cli();		//Anand 20.06.2014
	for(i=0 ; i<3 ; i++)
	{
		do{
			addr = (FL_FREQ_UPD_DATA_START_ADDR + (j++ * FL_FREQ_UPD_DATA_SIZE));
    3618:	99 24       	eor	r9, r9
    361a:	93 94       	inc	r9
    361c:	9c 0c       	add	r9, r12
    361e:	d1 2c       	mov	r13, r1
    3620:	e1 2c       	mov	r14, r1
    3622:	f1 2c       	mov	r15, r1
    3624:	88 e0       	ldi	r24, 0x08	; 8
    3626:	d8 0e       	add	r13, r24
    3628:	84 e0       	ldi	r24, 0x04	; 4
    362a:	e8 1e       	adc	r14, r24
    362c:	f1 1c       	adc	r15, r1
    362e:	cc 0c       	add	r12, r12
    3630:	dd 1c       	adc	r13, r13
    3632:	ee 1c       	adc	r14, r14
    3634:	ff 1c       	adc	r15, r15
    3636:	cc 0c       	add	r12, r12
    3638:	dd 1c       	adc	r13, r13
    363a:	ee 1c       	adc	r14, r14
    363c:	ff 1c       	adc	r15, r15
    363e:	cc 0c       	add	r12, r12
    3640:	dd 1c       	adc	r13, r13
    3642:	ee 1c       	adc	r14, r14
    3644:	ff 1c       	adc	r15, r15
    3646:	cc 0c       	add	r12, r12
    3648:	dd 1c       	adc	r13, r13
    364a:	ee 1c       	adc	r14, r14
    364c:	ff 1c       	adc	r15, r15
			if(addr < FL_FREQ_UPD_DATA_MAX_ADDR)
    364e:	e0 e4       	ldi	r30, 0x40	; 64
    3650:	ce 16       	cp	r12, r30
    3652:	e6 e8       	ldi	r30, 0x86	; 134
    3654:	de 06       	cpc	r13, r30
    3656:	e0 e4       	ldi	r30, 0x40	; 64
    3658:	ee 06       	cpc	r14, r30
    365a:	f1 04       	cpc	r15, r1
    365c:	a8 f4       	brcc	.+42     	; 0x3688 <_Z21readFreqUpdData_flashv+0xb6>
			{
				flashReadFreqUpdData(&freq_updated_data, (addr - FL_FREQ_UPD_DATA_SIZE), FL_FREQ_UPD_DATA_SIZE);
    365e:	b7 01       	movw	r22, r14
    3660:	a6 01       	movw	r20, r12
    3662:	40 51       	subi	r20, 0x10	; 16
    3664:	51 09       	sbc	r21, r1
    3666:	61 09       	sbc	r22, r1
    3668:	71 09       	sbc	r23, r1
    366a:	20 e1       	ldi	r18, 0x10	; 16
    366c:	30 e0       	ldi	r19, 0x00	; 0
    366e:	c8 01       	movw	r24, r16
    3670:	92 df       	rcall	.-220    	; 0x3596 <_Z20flashReadFreqUpdDataP19freq_updated_data_tmi>
				flashReadFreqUpdData(&freq_updated_data_, addr, FL_FREQ_UPD_DATA_SIZE);
    3672:	20 e1       	ldi	r18, 0x10	; 16
    3674:	30 e0       	ldi	r19, 0x00	; 0
    3676:	b7 01       	movw	r22, r14
    3678:	a6 01       	movw	r20, r12
    367a:	ce 01       	movw	r24, r28
    367c:	01 96       	adiw	r24, 0x01	; 1
    367e:	8b df       	rcall	.-234    	; 0x3596 <_Z20flashReadFreqUpdDataP19freq_updated_data_tmi>
			
				if(freq_updated_data_.cnt == 0xFF)
    3680:	29 81       	ldd	r18, Y+1	; 0x01
    3682:	2f 3f       	cpi	r18, 0xFF	; 255
    3684:	69 f4       	brne	.+26     	; 0x36a0 <_Z21readFreqUpdData_flashv+0xce>
    3686:	16 c0       	rjmp	.+44     	; 0x36b4 <_Z21readFreqUpdData_flashv+0xe2>
					break;
				}
			}
			else
			{
				memcpy(&freq_updated_data, &freq_updated_data_, FL_FREQ_UPD_DATA_SIZE);		//At the end the second one is holding the Gold
    3688:	80 e1       	ldi	r24, 0x10	; 16
    368a:	fe 01       	movw	r30, r28
    368c:	31 96       	adiw	r30, 0x01	; 1
    368e:	d8 01       	movw	r26, r16
    3690:	01 90       	ld	r0, Z+
    3692:	0d 92       	st	X+, r0
    3694:	8a 95       	dec	r24
    3696:	e1 f7       	brne	.-8      	; 0x3690 <_Z21readFreqUpdData_flashv+0xbe>
				//lets erase the sector and put this on first location
				freq_updated_data.cnt = 1;
    3698:	f8 01       	movw	r30, r16
#ifdef _DEBUG_UNSENT_LOGS
UWriteString((char*)"clrR:", UART_PC);		//Debug
#endif
				flashClearFreqUpdatedConfig();
    369a:	60 82       	st	Z, r6
    369c:	29 df       	rcall	.-430    	; 0x34f0 <_Z27flashClearFreqUpdatedConfigv>
				break;
    369e:	0a c0       	rjmp	.+20     	; 0x36b4 <_Z21readFreqUpdData_flashv+0xe2>
	j = 1;
	cli();		//Anand 20.06.2014
	for(i=0 ; i<3 ; i++)
	{
		do{
			addr = (FL_FREQ_UPD_DATA_START_ADDR + (j++ * FL_FREQ_UPD_DATA_SIZE));
    36a0:	c9 2c       	mov	r12, r9
UWriteString((char*)"clrR:", UART_PC);		//Debug
#endif
				flashClearFreqUpdatedConfig();
				break;
			}
		}while((freq_updated_data.cnt + 1) == freq_updated_data_.cnt);		//Anand 02-04-16
    36a2:	f8 01       	movw	r30, r16
    36a4:	80 81       	ld	r24, Z
    36a6:	90 e0       	ldi	r25, 0x00	; 0
    36a8:	01 96       	adiw	r24, 0x01	; 1
    36aa:	30 e0       	ldi	r19, 0x00	; 0
    36ac:	82 17       	cp	r24, r18
    36ae:	93 07       	cpc	r25, r19
    36b0:	09 f4       	brne	.+2      	; 0x36b4 <_Z21readFreqUpdData_flashv+0xe2>
    36b2:	b2 cf       	rjmp	.-156    	; 0x3618 <_Z21readFreqUpdData_flashv+0x46>
		
		if(freq_updated_data.chksum == getChecksum((unsigned char*)(&freq_updated_data), (sizeof(freq_updated_data_t) - 1/* - BD_FREQ_UNUSED_LEN*/)))	//Anand 02-04-16 check how your wrote in writecfg
    36b4:	f8 01       	movw	r30, r16
    36b6:	f7 84       	ldd	r15, Z+15	; 0x0f
    36b8:	6f e0       	ldi	r22, 0x0F	; 15
    36ba:	c8 01       	movw	r24, r16
    36bc:	f7 d8       	rcall	.-3602   	; 0x28ac <_Z11getChecksumPhc>
    36be:	f8 16       	cp	r15, r24
    36c0:	51 f0       	breq	.+20     	; 0x36d6 <_Z21readFreqUpdData_flashv+0x104>
	unsigned long addr;
	freq_updated_data_t freq_updated_data_;
	unsigned char j=0;
	j = 1;
	cli();		//Anand 20.06.2014
	for(i=0 ; i<3 ; i++)
    36c2:	ff ef       	ldi	r31, 0xFF	; 255
    36c4:	af 1a       	sub	r10, r31
    36c6:	bf 0a       	sbc	r11, r31
		{
			break;
		}
		else
		{
			read_ok = 0;
    36c8:	87 2c       	mov	r8, r7
	unsigned long addr;
	freq_updated_data_t freq_updated_data_;
	unsigned char j=0;
	j = 1;
	cli();		//Anand 20.06.2014
	for(i=0 ; i<3 ; i++)
    36ca:	83 e0       	ldi	r24, 0x03	; 3
    36cc:	a8 16       	cp	r10, r24
    36ce:	b1 04       	cpc	r11, r1
    36d0:	09 f0       	breq	.+2      	; 0x36d4 <_Z21readFreqUpdData_flashv+0x102>
    36d2:	a1 cf       	rjmp	.-190    	; 0x3616 <_Z21readFreqUpdData_flashv+0x44>
		{
			break;
		}
		else
		{
			read_ok = 0;
    36d4:	81 2c       	mov	r8, r1
		}
	}
	sei();		//Anand 20.06.2014
    36d6:	78 94       	sei
	if(i>=3)
    36d8:	e3 e0       	ldi	r30, 0x03	; 3
    36da:	ae 16       	cp	r10, r30
    36dc:	b1 04       	cpc	r11, r1
    36de:	14 f0       	brlt	.+4      	; 0x36e4 <_Z21readFreqUpdData_flashv+0x112>
		read_ok = 0;
		//		write_defaults();		//Writes Default Values to EEPROM
		
		//Log Sys error and go to config mode
		
		SYS_ERR_LED_PORT|=(1<<SYS_ERR_LED);
    36e0:	41 9a       	sbi	0x08, 1	; 8
    36e2:	02 c0       	rjmp	.+4      	; 0x36e8 <_Z21readFreqUpdData_flashv+0x116>
	}
	if (!read_ok)
    36e4:	81 10       	cpse	r8, r1
    36e6:	05 c0       	rjmp	.+10     	; 0x36f2 <_Z21readFreqUpdData_flashv+0x120>
	{
		freq_updated_data.unsent_rtu_logs_GPRS = 0;
    36e8:	10 92 35 13 	sts	0x1335, r1	; 0x801335 <freq_updated_data+0x2>
    36ec:	10 92 34 13 	sts	0x1334, r1	; 0x801334 <freq_updated_data+0x1>
    36f0:	81 2c       	mov	r8, r1
	}
	return read_ok;
}
    36f2:	88 2d       	mov	r24, r8
    36f4:	60 96       	adiw	r28, 0x10	; 16
    36f6:	0f b6       	in	r0, 0x3f	; 63
    36f8:	f8 94       	cli
    36fa:	de bf       	out	0x3e, r29	; 62
    36fc:	0f be       	out	0x3f, r0	; 63
    36fe:	cd bf       	out	0x3d, r28	; 61
    3700:	df 91       	pop	r29
    3702:	cf 91       	pop	r28
    3704:	1f 91       	pop	r17
    3706:	0f 91       	pop	r16
    3708:	ff 90       	pop	r15
    370a:	ef 90       	pop	r14
    370c:	df 90       	pop	r13
    370e:	cf 90       	pop	r12
    3710:	bf 90       	pop	r11
    3712:	af 90       	pop	r10
    3714:	9f 90       	pop	r9
    3716:	8f 90       	pop	r8
    3718:	7f 90       	pop	r7
    371a:	6f 90       	pop	r6
    371c:	08 95       	ret

0000371e <_Z13flashWriteHexPhPm>:
	}
	return ack;
}
#endif
void flashWriteHex(unsigned char *hex_data, unsigned long *addr)
{
    371e:	0f 93       	push	r16
    3720:	1f 93       	push	r17
    3722:	cf 93       	push	r28
    3724:	df 93       	push	r29
    3726:	8c 01       	movw	r16, r24
    3728:	eb 01       	movw	r28, r22
	#ifdef DEBUG_FLASH
	//UWriteString((char *)"\naddr:",UART_PC);
	//UWriteInt(*addr,UART_PC);
	#endif
	#ifdef FLASH_WP_ENABLE
	remove_block_protection();
    372a:	40 da       	rcall	.-2944   	; 0x2bac <_Z23remove_block_protectionv>
	#endif
	WREN();
    372c:	35 da       	rcall	.-2966   	; 0x2b98 <_Z4WRENv>
    372e:	28 81       	ld	r18, Y
	flashPacketProgram((char *)hex_data, 32, *addr);
    3730:	39 81       	ldd	r19, Y+1	; 0x01
    3732:	4a 81       	ldd	r20, Y+2	; 0x02
    3734:	5b 81       	ldd	r21, Y+3	; 0x03
    3736:	60 e2       	ldi	r22, 0x20	; 32
    3738:	70 e0       	ldi	r23, 0x00	; 0
    373a:	c8 01       	movw	r24, r16
    373c:	8e da       	rcall	.-2788   	; 0x2c5a <_Z18flashPacketProgramPcjm>
	Wait_Busy();
    373e:	3d db       	rcall	.-2438   	; 0x2dba <_Z9Wait_Busyv>
	WRDI();				// HJ 29-12-2015    // Write DisableWRDI();
    3740:	30 da       	rcall	.-2976   	; 0x2ba2 <_Z4WRDIv>
    3742:	80 e0       	ldi	r24, 0x00	; 0
	#ifdef FLASH_WP_ENABLE
	WBPR(0);
    3744:	47 da       	rcall	.-2930   	; 0x2bd4 <_Z4WBPRc>
    3746:	f8 01       	movw	r30, r16
    3748:	81 81       	ldd	r24, Z+1	; 0x01
	#endif

	if (hex_data[1] == 0)
    374a:	81 11       	cpse	r24, r1
    374c:	04 c0       	rjmp	.+8      	; 0x3756 <_Z13flashWriteHexPhPm+0x38>
    374e:	81 e0       	ldi	r24, 0x01	; 1
    3750:	0e 94 e7 03 	call	0x7ce	; 0x7ce <_Z14hex_file_readyh>
	{
		//eeprom_write_byte((uint8_t *)E2P_FLASH_HEX_FILE_UPDATE, TRUE);
		hex_file_ready(TRUE);
    3754:	0b c0       	rjmp	.+22     	; 0x376c <_Z13flashWriteHexPhPm+0x4e>
    3756:	88 81       	ld	r24, Y
    3758:	99 81       	ldd	r25, Y+1	; 0x01
	}
	else
	{
		*addr += 32;
    375a:	aa 81       	ldd	r26, Y+2	; 0x02
    375c:	bb 81       	ldd	r27, Y+3	; 0x03
    375e:	80 96       	adiw	r24, 0x20	; 32
    3760:	a1 1d       	adc	r26, r1
    3762:	b1 1d       	adc	r27, r1
    3764:	88 83       	st	Y, r24
    3766:	99 83       	std	Y+1, r25	; 0x01
    3768:	aa 83       	std	Y+2, r26	; 0x02
    376a:	bb 83       	std	Y+3, r27	; 0x03
    376c:	df 91       	pop	r29
    376e:	cf 91       	pop	r28
	}
}
    3770:	1f 91       	pop	r17
    3772:	0f 91       	pop	r16
    3774:	08 95       	ret

00003776 <_Z19read_flash_file_rowmPh>:
    3776:	cf 92       	push	r12
    3778:	df 92       	push	r13
void read_flash_file_row(unsigned long addr, unsigned char *buff)
{
    377a:	ef 92       	push	r14
    377c:	ff 92       	push	r15
    377e:	0f 93       	push	r16
    3780:	1f 93       	push	r17
    3782:	6b 01       	movw	r12, r22
    3784:	7c 01       	movw	r14, r24
    3786:	8a 01       	movw	r16, r20
	WREN();
    3788:	07 da       	rcall	.-3058   	; 0x2b98 <_Z4WRENv>
	readContToBuff(addr, 32, (char *)buff);		//KP 28-03-2015
    378a:	20 e2       	ldi	r18, 0x20	; 32
    378c:	30 e0       	ldi	r19, 0x00	; 0
    378e:	40 e0       	ldi	r20, 0x00	; 0
    3790:	50 e0       	ldi	r21, 0x00	; 0
    3792:	c7 01       	movw	r24, r14
    3794:	b6 01       	movw	r22, r12
    3796:	a0 da       	rcall	.-2752   	; 0x2cd8 <_Z14readContToBuffmmPc>
	Wait_Busy();	//??				// HJ 12-08-2016 Uncomment
    3798:	10 db       	rcall	.-2528   	; 0x2dba <_Z9Wait_Busyv>
    379a:	03 da       	rcall	.-3066   	; 0x2ba2 <_Z4WRDIv>
	WRDI();
    379c:	1f 91       	pop	r17
    379e:	0f 91       	pop	r16
}
    37a0:	ff 90       	pop	r15
    37a2:	ef 90       	pop	r14
    37a4:	df 90       	pop	r13
    37a6:	cf 90       	pop	r12
    37a8:	08 95       	ret

000037aa <_Z21flash_hex_file_verifyv>:
    37aa:	8f 92       	push	r8
    37ac:	9f 92       	push	r9
void flash_hex_file_verify(void)
{
    37ae:	af 92       	push	r10
    37b0:	bf 92       	push	r11
    37b2:	cf 92       	push	r12
    37b4:	df 92       	push	r13
    37b6:	ff 92       	push	r15
    37b8:	0f 93       	push	r16
    37ba:	1f 93       	push	r17
    37bc:	cf 93       	push	r28
    37be:	df 93       	push	r29
    37c0:	cd b7       	in	r28, 0x3d	; 61
    37c2:	de b7       	in	r29, 0x3e	; 62
    37c4:	a0 97       	sbiw	r28, 0x20	; 32
    37c6:	0f b6       	in	r0, 0x3f	; 63
    37c8:	f8 94       	cli
    37ca:	de bf       	out	0x3e, r29	; 62
    37cc:	0f be       	out	0x3f, r0	; 63
    37ce:	cd bf       	out	0x3d, r28	; 61
UWriteString((char *)"hex_verify:",UART_PC);
#endif
	unsigned long flash_file_address = FL_HEX_FILE_START_ADDR;
	//unsigned char ack = 0;
	unsigned int cnt = 0;
	unsigned char temp_data[32] = {0}, chksum = 0;
    37d0:	fe 01       	movw	r30, r28
    37d2:	31 96       	adiw	r30, 0x01	; 1
    37d4:	80 e2       	ldi	r24, 0x20	; 32
    37d6:	df 01       	movw	r26, r30
    37d8:	1d 92       	st	X+, r1
    37da:	8a 95       	dec	r24
    37dc:	e9 f7       	brne	.-6      	; 0x37d8 <_Z21flash_hex_file_verifyv+0x2e>
    37de:	f1 2c       	mov	r15, r1
#ifdef DEBUG_HEX_FILE_STORE
UWriteString((char *)"hex_verify:",UART_PC);
#endif
	unsigned long flash_file_address = FL_HEX_FILE_START_ADDR;
	//unsigned char ack = 0;
	unsigned int cnt = 0;
    37e0:	c1 2c       	mov	r12, r1
    37e2:	d1 2c       	mov	r13, r1
void flash_hex_file_verify(void)
{
#ifdef DEBUG_HEX_FILE_STORE
UWriteString((char *)"hex_verify:",UART_PC);
#endif
	unsigned long flash_file_address = FL_HEX_FILE_START_ADDR;
    37e4:	0f 2e       	mov	r0, r31
    37e6:	81 2c       	mov	r8, r1
    37e8:	91 2c       	mov	r9, r1
    37ea:	f0 e6       	ldi	r31, 0x60	; 96
    37ec:	af 2e       	mov	r10, r31
    37ee:	b1 2c       	mov	r11, r1
    37f0:	f0 2d       	mov	r31, r0
	unsigned char temp_data[32] = {0}, chksum = 0;
	int i = 0;
	do
	{
		
		WREN();
    37f2:	d2 d9       	rcall	.-3164   	; 0x2b98 <_Z4WRENv>
		readContToBuff(flash_file_address, 32, (char *)temp_data);		//KP 28-03-2015
    37f4:	8e 01       	movw	r16, r28
    37f6:	0f 5f       	subi	r16, 0xFF	; 255
    37f8:	1f 4f       	sbci	r17, 0xFF	; 255
    37fa:	20 e2       	ldi	r18, 0x20	; 32
    37fc:	30 e0       	ldi	r19, 0x00	; 0
    37fe:	40 e0       	ldi	r20, 0x00	; 0
    3800:	50 e0       	ldi	r21, 0x00	; 0
    3802:	c5 01       	movw	r24, r10
    3804:	b4 01       	movw	r22, r8
    3806:	68 da       	rcall	.-2864   	; 0x2cd8 <_Z14readContToBuffmmPc>
		Wait_Busy();	//??				// HJ 12-08-2016 Uncomment
    3808:	d8 da       	rcall	.-2640   	; 0x2dba <_Z9Wait_Busyv>
    380a:	cb d9       	rcall	.-3178   	; 0x2ba2 <_Z4WRDIv>
		WRDI();
    380c:	4a 81       	ldd	r20, Y+2	; 0x02
    380e:	50 e0       	ldi	r21, 0x00	; 0
#ifdef DEBUG_HEX_FILE_STORE
		UWriteInt(flash_file_address,UART_PC);
		UWriteData('.',UART_PC);
		UWriteBytes((char*)&temp_data,32,UART_PC);
#endif
		for (i = 1; (i <= (temp_data[1] + 5)); i++)
    3810:	4b 5f       	subi	r20, 0xFB	; 251
    3812:	5f 4f       	sbci	r21, 0xFF	; 255
    3814:	fe 01       	movw	r30, r28
    3816:	32 96       	adiw	r30, 0x02	; 2
    3818:	81 e0       	ldi	r24, 0x01	; 1
    381a:	90 e0       	ldi	r25, 0x00	; 0
    381c:	21 91       	ld	r18, Z+
    381e:	f2 0e       	add	r15, r18
		{
			chksum += temp_data[i];
    3820:	01 96       	adiw	r24, 0x01	; 1
    3822:	48 17       	cp	r20, r24
#ifdef DEBUG_HEX_FILE_STORE
		UWriteInt(flash_file_address,UART_PC);
		UWriteData('.',UART_PC);
		UWriteBytes((char*)&temp_data,32,UART_PC);
#endif
		for (i = 1; (i <= (temp_data[1] + 5)); i++)
    3824:	59 07       	cpc	r21, r25
    3826:	d4 f7       	brge	.-12     	; 0x381c <_Z21flash_hex_file_verifyv+0x72>
    3828:	f1 94       	neg	r15
    382a:	e1 e0       	ldi	r30, 0x01	; 1
		{
			chksum += temp_data[i];
		}
		chksum = ~chksum + 1;
    382c:	f0 e0       	ldi	r31, 0x00	; 0
		if (chksum == temp_data[i])
    382e:	ec 0f       	add	r30, r28
    3830:	fd 1f       	adc	r31, r29
    3832:	e8 0f       	add	r30, r24
    3834:	f9 1f       	adc	r31, r25
    3836:	80 81       	ld	r24, Z
    3838:	f8 12       	cpse	r15, r24
    383a:	14 c0       	rjmp	.+40     	; 0x3864 <_Z21flash_hex_file_verifyv+0xba>
    383c:	a8 95       	wdr
    383e:	b0 e2       	ldi	r27, 0x20	; 32
		{
			wdt_reset();
    3840:	8b 0e       	add	r8, r27
			//hex_file_ready(FALSE);
			UWriteString((char *)"NAK", UART_PC);
			break;
			
		}
		flash_file_address += 32;
    3842:	91 1c       	adc	r9, r1
    3844:	a1 1c       	adc	r10, r1
    3846:	b1 1c       	adc	r11, r1
    3848:	8f ef       	ldi	r24, 0xFF	; 255
    384a:	c8 1a       	sub	r12, r24
		cnt++;
    384c:	d8 0a       	sbc	r13, r24
    384e:	b6 01       	movw	r22, r12
    3850:	80 e0       	ldi	r24, 0x00	; 0
		UWriteInt(cnt, UART_PC);
    3852:	90 e0       	ldi	r25, 0x00	; 0
    3854:	42 e0       	ldi	r20, 0x02	; 2
    3856:	0e 94 3e 09 	call	0x127c	; 0x127c <_Z9UWriteIntmc>
    385a:	8a 81       	ldd	r24, Y+2	; 0x02
    385c:	81 50       	subi	r24, 0x01	; 1
	} while ((temp_data[1] != 0) && (temp_data[1] != 0xFF));
    385e:	8e 3f       	cpi	r24, 0xFE	; 254
    3860:	40 f2       	brcs	.-112    	; 0x37f2 <_Z21flash_hex_file_verifyv+0x48>
    3862:	06 c0       	rjmp	.+12     	; 0x3870 <_Z21flash_hex_file_verifyv+0xc6>
    3864:	62 e0       	ldi	r22, 0x02	; 2
    3866:	70 e0       	ldi	r23, 0x00	; 0
		else
		{
			//set_hex_file_updt_state(UPDATE_FAIL);
			//set_flash_file_rqst_type(HEX_NO_RQST);
			//hex_file_ready(FALSE);
			UWriteString((char *)"NAK", UART_PC);
    3868:	85 e7       	ldi	r24, 0x75	; 117
    386a:	94 e0       	ldi	r25, 0x04	; 4
    386c:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <_Z12UWriteStringPKci>
    3870:	8a 81       	ldd	r24, Y+2	; 0x02
    3872:	81 11       	cpse	r24, r1
		}
		flash_file_address += 32;
		cnt++;
		UWriteInt(cnt, UART_PC);
	} while ((temp_data[1] != 0) && (temp_data[1] != 0xFF));
	if (temp_data[1] == 0)
    3874:	07 c0       	rjmp	.+14     	; 0x3884 <_Z21flash_hex_file_verifyv+0xda>
    3876:	81 e0       	ldi	r24, 0x01	; 1
    3878:	0e 94 e7 03 	call	0x7ce	; 0x7ce <_Z14hex_file_readyh>
	{
		hex_file_ready(TRUE);
    387c:	84 e0       	ldi	r24, 0x04	; 4
    387e:	0e 94 fc 2f 	call	0x5ff8	; 0x5ff8 <_Z23set_hex_file_updt_state21hex_file_updt_state_t>
		set_hex_file_updt_state(DWNLD_CMPLT);
    3882:	03 c0       	rjmp	.+6      	; 0x388a <_Z21flash_hex_file_verifyv+0xe0>
    3884:	8a e0       	ldi	r24, 0x0A	; 10
    3886:	0e 94 fc 2f 	call	0x5ff8	; 0x5ff8 <_Z23set_hex_file_updt_state21hex_file_updt_state_t>
		//ack = 1;
	}
	else
	{
		set_hex_file_updt_state(UPDATE_FAIL);
    388a:	84 e0       	ldi	r24, 0x04	; 4
    388c:	0e 94 a9 3d 	call	0x7b52	; 0x7b52 <_Z22set_frmwr_update_state20frmwr_update_state_t>
	}
	set_frmwr_update_state(HEX_FILE_UPDATE_RELEASE);
    3890:	a0 96       	adiw	r28, 0x20	; 32
    3892:	0f b6       	in	r0, 0x3f	; 63
	//return ack;
}
    3894:	f8 94       	cli
    3896:	de bf       	out	0x3e, r29	; 62
    3898:	0f be       	out	0x3f, r0	; 63
    389a:	cd bf       	out	0x3d, r28	; 61
    389c:	df 91       	pop	r29
    389e:	cf 91       	pop	r28
    38a0:	1f 91       	pop	r17
    38a2:	0f 91       	pop	r16
    38a4:	ff 90       	pop	r15
    38a6:	df 90       	pop	r13
    38a8:	cf 90       	pop	r12
    38aa:	bf 90       	pop	r11
    38ac:	af 90       	pop	r10
    38ae:	9f 90       	pop	r9
    38b0:	8f 90       	pop	r8
    38b2:	08 95       	ret

000038b4 <_Z15flashClrHexFilev>:
    38b4:	cf 92       	push	r12
    38b6:	df 92       	push	r13

void flashClrHexFile(void)
{
    38b8:	ef 92       	push	r14
    38ba:	ff 92       	push	r15
	unsigned int sectors_to_erase = ((FL_MAX_HEX_FILE_ADDR - FL_HEX_FILE_START_ADDR) / SECTOR_SIZE) + 1;
	unsigned long addr = FL_HEX_FILE_START_ADDR;
    38bc:	0f 2e       	mov	r0, r31
    38be:	c1 2c       	mov	r12, r1
    38c0:	d1 2c       	mov	r13, r1
    38c2:	f0 e6       	ldi	r31, 0x60	; 96
    38c4:	ef 2e       	mov	r14, r31
    38c6:	f1 2c       	mov	r15, r1
    38c8:	f0 2d       	mov	r31, r0
	
	while(sectors_to_erase--)
	{
		#ifdef FLASH_WP_ENABLE
		remove_block_protection();
    38ca:	70 d9       	rcall	.-3360   	; 0x2bac <_Z23remove_block_protectionv>
		#endif
		WREN();
    38cc:	65 d9       	rcall	.-3382   	; 0x2b98 <_Z4WRENv>
    38ce:	c7 01       	movw	r24, r14
		Sector_Erase(addr);
    38d0:	b6 01       	movw	r22, r12
    38d2:	af d9       	rcall	.-3234   	; 0x2c32 <_Z12Sector_Erasem>
		Wait_Busy();
		WRDI();				// HJ 29-12-2015    // Write Disable
    38d4:	72 da       	rcall	.-2844   	; 0x2dba <_Z9Wait_Busyv>
    38d6:	65 d9       	rcall	.-3382   	; 0x2ba2 <_Z4WRDIv>
		#ifdef FLASH_WP_ENABLE
		WBPR(0);
    38d8:	80 e0       	ldi	r24, 0x00	; 0
    38da:	7c d9       	rcall	.-3336   	; 0x2bd4 <_Z4WBPRc>
    38dc:	80 e1       	ldi	r24, 0x10	; 16
		#endif
		addr += SECTOR_SIZE;
    38de:	d8 0e       	add	r13, r24
    38e0:	e1 1c       	adc	r14, r1
    38e2:	f1 1c       	adc	r15, r1
    38e4:	c1 14       	cp	r12, r1
void flashClrHexFile(void)
{
	unsigned int sectors_to_erase = ((FL_MAX_HEX_FILE_ADDR - FL_HEX_FILE_START_ADDR) / SECTOR_SIZE) + 1;
	unsigned long addr = FL_HEX_FILE_START_ADDR;
	
	while(sectors_to_erase--)
    38e6:	80 e1       	ldi	r24, 0x10	; 16
    38e8:	d8 06       	cpc	r13, r24
    38ea:	84 e6       	ldi	r24, 0x64	; 100
    38ec:	e8 06       	cpc	r14, r24
    38ee:	f1 04       	cpc	r15, r1
    38f0:	61 f7       	brne	.-40     	; 0x38ca <_Z15flashClrHexFilev+0x16>
    38f2:	ff 90       	pop	r15
		#ifdef FLASH_WP_ENABLE
		WBPR(0);
		#endif
		addr += SECTOR_SIZE;
	}
    38f4:	ef 90       	pop	r14
    38f6:	df 90       	pop	r13
    38f8:	cf 90       	pop	r12
    38fa:	08 95       	ret

000038fc <_Z12initFMSensorv>:
extern ram_data_t ram_data;
unsigned char fm_error_cnt = 0;

void initFMSensor()
{
	flushTxBuffer(UART_485);
    38fc:	81 e0       	ldi	r24, 0x01	; 1
    38fe:	90 e0       	ldi	r25, 0x00	; 0
    3900:	0e 94 b3 09 	call	0x1366	; 0x1366 <_Z13flushTxBufferi>
	flushRxBuffer(UART_485);
    3904:	81 e0       	ldi	r24, 0x01	; 1
    3906:	90 e0       	ldi	r25, 0x00	; 0
    3908:	0e 94 d7 09 	call	0x13ae	; 0x13ae <_Z13flushRxBufferi>
	flow_meter.fm_state = FM_WAIT;
	flow_meter.fm_cbst = flow_meter.fm_state;
    390c:	eb e3       	ldi	r30, 0x3B	; 59
    390e:	fb e0       	ldi	r31, 0x0B	; 11
    3910:	83 e0       	ldi	r24, 0x03	; 3
    3912:	81 87       	std	Z+9, r24	; 0x09
	flow_meter.fm_state = FM_READ_CURR_FLOW;
    3914:	10 86       	std	Z+8, r1	; 0x08
    3916:	08 95       	ret

00003918 <_Z15readFMSensorADCv>:
		break;
	}
}

void readFMSensorADC()
{
    3918:	8f 92       	push	r8
    391a:	9f 92       	push	r9
    391c:	af 92       	push	r10
    391e:	bf 92       	push	r11
    3920:	cf 92       	push	r12
    3922:	df 92       	push	r13
    3924:	ef 92       	push	r14
    3926:	ff 92       	push	r15
    3928:	0f 93       	push	r16
    392a:	cf 93       	push	r28
    392c:	df 93       	push	r29
	unsigned int temp_val,i;

	temp_val = readADC(FM_420_CH);
    392e:	80 e0       	ldi	r24, 0x00	; 0
    3930:	0e 94 4d 02 	call	0x49a	; 0x49a <_Z7readADCc>
    3934:	ec 01       	movw	r28, r24
	sensor_data.l_hr = 0;
    3936:	e5 eb       	ldi	r30, 0xB5	; 181
    3938:	f3 e1       	ldi	r31, 0x13	; 19
    393a:	10 8e       	std	Z+24, r1	; 0x18
    393c:	11 8e       	std	Z+25, r1	; 0x19
    393e:	12 8e       	std	Z+26, r1	; 0x1a
    3940:	13 8e       	std	Z+27, r1	; 0x1b
	sensor_data.avg = 0;
    3942:	10 a2       	std	Z+32, r1	; 0x20
    3944:	11 a2       	std	Z+33, r1	; 0x21
    3946:	12 a2       	std	Z+34, r1	; 0x22
    3948:	13 a2       	std	Z+35, r1	; 0x23
	
	if(temp_val < MAX_ADC_VALUE)
    394a:	cc 3f       	cpi	r28, 0xFC	; 252
    394c:	83 e0       	ldi	r24, 0x03	; 3
    394e:	d8 07       	cpc	r29, r24
    3950:	08 f0       	brcs	.+2      	; 0x3954 <_Z15readFMSensorADCv+0x3c>
    3952:	a9 c0       	rjmp	.+338    	; 0x3aa6 <_Z15readFMSensorADCv+0x18e>
    3954:	a5 ec       	ldi	r26, 0xC5	; 197
    3956:	b3 e1       	ldi	r27, 0x13	; 19
	{
		for(i=0;i<(NUM_OF_SAMPLES-1);i++)
		{
			sensor_data.sample_1s[NUM_OF_SAMPLES-i-1] = sensor_data.sample_1s[NUM_OF_SAMPLES-i-2];
    3958:	7e 91       	ld	r23, -X
    395a:	6e 91       	ld	r22, -X
    395c:	5e 91       	ld	r21, -X
    395e:	4e 91       	ld	r20, -X
    3960:	14 96       	adiw	r26, 0x04	; 4
    3962:	4d 93       	st	X+, r20
    3964:	5d 93       	st	X+, r21
    3966:	6d 93       	st	X+, r22
    3968:	7c 93       	st	X, r23
    396a:	17 97       	sbiw	r26, 0x07	; 7
	sensor_data.l_hr = 0;
	sensor_data.avg = 0;
	
	if(temp_val < MAX_ADC_VALUE)
	{
		for(i=0;i<(NUM_OF_SAMPLES-1);i++)
    396c:	ae 17       	cp	r26, r30
    396e:	bf 07       	cpc	r27, r31
    3970:	99 f7       	brne	.-26     	; 0x3958 <_Z15readFMSensorADCv+0x40>
		{
			sensor_data.sample_1s[NUM_OF_SAMPLES-i-1] = sensor_data.sample_1s[NUM_OF_SAMPLES-i-2];
		}
	
		sensor_data.sample_1s[0] = temp_val;
    3972:	a5 eb       	ldi	r26, 0xB5	; 181
    3974:	b3 e1       	ldi	r27, 0x13	; 19
    3976:	ae 01       	movw	r20, r28
    3978:	60 e0       	ldi	r22, 0x00	; 0
    397a:	70 e0       	ldi	r23, 0x00	; 0
    397c:	4d 93       	st	X+, r20
    397e:	5d 93       	st	X+, r21
    3980:	6d 93       	st	X+, r22
    3982:	7c 93       	st	X, r23
    3984:	13 97       	sbiw	r26, 0x03	; 3
    3986:	90 96       	adiw	r26, 0x20	; 32
    3988:	6d 91       	ld	r22, X+
    398a:	7d 91       	ld	r23, X+
    398c:	8d 91       	ld	r24, X+
    398e:	9c 91       	ld	r25, X
    3990:	93 97       	sbiw	r26, 0x23	; 35
    3992:	29 ec       	ldi	r18, 0xC9	; 201
    3994:	33 e1       	ldi	r19, 0x13	; 19
	
		for(i=0;i<(NUM_OF_SAMPLES);i++)
		{
			sensor_data.avg += sensor_data.sample_1s[i];
    3996:	c1 90       	ld	r12, Z+
    3998:	d1 90       	ld	r13, Z+
    399a:	e1 90       	ld	r14, Z+
    399c:	f1 90       	ld	r15, Z+
    399e:	6c 0d       	add	r22, r12
    39a0:	7d 1d       	adc	r23, r13
    39a2:	8e 1d       	adc	r24, r14
    39a4:	9f 1d       	adc	r25, r15
			sensor_data.sample_1s[NUM_OF_SAMPLES-i-1] = sensor_data.sample_1s[NUM_OF_SAMPLES-i-2];
		}
	
		sensor_data.sample_1s[0] = temp_val;
	
		for(i=0;i<(NUM_OF_SAMPLES);i++)
    39a6:	e2 17       	cp	r30, r18
    39a8:	f3 07       	cpc	r31, r19
    39aa:	a9 f7       	brne	.-22     	; 0x3996 <_Z15readFMSensorADCv+0x7e>
		{
			sensor_data.avg += sensor_data.sample_1s[i];
		}
	
		sensor_data.avg = sensor_data.avg/NUM_OF_SAMPLES;
    39ac:	2d ec       	ldi	r18, 0xCD	; 205
    39ae:	3c ec       	ldi	r19, 0xCC	; 204
    39b0:	4c ec       	ldi	r20, 0xCC	; 204
    39b2:	5c ec       	ldi	r21, 0xCC	; 204
    39b4:	0e 94 1b 47 	call	0x8e36	; 0x8e36 <__umulsidi3>
    39b8:	00 e2       	ldi	r16, 0x20	; 32
    39ba:	0e 94 44 47 	call	0x8e88	; 0x8e88 <__lshrdi3>
    39be:	82 2e       	mov	r8, r18
    39c0:	93 2e       	mov	r9, r19
    39c2:	a4 2e       	mov	r10, r20
    39c4:	b5 2e       	mov	r11, r21
    39c6:	b6 94       	lsr	r11
    39c8:	a7 94       	ror	r10
    39ca:	97 94       	ror	r9
    39cc:	87 94       	ror	r8
    39ce:	b6 94       	lsr	r11
    39d0:	a7 94       	ror	r10
    39d2:	97 94       	ror	r9
    39d4:	87 94       	ror	r8
    39d6:	80 92 d5 13 	sts	0x13D5, r8	; 0x8013d5 <sensor_data+0x20>
    39da:	90 92 d6 13 	sts	0x13D6, r9	; 0x8013d6 <sensor_data+0x21>
    39de:	a0 92 d7 13 	sts	0x13D7, r10	; 0x8013d7 <sensor_data+0x22>
    39e2:	b0 92 d8 13 	sts	0x13D8, r11	; 0x8013d8 <sensor_data+0x23>
	
		if(product_info.calib_factor == 0)		//25-06-21 SK: in case if ram data and product info structure is zero then lets read from eeprom and flash again
    39e6:	e0 91 24 0b 	lds	r30, 0x0B24	; 0x800b24 <product_info+0x1a>
    39ea:	f0 91 25 0b 	lds	r31, 0x0B25	; 0x800b25 <product_info+0x1b>
    39ee:	30 97       	sbiw	r30, 0x00	; 0
    39f0:	09 f0       	breq	.+2      	; 0x39f4 <_Z15readFMSensorADCv+0xdc>
    39f2:	80 c0       	rjmp	.+256    	; 0x3af4 <_Z15readFMSensorADCv+0x1dc>
		{

			eepromReadProductInfo();
    39f4:	0e 94 20 03 	call	0x640	; 0x640 <_Z21eepromReadProductInfov>
			get_present_time(&ram_data.time);
    39f8:	8f ea       	ldi	r24, 0xAF	; 175
    39fa:	93 e1       	ldi	r25, 0x13	; 19
    39fc:	0e 94 d2 13 	call	0x27a4	; 0x27a4 <_Z16get_present_timeP12time_stamp_t>
			get_last_rtu_log();
    3a00:	0e 94 d3 3b 	call	0x77a6	; 0x77a6 <_Z16get_last_rtu_logv>
			
		}
		
		if((sensor_data.avg > product_info.ADC_offset) && (product_info.calib_factor != 0))
    3a04:	80 90 d5 13 	lds	r8, 0x13D5	; 0x8013d5 <sensor_data+0x20>
    3a08:	90 90 d6 13 	lds	r9, 0x13D6	; 0x8013d6 <sensor_data+0x21>
    3a0c:	a0 90 d7 13 	lds	r10, 0x13D7	; 0x8013d7 <sensor_data+0x22>
    3a10:	b0 90 d8 13 	lds	r11, 0x13D8	; 0x8013d8 <sensor_data+0x23>
    3a14:	80 91 22 0b 	lds	r24, 0x0B22	; 0x800b22 <product_info+0x18>
    3a18:	90 91 23 0b 	lds	r25, 0x0B23	; 0x800b23 <product_info+0x19>
    3a1c:	a0 e0       	ldi	r26, 0x00	; 0
    3a1e:	b0 e0       	ldi	r27, 0x00	; 0
    3a20:	88 15       	cp	r24, r8
    3a22:	99 05       	cpc	r25, r9
    3a24:	aa 05       	cpc	r26, r10
    3a26:	bb 05       	cpc	r27, r11
    3a28:	48 f5       	brcc	.+82     	; 0x3a7c <_Z15readFMSensorADCv+0x164>
    3a2a:	e0 91 24 0b 	lds	r30, 0x0B24	; 0x800b24 <product_info+0x1a>
    3a2e:	f0 91 25 0b 	lds	r31, 0x0B25	; 0x800b25 <product_info+0x1b>
    3a32:	30 97       	sbiw	r30, 0x00	; 0
    3a34:	19 f1       	breq	.+70     	; 0x3a7c <_Z15readFMSensorADCv+0x164>
		{
			sensor_data.l_hr = (((unsigned long)sensor_data.avg-product_info.ADC_offset)*1000*100)/(product_info.calib_factor);
    3a36:	a5 01       	movw	r20, r10
    3a38:	94 01       	movw	r18, r8
    3a3a:	28 1b       	sub	r18, r24
    3a3c:	39 0b       	sbc	r19, r25
    3a3e:	4a 0b       	sbc	r20, r26
    3a40:	5b 0b       	sbc	r21, r27
    3a42:	60 ea       	ldi	r22, 0xA0	; 160
    3a44:	76 e8       	ldi	r23, 0x86	; 134
    3a46:	81 e0       	ldi	r24, 0x01	; 1
    3a48:	90 e0       	ldi	r25, 0x00	; 0
    3a4a:	0e 94 b6 46 	call	0x8d6c	; 0x8d6c <__mulsi3>
    3a4e:	9f 01       	movw	r18, r30
    3a50:	40 e0       	ldi	r20, 0x00	; 0
    3a52:	50 e0       	ldi	r21, 0x00	; 0
    3a54:	0e 94 d8 46 	call	0x8db0	; 0x8db0 <__udivmodsi4>
    3a58:	20 93 cd 13 	sts	0x13CD, r18	; 0x8013cd <sensor_data+0x18>
    3a5c:	30 93 ce 13 	sts	0x13CE, r19	; 0x8013ce <sensor_data+0x19>
    3a60:	40 93 cf 13 	sts	0x13CF, r20	; 0x8013cf <sensor_data+0x1a>
    3a64:	50 93 d0 13 	sts	0x13D0, r21	; 0x8013d0 <sensor_data+0x1b>
			fm_error_cnt = 0;
    3a68:	10 92 3a 0b 	sts	0x0B3A, r1	; 0x800b3a <fm_error_cnt>
			ram_data.status &= ~(1 << FLOW_METER_ERR);
    3a6c:	ed e9       	ldi	r30, 0x9D	; 157
    3a6e:	f3 e1       	ldi	r31, 0x13	; 19
    3a70:	80 89       	ldd	r24, Z+16	; 0x10
    3a72:	91 89       	ldd	r25, Z+17	; 0x11
    3a74:	8f 7d       	andi	r24, 0xDF	; 223
    3a76:	91 8b       	std	Z+17, r25	; 0x11
    3a78:	80 8b       	std	Z+16, r24	; 0x10
    3a7a:	15 c0       	rjmp	.+42     	; 0x3aa6 <_Z15readFMSensorADCv+0x18e>
		}
		else if(sensor_data.avg == 0)
    3a7c:	89 28       	or	r8, r9
    3a7e:	8a 28       	or	r8, r10
    3a80:	8b 28       	or	r8, r11
    3a82:	89 f4       	brne	.+34     	; 0x3aa6 <_Z15readFMSensorADCv+0x18e>
		{
			if(fm_error_cnt++>20)
    3a84:	80 91 3a 0b 	lds	r24, 0x0B3A	; 0x800b3a <fm_error_cnt>
    3a88:	91 e0       	ldi	r25, 0x01	; 1
    3a8a:	98 0f       	add	r25, r24
    3a8c:	90 93 3a 0b 	sts	0x0B3A, r25	; 0x800b3a <fm_error_cnt>
    3a90:	85 31       	cpi	r24, 0x15	; 21
    3a92:	48 f0       	brcs	.+18     	; 0x3aa6 <_Z15readFMSensorADCv+0x18e>
			{
				ram_data.status |= (1 << FLOW_METER_ERR);
    3a94:	ed e9       	ldi	r30, 0x9D	; 157
    3a96:	f3 e1       	ldi	r31, 0x13	; 19
    3a98:	80 89       	ldd	r24, Z+16	; 0x10
    3a9a:	91 89       	ldd	r25, Z+17	; 0x11
    3a9c:	80 62       	ori	r24, 0x20	; 32
    3a9e:	91 8b       	std	Z+17, r25	; 0x11
    3aa0:	80 8b       	std	Z+16, r24	; 0x10
				fm_error_cnt = 0;
    3aa2:	10 92 3a 0b 	sts	0x0B3A, r1	; 0x800b3a <fm_error_cnt>
	{
	}


#ifdef DEBUG_RAM_DATA
	UWriteString("\nadc:",UART_PC);
    3aa6:	62 e0       	ldi	r22, 0x02	; 2
    3aa8:	70 e0       	ldi	r23, 0x00	; 0
    3aaa:	89 e7       	ldi	r24, 0x79	; 121
    3aac:	94 e0       	ldi	r25, 0x04	; 4
    3aae:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <_Z12UWriteStringPKci>
	UWriteInt(temp_val,UART_PC);
    3ab2:	be 01       	movw	r22, r28
    3ab4:	80 e0       	ldi	r24, 0x00	; 0
    3ab6:	90 e0       	ldi	r25, 0x00	; 0
    3ab8:	42 e0       	ldi	r20, 0x02	; 2
    3aba:	0e 94 3e 09 	call	0x127c	; 0x127c <_Z9UWriteIntmc>
	UWriteData(',',UART_PC);
    3abe:	62 e0       	ldi	r22, 0x02	; 2
    3ac0:	70 e0       	ldi	r23, 0x00	; 0
    3ac2:	8c e2       	ldi	r24, 0x2C	; 44
    3ac4:	0e 94 c3 08 	call	0x1186	; 0x1186 <_Z10UWriteDataci>
	UWriteInt(sensor_data.avg,UART_PC);
    3ac8:	c5 eb       	ldi	r28, 0xB5	; 181
    3aca:	d3 e1       	ldi	r29, 0x13	; 19
    3acc:	68 a1       	ldd	r22, Y+32	; 0x20
    3ace:	79 a1       	ldd	r23, Y+33	; 0x21
    3ad0:	8a a1       	ldd	r24, Y+34	; 0x22
    3ad2:	9b a1       	ldd	r25, Y+35	; 0x23
    3ad4:	42 e0       	ldi	r20, 0x02	; 2
    3ad6:	0e 94 3e 09 	call	0x127c	; 0x127c <_Z9UWriteIntmc>
	UWriteData(',',UART_PC);
    3ada:	62 e0       	ldi	r22, 0x02	; 2
    3adc:	70 e0       	ldi	r23, 0x00	; 0
    3ade:	8c e2       	ldi	r24, 0x2C	; 44
    3ae0:	0e 94 c3 08 	call	0x1186	; 0x1186 <_Z10UWriteDataci>
	UWriteInt(sensor_data.l_hr,UART_PC);
    3ae4:	68 8d       	ldd	r22, Y+24	; 0x18
    3ae6:	79 8d       	ldd	r23, Y+25	; 0x19
    3ae8:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3aea:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3aec:	42 e0       	ldi	r20, 0x02	; 2
    3aee:	0e 94 3e 09 	call	0x127c	; 0x127c <_Z9UWriteIntmc>
#endif
}
    3af2:	0d c0       	rjmp	.+26     	; 0x3b0e <_Z15readFMSensorADCv+0x1f6>
			get_present_time(&ram_data.time);
			get_last_rtu_log();
			
		}
		
		if((sensor_data.avg > product_info.ADC_offset) && (product_info.calib_factor != 0))
    3af4:	80 91 22 0b 	lds	r24, 0x0B22	; 0x800b22 <product_info+0x18>
    3af8:	90 91 23 0b 	lds	r25, 0x0B23	; 0x800b23 <product_info+0x19>
    3afc:	a0 e0       	ldi	r26, 0x00	; 0
    3afe:	b0 e0       	ldi	r27, 0x00	; 0
    3b00:	88 15       	cp	r24, r8
    3b02:	99 05       	cpc	r25, r9
    3b04:	aa 05       	cpc	r26, r10
    3b06:	bb 05       	cpc	r27, r11
    3b08:	08 f0       	brcs	.+2      	; 0x3b0c <_Z15readFMSensorADCv+0x1f4>
    3b0a:	b8 cf       	rjmp	.-144    	; 0x3a7c <_Z15readFMSensorADCv+0x164>
    3b0c:	94 cf       	rjmp	.-216    	; 0x3a36 <_Z15readFMSensorADCv+0x11e>
	UWriteData(',',UART_PC);
	UWriteInt(sensor_data.avg,UART_PC);
	UWriteData(',',UART_PC);
	UWriteInt(sensor_data.l_hr,UART_PC);
#endif
}
    3b0e:	df 91       	pop	r29
    3b10:	cf 91       	pop	r28
    3b12:	0f 91       	pop	r16
    3b14:	ff 90       	pop	r15
    3b16:	ef 90       	pop	r14
    3b18:	df 90       	pop	r13
    3b1a:	cf 90       	pop	r12
    3b1c:	bf 90       	pop	r11
    3b1e:	af 90       	pop	r10
    3b20:	9f 90       	pop	r9
    3b22:	8f 90       	pop	r8
    3b24:	08 95       	ret

00003b26 <_Z15init_online_cfgv>:
				tmpstr[j] = tmpstr[j + i + length];
			}
			tmpstr[j] = '\0';
		}
	return (retval);
}
    3b26:	ec e1       	ldi	r30, 0x1C	; 28
    3b28:	fc e0       	ldi	r31, 0x0C	; 12
    3b2a:	80 e3       	ldi	r24, 0x30	; 48
    3b2c:	df 01       	movw	r26, r30
    3b2e:	1d 92       	st	X+, r1
    3b30:	8a 95       	dec	r24
    3b32:	e9 f7       	brne	.-6      	; 0x3b2e <_Z15init_online_cfgv+0x8>
    3b34:	81 e0       	ldi	r24, 0x01	; 1
    3b36:	81 83       	std	Z+1, r24	; 0x01
    3b38:	08 95       	ret

00003b3a <_Z19gprs_connect_statusv>:
    3b3a:	1f 93       	push	r17
    3b3c:	cf 93       	push	r28
    3b3e:	df 93       	push	r29
    3b40:	cd b7       	in	r28, 0x3d	; 61
    3b42:	de b7       	in	r29, 0x3e	; 62
    3b44:	c9 58       	subi	r28, 0x89	; 137
    3b46:	d1 09       	sbc	r29, r1
    3b48:	0f b6       	in	r0, 0x3f	; 63
    3b4a:	f8 94       	cli
    3b4c:	de bf       	out	0x3e, r29	; 62
    3b4e:	0f be       	out	0x3f, r0	; 63
    3b50:	cd bf       	out	0x3d, r28	; 61
    3b52:	1a 82       	std	Y+2, r1	; 0x02
    3b54:	19 82       	std	Y+1, r1	; 0x01
    3b56:	80 91 15 02 	lds	r24, 0x0215	; 0x800215 <_ZZ19gprs_connect_statusvE17gprs_connct_state>
    3b5a:	82 32       	cpi	r24, 0x22	; 34
    3b5c:	09 f4       	brne	.+2      	; 0x3b60 <_Z19gprs_connect_statusv+0x26>
    3b5e:	ed c0       	rjmp	.+474    	; 0x3d3a <_Z19gprs_connect_statusv+0x200>
    3b60:	20 f4       	brcc	.+8      	; 0x3b6a <_Z19gprs_connect_statusv+0x30>
    3b62:	81 32       	cpi	r24, 0x21	; 33
    3b64:	09 f4       	brne	.+2      	; 0x3b68 <_Z19gprs_connect_statusv+0x2e>
    3b66:	d4 c0       	rjmp	.+424    	; 0x3d10 <_Z19gprs_connect_statusv+0x1d6>
    3b68:	48 c1       	rjmp	.+656    	; 0x3dfa <_Z19gprs_connect_statusv+0x2c0>
    3b6a:	83 32       	cpi	r24, 0x23	; 35
    3b6c:	19 f0       	breq	.+6      	; 0x3b74 <_Z19gprs_connect_statusv+0x3a>
    3b6e:	84 32       	cpi	r24, 0x24	; 36
    3b70:	c1 f0       	breq	.+48     	; 0x3ba2 <_Z19gprs_connect_statusv+0x68>
    3b72:	43 c1       	rjmp	.+646    	; 0x3dfa <_Z19gprs_connect_statusv+0x2c0>
    3b74:	62 e0       	ldi	r22, 0x02	; 2
    3b76:	70 e0       	ldi	r23, 0x00	; 0
    3b78:	84 eb       	ldi	r24, 0xB4	; 180
    3b7a:	94 e0       	ldi	r25, 0x04	; 4
    3b7c:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <_Z12UWriteStringPKci>
    3b80:	80 e0       	ldi	r24, 0x00	; 0
    3b82:	90 e0       	ldi	r25, 0x00	; 0
    3b84:	0e 94 d7 09 	call	0x13ae	; 0x13ae <_Z13flushRxBufferi>
    3b88:	10 92 93 12 	sts	0x1293, r1	; 0x801293 <gprs_date_time+0x6>
    3b8c:	60 e0       	ldi	r22, 0x00	; 0
    3b8e:	70 e0       	ldi	r23, 0x00	; 0
    3b90:	8e eb       	ldi	r24, 0xBE	; 190
    3b92:	94 e0       	ldi	r25, 0x04	; 4
    3b94:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <_Z12UWriteStringPKci>
    3b98:	84 e2       	ldi	r24, 0x24	; 36
    3b9a:	80 93 15 02 	sts	0x0215, r24	; 0x800215 <_ZZ19gprs_connect_statusvE17gprs_connct_state>
    3b9e:	82 e0       	ldi	r24, 0x02	; 2
    3ba0:	33 c1       	rjmp	.+614    	; 0x3e08 <_Z19gprs_connect_statusv+0x2ce>
    3ba2:	ae 01       	movw	r20, r28
    3ba4:	4f 5f       	subi	r20, 0xFF	; 255
    3ba6:	5f 4f       	sbci	r21, 0xFF	; 255
    3ba8:	be 01       	movw	r22, r28
    3baa:	6d 5f       	subi	r22, 0xFD	; 253
    3bac:	7f 4f       	sbci	r23, 0xFF	; 255
    3bae:	88 ec       	ldi	r24, 0xC8	; 200
    3bb0:	94 e0       	ldi	r25, 0x04	; 4
    3bb2:	0e 94 75 45 	call	0x8aea	; 0x8aea <_Z12check_stringPKcPcPi>
    3bb6:	18 2f       	mov	r17, r24
    3bb8:	62 e0       	ldi	r22, 0x02	; 2
    3bba:	70 e0       	ldi	r23, 0x00	; 0
    3bbc:	81 ed       	ldi	r24, 0xD1	; 209
    3bbe:	94 e0       	ldi	r25, 0x04	; 4
    3bc0:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <_Z12UWriteStringPKci>
    3bc4:	62 e0       	ldi	r22, 0x02	; 2
    3bc6:	70 e0       	ldi	r23, 0x00	; 0
    3bc8:	ce 01       	movw	r24, r28
    3bca:	03 96       	adiw	r24, 0x03	; 3
    3bcc:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <_Z12UWriteStringPKci>
    3bd0:	11 30       	cpi	r17, 0x01	; 1
    3bd2:	29 f0       	breq	.+10     	; 0x3bde <_Z19gprs_connect_statusv+0xa4>
    3bd4:	08 f4       	brcc	.+2      	; 0x3bd8 <_Z19gprs_connect_statusv+0x9e>
    3bd6:	6e c0       	rjmp	.+220    	; 0x3cb4 <_Z19gprs_connect_statusv+0x17a>
    3bd8:	12 30       	cpi	r17, 0x02	; 2
    3bda:	c9 f0       	breq	.+50     	; 0x3c0e <_Z19gprs_connect_statusv+0xd4>
    3bdc:	97 c0       	rjmp	.+302    	; 0x3d0c <_Z19gprs_connect_statusv+0x1d2>
    3bde:	62 e0       	ldi	r22, 0x02	; 2
    3be0:	70 e0       	ldi	r23, 0x00	; 0
    3be2:	8b ed       	ldi	r24, 0xDB	; 219
    3be4:	94 e0       	ldi	r25, 0x04	; 4
    3be6:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <_Z12UWriteStringPKci>
    3bea:	83 e2       	ldi	r24, 0x23	; 35
    3bec:	80 93 15 02 	sts	0x0215, r24	; 0x800215 <_ZZ19gprs_connect_statusvE17gprs_connct_state>
    3bf0:	80 91 16 0c 	lds	r24, 0x0C16	; 0x800c16 <_ZZ19gprs_connect_statusvE16gprs_retry_count>
    3bf4:	91 e0       	ldi	r25, 0x01	; 1
    3bf6:	98 0f       	add	r25, r24
    3bf8:	90 93 16 0c 	sts	0x0C16, r25	; 0x800c16 <_ZZ19gprs_connect_statusvE16gprs_retry_count>
    3bfc:	83 30       	cpi	r24, 0x03	; 3
    3bfe:	08 f4       	brcc	.+2      	; 0x3c02 <_Z19gprs_connect_statusv+0xc8>
    3c00:	85 c0       	rjmp	.+266    	; 0x3d0c <_Z19gprs_connect_statusv+0x1d2>
    3c02:	84 ec       	ldi	r24, 0xC4	; 196
    3c04:	80 93 fa 12 	sts	0x12FA, r24	; 0x8012fa <gprs+0x16>
    3c08:	10 92 16 0c 	sts	0x0C16, r1	; 0x800c16 <_ZZ19gprs_connect_statusvE16gprs_retry_count>
    3c0c:	7f c0       	rjmp	.+254    	; 0x3d0c <_Z19gprs_connect_statusv+0x1d2>
    3c0e:	62 e0       	ldi	r22, 0x02	; 2
    3c10:	70 e0       	ldi	r23, 0x00	; 0
    3c12:	82 ee       	ldi	r24, 0xE2	; 226
    3c14:	94 e0       	ldi	r25, 0x04	; 4
    3c16:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <_Z12UWriteStringPKci>
    3c1a:	be 01       	movw	r22, r28
    3c1c:	6d 57       	subi	r22, 0x7D	; 125
    3c1e:	7f 4f       	sbci	r23, 0xFF	; 255
    3c20:	ce 01       	movw	r24, r28
    3c22:	03 96       	adiw	r24, 0x03	; 3
    3c24:	0e 94 e7 13 	call	0x27ce	; 0x27ce <_Z15check_date_timePcS_>
    3c28:	88 23       	and	r24, r24
    3c2a:	d1 f1       	breq	.+116    	; 0x3ca0 <_Z19gprs_connect_statusv+0x166>
    3c2c:	cd 57       	subi	r28, 0x7D	; 125
    3c2e:	df 4f       	sbci	r29, 0xFF	; 255
    3c30:	88 81       	ld	r24, Y
    3c32:	c3 58       	subi	r28, 0x83	; 131
    3c34:	d0 40       	sbci	r29, 0x00	; 0
    3c36:	85 51       	subi	r24, 0x15	; 21
    3c38:	8f 34       	cpi	r24, 0x4F	; 79
    3c3a:	90 f5       	brcc	.+100    	; 0x3ca0 <_Z19gprs_connect_statusv+0x166>
    3c3c:	cc 57       	subi	r28, 0x7C	; 124
    3c3e:	df 4f       	sbci	r29, 0xFF	; 255
    3c40:	88 81       	ld	r24, Y
    3c42:	c4 58       	subi	r28, 0x84	; 132
    3c44:	d0 40       	sbci	r29, 0x00	; 0
    3c46:	81 50       	subi	r24, 0x01	; 1
    3c48:	8c 30       	cpi	r24, 0x0C	; 12
    3c4a:	50 f5       	brcc	.+84     	; 0x3ca0 <_Z19gprs_connect_statusv+0x166>
    3c4c:	cb 57       	subi	r28, 0x7B	; 123
    3c4e:	df 4f       	sbci	r29, 0xFF	; 255
    3c50:	88 81       	ld	r24, Y
    3c52:	c5 58       	subi	r28, 0x85	; 133
    3c54:	d0 40       	sbci	r29, 0x00	; 0
    3c56:	81 50       	subi	r24, 0x01	; 1
    3c58:	8f 31       	cpi	r24, 0x1F	; 31
    3c5a:	10 f5       	brcc	.+68     	; 0x3ca0 <_Z19gprs_connect_statusv+0x166>
    3c5c:	ca 57       	subi	r28, 0x7A	; 122
    3c5e:	df 4f       	sbci	r29, 0xFF	; 255
    3c60:	88 81       	ld	r24, Y
    3c62:	c6 58       	subi	r28, 0x86	; 134
    3c64:	d0 40       	sbci	r29, 0x00	; 0
    3c66:	88 31       	cpi	r24, 0x18	; 24
    3c68:	d8 f4       	brcc	.+54     	; 0x3ca0 <_Z19gprs_connect_statusv+0x166>
    3c6a:	c9 57       	subi	r28, 0x79	; 121
    3c6c:	df 4f       	sbci	r29, 0xFF	; 255
    3c6e:	88 81       	ld	r24, Y
    3c70:	c7 58       	subi	r28, 0x87	; 135
    3c72:	d0 40       	sbci	r29, 0x00	; 0
    3c74:	8c 33       	cpi	r24, 0x3C	; 60
    3c76:	a0 f4       	brcc	.+40     	; 0x3ca0 <_Z19gprs_connect_statusv+0x166>
    3c78:	c8 57       	subi	r28, 0x78	; 120
    3c7a:	df 4f       	sbci	r29, 0xFF	; 255
    3c7c:	88 81       	ld	r24, Y
    3c7e:	c8 58       	subi	r28, 0x88	; 136
    3c80:	d0 40       	sbci	r29, 0x00	; 0
    3c82:	8c 33       	cpi	r24, 0x3C	; 60
    3c84:	68 f4       	brcc	.+26     	; 0x3ca0 <_Z19gprs_connect_statusv+0x166>
    3c86:	87 e0       	ldi	r24, 0x07	; 7
    3c88:	fe 01       	movw	r30, r28
    3c8a:	ed 57       	subi	r30, 0x7D	; 125
    3c8c:	ff 4f       	sbci	r31, 0xFF	; 255
    3c8e:	ad e8       	ldi	r26, 0x8D	; 141
    3c90:	b2 e1       	ldi	r27, 0x12	; 18
    3c92:	01 90       	ld	r0, Z+
    3c94:	0d 92       	st	X+, r0
    3c96:	8a 95       	dec	r24
    3c98:	e1 f7       	brne	.-8      	; 0x3c92 <_Z19gprs_connect_statusv+0x158>
    3c9a:	81 e0       	ldi	r24, 0x01	; 1
    3c9c:	80 93 93 12 	sts	0x1293, r24	; 0x801293 <gprs_date_time+0x6>
    3ca0:	81 e2       	ldi	r24, 0x21	; 33
    3ca2:	80 93 15 02 	sts	0x0215, r24	; 0x800215 <_ZZ19gprs_connect_statusvE17gprs_connct_state>
    3ca6:	10 92 16 0c 	sts	0x0C16, r1	; 0x800c16 <_ZZ19gprs_connect_statusvE16gprs_retry_count>
    3caa:	10 92 15 0c 	sts	0x0C15, r1	; 0x800c15 <_ZZ19gprs_connect_statusvE7timeout+0x1>
    3cae:	10 92 14 0c 	sts	0x0C14, r1	; 0x800c14 <_ZZ19gprs_connect_statusvE7timeout>
    3cb2:	2c c0       	rjmp	.+88     	; 0x3d0c <_Z19gprs_connect_statusv+0x1d2>
    3cb4:	62 e0       	ldi	r22, 0x02	; 2
    3cb6:	70 e0       	ldi	r23, 0x00	; 0
    3cb8:	89 ee       	ldi	r24, 0xE9	; 233
    3cba:	94 e0       	ldi	r25, 0x04	; 4
    3cbc:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <_Z12UWriteStringPKci>
    3cc0:	80 91 14 0c 	lds	r24, 0x0C14	; 0x800c14 <_ZZ19gprs_connect_statusvE7timeout>
    3cc4:	90 91 15 0c 	lds	r25, 0x0C15	; 0x800c15 <_ZZ19gprs_connect_statusvE7timeout+0x1>
    3cc8:	86 30       	cpi	r24, 0x06	; 6
    3cca:	91 05       	cpc	r25, r1
    3ccc:	30 f4       	brcc	.+12     	; 0x3cda <_Z19gprs_connect_statusv+0x1a0>
    3cce:	01 96       	adiw	r24, 0x01	; 1
    3cd0:	90 93 15 0c 	sts	0x0C15, r25	; 0x800c15 <_ZZ19gprs_connect_statusvE7timeout+0x1>
    3cd4:	80 93 14 0c 	sts	0x0C14, r24	; 0x800c14 <_ZZ19gprs_connect_statusvE7timeout>
    3cd8:	19 c0       	rjmp	.+50     	; 0x3d0c <_Z19gprs_connect_statusv+0x1d2>
    3cda:	10 92 15 0c 	sts	0x0C15, r1	; 0x800c15 <_ZZ19gprs_connect_statusvE7timeout+0x1>
    3cde:	10 92 14 0c 	sts	0x0C14, r1	; 0x800c14 <_ZZ19gprs_connect_statusvE7timeout>
    3ce2:	83 e2       	ldi	r24, 0x23	; 35
    3ce4:	80 93 15 02 	sts	0x0215, r24	; 0x800215 <_ZZ19gprs_connect_statusvE17gprs_connct_state>
    3ce8:	80 91 16 0c 	lds	r24, 0x0C16	; 0x800c16 <_ZZ19gprs_connect_statusvE16gprs_retry_count>
    3cec:	91 e0       	ldi	r25, 0x01	; 1
    3cee:	98 0f       	add	r25, r24
    3cf0:	90 93 16 0c 	sts	0x0C16, r25	; 0x800c16 <_ZZ19gprs_connect_statusvE16gprs_retry_count>
    3cf4:	83 30       	cpi	r24, 0x03	; 3
    3cf6:	50 f0       	brcs	.+20     	; 0x3d0c <_Z19gprs_connect_statusv+0x1d2>
    3cf8:	e4 ee       	ldi	r30, 0xE4	; 228
    3cfa:	f2 e1       	ldi	r31, 0x12	; 18
    3cfc:	10 8a       	std	Z+16, r1	; 0x10
    3cfe:	84 ec       	ldi	r24, 0xC4	; 196
    3d00:	86 8b       	std	Z+22, r24	; 0x16
    3d02:	81 e2       	ldi	r24, 0x21	; 33
    3d04:	80 93 15 02 	sts	0x0215, r24	; 0x800215 <_ZZ19gprs_connect_statusvE17gprs_connct_state>
    3d08:	10 92 16 0c 	sts	0x0C16, r1	; 0x800c16 <_ZZ19gprs_connect_statusvE16gprs_retry_count>
    3d0c:	82 e0       	ldi	r24, 0x02	; 2
    3d0e:	7c c0       	rjmp	.+248    	; 0x3e08 <_Z19gprs_connect_statusv+0x2ce>
    3d10:	62 e0       	ldi	r22, 0x02	; 2
    3d12:	70 e0       	ldi	r23, 0x00	; 0
    3d14:	80 ef       	ldi	r24, 0xF0	; 240
    3d16:	94 e0       	ldi	r25, 0x04	; 4
    3d18:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <_Z12UWriteStringPKci>
    3d1c:	80 e0       	ldi	r24, 0x00	; 0
    3d1e:	90 e0       	ldi	r25, 0x00	; 0
    3d20:	0e 94 d7 09 	call	0x13ae	; 0x13ae <_Z13flushRxBufferi>
    3d24:	60 e0       	ldi	r22, 0x00	; 0
    3d26:	70 e0       	ldi	r23, 0x00	; 0
    3d28:	8e ef       	ldi	r24, 0xFE	; 254
    3d2a:	94 e0       	ldi	r25, 0x04	; 4
    3d2c:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <_Z12UWriteStringPKci>
    3d30:	82 e2       	ldi	r24, 0x22	; 34
    3d32:	80 93 15 02 	sts	0x0215, r24	; 0x800215 <_ZZ19gprs_connect_statusvE17gprs_connct_state>
    3d36:	82 e0       	ldi	r24, 0x02	; 2
    3d38:	67 c0       	rjmp	.+206    	; 0x3e08 <_Z19gprs_connect_statusv+0x2ce>
    3d3a:	8c e0       	ldi	r24, 0x0C	; 12
    3d3c:	95 e0       	ldi	r25, 0x05	; 5
    3d3e:	0e 94 fc 45 	call	0x8bf8	; 0x8bf8 <_Z18check_string_nobufPKc>
    3d42:	81 30       	cpi	r24, 0x01	; 1
    3d44:	21 f0       	breq	.+8      	; 0x3d4e <_Z19gprs_connect_statusv+0x214>
    3d46:	80 f1       	brcs	.+96     	; 0x3da8 <_Z19gprs_connect_statusv+0x26e>
    3d48:	82 30       	cpi	r24, 0x02	; 2
    3d4a:	e9 f0       	breq	.+58     	; 0x3d86 <_Z19gprs_connect_statusv+0x24c>
    3d4c:	58 c0       	rjmp	.+176    	; 0x3dfe <_Z19gprs_connect_statusv+0x2c4>
    3d4e:	62 e0       	ldi	r22, 0x02	; 2
    3d50:	70 e0       	ldi	r23, 0x00	; 0
    3d52:	88 e1       	ldi	r24, 0x18	; 24
    3d54:	95 e0       	ldi	r25, 0x05	; 5
    3d56:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <_Z12UWriteStringPKci>
    3d5a:	81 e2       	ldi	r24, 0x21	; 33
    3d5c:	80 93 15 02 	sts	0x0215, r24	; 0x800215 <_ZZ19gprs_connect_statusvE17gprs_connct_state>
    3d60:	80 91 16 0c 	lds	r24, 0x0C16	; 0x800c16 <_ZZ19gprs_connect_statusvE16gprs_retry_count>
    3d64:	91 e0       	ldi	r25, 0x01	; 1
    3d66:	98 0f       	add	r25, r24
    3d68:	90 93 16 0c 	sts	0x0C16, r25	; 0x800c16 <_ZZ19gprs_connect_statusvE16gprs_retry_count>
    3d6c:	83 30       	cpi	r24, 0x03	; 3
    3d6e:	08 f4       	brcc	.+2      	; 0x3d72 <_Z19gprs_connect_statusv+0x238>
    3d70:	48 c0       	rjmp	.+144    	; 0x3e02 <_Z19gprs_connect_statusv+0x2c8>
    3d72:	82 ec       	ldi	r24, 0xC2	; 194
    3d74:	80 93 fa 12 	sts	0x12FA, r24	; 0x8012fa <gprs+0x16>
    3d78:	83 e2       	ldi	r24, 0x23	; 35
    3d7a:	80 93 15 02 	sts	0x0215, r24	; 0x800215 <_ZZ19gprs_connect_statusvE17gprs_connct_state>
    3d7e:	10 92 16 0c 	sts	0x0C16, r1	; 0x800c16 <_ZZ19gprs_connect_statusvE16gprs_retry_count>
    3d82:	81 e0       	ldi	r24, 0x01	; 1
    3d84:	41 c0       	rjmp	.+130    	; 0x3e08 <_Z19gprs_connect_statusv+0x2ce>
    3d86:	62 e0       	ldi	r22, 0x02	; 2
    3d88:	70 e0       	ldi	r23, 0x00	; 0
    3d8a:	83 e2       	ldi	r24, 0x23	; 35
    3d8c:	95 e0       	ldi	r25, 0x05	; 5
    3d8e:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <_Z12UWriteStringPKci>
    3d92:	83 e2       	ldi	r24, 0x23	; 35
    3d94:	80 93 15 02 	sts	0x0215, r24	; 0x800215 <_ZZ19gprs_connect_statusvE17gprs_connct_state>
    3d98:	10 92 16 0c 	sts	0x0C16, r1	; 0x800c16 <_ZZ19gprs_connect_statusvE16gprs_retry_count>
    3d9c:	10 92 15 0c 	sts	0x0C15, r1	; 0x800c15 <_ZZ19gprs_connect_statusvE7timeout+0x1>
    3da0:	10 92 14 0c 	sts	0x0C14, r1	; 0x800c14 <_ZZ19gprs_connect_statusvE7timeout>
    3da4:	80 e0       	ldi	r24, 0x00	; 0
    3da6:	30 c0       	rjmp	.+96     	; 0x3e08 <_Z19gprs_connect_statusv+0x2ce>
    3da8:	80 91 14 0c 	lds	r24, 0x0C14	; 0x800c14 <_ZZ19gprs_connect_statusvE7timeout>
    3dac:	90 91 15 0c 	lds	r25, 0x0C15	; 0x800c15 <_ZZ19gprs_connect_statusvE7timeout+0x1>
    3db0:	8a 30       	cpi	r24, 0x0A	; 10
    3db2:	91 05       	cpc	r25, r1
    3db4:	38 f4       	brcc	.+14     	; 0x3dc4 <_Z19gprs_connect_statusv+0x28a>
    3db6:	01 96       	adiw	r24, 0x01	; 1
    3db8:	90 93 15 0c 	sts	0x0C15, r25	; 0x800c15 <_ZZ19gprs_connect_statusvE7timeout+0x1>
    3dbc:	80 93 14 0c 	sts	0x0C14, r24	; 0x800c14 <_ZZ19gprs_connect_statusvE7timeout>
    3dc0:	82 e0       	ldi	r24, 0x02	; 2
    3dc2:	22 c0       	rjmp	.+68     	; 0x3e08 <_Z19gprs_connect_statusv+0x2ce>
    3dc4:	10 92 15 0c 	sts	0x0C15, r1	; 0x800c15 <_ZZ19gprs_connect_statusvE7timeout+0x1>
    3dc8:	10 92 14 0c 	sts	0x0C14, r1	; 0x800c14 <_ZZ19gprs_connect_statusvE7timeout>
    3dcc:	81 e2       	ldi	r24, 0x21	; 33
    3dce:	80 93 15 02 	sts	0x0215, r24	; 0x800215 <_ZZ19gprs_connect_statusvE17gprs_connct_state>
    3dd2:	80 91 16 0c 	lds	r24, 0x0C16	; 0x800c16 <_ZZ19gprs_connect_statusvE16gprs_retry_count>
    3dd6:	91 e0       	ldi	r25, 0x01	; 1
    3dd8:	98 0f       	add	r25, r24
    3dda:	90 93 16 0c 	sts	0x0C16, r25	; 0x800c16 <_ZZ19gprs_connect_statusvE16gprs_retry_count>
    3dde:	83 30       	cpi	r24, 0x03	; 3
    3de0:	90 f0       	brcs	.+36     	; 0x3e06 <_Z19gprs_connect_statusv+0x2cc>
    3de2:	e4 ee       	ldi	r30, 0xE4	; 228
    3de4:	f2 e1       	ldi	r31, 0x12	; 18
    3de6:	13 8a       	std	Z+19, r1	; 0x13
    3de8:	82 ec       	ldi	r24, 0xC2	; 194
    3dea:	86 8b       	std	Z+22, r24	; 0x16
    3dec:	83 e2       	ldi	r24, 0x23	; 35
    3dee:	80 93 15 02 	sts	0x0215, r24	; 0x800215 <_ZZ19gprs_connect_statusvE17gprs_connct_state>
    3df2:	10 92 16 0c 	sts	0x0C16, r1	; 0x800c16 <_ZZ19gprs_connect_statusvE16gprs_retry_count>
    3df6:	81 e0       	ldi	r24, 0x01	; 1
    3df8:	07 c0       	rjmp	.+14     	; 0x3e08 <_Z19gprs_connect_statusv+0x2ce>
    3dfa:	82 e0       	ldi	r24, 0x02	; 2
    3dfc:	05 c0       	rjmp	.+10     	; 0x3e08 <_Z19gprs_connect_statusv+0x2ce>
    3dfe:	82 e0       	ldi	r24, 0x02	; 2
    3e00:	03 c0       	rjmp	.+6      	; 0x3e08 <_Z19gprs_connect_statusv+0x2ce>
    3e02:	82 e0       	ldi	r24, 0x02	; 2
    3e04:	01 c0       	rjmp	.+2      	; 0x3e08 <_Z19gprs_connect_statusv+0x2ce>
    3e06:	82 e0       	ldi	r24, 0x02	; 2
    3e08:	c7 57       	subi	r28, 0x77	; 119
    3e0a:	df 4f       	sbci	r29, 0xFF	; 255
    3e0c:	0f b6       	in	r0, 0x3f	; 63
    3e0e:	f8 94       	cli
    3e10:	de bf       	out	0x3e, r29	; 62
    3e12:	0f be       	out	0x3f, r0	; 63
    3e14:	cd bf       	out	0x3d, r28	; 61
    3e16:	df 91       	pop	r29
    3e18:	cf 91       	pop	r28
    3e1a:	1f 91       	pop	r17
    3e1c:	08 95       	ret

00003e1e <_Z12http_connectv>:
    3e1e:	cf 93       	push	r28
    3e20:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <_ZZ12http_connectvE10http_state>
    3e24:	81 30       	cpi	r24, 0x01	; 1
    3e26:	19 f0       	breq	.+6      	; 0x3e2e <_Z12http_connectv+0x10>
    3e28:	82 30       	cpi	r24, 0x02	; 2
    3e2a:	b1 f0       	breq	.+44     	; 0x3e58 <_Z12http_connectv+0x3a>
    3e2c:	7b c0       	rjmp	.+246    	; 0x3f24 <_Z12http_connectv+0x106>
    3e2e:	62 e0       	ldi	r22, 0x02	; 2
    3e30:	70 e0       	ldi	r23, 0x00	; 0
    3e32:	8e e2       	ldi	r24, 0x2E	; 46
    3e34:	95 e0       	ldi	r25, 0x05	; 5
    3e36:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <_Z12UWriteStringPKci>
    3e3a:	80 e0       	ldi	r24, 0x00	; 0
    3e3c:	90 e0       	ldi	r25, 0x00	; 0
    3e3e:	0e 94 d7 09 	call	0x13ae	; 0x13ae <_Z13flushRxBufferi>
    3e42:	60 e0       	ldi	r22, 0x00	; 0
    3e44:	70 e0       	ldi	r23, 0x00	; 0
    3e46:	88 e3       	ldi	r24, 0x38	; 56
    3e48:	95 e0       	ldi	r25, 0x05	; 5
    3e4a:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <_Z12UWriteStringPKci>
    3e4e:	82 e0       	ldi	r24, 0x02	; 2
    3e50:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <_ZZ12http_connectvE10http_state>
    3e54:	c2 e0       	ldi	r28, 0x02	; 2
    3e56:	69 c0       	rjmp	.+210    	; 0x3f2a <_Z12http_connectv+0x10c>
    3e58:	85 e4       	ldi	r24, 0x45	; 69
    3e5a:	95 e0       	ldi	r25, 0x05	; 5
    3e5c:	0e 94 fc 45 	call	0x8bf8	; 0x8bf8 <_Z18check_string_nobufPKc>
    3e60:	81 30       	cpi	r24, 0x01	; 1
    3e62:	21 f0       	breq	.+8      	; 0x3e6c <_Z12http_connectv+0x4e>
    3e64:	78 f1       	brcs	.+94     	; 0x3ec4 <_Z12http_connectv+0xa6>
    3e66:	82 30       	cpi	r24, 0x02	; 2
    3e68:	f9 f0       	breq	.+62     	; 0x3ea8 <_Z12http_connectv+0x8a>
    3e6a:	5e c0       	rjmp	.+188    	; 0x3f28 <_Z12http_connectv+0x10a>
    3e6c:	62 e0       	ldi	r22, 0x02	; 2
    3e6e:	70 e0       	ldi	r23, 0x00	; 0
    3e70:	88 e4       	ldi	r24, 0x48	; 72
    3e72:	95 e0       	ldi	r25, 0x05	; 5
    3e74:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <_Z12UWriteStringPKci>
    3e78:	81 e0       	ldi	r24, 0x01	; 1
    3e7a:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <_ZZ12http_connectvE10http_state>
    3e7e:	80 91 13 0c 	lds	r24, 0x0C13	; 0x800c13 <_ZZ12http_connectvE14http_retry_cnt>
    3e82:	91 e0       	ldi	r25, 0x01	; 1
    3e84:	98 0f       	add	r25, r24
    3e86:	90 93 13 0c 	sts	0x0C13, r25	; 0x800c13 <_ZZ12http_connectvE14http_retry_cnt>
    3e8a:	83 30       	cpi	r24, 0x03	; 3
    3e8c:	38 f0       	brcs	.+14     	; 0x3e9c <_Z12http_connectv+0x7e>
    3e8e:	82 ec       	ldi	r24, 0xC2	; 194
    3e90:	80 93 4c 0c 	sts	0x0C4C, r24	; 0x800c4c <http>
    3e94:	10 92 13 0c 	sts	0x0C13, r1	; 0x800c13 <_ZZ12http_connectvE14http_retry_cnt>
    3e98:	c1 e0       	ldi	r28, 0x01	; 1
    3e9a:	01 c0       	rjmp	.+2      	; 0x3e9e <_Z12http_connectv+0x80>
    3e9c:	c2 e0       	ldi	r28, 0x02	; 2
    3e9e:	80 e0       	ldi	r24, 0x00	; 0
    3ea0:	90 e0       	ldi	r25, 0x00	; 0
    3ea2:	0e 94 d7 09 	call	0x13ae	; 0x13ae <_Z13flushRxBufferi>
    3ea6:	41 c0       	rjmp	.+130    	; 0x3f2a <_Z12http_connectv+0x10c>
    3ea8:	62 e0       	ldi	r22, 0x02	; 2
    3eaa:	70 e0       	ldi	r23, 0x00	; 0
    3eac:	8f e4       	ldi	r24, 0x4F	; 79
    3eae:	95 e0       	ldi	r25, 0x05	; 5
    3eb0:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <_Z12UWriteStringPKci>
    3eb4:	10 92 13 0c 	sts	0x0C13, r1	; 0x800c13 <_ZZ12http_connectvE14http_retry_cnt>
    3eb8:	10 92 12 0c 	sts	0x0C12, r1	; 0x800c12 <_ZZ12http_connectvE7timeout+0x1>
    3ebc:	10 92 11 0c 	sts	0x0C11, r1	; 0x800c11 <_ZZ12http_connectvE7timeout>
    3ec0:	c2 e0       	ldi	r28, 0x02	; 2
    3ec2:	33 c0       	rjmp	.+102    	; 0x3f2a <_Z12http_connectv+0x10c>
    3ec4:	62 e0       	ldi	r22, 0x02	; 2
    3ec6:	70 e0       	ldi	r23, 0x00	; 0
    3ec8:	86 e5       	ldi	r24, 0x56	; 86
    3eca:	95 e0       	ldi	r25, 0x05	; 5
    3ecc:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <_Z12UWriteStringPKci>
    3ed0:	80 91 11 0c 	lds	r24, 0x0C11	; 0x800c11 <_ZZ12http_connectvE7timeout>
    3ed4:	90 91 12 0c 	lds	r25, 0x0C12	; 0x800c12 <_ZZ12http_connectvE7timeout+0x1>
    3ed8:	8a 30       	cpi	r24, 0x0A	; 10
    3eda:	91 05       	cpc	r25, r1
    3edc:	38 f4       	brcc	.+14     	; 0x3eec <_Z12http_connectv+0xce>
    3ede:	01 96       	adiw	r24, 0x01	; 1
    3ee0:	90 93 12 0c 	sts	0x0C12, r25	; 0x800c12 <_ZZ12http_connectvE7timeout+0x1>
    3ee4:	80 93 11 0c 	sts	0x0C11, r24	; 0x800c11 <_ZZ12http_connectvE7timeout>
    3ee8:	c2 e0       	ldi	r28, 0x02	; 2
    3eea:	1f c0       	rjmp	.+62     	; 0x3f2a <_Z12http_connectv+0x10c>
    3eec:	10 92 12 0c 	sts	0x0C12, r1	; 0x800c12 <_ZZ12http_connectvE7timeout+0x1>
    3ef0:	10 92 11 0c 	sts	0x0C11, r1	; 0x800c11 <_ZZ12http_connectvE7timeout>
    3ef4:	81 e0       	ldi	r24, 0x01	; 1
    3ef6:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <_ZZ12http_connectvE10http_state>
    3efa:	80 91 13 0c 	lds	r24, 0x0C13	; 0x800c13 <_ZZ12http_connectvE14http_retry_cnt>
    3efe:	91 e0       	ldi	r25, 0x01	; 1
    3f00:	98 0f       	add	r25, r24
    3f02:	90 93 13 0c 	sts	0x0C13, r25	; 0x800c13 <_ZZ12http_connectvE14http_retry_cnt>
    3f06:	83 30       	cpi	r24, 0x03	; 3
    3f08:	38 f0       	brcs	.+14     	; 0x3f18 <_Z12http_connectv+0xfa>
    3f0a:	82 ec       	ldi	r24, 0xC2	; 194
    3f0c:	80 93 4c 0c 	sts	0x0C4C, r24	; 0x800c4c <http>
    3f10:	10 92 13 0c 	sts	0x0C13, r1	; 0x800c13 <_ZZ12http_connectvE14http_retry_cnt>
    3f14:	c1 e0       	ldi	r28, 0x01	; 1
    3f16:	01 c0       	rjmp	.+2      	; 0x3f1a <_Z12http_connectv+0xfc>
    3f18:	c2 e0       	ldi	r28, 0x02	; 2
    3f1a:	80 e0       	ldi	r24, 0x00	; 0
    3f1c:	90 e0       	ldi	r25, 0x00	; 0
    3f1e:	0e 94 d7 09 	call	0x13ae	; 0x13ae <_Z13flushRxBufferi>
    3f22:	03 c0       	rjmp	.+6      	; 0x3f2a <_Z12http_connectv+0x10c>
    3f24:	c2 e0       	ldi	r28, 0x02	; 2
    3f26:	01 c0       	rjmp	.+2      	; 0x3f2a <_Z12http_connectv+0x10c>
    3f28:	c2 e0       	ldi	r28, 0x02	; 2
    3f2a:	8c 2f       	mov	r24, r28
    3f2c:	cf 91       	pop	r28
    3f2e:	08 95       	ret

00003f30 <_Z10http_closev>:
    3f30:	cf 93       	push	r28
    3f32:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <_ZZ10http_closevE10http_state>
    3f36:	80 31       	cpi	r24, 0x10	; 16
    3f38:	19 f0       	breq	.+6      	; 0x3f40 <_Z10http_closev+0x10>
    3f3a:	81 31       	cpi	r24, 0x11	; 17
    3f3c:	91 f0       	breq	.+36     	; 0x3f62 <_Z10http_closev+0x32>
    3f3e:	7e c0       	rjmp	.+252    	; 0x403c <_Z10http_closev+0x10c>
    3f40:	62 e0       	ldi	r22, 0x02	; 2
    3f42:	70 e0       	ldi	r23, 0x00	; 0
    3f44:	8d e5       	ldi	r24, 0x5D	; 93
    3f46:	95 e0       	ldi	r25, 0x05	; 5
    3f48:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <_Z12UWriteStringPKci>
    3f4c:	60 e0       	ldi	r22, 0x00	; 0
    3f4e:	70 e0       	ldi	r23, 0x00	; 0
    3f50:	88 e6       	ldi	r24, 0x68	; 104
    3f52:	95 e0       	ldi	r25, 0x05	; 5
    3f54:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <_Z12UWriteStringPKci>
    3f58:	81 e1       	ldi	r24, 0x11	; 17
    3f5a:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <_ZZ10http_closevE10http_state>
    3f5e:	c2 e0       	ldi	r28, 0x02	; 2
    3f60:	70 c0       	rjmp	.+224    	; 0x4042 <_Z10http_closev+0x112>
    3f62:	85 e4       	ldi	r24, 0x45	; 69
    3f64:	95 e0       	ldi	r25, 0x05	; 5
    3f66:	0e 94 fc 45 	call	0x8bf8	; 0x8bf8 <_Z18check_string_nobufPKc>
    3f6a:	81 30       	cpi	r24, 0x01	; 1
    3f6c:	21 f0       	breq	.+8      	; 0x3f76 <_Z10http_closev+0x46>
    3f6e:	b0 f1       	brcs	.+108    	; 0x3fdc <_Z10http_closev+0xac>
    3f70:	82 30       	cpi	r24, 0x02	; 2
    3f72:	f9 f0       	breq	.+62     	; 0x3fb2 <_Z10http_closev+0x82>
    3f74:	65 c0       	rjmp	.+202    	; 0x4040 <_Z10http_closev+0x110>
    3f76:	62 e0       	ldi	r22, 0x02	; 2
    3f78:	70 e0       	ldi	r23, 0x00	; 0
    3f7a:	85 e7       	ldi	r24, 0x75	; 117
    3f7c:	95 e0       	ldi	r25, 0x05	; 5
    3f7e:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <_Z12UWriteStringPKci>
    3f82:	80 e1       	ldi	r24, 0x10	; 16
    3f84:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <_ZZ10http_closevE10http_state>
    3f88:	80 91 0b 0c 	lds	r24, 0x0C0B	; 0x800c0b <_ZZ10http_closevE14http_retry_cnt>
    3f8c:	91 e0       	ldi	r25, 0x01	; 1
    3f8e:	98 0f       	add	r25, r24
    3f90:	90 93 0b 0c 	sts	0x0C0B, r25	; 0x800c0b <_ZZ10http_closevE14http_retry_cnt>
    3f94:	83 30       	cpi	r24, 0x03	; 3
    3f96:	38 f0       	brcs	.+14     	; 0x3fa6 <_Z10http_closev+0x76>
    3f98:	81 ed       	ldi	r24, 0xD1	; 209
    3f9a:	80 93 4c 0c 	sts	0x0C4C, r24	; 0x800c4c <http>
    3f9e:	10 92 0b 0c 	sts	0x0C0B, r1	; 0x800c0b <_ZZ10http_closevE14http_retry_cnt>
    3fa2:	c1 e0       	ldi	r28, 0x01	; 1
    3fa4:	01 c0       	rjmp	.+2      	; 0x3fa8 <_Z10http_closev+0x78>
    3fa6:	c2 e0       	ldi	r28, 0x02	; 2
    3fa8:	80 e0       	ldi	r24, 0x00	; 0
    3faa:	90 e0       	ldi	r25, 0x00	; 0
    3fac:	0e 94 d7 09 	call	0x13ae	; 0x13ae <_Z13flushRxBufferi>
    3fb0:	48 c0       	rjmp	.+144    	; 0x4042 <_Z10http_closev+0x112>
    3fb2:	62 e0       	ldi	r22, 0x02	; 2
    3fb4:	70 e0       	ldi	r23, 0x00	; 0
    3fb6:	8d e7       	ldi	r24, 0x7D	; 125
    3fb8:	95 e0       	ldi	r25, 0x05	; 5
    3fba:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <_Z12UWriteStringPKci>
    3fbe:	80 e1       	ldi	r24, 0x10	; 16
    3fc0:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <_ZZ10http_closevE10http_state>
    3fc4:	80 e0       	ldi	r24, 0x00	; 0
    3fc6:	90 e0       	ldi	r25, 0x00	; 0
    3fc8:	0e 94 d7 09 	call	0x13ae	; 0x13ae <_Z13flushRxBufferi>
    3fcc:	10 92 0b 0c 	sts	0x0C0B, r1	; 0x800c0b <_ZZ10http_closevE14http_retry_cnt>
    3fd0:	10 92 0a 0c 	sts	0x0C0A, r1	; 0x800c0a <_ZZ10http_closevE7timeout+0x1>
    3fd4:	10 92 09 0c 	sts	0x0C09, r1	; 0x800c09 <_ZZ10http_closevE7timeout>
    3fd8:	c0 e0       	ldi	r28, 0x00	; 0
    3fda:	33 c0       	rjmp	.+102    	; 0x4042 <_Z10http_closev+0x112>
    3fdc:	62 e0       	ldi	r22, 0x02	; 2
    3fde:	70 e0       	ldi	r23, 0x00	; 0
    3fe0:	85 e8       	ldi	r24, 0x85	; 133
    3fe2:	95 e0       	ldi	r25, 0x05	; 5
    3fe4:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <_Z12UWriteStringPKci>
    3fe8:	80 91 09 0c 	lds	r24, 0x0C09	; 0x800c09 <_ZZ10http_closevE7timeout>
    3fec:	90 91 0a 0c 	lds	r25, 0x0C0A	; 0x800c0a <_ZZ10http_closevE7timeout+0x1>
    3ff0:	8a 30       	cpi	r24, 0x0A	; 10
    3ff2:	91 05       	cpc	r25, r1
    3ff4:	38 f4       	brcc	.+14     	; 0x4004 <_Z10http_closev+0xd4>
    3ff6:	01 96       	adiw	r24, 0x01	; 1
    3ff8:	90 93 0a 0c 	sts	0x0C0A, r25	; 0x800c0a <_ZZ10http_closevE7timeout+0x1>
    3ffc:	80 93 09 0c 	sts	0x0C09, r24	; 0x800c09 <_ZZ10http_closevE7timeout>
    4000:	c2 e0       	ldi	r28, 0x02	; 2
    4002:	1f c0       	rjmp	.+62     	; 0x4042 <_Z10http_closev+0x112>
    4004:	10 92 0a 0c 	sts	0x0C0A, r1	; 0x800c0a <_ZZ10http_closevE7timeout+0x1>
    4008:	10 92 09 0c 	sts	0x0C09, r1	; 0x800c09 <_ZZ10http_closevE7timeout>
    400c:	80 e1       	ldi	r24, 0x10	; 16
    400e:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <_ZZ10http_closevE10http_state>
    4012:	80 91 0b 0c 	lds	r24, 0x0C0B	; 0x800c0b <_ZZ10http_closevE14http_retry_cnt>
    4016:	91 e0       	ldi	r25, 0x01	; 1
    4018:	98 0f       	add	r25, r24
    401a:	90 93 0b 0c 	sts	0x0C0B, r25	; 0x800c0b <_ZZ10http_closevE14http_retry_cnt>
    401e:	83 30       	cpi	r24, 0x03	; 3
    4020:	38 f0       	brcs	.+14     	; 0x4030 <_Z10http_closev+0x100>
    4022:	81 ed       	ldi	r24, 0xD1	; 209
    4024:	80 93 4c 0c 	sts	0x0C4C, r24	; 0x800c4c <http>
    4028:	10 92 0b 0c 	sts	0x0C0B, r1	; 0x800c0b <_ZZ10http_closevE14http_retry_cnt>
    402c:	c1 e0       	ldi	r28, 0x01	; 1
    402e:	01 c0       	rjmp	.+2      	; 0x4032 <_Z10http_closev+0x102>
    4030:	c2 e0       	ldi	r28, 0x02	; 2
    4032:	80 e0       	ldi	r24, 0x00	; 0
    4034:	90 e0       	ldi	r25, 0x00	; 0
    4036:	0e 94 d7 09 	call	0x13ae	; 0x13ae <_Z13flushRxBufferi>
    403a:	03 c0       	rjmp	.+6      	; 0x4042 <_Z10http_closev+0x112>
    403c:	c2 e0       	ldi	r28, 0x02	; 2
    403e:	01 c0       	rjmp	.+2      	; 0x4042 <_Z10http_closev+0x112>
    4040:	c2 e0       	ldi	r28, 0x02	; 2
    4042:	8c 2f       	mov	r24, r28
    4044:	cf 91       	pop	r28
    4046:	08 95       	ret

00004048 <_Z11get_rx_dataPc>:
    4048:	0f 93       	push	r16
    404a:	1f 93       	push	r17
    404c:	cf 93       	push	r28
    404e:	df 93       	push	r29
    4050:	00 97       	sbiw	r24, 0x00	; 0
    4052:	a9 f0       	breq	.+42     	; 0x407e <_Z11get_rx_dataPc+0x36>
    4054:	ec 01       	movw	r28, r24
    4056:	08 ec       	ldi	r16, 0xC8	; 200
    4058:	11 e1       	ldi	r17, 0x11	; 17
    405a:	f8 01       	movw	r30, r16
    405c:	40 81       	ld	r20, Z
    405e:	51 81       	ldd	r21, Z+1	; 0x01
    4060:	60 e5       	ldi	r22, 0x50	; 80
    4062:	7c e0       	ldi	r23, 0x0C	; 12
    4064:	0e 94 a6 47 	call	0x8f4c	; 0x8f4c <memcpy>
    4068:	f8 01       	movw	r30, r16
    406a:	80 81       	ld	r24, Z
    406c:	91 81       	ldd	r25, Z+1	; 0x01
    406e:	c8 0f       	add	r28, r24
    4070:	d9 1f       	adc	r29, r25
    4072:	18 82       	st	Y, r1
    4074:	80 81       	ld	r24, Z
    4076:	91 81       	ldd	r25, Z+1	; 0x01
    4078:	11 82       	std	Z+1, r1	; 0x01
    407a:	10 82       	st	Z, r1
    407c:	02 c0       	rjmp	.+4      	; 0x4082 <_Z11get_rx_dataPc+0x3a>
    407e:	80 e0       	ldi	r24, 0x00	; 0
    4080:	90 e0       	ldi	r25, 0x00	; 0
    4082:	df 91       	pop	r29
    4084:	cf 91       	pop	r28
    4086:	1f 91       	pop	r17
    4088:	0f 91       	pop	r16
    408a:	08 95       	ret

0000408c <_Z19setGPRSConfigErrStsc>:
    408c:	80 93 f9 12 	sts	0x12F9, r24	; 0x8012f9 <gprs+0x15>
    4090:	08 95       	ret

00004092 <_Z14getGPRSConnStsv>:
    4092:	80 91 f8 12 	lds	r24, 0x12F8	; 0x8012f8 <gprs+0x14>
    4096:	08 95       	ret

00004098 <_Z14setGPRSConnSts13gprs_status_t>:
    4098:	80 93 f8 12 	sts	0x12F8, r24	; 0x8012f8 <gprs+0x14>
    409c:	08 95       	ret

0000409e <_Z14setGPRSSrvrSts13gprs_status_t>:
    409e:	80 93 f7 12 	sts	0x12F7, r24	; 0x8012f7 <gprs+0x13>
    40a2:	08 95       	ret

000040a4 <_Z8set_imeiPc>:


void set_imei(char *tmpstr)
{
    40a4:	cf 93       	push	r28
    40a6:	df 93       	push	r29
    40a8:	fc 01       	movw	r30, r24
	memset(&gprs.imei,0,IMEI_NUM_LEN);
    40aa:	8f e0       	ldi	r24, 0x0F	; 15
    40ac:	a4 ee       	ldi	r26, 0xE4	; 228
    40ae:	b2 e1       	ldi	r27, 0x12	; 18
    40b0:	ed 01       	movw	r28, r26
    40b2:	19 92       	st	Y+, r1
    40b4:	8a 95       	dec	r24
    40b6:	e9 f7       	brne	.-6      	; 0x40b2 <_Z8set_imeiPc+0xe>
	memcpy(&gprs.imei,tmpstr,IMEI_NUM_LEN);
    40b8:	9f e0       	ldi	r25, 0x0F	; 15
    40ba:	01 90       	ld	r0, Z+
    40bc:	0d 92       	st	X+, r0
    40be:	9a 95       	dec	r25
    40c0:	e1 f7       	brne	.-8      	; 0x40ba <_Z8set_imeiPc+0x16>
}
    40c2:	df 91       	pop	r29
    40c4:	cf 91       	pop	r28
    40c6:	08 95       	ret

000040c8 <_Z12gprs_connectv>:
	online_cfg.online_cfg_state = CFG_VER_CNT;
}
#endif

con_status_t gprs_connect(void)
{
    40c8:	0f 93       	push	r16
    40ca:	1f 93       	push	r17
    40cc:	cf 93       	push	r28
    40ce:	df 93       	push	r29
    40d0:	cd b7       	in	r28, 0x3d	; 61
    40d2:	de b7       	in	r29, 0x3e	; 62
    40d4:	c9 58       	subi	r28, 0x89	; 137
    40d6:	d1 09       	sbc	r29, r1
    40d8:	0f b6       	in	r0, 0x3f	; 63
    40da:	f8 94       	cli
    40dc:	de bf       	out	0x3e, r29	; 62
    40de:	0f be       	out	0x3f, r0	; 63
    40e0:	cd bf       	out	0x3d, r28	; 61
	con_status_t sts = CON_IN_PRG;
	static char gprs_retry_count = 0, sim_module_reset = 0;
	static unsigned int timeout = 0;			//Can be used with all commands
	int num_byte = 0;
    40e2:	1a 82       	std	Y+2, r1	; 0x02
    40e4:	19 82       	std	Y+1, r1	; 0x01

	static gprs_connct_state_t gprs_connct_state = GPRS_CONNCT_POWER_UP;	
	
	switch(gprs_connct_state)
    40e6:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <_ZZ12gprs_connectvE17gprs_connct_state>
    40ea:	90 e0       	ldi	r25, 0x00	; 0
    40ec:	8e 32       	cpi	r24, 0x2E	; 46
    40ee:	91 05       	cpc	r25, r1
    40f0:	08 f0       	brcs	.+2      	; 0x40f4 <_Z12gprs_connectv+0x2c>
    40f2:	29 c7       	rjmp	.+3666   	; 0x4f46 <_Z12gprs_connectv+0xe7e>
    40f4:	fc 01       	movw	r30, r24
    40f6:	88 27       	eor	r24, r24
    40f8:	e6 53       	subi	r30, 0x36	; 54
    40fa:	ff 4f       	sbci	r31, 0xFF	; 255
    40fc:	8f 4f       	sbci	r24, 0xFF	; 255
    40fe:	0c 94 fa 46 	jmp	0x8df4	; 0x8df4 <__tablejump2__>
	{
		case GPRS_CONNCT_POWER_UP:
		{
			if (timeout++ >= GSM_WARMUP_SECS)		//not getting expected data,
    4102:	80 91 1a 0c 	lds	r24, 0x0C1A	; 0x800c1a <_ZZ12gprs_connectvE7timeout>
    4106:	90 91 1b 0c 	lds	r25, 0x0C1B	; 0x800c1b <_ZZ12gprs_connectvE7timeout+0x1>
    410a:	9c 01       	movw	r18, r24
    410c:	2f 5f       	subi	r18, 0xFF	; 255
    410e:	3f 4f       	sbci	r19, 0xFF	; 255
    4110:	30 93 1b 0c 	sts	0x0C1B, r19	; 0x800c1b <_ZZ12gprs_connectvE7timeout+0x1>
    4114:	20 93 1a 0c 	sts	0x0C1A, r18	; 0x800c1a <_ZZ12gprs_connectvE7timeout>
    4118:	84 36       	cpi	r24, 0x64	; 100
    411a:	91 05       	cpc	r25, r1
    411c:	08 f4       	brcc	.+2      	; 0x4120 <_Z12gprs_connectv+0x58>
    411e:	17 c7       	rjmp	.+3630   	; 0x4f4e <_Z12gprs_connectv+0xe86>
			{
				gprs_connct_state = GPRS_CONNCT_CMD_ECHO_OFF;
    4120:	82 e0       	ldi	r24, 0x02	; 2
    4122:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <_ZZ12gprs_connectvE17gprs_connct_state>
				timeout = 0;
    4126:	10 92 1b 0c 	sts	0x0C1B, r1	; 0x800c1b <_ZZ12gprs_connectvE7timeout+0x1>
    412a:	10 92 1a 0c 	sts	0x0C1A, r1	; 0x800c1a <_ZZ12gprs_connectvE7timeout>
    412e:	4a c7       	rjmp	.+3732   	; 0x4fc4 <_Z12gprs_connectv+0xefc>
		break;
		
		
		case GPRS_CONNCT_CMD_ECHO_OFF:
		{
			UWriteString("ATE0\r", GPRS_UART);
    4130:	60 e0       	ldi	r22, 0x00	; 0
    4132:	70 e0       	ldi	r23, 0x00	; 0
    4134:	8b e9       	ldi	r24, 0x9B	; 155
    4136:	95 e0       	ldi	r25, 0x05	; 5
    4138:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <_Z12UWriteStringPKci>
#ifdef GPRS_DEBUG
UWriteString("GR:e_of", UART_PC);
    413c:	62 e0       	ldi	r22, 0x02	; 2
    413e:	70 e0       	ldi	r23, 0x00	; 0
    4140:	81 ea       	ldi	r24, 0xA1	; 161
    4142:	95 e0       	ldi	r25, 0x05	; 5
    4144:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <_Z12UWriteStringPKci>
#endif
			gprs_connct_state = GPRS_CONNCT_RSP_ECHO_OFF;
    4148:	83 e0       	ldi	r24, 0x03	; 3
    414a:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <_ZZ12gprs_connectvE17gprs_connct_state>
}
#endif

con_status_t gprs_connect(void)
{
	con_status_t sts = CON_IN_PRG;
    414e:	82 e0       	ldi	r24, 0x02	; 2
UWriteString("GR:e_of", UART_PC);
#endif
			gprs_connct_state = GPRS_CONNCT_RSP_ECHO_OFF;
			
		}
		break;
    4150:	39 c7       	rjmp	.+3698   	; 0x4fc4 <_Z12gprs_connectv+0xefc>
		case GPRS_CONNCT_RSP_ECHO_OFF:
		
		{
			//Lets clear all buffers since we have not handle its response
#ifdef GPRS_DEBUG
UWriteString("GR:R_e_of", UART_PC);
    4152:	62 e0       	ldi	r22, 0x02	; 2
    4154:	70 e0       	ldi	r23, 0x00	; 0
    4156:	89 ea       	ldi	r24, 0xA9	; 169
    4158:	95 e0       	ldi	r25, 0x05	; 5
    415a:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <_Z12UWriteStringPKci>
#endif
			flushRxBuffer(GPRS_UART);
    415e:	80 e0       	ldi	r24, 0x00	; 0
    4160:	90 e0       	ldi	r25, 0x00	; 0
    4162:	0e 94 d7 09 	call	0x13ae	; 0x13ae <_Z13flushRxBufferi>
			
			gprs_connct_state = GPRS_CONNCT_CMD_IMEI;
    4166:	84 e0       	ldi	r24, 0x04	; 4
    4168:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <_ZZ12gprs_connectvE17gprs_connct_state>
}
#endif

con_status_t gprs_connect(void)
{
	con_status_t sts = CON_IN_PRG;
    416c:	82 e0       	ldi	r24, 0x02	; 2
#endif
			flushRxBuffer(GPRS_UART);
			
			gprs_connct_state = GPRS_CONNCT_CMD_IMEI;
		}
		break;
    416e:	2a c7       	rjmp	.+3668   	; 0x4fc4 <_Z12gprs_connectv+0xefc>
		
		case GPRS_CONNCT_CMD_IMEI:
		{
			
			flushTxBuffer(GPRS_UART);
    4170:	80 e0       	ldi	r24, 0x00	; 0
    4172:	90 e0       	ldi	r25, 0x00	; 0
    4174:	0e 94 b3 09 	call	0x1366	; 0x1366 <_Z13flushTxBufferi>
			UWriteString("AT+CGSN\r", GPRS_UART);
    4178:	60 e0       	ldi	r22, 0x00	; 0
    417a:	70 e0       	ldi	r23, 0x00	; 0
    417c:	83 eb       	ldi	r24, 0xB3	; 179
    417e:	95 e0       	ldi	r25, 0x05	; 5
    4180:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <_Z12UWriteStringPKci>
			
#ifdef GPRS_DEBUG
UWriteString("IMEI", UART_PC);
    4184:	62 e0       	ldi	r22, 0x02	; 2
    4186:	70 e0       	ldi	r23, 0x00	; 0
    4188:	8c eb       	ldi	r24, 0xBC	; 188
    418a:	95 e0       	ldi	r25, 0x05	; 5
    418c:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <_Z12UWriteStringPKci>
#endif
			gprs_connct_state = GPRS_CONNCT_RSP_IMEI;
    4190:	85 e0       	ldi	r24, 0x05	; 5
    4192:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <_ZZ12gprs_connectvE17gprs_connct_state>
}
#endif

con_status_t gprs_connect(void)
{
	con_status_t sts = CON_IN_PRG;
    4196:	82 e0       	ldi	r24, 0x02	; 2
#ifdef GPRS_DEBUG
UWriteString("IMEI", UART_PC);
#endif
			gprs_connct_state = GPRS_CONNCT_RSP_IMEI;
		}
		break;
    4198:	15 c7       	rjmp	.+3626   	; 0x4fc4 <_Z12gprs_connectv+0xefc>
		
		case GPRS_CONNCT_RSP_IMEI:
		{
			char tmpstr[IMEI_NUM_LEN + 9];
			static char wait_for_data = 0;
			int num_bytes = 0;
    419a:	cd 57       	subi	r28, 0x7D	; 125
    419c:	df 4f       	sbci	r29, 0xFF	; 255
    419e:	19 82       	std	Y+1, r1	; 0x01
    41a0:	18 82       	st	Y, r1
    41a2:	c3 58       	subi	r28, 0x83	; 131
    41a4:	d0 40       	sbci	r29, 0x00	; 0
			char resp = check_string("\r\n", tmpstr,&num_bytes);
    41a6:	ae 01       	movw	r20, r28
    41a8:	4d 57       	subi	r20, 0x7D	; 125
    41aa:	5f 4f       	sbci	r21, 0xFF	; 255
    41ac:	be 01       	movw	r22, r28
    41ae:	6d 5f       	subi	r22, 0xFD	; 253
    41b0:	7f 4f       	sbci	r23, 0xFF	; 255
    41b2:	8d e0       	ldi	r24, 0x0D	; 13
    41b4:	98 e0       	ldi	r25, 0x08	; 8
    41b6:	0e 94 75 45 	call	0x8aea	; 0x8aea <_Z12check_stringPKcPcPi>

			switch (resp)
    41ba:	81 30       	cpi	r24, 0x01	; 1
    41bc:	29 f0       	breq	.+10     	; 0x41c8 <_Z12gprs_connectv+0x100>
    41be:	08 f4       	brcc	.+2      	; 0x41c2 <_Z12gprs_connectv+0xfa>
    41c0:	87 c0       	rjmp	.+270    	; 0x42d0 <_Z12gprs_connectv+0x208>
    41c2:	82 30       	cpi	r24, 0x02	; 2
    41c4:	e1 f1       	breq	.+120    	; 0x423e <_Z12gprs_connectv+0x176>
    41c6:	b4 c0       	rjmp	.+360    	; 0x4330 <_Z12gprs_connectv+0x268>
			{
				case (GPRS_MATCH_FAIL):
				{
					gprs_connct_state = GPRS_CONNCT_CMD_IMEI;
    41c8:	84 e0       	ldi	r24, 0x04	; 4
    41ca:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <_ZZ12gprs_connectvE17gprs_connct_state>
					flushRxBuffer(GPRS_UART);
    41ce:	80 e0       	ldi	r24, 0x00	; 0
    41d0:	90 e0       	ldi	r25, 0x00	; 0
    41d2:	0e 94 d7 09 	call	0x13ae	; 0x13ae <_Z13flushRxBufferi>
					gprs_retry_count++;
    41d6:	80 91 19 0c 	lds	r24, 0x0C19	; 0x800c19 <_ZZ12gprs_connectvE16gprs_retry_count>
    41da:	8f 5f       	subi	r24, 0xFF	; 255
    41dc:	80 93 19 0c 	sts	0x0C19, r24	; 0x800c19 <_ZZ12gprs_connectvE16gprs_retry_count>
					if (gprs_retry_count >= GPRS_RETRY_CNT)
    41e0:	83 30       	cpi	r24, 0x03	; 3
    41e2:	08 f4       	brcc	.+2      	; 0x41e6 <_Z12gprs_connectv+0x11e>
    41e4:	a7 c0       	rjmp	.+334    	; 0x4334 <_Z12gprs_connectv+0x26c>
					{
						gprs_connct_state = GPRS_CONNCT_CMD_ECHO_OFF;
    41e6:	82 e0       	ldi	r24, 0x02	; 2
    41e8:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <_ZZ12gprs_connectvE17gprs_connct_state>
						
						gprs_retry_count = 0;
    41ec:	10 92 19 0c 	sts	0x0C19, r1	; 0x800c19 <_ZZ12gprs_connectvE16gprs_retry_count>
						
#ifdef GPRS_DEBUG
UWriteString("IMEI_R:mf", UART_PC);
    41f0:	62 e0       	ldi	r22, 0x02	; 2
    41f2:	70 e0       	ldi	r23, 0x00	; 0
    41f4:	81 ec       	ldi	r24, 0xC1	; 193
    41f6:	95 e0       	ldi	r25, 0x05	; 5
    41f8:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <_Z12UWriteStringPKci>
#endif
						if(++sim_module_reset >= SIM_MODULE_RESET_CNT)
    41fc:	80 91 18 0c 	lds	r24, 0x0C18	; 0x800c18 <_ZZ12gprs_connectvE16sim_module_reset>
    4200:	8f 5f       	subi	r24, 0xFF	; 255
    4202:	83 30       	cpi	r24, 0x03	; 3
    4204:	20 f4       	brcc	.+8      	; 0x420e <_Z12gprs_connectv+0x146>
    4206:	80 93 18 0c 	sts	0x0C18, r24	; 0x800c18 <_ZZ12gprs_connectvE16sim_module_reset>
}
#endif

con_status_t gprs_connect(void)
{
	con_status_t sts = CON_IN_PRG;
    420a:	82 e0       	ldi	r24, 0x02	; 2
    420c:	db c6       	rjmp	.+3510   	; 0x4fc4 <_Z12gprs_connectv+0xefc>
#ifdef GPRS_DEBUG
UWriteString("IMEI_R:mf", UART_PC);
#endif
						if(++sim_module_reset >= SIM_MODULE_RESET_CNT)
						{
							sim_module_reset = 0;
    420e:	10 92 18 0c 	sts	0x0C18, r1	; 0x800c18 <_ZZ12gprs_connectvE16sim_module_reset>
							gprs.module_status = NOT_AVBL;
    4212:	10 92 f4 12 	sts	0x12F4, r1	; 0x8012f4 <gprs+0x10>
							set_conn_state(CONNECT_POWER_ON);
    4216:	81 e0       	ldi	r24, 0x01	; 1
    4218:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <_Z14set_conn_state12conn_state_t>
							sts = CON_FAIL;
						
#ifdef GPRS_DEBUG
UWriteString("gprs_power_up:",UART_PC);
    421c:	62 e0       	ldi	r22, 0x02	; 2
    421e:	70 e0       	ldi	r23, 0x00	; 0
    4220:	8b ec       	ldi	r24, 0xCB	; 203
    4222:	95 e0       	ldi	r25, 0x05	; 5
    4224:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <_Z12UWriteStringPKci>
#endif
							gprs_connct_state = GPRS_CONNCT_POWER_UP;			
    4228:	81 e0       	ldi	r24, 0x01	; 1
    422a:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <_ZZ12gprs_connectvE17gprs_connct_state>
							gprs_retry_count = 0;
    422e:	10 92 19 0c 	sts	0x0C19, r1	; 0x800c19 <_ZZ12gprs_connectvE16gprs_retry_count>
							flushRxBuffer(GPRS_UART);
    4232:	80 e0       	ldi	r24, 0x00	; 0
    4234:	90 e0       	ldi	r25, 0x00	; 0
    4236:	0e 94 d7 09 	call	0x13ae	; 0x13ae <_Z13flushRxBufferi>
						if(++sim_module_reset >= SIM_MODULE_RESET_CNT)
						{
							sim_module_reset = 0;
							gprs.module_status = NOT_AVBL;
							set_conn_state(CONNECT_POWER_ON);
							sts = CON_FAIL;
    423a:	81 e0       	ldi	r24, 0x01	; 1
    423c:	c3 c6       	rjmp	.+3462   	; 0x4fc4 <_Z12gprs_connectv+0xefc>
				}
				break;
				case (GPRS_MATCH_OK):
				{
					
					if(num_bytes >= IMEI_NUM_LEN )
    423e:	cd 57       	subi	r28, 0x7D	; 125
    4240:	df 4f       	sbci	r29, 0xFF	; 255
    4242:	88 81       	ld	r24, Y
    4244:	99 81       	ldd	r25, Y+1	; 0x01
    4246:	c3 58       	subi	r28, 0x83	; 131
    4248:	d0 40       	sbci	r29, 0x00	; 0
    424a:	0f 97       	sbiw	r24, 0x0f	; 15
    424c:	5c f1       	brlt	.+86     	; 0x42a4 <_Z12gprs_connectv+0x1dc>
					{
						
						if(isStringDigit(tmpstr))
    424e:	ce 01       	movw	r24, r28
    4250:	03 96       	adiw	r24, 0x03	; 3
    4252:	0e 94 66 14 	call	0x28cc	; 0x28cc <_Z13isStringDigitPc>
    4256:	88 23       	and	r24, r24
    4258:	a1 f0       	breq	.+40     	; 0x4282 <_Z12gprs_connectv+0x1ba>
						{
							set_imei(tmpstr);
    425a:	ce 01       	movw	r24, r28
    425c:	03 96       	adiw	r24, 0x03	; 3
    425e:	22 df       	rcall	.-444    	; 0x40a4 <_Z8set_imeiPc>
							
	#ifdef GPRS_DEBUG
	UWriteString("IMEI_R", UART_PC);
    4260:	62 e0       	ldi	r22, 0x02	; 2
    4262:	70 e0       	ldi	r23, 0x00	; 0
    4264:	8a ed       	ldi	r24, 0xDA	; 218
    4266:	95 e0       	ldi	r25, 0x05	; 5
    4268:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <_Z12UWriteStringPKci>
	UWriteString((char*)gprs.imei,UART_PC);
    426c:	62 e0       	ldi	r22, 0x02	; 2
    426e:	70 e0       	ldi	r23, 0x00	; 0
    4270:	84 ee       	ldi	r24, 0xE4	; 228
    4272:	92 e1       	ldi	r25, 0x12	; 18
    4274:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <_Z12UWriteStringPKci>
	#endif
							gprs_connct_state = GPRS_CONNCT_CMD_CLTS;
    4278:	86 e2       	ldi	r24, 0x26	; 38
    427a:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <_ZZ12gprs_connectvE17gprs_connct_state>
}
#endif

con_status_t gprs_connect(void)
{
	con_status_t sts = CON_IN_PRG;
    427e:	82 e0       	ldi	r24, 0x02	; 2
    4280:	a1 c6       	rjmp	.+3394   	; 0x4fc4 <_Z12gprs_connectv+0xefc>
							gprs_connct_state = GPRS_CONNCT_CMD_CLTS;
							
						}
						else
						{
							gprs_connct_state = GPRS_CONNCT_CMD_ECHO_OFF;
    4282:	82 e0       	ldi	r24, 0x02	; 2
    4284:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <_ZZ12gprs_connectvE17gprs_connct_state>
#ifdef GPRS_DEBUG
UWriteString("IMEI_R:f", UART_PC);
    4288:	62 e0       	ldi	r22, 0x02	; 2
    428a:	70 e0       	ldi	r23, 0x00	; 0
    428c:	81 ee       	ldi	r24, 0xE1	; 225
    428e:	95 e0       	ldi	r25, 0x05	; 5
    4290:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <_Z12UWriteStringPKci>
UWriteString(tmpstr,UART_PC);
    4294:	62 e0       	ldi	r22, 0x02	; 2
    4296:	70 e0       	ldi	r23, 0x00	; 0
    4298:	ce 01       	movw	r24, r28
    429a:	03 96       	adiw	r24, 0x03	; 3
    429c:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <_Z12UWriteStringPKci>
#endif
							sts = CON_FAIL;
    42a0:	81 e0       	ldi	r24, 0x01	; 1
    42a2:	90 c6       	rjmp	.+3360   	; 0x4fc4 <_Z12gprs_connectv+0xefc>
						}
					}
					else if(wait_for_data++ >= IMEI_WAIT_TIME)
    42a4:	80 91 17 0c 	lds	r24, 0x0C17	; 0x800c17 <_ZZ12gprs_connectvE13wait_for_data>
    42a8:	85 30       	cpi	r24, 0x05	; 5
    42aa:	28 f4       	brcc	.+10     	; 0x42b6 <_Z12gprs_connectv+0x1ee>
    42ac:	8f 5f       	subi	r24, 0xFF	; 255
    42ae:	80 93 17 0c 	sts	0x0C17, r24	; 0x800c17 <_ZZ12gprs_connectvE13wait_for_data>
}
#endif

con_status_t gprs_connect(void)
{
	con_status_t sts = CON_IN_PRG;
    42b2:	82 e0       	ldi	r24, 0x02	; 2
    42b4:	87 c6       	rjmp	.+3342   	; 0x4fc4 <_Z12gprs_connectv+0xefc>
							sts = CON_FAIL;
						}
					}
					else if(wait_for_data++ >= IMEI_WAIT_TIME)
					{
						wait_for_data = 0;
    42b6:	10 92 17 0c 	sts	0x0C17, r1	; 0x800c17 <_ZZ12gprs_connectvE13wait_for_data>
						
						gprs_connct_state = GPRS_CONNCT_CMD_ECHO_OFF;
    42ba:	82 e0       	ldi	r24, 0x02	; 2
    42bc:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <_ZZ12gprs_connectvE17gprs_connct_state>
						sts = CON_FAIL;
#ifdef GPRS_DEBUG
UWriteString("IMEI_R:wf", UART_PC);
    42c0:	62 e0       	ldi	r22, 0x02	; 2
    42c2:	70 e0       	ldi	r23, 0x00	; 0
    42c4:	8a ee       	ldi	r24, 0xEA	; 234
    42c6:	95 e0       	ldi	r25, 0x05	; 5
    42c8:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <_Z12UWriteStringPKci>
					else if(wait_for_data++ >= IMEI_WAIT_TIME)
					{
						wait_for_data = 0;
						
						gprs_connct_state = GPRS_CONNCT_CMD_ECHO_OFF;
						sts = CON_FAIL;
    42cc:	81 e0       	ldi	r24, 0x01	; 1
    42ce:	7a c6       	rjmp	.+3316   	; 0x4fc4 <_Z12gprs_connectv+0xefc>
				}
				break;
				case (GPRS_NO_NEW_MSG):
				{
	
					if(timeout++ >= GPRS_RETRY_CNT)
    42d0:	80 91 1a 0c 	lds	r24, 0x0C1A	; 0x800c1a <_ZZ12gprs_connectvE7timeout>
    42d4:	90 91 1b 0c 	lds	r25, 0x0C1B	; 0x800c1b <_ZZ12gprs_connectvE7timeout+0x1>
    42d8:	83 30       	cpi	r24, 0x03	; 3
    42da:	91 05       	cpc	r25, r1
    42dc:	38 f4       	brcc	.+14     	; 0x42ec <_Z12gprs_connectv+0x224>
    42de:	01 96       	adiw	r24, 0x01	; 1
    42e0:	90 93 1b 0c 	sts	0x0C1B, r25	; 0x800c1b <_ZZ12gprs_connectvE7timeout+0x1>
    42e4:	80 93 1a 0c 	sts	0x0C1A, r24	; 0x800c1a <_ZZ12gprs_connectvE7timeout>
}
#endif

con_status_t gprs_connect(void)
{
	con_status_t sts = CON_IN_PRG;
    42e8:	82 e0       	ldi	r24, 0x02	; 2
    42ea:	6c c6       	rjmp	.+3288   	; 0x4fc4 <_Z12gprs_connectv+0xefc>
				case (GPRS_NO_NEW_MSG):
				{
	
					if(timeout++ >= GPRS_RETRY_CNT)
					{
						timeout = 0;
    42ec:	10 92 1b 0c 	sts	0x0C1B, r1	; 0x800c1b <_ZZ12gprs_connectvE7timeout+0x1>
    42f0:	10 92 1a 0c 	sts	0x0C1A, r1	; 0x800c1a <_ZZ12gprs_connectvE7timeout>
					
						if (gprs_retry_count++ >= GPRS_RETRY_CNT)
    42f4:	80 91 19 0c 	lds	r24, 0x0C19	; 0x800c19 <_ZZ12gprs_connectvE16gprs_retry_count>
    42f8:	91 e0       	ldi	r25, 0x01	; 1
    42fa:	98 0f       	add	r25, r24
    42fc:	90 93 19 0c 	sts	0x0C19, r25	; 0x800c19 <_ZZ12gprs_connectvE16gprs_retry_count>
    4300:	83 30       	cpi	r24, 0x03	; 3
    4302:	d0 f0       	brcs	.+52     	; 0x4338 <_Z12gprs_connectv+0x270>
						{
							gprs.module_status = NOT_AVBL;
    4304:	10 92 f4 12 	sts	0x12F4, r1	; 0x8012f4 <gprs+0x10>
							set_conn_state(CONNECT_POWER_ON);
    4308:	81 e0       	ldi	r24, 0x01	; 1
    430a:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <_Z14set_conn_state12conn_state_t>
							sts = CON_FAIL;
							
#ifdef GPRS_DEBUG
UWriteString("gprs_power_up:",UART_PC);
    430e:	62 e0       	ldi	r22, 0x02	; 2
    4310:	70 e0       	ldi	r23, 0x00	; 0
    4312:	8b ec       	ldi	r24, 0xCB	; 203
    4314:	95 e0       	ldi	r25, 0x05	; 5
    4316:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <_Z12UWriteStringPKci>
#endif
							gprs_connct_state = GPRS_CONNCT_POWER_UP;			//
    431a:	81 e0       	ldi	r24, 0x01	; 1
    431c:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <_ZZ12gprs_connectvE17gprs_connct_state>
							gprs_retry_count = 0;
    4320:	10 92 19 0c 	sts	0x0C19, r1	; 0x800c19 <_ZZ12gprs_connectvE16gprs_retry_count>
							flushRxBuffer(GPRS_UART);
    4324:	80 e0       	ldi	r24, 0x00	; 0
    4326:	90 e0       	ldi	r25, 0x00	; 0
    4328:	0e 94 d7 09 	call	0x13ae	; 0x13ae <_Z13flushRxBufferi>
					
						if (gprs_retry_count++ >= GPRS_RETRY_CNT)
						{
							gprs.module_status = NOT_AVBL;
							set_conn_state(CONNECT_POWER_ON);
							sts = CON_FAIL;
    432c:	81 e0       	ldi	r24, 0x01	; 1
    432e:	4a c6       	rjmp	.+3220   	; 0x4fc4 <_Z12gprs_connectv+0xefc>
}
#endif

con_status_t gprs_connect(void)
{
	con_status_t sts = CON_IN_PRG;
    4330:	82 e0       	ldi	r24, 0x02	; 2
    4332:	48 c6       	rjmp	.+3216   	; 0x4fc4 <_Z12gprs_connectv+0xefc>
    4334:	82 e0       	ldi	r24, 0x02	; 2
    4336:	46 c6       	rjmp	.+3212   	; 0x4fc4 <_Z12gprs_connectv+0xefc>
    4338:	82 e0       	ldi	r24, 0x02	; 2
					}
				}
				break;
			}
		}
		break;
    433a:	44 c6       	rjmp	.+3208   	; 0x4fc4 <_Z12gprs_connectv+0xefc>

		
		case GPRS_CONNCT_CMD_CFUN:
#ifdef GPRS_DEBUG
			UWriteString((char *)"cmd: CFUN", UART_PC);
    433c:	62 e0       	ldi	r22, 0x02	; 2
    433e:	70 e0       	ldi	r23, 0x00	; 0
    4340:	84 ef       	ldi	r24, 0xF4	; 244
    4342:	95 e0       	ldi	r25, 0x05	; 5
    4344:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <_Z12UWriteStringPKci>
#endif
			flushTxBuffer(GPRS_UART);
    4348:	80 e0       	ldi	r24, 0x00	; 0
    434a:	90 e0       	ldi	r25, 0x00	; 0
    434c:	0e 94 b3 09 	call	0x1366	; 0x1366 <_Z13flushTxBufferi>
			UWriteString((char *)"AT+CFUN?\r", GPRS_UART);
    4350:	60 e0       	ldi	r22, 0x00	; 0
    4352:	70 e0       	ldi	r23, 0x00	; 0
    4354:	8e ef       	ldi	r24, 0xFE	; 254
    4356:	95 e0       	ldi	r25, 0x05	; 5
    4358:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <_Z12UWriteStringPKci>
			gprs_connct_state = GPRS_CONNCT_RSP_CFUN;
    435c:	87 e0       	ldi	r24, 0x07	; 7
    435e:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <_ZZ12gprs_connectvE17gprs_connct_state>
}
#endif

con_status_t gprs_connect(void)
{
	con_status_t sts = CON_IN_PRG;
    4362:	82 e0       	ldi	r24, 0x02	; 2
			UWriteString((char *)"cmd: CFUN", UART_PC);
#endif
			flushTxBuffer(GPRS_UART);
			UWriteString((char *)"AT+CFUN?\r", GPRS_UART);
			gprs_connct_state = GPRS_CONNCT_RSP_CFUN;
		break;
    4364:	2f c6       	rjmp	.+3166   	; 0x4fc4 <_Z12gprs_connectv+0xefc>
		case GPRS_CONNCT_RSP_CFUN:
			switch (check_string_nobuf("+CFUN: 1"))
    4366:	88 e0       	ldi	r24, 0x08	; 8
    4368:	96 e0       	ldi	r25, 0x06	; 6
    436a:	0e 94 fc 45 	call	0x8bf8	; 0x8bf8 <_Z18check_string_nobufPKc>
    436e:	81 30       	cpi	r24, 0x01	; 1
    4370:	21 f0       	breq	.+8      	; 0x437a <_Z12gprs_connectv+0x2b2>
    4372:	a8 f1       	brcs	.+106    	; 0x43de <_Z12gprs_connectv+0x316>
    4374:	82 30       	cpi	r24, 0x02	; 2
    4376:	11 f1       	breq	.+68     	; 0x43bc <_Z12gprs_connectv+0x2f4>
    4378:	ec c5       	rjmp	.+3032   	; 0x4f52 <_Z12gprs_connectv+0xe8a>
		{
				case (GPRS_MATCH_FAIL):
#ifdef GPRS_DEBUG
					UWriteString((char *)"CFUN:f", UART_PC);
    437a:	62 e0       	ldi	r22, 0x02	; 2
    437c:	70 e0       	ldi	r23, 0x00	; 0
    437e:	81 e1       	ldi	r24, 0x11	; 17
    4380:	96 e0       	ldi	r25, 0x06	; 6
    4382:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <_Z12UWriteStringPKci>
#endif					
					gprs_connct_state = GPRS_CONNCT_CMD_CFUN;
    4386:	86 e0       	ldi	r24, 0x06	; 6
    4388:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <_ZZ12gprs_connectvE17gprs_connct_state>
			
			if (gprs_retry_count++ >= RETRY_CNT)
    438c:	80 91 19 0c 	lds	r24, 0x0C19	; 0x800c19 <_ZZ12gprs_connectvE16gprs_retry_count>
    4390:	83 30       	cpi	r24, 0x03	; 3
    4392:	28 f4       	brcc	.+10     	; 0x439e <_Z12gprs_connectv+0x2d6>
    4394:	8f 5f       	subi	r24, 0xFF	; 255
    4396:	80 93 19 0c 	sts	0x0C19, r24	; 0x800c19 <_ZZ12gprs_connectvE16gprs_retry_count>
}
#endif

con_status_t gprs_connect(void)
{
	con_status_t sts = CON_IN_PRG;
    439a:	82 e0       	ldi	r24, 0x02	; 2
    439c:	13 c6       	rjmp	.+3110   	; 0x4fc4 <_Z12gprs_connectv+0xefc>
#endif					
					gprs_connct_state = GPRS_CONNCT_CMD_CFUN;
			
			if (gprs_retry_count++ >= RETRY_CNT)
					{
						gprs_retry_count = 0;
    439e:	10 92 19 0c 	sts	0x0C19, r1	; 0x800c19 <_ZZ12gprs_connectvE16gprs_retry_count>
						
						gprs.module_status = NOT_AVBL;
    43a2:	e4 ee       	ldi	r30, 0xE4	; 228
    43a4:	f2 e1       	ldi	r31, 0x12	; 18
    43a6:	10 8a       	std	Z+16, r1	; 0x10
						
						gprs.errcode = CON_ERR_OFFSET + GPRS_CONNCT_RSP_CFUN;
    43a8:	87 ea       	ldi	r24, 0xA7	; 167
    43aa:	86 8b       	std	Z+22, r24	; 0x16
						sts = CON_FAIL;
						
						gprs_connct_state = GPRS_CONNCT_RESET;			//
    43ac:	10 92 16 02 	sts	0x0216, r1	; 0x800216 <_ZZ12gprs_connectvE17gprs_connct_state>
						timeout = 0;
    43b0:	10 92 1b 0c 	sts	0x0C1B, r1	; 0x800c1b <_ZZ12gprs_connectvE7timeout+0x1>
    43b4:	10 92 1a 0c 	sts	0x0C1A, r1	; 0x800c1a <_ZZ12gprs_connectvE7timeout>
						gprs_retry_count = 0;
						
						gprs.module_status = NOT_AVBL;
						
						gprs.errcode = CON_ERR_OFFSET + GPRS_CONNCT_RSP_CFUN;
						sts = CON_FAIL;
    43b8:	81 e0       	ldi	r24, 0x01	; 1
    43ba:	04 c6       	rjmp	.+3080   	; 0x4fc4 <_Z12gprs_connectv+0xefc>
						timeout = 0;
					}
					break;
				case (GPRS_MATCH_OK):
#ifdef GPRS_DEBUG
					UWriteString((char *)"CFUN:k", UART_PC);
    43bc:	62 e0       	ldi	r22, 0x02	; 2
    43be:	70 e0       	ldi	r23, 0x00	; 0
    43c0:	88 e1       	ldi	r24, 0x18	; 24
    43c2:	96 e0       	ldi	r25, 0x06	; 6
    43c4:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <_Z12UWriteStringPKci>
#endif					
					
					gprs_connct_state = GPRS_CONNCT_CMD_AT;
    43c8:	88 e0       	ldi	r24, 0x08	; 8
    43ca:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <_ZZ12gprs_connectvE17gprs_connct_state>
					gprs_retry_count = 0;
    43ce:	10 92 19 0c 	sts	0x0C19, r1	; 0x800c19 <_ZZ12gprs_connectvE16gprs_retry_count>
					timeout = 0;
    43d2:	10 92 1b 0c 	sts	0x0C1B, r1	; 0x800c1b <_ZZ12gprs_connectvE7timeout+0x1>
    43d6:	10 92 1a 0c 	sts	0x0C1A, r1	; 0x800c1a <_ZZ12gprs_connectvE7timeout>
}
#endif

con_status_t gprs_connect(void)
{
	con_status_t sts = CON_IN_PRG;
    43da:	82 e0       	ldi	r24, 0x02	; 2
#endif					
					
					gprs_connct_state = GPRS_CONNCT_CMD_AT;
					gprs_retry_count = 0;
					timeout = 0;
					break;
    43dc:	f3 c5       	rjmp	.+3046   	; 0x4fc4 <_Z12gprs_connectv+0xefc>
				case (GPRS_NO_NEW_MSG):
#ifdef GPRS_DEBUG
					UWriteString("CFUN:w", UART_PC);
    43de:	62 e0       	ldi	r22, 0x02	; 2
    43e0:	70 e0       	ldi	r23, 0x00	; 0
    43e2:	8f e1       	ldi	r24, 0x1F	; 31
    43e4:	96 e0       	ldi	r25, 0x06	; 6
    43e6:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <_Z12UWriteStringPKci>
#endif

					if(timeout++ >= CCALR_TIMEOUT)
    43ea:	80 91 1a 0c 	lds	r24, 0x0C1A	; 0x800c1a <_ZZ12gprs_connectvE7timeout>
    43ee:	90 91 1b 0c 	lds	r25, 0x0C1B	; 0x800c1b <_ZZ12gprs_connectvE7timeout+0x1>
    43f2:	8a 30       	cpi	r24, 0x0A	; 10
    43f4:	91 05       	cpc	r25, r1
    43f6:	38 f4       	brcc	.+14     	; 0x4406 <_Z12gprs_connectv+0x33e>
    43f8:	01 96       	adiw	r24, 0x01	; 1
    43fa:	90 93 1b 0c 	sts	0x0C1B, r25	; 0x800c1b <_ZZ12gprs_connectvE7timeout+0x1>
    43fe:	80 93 1a 0c 	sts	0x0C1A, r24	; 0x800c1a <_ZZ12gprs_connectvE7timeout>
}
#endif

con_status_t gprs_connect(void)
{
	con_status_t sts = CON_IN_PRG;
    4402:	82 e0       	ldi	r24, 0x02	; 2
    4404:	df c5       	rjmp	.+3006   	; 0x4fc4 <_Z12gprs_connectv+0xefc>
					UWriteString("CFUN:w", UART_PC);
#endif

					if(timeout++ >= CCALR_TIMEOUT)
					{
						timeout = 0;
    4406:	10 92 1b 0c 	sts	0x0C1B, r1	; 0x800c1b <_ZZ12gprs_connectvE7timeout+0x1>
    440a:	10 92 1a 0c 	sts	0x0C1A, r1	; 0x800c1a <_ZZ12gprs_connectvE7timeout>
					
						gprs_connct_state = GPRS_CONNCT_CMD_CFUN;
    440e:	86 e0       	ldi	r24, 0x06	; 6
    4410:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <_ZZ12gprs_connectvE17gprs_connct_state>
					
					if (gprs_retry_count++ >= RETRY_CNT)
    4414:	80 91 19 0c 	lds	r24, 0x0C19	; 0x800c19 <_ZZ12gprs_connectvE16gprs_retry_count>
    4418:	83 30       	cpi	r24, 0x03	; 3
    441a:	28 f4       	brcc	.+10     	; 0x4426 <_Z12gprs_connectv+0x35e>
    441c:	8f 5f       	subi	r24, 0xFF	; 255
    441e:	80 93 19 0c 	sts	0x0C19, r24	; 0x800c19 <_ZZ12gprs_connectvE16gprs_retry_count>
}
#endif

con_status_t gprs_connect(void)
{
	con_status_t sts = CON_IN_PRG;
    4422:	82 e0       	ldi	r24, 0x02	; 2
    4424:	cf c5       	rjmp	.+2974   	; 0x4fc4 <_Z12gprs_connectv+0xefc>
					
						gprs_connct_state = GPRS_CONNCT_CMD_CFUN;
					
					if (gprs_retry_count++ >= RETRY_CNT)
						{
							gprs_retry_count = 0;
    4426:	10 92 19 0c 	sts	0x0C19, r1	; 0x800c19 <_ZZ12gprs_connectvE16gprs_retry_count>
						
							gprs.module_status = NOT_AVBL;
    442a:	e4 ee       	ldi	r30, 0xE4	; 228
    442c:	f2 e1       	ldi	r31, 0x12	; 18
    442e:	10 8a       	std	Z+16, r1	; 0x10
						
							gprs.errcode = CON_ERR_OFFSET + GPRS_CONNCT_RSP_CFUN;
    4430:	87 ea       	ldi	r24, 0xA7	; 167
    4432:	86 8b       	std	Z+22, r24	; 0x16
							sts = CON_FAIL;
							
							gprs_connct_state = GPRS_CONNCT_RESET;			//
    4434:	10 92 16 02 	sts	0x0216, r1	; 0x800216 <_ZZ12gprs_connectvE17gprs_connct_state>
							gprs_retry_count = 0;
						
							gprs.module_status = NOT_AVBL;
						
							gprs.errcode = CON_ERR_OFFSET + GPRS_CONNCT_RSP_CFUN;
							sts = CON_FAIL;
    4438:	81 e0       	ldi	r24, 0x01	; 1
    443a:	c4 c5       	rjmp	.+2952   	; 0x4fc4 <_Z12gprs_connectv+0xefc>
		break;
		
		case GPRS_CONNCT_CMD_AT:
		{
#ifdef GPRS_DEBUG
			UWriteString((char *)"cmd: AT", UART_PC);
    443c:	62 e0       	ldi	r22, 0x02	; 2
    443e:	70 e0       	ldi	r23, 0x00	; 0
    4440:	86 e2       	ldi	r24, 0x26	; 38
    4442:	96 e0       	ldi	r25, 0x06	; 6
    4444:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <_Z12UWriteStringPKci>
#endif
			flushRxBuffer(GPRS_UART);
    4448:	80 e0       	ldi	r24, 0x00	; 0
    444a:	90 e0       	ldi	r25, 0x00	; 0
    444c:	0e 94 d7 09 	call	0x13ae	; 0x13ae <_Z13flushRxBufferi>
			UWriteString((char *)"AT\r", GPRS_UART);
    4450:	60 e0       	ldi	r22, 0x00	; 0
    4452:	70 e0       	ldi	r23, 0x00	; 0
    4454:	8e e2       	ldi	r24, 0x2E	; 46
    4456:	96 e0       	ldi	r25, 0x06	; 6
    4458:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <_Z12UWriteStringPKci>
			gprs_connct_state = GPRS_CONNCT_RSP_AT;
    445c:	89 e0       	ldi	r24, 0x09	; 9
    445e:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <_ZZ12gprs_connectvE17gprs_connct_state>
}
#endif

con_status_t gprs_connect(void)
{
	con_status_t sts = CON_IN_PRG;
    4462:	82 e0       	ldi	r24, 0x02	; 2
#endif
			flushRxBuffer(GPRS_UART);
			UWriteString((char *)"AT\r", GPRS_UART);
			gprs_connct_state = GPRS_CONNCT_RSP_AT;
		}
		break;
    4464:	af c5       	rjmp	.+2910   	; 0x4fc4 <_Z12gprs_connectv+0xefc>
		case GPRS_CONNCT_RSP_AT:
			switch (check_string_nobuf("OK"))
    4466:	85 e4       	ldi	r24, 0x45	; 69
    4468:	95 e0       	ldi	r25, 0x05	; 5
    446a:	0e 94 fc 45 	call	0x8bf8	; 0x8bf8 <_Z18check_string_nobufPKc>
    446e:	81 30       	cpi	r24, 0x01	; 1
    4470:	21 f0       	breq	.+8      	; 0x447a <_Z12gprs_connectv+0x3b2>
    4472:	88 f1       	brcs	.+98     	; 0x44d6 <_Z12gprs_connectv+0x40e>
    4474:	82 30       	cpi	r24, 0x02	; 2
    4476:	f1 f0       	breq	.+60     	; 0x44b4 <_Z12gprs_connectv+0x3ec>
    4478:	6e c5       	rjmp	.+2780   	; 0x4f56 <_Z12gprs_connectv+0xe8e>
			{
				case (GPRS_MATCH_FAIL):
#ifdef GPRS_DEBUG
					UWriteString((char *)"AT:f", UART_PC);
    447a:	62 e0       	ldi	r22, 0x02	; 2
    447c:	70 e0       	ldi	r23, 0x00	; 0
    447e:	89 eb       	ldi	r24, 0xB9	; 185
    4480:	96 e0       	ldi	r25, 0x06	; 6
    4482:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <_Z12UWriteStringPKci>
#endif					
				
					gprs_connct_state = GPRS_CONNCT_CMD_AT;
    4486:	88 e0       	ldi	r24, 0x08	; 8
    4488:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <_ZZ12gprs_connectvE17gprs_connct_state>
				
					if (gprs_retry_count++ >= RETRY_CNT)
    448c:	80 91 19 0c 	lds	r24, 0x0C19	; 0x800c19 <_ZZ12gprs_connectvE16gprs_retry_count>
    4490:	91 e0       	ldi	r25, 0x01	; 1
    4492:	98 0f       	add	r25, r24
    4494:	90 93 19 0c 	sts	0x0C19, r25	; 0x800c19 <_ZZ12gprs_connectvE16gprs_retry_count>
    4498:	83 30       	cpi	r24, 0x03	; 3
    449a:	08 f4       	brcc	.+2      	; 0x449e <_Z12gprs_connectv+0x3d6>
    449c:	5e c5       	rjmp	.+2748   	; 0x4f5a <_Z12gprs_connectv+0xe92>
					{
						gprs.module_status = NOT_AVBL;
    449e:	e4 ee       	ldi	r30, 0xE4	; 228
    44a0:	f2 e1       	ldi	r31, 0x12	; 18
    44a2:	10 8a       	std	Z+16, r1	; 0x10
						
						gprs.errcode = CON_ERR_OFFSET + GPRS_CONNCT_RSP_AT;
    44a4:	89 ea       	ldi	r24, 0xA9	; 169
    44a6:	86 8b       	std	Z+22, r24	; 0x16
						sts = CON_FAIL;
						
						gprs_connct_state = GPRS_CONNCT_RESET;			//
    44a8:	10 92 16 02 	sts	0x0216, r1	; 0x800216 <_ZZ12gprs_connectvE17gprs_connct_state>
						gprs_retry_count = 0;
    44ac:	10 92 19 0c 	sts	0x0C19, r1	; 0x800c19 <_ZZ12gprs_connectvE16gprs_retry_count>
					if (gprs_retry_count++ >= RETRY_CNT)
					{
						gprs.module_status = NOT_AVBL;
						
						gprs.errcode = CON_ERR_OFFSET + GPRS_CONNCT_RSP_AT;
						sts = CON_FAIL;
    44b0:	81 e0       	ldi	r24, 0x01	; 1
    44b2:	88 c5       	rjmp	.+2832   	; 0x4fc4 <_Z12gprs_connectv+0xefc>
						gprs_retry_count = 0;
					}
				break;
				case (GPRS_MATCH_OK):
#ifdef GPRS_DEBUG
					UWriteString((char *)"AT:k", UART_PC);
    44b4:	62 e0       	ldi	r22, 0x02	; 2
    44b6:	70 e0       	ldi	r23, 0x00	; 0
    44b8:	8f eb       	ldi	r24, 0xBF	; 191
    44ba:	96 e0       	ldi	r25, 0x06	; 6
    44bc:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <_Z12UWriteStringPKci>
#endif					
					
					gprs_connct_state = GPRS_CONNCT_CMD_CCLK;
    44c0:	83 e2       	ldi	r24, 0x23	; 35
    44c2:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <_ZZ12gprs_connectvE17gprs_connct_state>
					gprs_retry_count = 0;
    44c6:	10 92 19 0c 	sts	0x0C19, r1	; 0x800c19 <_ZZ12gprs_connectvE16gprs_retry_count>
					timeout = 0;
    44ca:	10 92 1b 0c 	sts	0x0C1B, r1	; 0x800c1b <_ZZ12gprs_connectvE7timeout+0x1>
    44ce:	10 92 1a 0c 	sts	0x0C1A, r1	; 0x800c1a <_ZZ12gprs_connectvE7timeout>
}
#endif

con_status_t gprs_connect(void)
{
	con_status_t sts = CON_IN_PRG;
    44d2:	82 e0       	ldi	r24, 0x02	; 2
#endif					
					
					gprs_connct_state = GPRS_CONNCT_CMD_CCLK;
					gprs_retry_count = 0;
					timeout = 0;
				break;
    44d4:	77 c5       	rjmp	.+2798   	; 0x4fc4 <_Z12gprs_connectv+0xefc>
				case (GPRS_NO_NEW_MSG):
#ifdef GPRS_DEBUG
					UWriteString("AT:w", UART_PC);
    44d6:	62 e0       	ldi	r22, 0x02	; 2
    44d8:	70 e0       	ldi	r23, 0x00	; 0
    44da:	85 ec       	ldi	r24, 0xC5	; 197
    44dc:	96 e0       	ldi	r25, 0x06	; 6
    44de:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <_Z12UWriteStringPKci>
#endif							
					if(timeout++ >= GPRS_AT_TIMEOUT)
    44e2:	80 91 1a 0c 	lds	r24, 0x0C1A	; 0x800c1a <_ZZ12gprs_connectvE7timeout>
    44e6:	90 91 1b 0c 	lds	r25, 0x0C1B	; 0x800c1b <_ZZ12gprs_connectvE7timeout+0x1>
    44ea:	8a 30       	cpi	r24, 0x0A	; 10
    44ec:	91 05       	cpc	r25, r1
    44ee:	38 f4       	brcc	.+14     	; 0x44fe <_Z12gprs_connectv+0x436>
    44f0:	01 96       	adiw	r24, 0x01	; 1
    44f2:	90 93 1b 0c 	sts	0x0C1B, r25	; 0x800c1b <_ZZ12gprs_connectvE7timeout+0x1>
    44f6:	80 93 1a 0c 	sts	0x0C1A, r24	; 0x800c1a <_ZZ12gprs_connectvE7timeout>
}
#endif

con_status_t gprs_connect(void)
{
	con_status_t sts = CON_IN_PRG;
    44fa:	82 e0       	ldi	r24, 0x02	; 2
    44fc:	63 c5       	rjmp	.+2758   	; 0x4fc4 <_Z12gprs_connectv+0xefc>
#ifdef GPRS_DEBUG
					UWriteString("AT:w", UART_PC);
#endif							
					if(timeout++ >= GPRS_AT_TIMEOUT)
					{
						timeout = 0;
    44fe:	10 92 1b 0c 	sts	0x0C1B, r1	; 0x800c1b <_ZZ12gprs_connectvE7timeout+0x1>
    4502:	10 92 1a 0c 	sts	0x0C1A, r1	; 0x800c1a <_ZZ12gprs_connectvE7timeout>
						gprs_connct_state = GPRS_CONNCT_CMD_AT;
    4506:	88 e0       	ldi	r24, 0x08	; 8
    4508:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <_ZZ12gprs_connectvE17gprs_connct_state>
					
						if (gprs_retry_count++ >= RETRY_CNT)
    450c:	80 91 19 0c 	lds	r24, 0x0C19	; 0x800c19 <_ZZ12gprs_connectvE16gprs_retry_count>
    4510:	91 e0       	ldi	r25, 0x01	; 1
    4512:	98 0f       	add	r25, r24
    4514:	90 93 19 0c 	sts	0x0C19, r25	; 0x800c19 <_ZZ12gprs_connectvE16gprs_retry_count>
    4518:	83 30       	cpi	r24, 0x03	; 3
    451a:	08 f4       	brcc	.+2      	; 0x451e <_Z12gprs_connectv+0x456>
    451c:	20 c5       	rjmp	.+2624   	; 0x4f5e <_Z12gprs_connectv+0xe96>
						{
							gprs.module_status = NOT_AVBL;
    451e:	e4 ee       	ldi	r30, 0xE4	; 228
    4520:	f2 e1       	ldi	r31, 0x12	; 18
    4522:	10 8a       	std	Z+16, r1	; 0x10
							
							gprs.errcode = CON_ERR_OFFSET + GPRS_CONNCT_RSP_AT;
    4524:	89 ea       	ldi	r24, 0xA9	; 169
    4526:	86 8b       	std	Z+22, r24	; 0x16
							sts = CON_FAIL;
							
							gprs_connct_state = GPRS_CONNCT_RESET;			//
    4528:	10 92 16 02 	sts	0x0216, r1	; 0x800216 <_ZZ12gprs_connectvE17gprs_connct_state>
							gprs_retry_count = 0;
    452c:	10 92 19 0c 	sts	0x0C19, r1	; 0x800c19 <_ZZ12gprs_connectvE16gprs_retry_count>
						if (gprs_retry_count++ >= RETRY_CNT)
						{
							gprs.module_status = NOT_AVBL;
							
							gprs.errcode = CON_ERR_OFFSET + GPRS_CONNCT_RSP_AT;
							sts = CON_FAIL;
    4530:	81 e0       	ldi	r24, 0x01	; 1
    4532:	48 c5       	rjmp	.+2704   	; 0x4fc4 <_Z12gprs_connectv+0xefc>
		break;
		
		case GPRS_CONNCT_CMD_CCLK:
		{
#ifdef GPRS_DEBUG
			UWriteString((char *)"cmd: CCLK", UART_PC);
    4534:	62 e0       	ldi	r22, 0x02	; 2
    4536:	70 e0       	ldi	r23, 0x00	; 0
    4538:	84 eb       	ldi	r24, 0xB4	; 180
    453a:	94 e0       	ldi	r25, 0x04	; 4
    453c:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <_Z12UWriteStringPKci>
#endif
			gprs_date_time.update_time_aval = FALSE;
    4540:	10 92 93 12 	sts	0x1293, r1	; 0x801293 <gprs_date_time+0x6>
			UWriteString((char *)"AT+CCLK?\r", GPRS_UART);
    4544:	60 e0       	ldi	r22, 0x00	; 0
    4546:	70 e0       	ldi	r23, 0x00	; 0
    4548:	8e eb       	ldi	r24, 0xBE	; 190
    454a:	94 e0       	ldi	r25, 0x04	; 4
    454c:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <_Z12UWriteStringPKci>
			gprs_connct_state = GPRS_CONNCT_RSP_CCLK;
    4550:	84 e2       	ldi	r24, 0x24	; 36
    4552:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <_ZZ12gprs_connectvE17gprs_connct_state>
}
#endif

con_status_t gprs_connect(void)
{
	con_status_t sts = CON_IN_PRG;
    4556:	82 e0       	ldi	r24, 0x02	; 2
#endif
			gprs_date_time.update_time_aval = FALSE;
			UWriteString((char *)"AT+CCLK?\r", GPRS_UART);
			gprs_connct_state = GPRS_CONNCT_RSP_CCLK;
		}
		break;
    4558:	35 c5       	rjmp	.+2666   	; 0x4fc4 <_Z12gprs_connectv+0xefc>
		case GPRS_CONNCT_RSP_CCLK:
		{
			char tmpstr[GPRS_RX_BUFFER_MAX];
			gprs_date_time_t temp_date_time;
			char resp = check_string("+CCLK: \"", tmpstr, &num_byte);
    455a:	ae 01       	movw	r20, r28
    455c:	4f 5f       	subi	r20, 0xFF	; 255
    455e:	5f 4f       	sbci	r21, 0xFF	; 255
    4560:	be 01       	movw	r22, r28
    4562:	6d 5f       	subi	r22, 0xFD	; 253
    4564:	7f 4f       	sbci	r23, 0xFF	; 255
    4566:	88 ec       	ldi	r24, 0xC8	; 200
    4568:	94 e0       	ldi	r25, 0x04	; 4
    456a:	0e 94 75 45 	call	0x8aea	; 0x8aea <_Z12check_stringPKcPcPi>
    456e:	18 2f       	mov	r17, r24

#ifdef GPRS_DEBUG		//Anand 27-04-16
			UWriteString((char *)"RSP_CCLK:", UART_PC);
    4570:	62 e0       	ldi	r22, 0x02	; 2
    4572:	70 e0       	ldi	r23, 0x00	; 0
    4574:	81 ed       	ldi	r24, 0xD1	; 209
    4576:	94 e0       	ldi	r25, 0x04	; 4
    4578:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <_Z12UWriteStringPKci>
			UWriteString(tmpstr, UART_PC);
    457c:	62 e0       	ldi	r22, 0x02	; 2
    457e:	70 e0       	ldi	r23, 0x00	; 0
    4580:	ce 01       	movw	r24, r28
    4582:	03 96       	adiw	r24, 0x03	; 3
    4584:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <_Z12UWriteStringPKci>
#endif
			switch (resp)
    4588:	11 30       	cpi	r17, 0x01	; 1
    458a:	29 f0       	breq	.+10     	; 0x4596 <_Z12gprs_connectv+0x4ce>
    458c:	08 f4       	brcc	.+2      	; 0x4590 <_Z12gprs_connectv+0x4c8>
    458e:	6b c0       	rjmp	.+214    	; 0x4666 <_Z12gprs_connectv+0x59e>
    4590:	12 30       	cpi	r17, 0x02	; 2
    4592:	d1 f0       	breq	.+52     	; 0x45c8 <_Z12gprs_connectv+0x500>
    4594:	93 c0       	rjmp	.+294    	; 0x46bc <_Z12gprs_connectv+0x5f4>
			{
				case (GPRS_MATCH_FAIL): 
#ifdef GPRS_DEBUG
					UWriteString((char *)"CCLK:f", UART_PC);
    4596:	62 e0       	ldi	r22, 0x02	; 2
    4598:	70 e0       	ldi	r23, 0x00	; 0
    459a:	8b ed       	ldi	r24, 0xDB	; 219
    459c:	94 e0       	ldi	r25, 0x04	; 4
    459e:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <_Z12UWriteStringPKci>
#endif					
					gprs_connct_state = GPRS_CONNCT_CMD_CCLK;
    45a2:	83 e2       	ldi	r24, 0x23	; 35
    45a4:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <_ZZ12gprs_connectvE17gprs_connct_state>
					gprs_retry_count++;
    45a8:	80 91 19 0c 	lds	r24, 0x0C19	; 0x800c19 <_ZZ12gprs_connectvE16gprs_retry_count>
    45ac:	8f 5f       	subi	r24, 0xFF	; 255
    45ae:	80 93 19 0c 	sts	0x0C19, r24	; 0x800c19 <_ZZ12gprs_connectvE16gprs_retry_count>
					if (gprs_retry_count >= RETRY_CNT) 
    45b2:	83 30       	cpi	r24, 0x03	; 3
    45b4:	08 f4       	brcc	.+2      	; 0x45b8 <_Z12gprs_connectv+0x4f0>
    45b6:	82 c0       	rjmp	.+260    	; 0x46bc <_Z12gprs_connectv+0x5f4>
					{
						gprs.errcode = CON_ERR_OFFSET + GPRS_CONNCT_RSP_CCLK;
    45b8:	84 ec       	ldi	r24, 0xC4	; 196
    45ba:	80 93 fa 12 	sts	0x12FA, r24	; 0x8012fa <gprs+0x16>
						
						gprs_connct_state = GPRS_CONNCT_RESET;
    45be:	10 92 16 02 	sts	0x0216, r1	; 0x800216 <_ZZ12gprs_connectvE17gprs_connct_state>
						gprs_retry_count = 0;
    45c2:	10 92 19 0c 	sts	0x0C19, r1	; 0x800c19 <_ZZ12gprs_connectvE16gprs_retry_count>
    45c6:	7a c0       	rjmp	.+244    	; 0x46bc <_Z12gprs_connectv+0x5f4>
					}
					break;
				case (GPRS_MATCH_OK):
					{
#ifdef GPRS_DEBUG
						UWriteString((char *)"CCLK:k", UART_PC);
    45c8:	62 e0       	ldi	r22, 0x02	; 2
    45ca:	70 e0       	ldi	r23, 0x00	; 0
    45cc:	82 ee       	ldi	r24, 0xE2	; 226
    45ce:	94 e0       	ldi	r25, 0x04	; 4
    45d0:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <_Z12UWriteStringPKci>
#endif						
						if (check_date_time(tmpstr, (char *)&temp_date_time))
    45d4:	be 01       	movw	r22, r28
    45d6:	6d 57       	subi	r22, 0x7D	; 125
    45d8:	7f 4f       	sbci	r23, 0xFF	; 255
    45da:	ce 01       	movw	r24, r28
    45dc:	03 96       	adiw	r24, 0x03	; 3
    45de:	0e 94 e7 13 	call	0x27ce	; 0x27ce <_Z15check_date_timePcS_>
    45e2:	88 23       	and	r24, r24
    45e4:	d1 f1       	breq	.+116    	; 0x465a <_Z12gprs_connectv+0x592>
						{

							if (((temp_date_time.yy >= DEFAULT_YEAR) && (temp_date_time.yy <= 99)) && 			// Assuming that RTC will never go below 2020.
    45e6:	cd 57       	subi	r28, 0x7D	; 125
    45e8:	df 4f       	sbci	r29, 0xFF	; 255
    45ea:	88 81       	ld	r24, Y
    45ec:	c3 58       	subi	r28, 0x83	; 131
    45ee:	d0 40       	sbci	r29, 0x00	; 0
    45f0:	85 51       	subi	r24, 0x15	; 21
    45f2:	8f 34       	cpi	r24, 0x4F	; 79
    45f4:	90 f5       	brcc	.+100    	; 0x465a <_Z12gprs_connectv+0x592>
    45f6:	cc 57       	subi	r28, 0x7C	; 124
    45f8:	df 4f       	sbci	r29, 0xFF	; 255
    45fa:	88 81       	ld	r24, Y
    45fc:	c4 58       	subi	r28, 0x84	; 132
    45fe:	d0 40       	sbci	r29, 0x00	; 0
    4600:	81 50       	subi	r24, 0x01	; 1
    4602:	8c 30       	cpi	r24, 0x0C	; 12
    4604:	50 f5       	brcc	.+84     	; 0x465a <_Z12gprs_connectv+0x592>
							((temp_date_time.mm >= 1) && (temp_date_time.mm <= 12)) &&
    4606:	cb 57       	subi	r28, 0x7B	; 123
    4608:	df 4f       	sbci	r29, 0xFF	; 255
    460a:	88 81       	ld	r24, Y
    460c:	c5 58       	subi	r28, 0x85	; 133
    460e:	d0 40       	sbci	r29, 0x00	; 0
    4610:	81 50       	subi	r24, 0x01	; 1
    4612:	8f 31       	cpi	r24, 0x1F	; 31
    4614:	10 f5       	brcc	.+68     	; 0x465a <_Z12gprs_connectv+0x592>
							((temp_date_time.dd >= 1) && (temp_date_time.dd <= 31))&&
    4616:	ca 57       	subi	r28, 0x7A	; 122
    4618:	df 4f       	sbci	r29, 0xFF	; 255
    461a:	88 81       	ld	r24, Y
    461c:	c6 58       	subi	r28, 0x86	; 134
    461e:	d0 40       	sbci	r29, 0x00	; 0
    4620:	88 31       	cpi	r24, 0x18	; 24
    4622:	d8 f4       	brcc	.+54     	; 0x465a <_Z12gprs_connectv+0x592>
							((temp_date_time.hr >= 0) && (temp_date_time.hr <= 23)) &&
    4624:	c9 57       	subi	r28, 0x79	; 121
    4626:	df 4f       	sbci	r29, 0xFF	; 255
    4628:	88 81       	ld	r24, Y
    462a:	c7 58       	subi	r28, 0x87	; 135
    462c:	d0 40       	sbci	r29, 0x00	; 0
    462e:	8c 33       	cpi	r24, 0x3C	; 60
    4630:	a0 f4       	brcc	.+40     	; 0x465a <_Z12gprs_connectv+0x592>
							((temp_date_time.min >= 0) && (temp_date_time.min <= 59)) &&
    4632:	c8 57       	subi	r28, 0x78	; 120
    4634:	df 4f       	sbci	r29, 0xFF	; 255
    4636:	88 81       	ld	r24, Y
    4638:	c8 58       	subi	r28, 0x88	; 136
    463a:	d0 40       	sbci	r29, 0x00	; 0
    463c:	8c 33       	cpi	r24, 0x3C	; 60
    463e:	68 f4       	brcc	.+26     	; 0x465a <_Z12gprs_connectv+0x592>
							((temp_date_time.sec >= 0) && (temp_date_time.sec <= 59)))

							{
								memcpy(&gprs_date_time,&temp_date_time,sizeof(gprs_date_time_t));
    4640:	87 e0       	ldi	r24, 0x07	; 7
    4642:	fe 01       	movw	r30, r28
    4644:	ed 57       	subi	r30, 0x7D	; 125
    4646:	ff 4f       	sbci	r31, 0xFF	; 255
    4648:	ad e8       	ldi	r26, 0x8D	; 141
    464a:	b2 e1       	ldi	r27, 0x12	; 18
    464c:	01 90       	ld	r0, Z+
    464e:	0d 92       	st	X+, r0
    4650:	8a 95       	dec	r24
    4652:	e1 f7       	brne	.-8      	; 0x464c <_Z12gprs_connectv+0x584>
								gprs_date_time.update_time_aval = TRUE;
    4654:	81 e0       	ldi	r24, 0x01	; 1
    4656:	80 93 93 12 	sts	0x1293, r24	; 0x801293 <gprs_date_time+0x6>
							else
							{
							}
						}

						gprs_connct_state = GPRS_CONNCT_CMD_CSQ;
    465a:	8c e0       	ldi	r24, 0x0C	; 12
    465c:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <_ZZ12gprs_connectvE17gprs_connct_state>
						gprs_retry_count = 0;
    4660:	10 92 19 0c 	sts	0x0C19, r1	; 0x800c19 <_ZZ12gprs_connectvE16gprs_retry_count>
					}
					break;
    4664:	2b c0       	rjmp	.+86     	; 0x46bc <_Z12gprs_connectv+0x5f4>
				case (GPRS_NO_NEW_MSG): 
#ifdef GPRS_DEBUG
					UWriteString((char *)"CCLK:w", UART_PC);
    4666:	62 e0       	ldi	r22, 0x02	; 2
    4668:	70 e0       	ldi	r23, 0x00	; 0
    466a:	89 ee       	ldi	r24, 0xE9	; 233
    466c:	94 e0       	ldi	r25, 0x04	; 4
    466e:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <_Z12UWriteStringPKci>
#endif					
					if(timeout++ >= CCLK_TIMEOUT)
    4672:	80 91 1a 0c 	lds	r24, 0x0C1A	; 0x800c1a <_ZZ12gprs_connectvE7timeout>
    4676:	90 91 1b 0c 	lds	r25, 0x0C1B	; 0x800c1b <_ZZ12gprs_connectvE7timeout+0x1>
    467a:	86 30       	cpi	r24, 0x06	; 6
    467c:	91 05       	cpc	r25, r1
    467e:	30 f4       	brcc	.+12     	; 0x468c <_Z12gprs_connectv+0x5c4>
    4680:	01 96       	adiw	r24, 0x01	; 1
    4682:	90 93 1b 0c 	sts	0x0C1B, r25	; 0x800c1b <_ZZ12gprs_connectvE7timeout+0x1>
    4686:	80 93 1a 0c 	sts	0x0C1A, r24	; 0x800c1a <_ZZ12gprs_connectvE7timeout>
    468a:	18 c0       	rjmp	.+48     	; 0x46bc <_Z12gprs_connectv+0x5f4>
					{
						timeout = 0;
    468c:	10 92 1b 0c 	sts	0x0C1B, r1	; 0x800c1b <_ZZ12gprs_connectvE7timeout+0x1>
    4690:	10 92 1a 0c 	sts	0x0C1A, r1	; 0x800c1a <_ZZ12gprs_connectvE7timeout>
						gprs_connct_state = GPRS_CONNCT_CMD_CCLK;
    4694:	83 e2       	ldi	r24, 0x23	; 35
    4696:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <_ZZ12gprs_connectvE17gprs_connct_state>
						
						if (gprs_retry_count++ >= RETRY_CNT)
    469a:	80 91 19 0c 	lds	r24, 0x0C19	; 0x800c19 <_ZZ12gprs_connectvE16gprs_retry_count>
    469e:	91 e0       	ldi	r25, 0x01	; 1
    46a0:	98 0f       	add	r25, r24
    46a2:	90 93 19 0c 	sts	0x0C19, r25	; 0x800c19 <_ZZ12gprs_connectvE16gprs_retry_count>
    46a6:	83 30       	cpi	r24, 0x03	; 3
    46a8:	48 f0       	brcs	.+18     	; 0x46bc <_Z12gprs_connectv+0x5f4>
						{
							gprs.module_status = NOT_AVBL;
    46aa:	e4 ee       	ldi	r30, 0xE4	; 228
    46ac:	f2 e1       	ldi	r31, 0x12	; 18
    46ae:	10 8a       	std	Z+16, r1	; 0x10
							
							gprs.errcode = CON_ERR_OFFSET + GPRS_CONNCT_RSP_CCLK;
    46b0:	84 ec       	ldi	r24, 0xC4	; 196
    46b2:	86 8b       	std	Z+22, r24	; 0x16
							
							gprs_connct_state = GPRS_CONNCT_RESET;			
    46b4:	10 92 16 02 	sts	0x0216, r1	; 0x800216 <_ZZ12gprs_connectvE17gprs_connct_state>
							gprs_retry_count = 0;
    46b8:	10 92 19 0c 	sts	0x0C19, r1	; 0x800c19 <_ZZ12gprs_connectvE16gprs_retry_count>
}
#endif

con_status_t gprs_connect(void)
{
	con_status_t sts = CON_IN_PRG;
    46bc:	82 e0       	ldi	r24, 0x02	; 2
					break;
				default:
					break;
			}
		}
		break;
    46be:	82 c4       	rjmp	.+2308   	; 0x4fc4 <_Z12gprs_connectv+0xefc>
		
		case GPRS_CONNCT_CMD_CSQ:
		{
			flushRxBuffer(GPRS_UART);
    46c0:	80 e0       	ldi	r24, 0x00	; 0
    46c2:	90 e0       	ldi	r25, 0x00	; 0
    46c4:	0e 94 d7 09 	call	0x13ae	; 0x13ae <_Z13flushRxBufferi>
			
#ifdef GPRS_DEBUG		//Anand 27-04-16
UWriteString("CSQ sent", UART_PC);
    46c8:	62 e0       	ldi	r22, 0x02	; 2
    46ca:	70 e0       	ldi	r23, 0x00	; 0
    46cc:	82 e3       	ldi	r24, 0x32	; 50
    46ce:	96 e0       	ldi	r25, 0x06	; 6
    46d0:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <_Z12UWriteStringPKci>
#endif
			UWriteString("AT+CSQ\r", GPRS_UART); //interrupt 07/08/2018
    46d4:	60 e0       	ldi	r22, 0x00	; 0
    46d6:	70 e0       	ldi	r23, 0x00	; 0
    46d8:	8b e3       	ldi	r24, 0x3B	; 59
    46da:	96 e0       	ldi	r25, 0x06	; 6
    46dc:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <_Z12UWriteStringPKci>
			gprs.network_status = NOT_AVBL;				//Lets see if we have network
    46e0:	10 92 f6 12 	sts	0x12F6, r1	; 0x8012f6 <gprs+0x12>
			gprs_connct_state = GPRS_CONNCT_RSP_CSQ;
    46e4:	8d e0       	ldi	r24, 0x0D	; 13
    46e6:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <_ZZ12gprs_connectvE17gprs_connct_state>
}
#endif

con_status_t gprs_connect(void)
{
	con_status_t sts = CON_IN_PRG;
    46ea:	82 e0       	ldi	r24, 0x02	; 2
#endif
			UWriteString("AT+CSQ\r", GPRS_UART); //interrupt 07/08/2018
			gprs.network_status = NOT_AVBL;				//Lets see if we have network
			gprs_connct_state = GPRS_CONNCT_RSP_CSQ;
		}
		break;
    46ec:	6b c4       	rjmp	.+2262   	; 0x4fc4 <_Z12gprs_connectv+0xefc>
	
		case GPRS_CONNCT_RSP_CSQ:
		{
			char tmpstr[GPRS_RX_BUFFER_MAX];
			char resp = check_string("+CSQ: ", tmpstr, &num_byte);
    46ee:	ae 01       	movw	r20, r28
    46f0:	4f 5f       	subi	r20, 0xFF	; 255
    46f2:	5f 4f       	sbci	r21, 0xFF	; 255
    46f4:	be 01       	movw	r22, r28
    46f6:	6d 5f       	subi	r22, 0xFD	; 253
    46f8:	7f 4f       	sbci	r23, 0xFF	; 255
    46fa:	83 e4       	ldi	r24, 0x43	; 67
    46fc:	96 e0       	ldi	r25, 0x06	; 6
    46fe:	0e 94 75 45 	call	0x8aea	; 0x8aea <_Z12check_stringPKcPcPi>

			switch (resp)
    4702:	81 30       	cpi	r24, 0x01	; 1
    4704:	29 f0       	breq	.+10     	; 0x4710 <_Z12gprs_connectv+0x648>
    4706:	08 f4       	brcc	.+2      	; 0x470a <_Z12gprs_connectv+0x642>
    4708:	41 c0       	rjmp	.+130    	; 0x478c <_Z12gprs_connectv+0x6c4>
    470a:	82 30       	cpi	r24, 0x02	; 2
    470c:	f9 f0       	breq	.+62     	; 0x474c <_Z12gprs_connectv+0x684>
    470e:	6c c0       	rjmp	.+216    	; 0x47e8 <_Z12gprs_connectv+0x720>
			{
				case (GPRS_MATCH_FAIL):
#ifdef GPRS_DEBUG
UWriteString("CSQ:f", UART_PC);
    4710:	62 e0       	ldi	r22, 0x02	; 2
    4712:	70 e0       	ldi	r23, 0x00	; 0
    4714:	8a e4       	ldi	r24, 0x4A	; 74
    4716:	96 e0       	ldi	r25, 0x06	; 6
    4718:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <_Z12UWriteStringPKci>
#endif
				gprs_connct_state = GPRS_CONNCT_CMD_CSQ;
    471c:	8c e0       	ldi	r24, 0x0C	; 12
    471e:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <_ZZ12gprs_connectvE17gprs_connct_state>
				flushRxBuffer(GPRS_UART);
    4722:	80 e0       	ldi	r24, 0x00	; 0
    4724:	90 e0       	ldi	r25, 0x00	; 0
    4726:	0e 94 d7 09 	call	0x13ae	; 0x13ae <_Z13flushRxBufferi>
				gprs_retry_count++;
    472a:	80 91 19 0c 	lds	r24, 0x0C19	; 0x800c19 <_ZZ12gprs_connectvE16gprs_retry_count>
    472e:	8f 5f       	subi	r24, 0xFF	; 255
    4730:	80 93 19 0c 	sts	0x0C19, r24	; 0x800c19 <_ZZ12gprs_connectvE16gprs_retry_count>
				if (gprs_retry_count >= RETRY_CNT)
    4734:	83 30       	cpi	r24, 0x03	; 3
    4736:	08 f4       	brcc	.+2      	; 0x473a <_Z12gprs_connectv+0x672>
    4738:	59 c0       	rjmp	.+178    	; 0x47ec <_Z12gprs_connectv+0x724>
				{
					gprs.errcode = CON_ERR_OFFSET + GPRS_CONNCT_RSP_CSQ;
    473a:	8d ea       	ldi	r24, 0xAD	; 173
    473c:	80 93 fa 12 	sts	0x12FA, r24	; 0x8012fa <gprs+0x16>
					sts = CON_FAIL;
					
					gprs_connct_state = GPRS_CONNCT_RESET;
    4740:	10 92 16 02 	sts	0x0216, r1	; 0x800216 <_ZZ12gprs_connectvE17gprs_connct_state>
					gprs_retry_count = 0;
    4744:	10 92 19 0c 	sts	0x0C19, r1	; 0x800c19 <_ZZ12gprs_connectvE16gprs_retry_count>
				flushRxBuffer(GPRS_UART);
				gprs_retry_count++;
				if (gprs_retry_count >= RETRY_CNT)
				{
					gprs.errcode = CON_ERR_OFFSET + GPRS_CONNCT_RSP_CSQ;
					sts = CON_FAIL;
    4748:	81 e0       	ldi	r24, 0x01	; 1
    474a:	3c c4       	rjmp	.+2168   	; 0x4fc4 <_Z12gprs_connectv+0xefc>
				break;
				
				case (GPRS_MATCH_OK):
				{
#ifdef GPRS_DEBUG
UWriteString("CSQ:k", UART_PC);
    474c:	62 e0       	ldi	r22, 0x02	; 2
    474e:	70 e0       	ldi	r23, 0x00	; 0
    4750:	80 e5       	ldi	r24, 0x50	; 80
    4752:	96 e0       	ldi	r25, 0x06	; 6
    4754:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <_Z12UWriteStringPKci>
#endif
					//Lets update network strength
					gprs.network_strength = (tmpstr[0]-'0')*10 + (tmpstr[1]-'0');
    4758:	8b 81       	ldd	r24, Y+3	; 0x03
    475a:	88 0f       	add	r24, r24
    475c:	80 56       	subi	r24, 0x60	; 96
    475e:	98 2f       	mov	r25, r24
    4760:	99 0f       	add	r25, r25
    4762:	99 0f       	add	r25, r25
    4764:	98 0f       	add	r25, r24
    4766:	8c 81       	ldd	r24, Y+4	; 0x04
    4768:	89 0f       	add	r24, r25
    476a:	90 ed       	ldi	r25, 0xD0	; 208
    476c:	98 0f       	add	r25, r24
    476e:	90 93 f5 12 	sts	0x12F5, r25	; 0x8012f5 <gprs+0x11>
					
					if((gprs.network_strength >= MIN_NETWORK_STRENGTH_DB) && (gprs.network_strength <= MAX_NETWORK_STRENGTH_DB))// network strength upto
    4772:	8a 53       	subi	r24, 0x3A	; 58
    4774:	85 31       	cpi	r24, 0x15	; 21
    4776:	18 f4       	brcc	.+6      	; 0x477e <_Z12gprs_connectv+0x6b6>
						gprs.network_status = AVBL;
    4778:	81 e0       	ldi	r24, 0x01	; 1
    477a:	80 93 f6 12 	sts	0x12F6, r24	; 0x8012f6 <gprs+0x12>
					gprs_connct_state = GPRS_CONNCT_CMD_CGATT;// GPRS_CONNCT_RSP_1_CSQ;
    477e:	8f e0       	ldi	r24, 0x0F	; 15
    4780:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <_ZZ12gprs_connectvE17gprs_connct_state>
					gprs_retry_count = 0;
    4784:	10 92 19 0c 	sts	0x0C19, r1	; 0x800c19 <_ZZ12gprs_connectvE16gprs_retry_count>
}
#endif

con_status_t gprs_connect(void)
{
	con_status_t sts = CON_IN_PRG;
    4788:	82 e0       	ldi	r24, 0x02	; 2
					if((gprs.network_strength >= MIN_NETWORK_STRENGTH_DB) && (gprs.network_strength <= MAX_NETWORK_STRENGTH_DB))// network strength upto
						gprs.network_status = AVBL;
					gprs_connct_state = GPRS_CONNCT_CMD_CGATT;// GPRS_CONNCT_RSP_1_CSQ;
					gprs_retry_count = 0;
				}
				break;
    478a:	1c c4       	rjmp	.+2104   	; 0x4fc4 <_Z12gprs_connectv+0xefc>
				
				case (GPRS_NO_NEW_MSG):
#ifdef GPRS_DEBUG
UWriteString("CSQ:w", UART_PC);
    478c:	62 e0       	ldi	r22, 0x02	; 2
    478e:	70 e0       	ldi	r23, 0x00	; 0
    4790:	86 e5       	ldi	r24, 0x56	; 86
    4792:	96 e0       	ldi	r25, 0x06	; 6
    4794:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <_Z12UWriteStringPKci>
#endif
				if(timeout++ >= CSQ_TIMEOUT)
    4798:	80 91 1a 0c 	lds	r24, 0x0C1A	; 0x800c1a <_ZZ12gprs_connectvE7timeout>
    479c:	90 91 1b 0c 	lds	r25, 0x0C1B	; 0x800c1b <_ZZ12gprs_connectvE7timeout+0x1>
    47a0:	8a 30       	cpi	r24, 0x0A	; 10
    47a2:	91 05       	cpc	r25, r1
    47a4:	38 f4       	brcc	.+14     	; 0x47b4 <_Z12gprs_connectv+0x6ec>
    47a6:	01 96       	adiw	r24, 0x01	; 1
    47a8:	90 93 1b 0c 	sts	0x0C1B, r25	; 0x800c1b <_ZZ12gprs_connectvE7timeout+0x1>
    47ac:	80 93 1a 0c 	sts	0x0C1A, r24	; 0x800c1a <_ZZ12gprs_connectvE7timeout>
}
#endif

con_status_t gprs_connect(void)
{
	con_status_t sts = CON_IN_PRG;
    47b0:	82 e0       	ldi	r24, 0x02	; 2
    47b2:	08 c4       	rjmp	.+2064   	; 0x4fc4 <_Z12gprs_connectv+0xefc>
#ifdef GPRS_DEBUG
UWriteString("CSQ:w", UART_PC);
#endif
				if(timeout++ >= CSQ_TIMEOUT)
				{
					timeout = 0;
    47b4:	10 92 1b 0c 	sts	0x0C1B, r1	; 0x800c1b <_ZZ12gprs_connectvE7timeout+0x1>
    47b8:	10 92 1a 0c 	sts	0x0C1A, r1	; 0x800c1a <_ZZ12gprs_connectvE7timeout>
					gprs_connct_state = GPRS_CONNCT_CMD_CSQ;
    47bc:	8c e0       	ldi	r24, 0x0C	; 12
    47be:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <_ZZ12gprs_connectvE17gprs_connct_state>
					
					if (gprs_retry_count++ >= RETRY_CNT)
    47c2:	80 91 19 0c 	lds	r24, 0x0C19	; 0x800c19 <_ZZ12gprs_connectvE16gprs_retry_count>
    47c6:	91 e0       	ldi	r25, 0x01	; 1
    47c8:	98 0f       	add	r25, r24
    47ca:	90 93 19 0c 	sts	0x0C19, r25	; 0x800c19 <_ZZ12gprs_connectvE16gprs_retry_count>
    47ce:	83 30       	cpi	r24, 0x03	; 3
    47d0:	78 f0       	brcs	.+30     	; 0x47f0 <_Z12gprs_connectv+0x728>
					{
						gprs.module_status = NOT_AVBL;
    47d2:	e4 ee       	ldi	r30, 0xE4	; 228
    47d4:	f2 e1       	ldi	r31, 0x12	; 18
    47d6:	10 8a       	std	Z+16, r1	; 0x10
						
						gprs.errcode = CON_ERR_OFFSET + GPRS_CONNCT_RSP_CSQ;
    47d8:	8d ea       	ldi	r24, 0xAD	; 173
    47da:	86 8b       	std	Z+22, r24	; 0x16
						sts = CON_FAIL;
						
						gprs_connct_state = GPRS_CONNCT_RESET;		
    47dc:	10 92 16 02 	sts	0x0216, r1	; 0x800216 <_ZZ12gprs_connectvE17gprs_connct_state>
						gprs_retry_count = 0;
    47e0:	10 92 19 0c 	sts	0x0C19, r1	; 0x800c19 <_ZZ12gprs_connectvE16gprs_retry_count>
					if (gprs_retry_count++ >= RETRY_CNT)
					{
						gprs.module_status = NOT_AVBL;
						
						gprs.errcode = CON_ERR_OFFSET + GPRS_CONNCT_RSP_CSQ;
						sts = CON_FAIL;
    47e4:	81 e0       	ldi	r24, 0x01	; 1
    47e6:	ee c3       	rjmp	.+2012   	; 0x4fc4 <_Z12gprs_connectv+0xefc>
}
#endif

con_status_t gprs_connect(void)
{
	con_status_t sts = CON_IN_PRG;
    47e8:	82 e0       	ldi	r24, 0x02	; 2
    47ea:	ec c3       	rjmp	.+2008   	; 0x4fc4 <_Z12gprs_connectv+0xefc>
    47ec:	82 e0       	ldi	r24, 0x02	; 2
    47ee:	ea c3       	rjmp	.+2004   	; 0x4fc4 <_Z12gprs_connectv+0xefc>
    47f0:	82 e0       	ldi	r24, 0x02	; 2
				break;
				default:
				break;
			}
		}
		break;
    47f2:	e8 c3       	rjmp	.+2000   	; 0x4fc4 <_Z12gprs_connectv+0xefc>
		case GPRS_CONNCT_CMD_CGATT:
		{
			flushRxBuffer(GPRS_UART);
    47f4:	80 e0       	ldi	r24, 0x00	; 0
    47f6:	90 e0       	ldi	r25, 0x00	; 0
    47f8:	0e 94 d7 09 	call	0x13ae	; 0x13ae <_Z13flushRxBufferi>
			
			UWriteString("AT+CGATT?\r", GPRS_UART); //interrupt 07/08/2018
    47fc:	60 e0       	ldi	r22, 0x00	; 0
    47fe:	70 e0       	ldi	r23, 0x00	; 0
    4800:	8c e5       	ldi	r24, 0x5C	; 92
    4802:	96 e0       	ldi	r25, 0x06	; 6
    4804:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <_Z12UWriteStringPKci>

			gprs_connct_state = GPRS_CONNCT_RSP_CGATT;
    4808:	80 e1       	ldi	r24, 0x10	; 16
    480a:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <_ZZ12gprs_connectvE17gprs_connct_state>
}
#endif

con_status_t gprs_connect(void)
{
	con_status_t sts = CON_IN_PRG;
    480e:	82 e0       	ldi	r24, 0x02	; 2
			
			UWriteString("AT+CGATT?\r", GPRS_UART); //interrupt 07/08/2018

			gprs_connct_state = GPRS_CONNCT_RSP_CGATT;
		}
		break;
    4810:	d9 c3       	rjmp	.+1970   	; 0x4fc4 <_Z12gprs_connectv+0xefc>
		case GPRS_CONNCT_RSP_CGATT:
#ifdef GPRS_DEBUG		//Anand 27-04-16
UWriteString("RSP CGATT:\n", UART_PC);
    4812:	62 e0       	ldi	r22, 0x02	; 2
    4814:	70 e0       	ldi	r23, 0x00	; 0
    4816:	87 e6       	ldi	r24, 0x67	; 103
    4818:	96 e0       	ldi	r25, 0x06	; 6
    481a:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <_Z12UWriteStringPKci>
#endif
		switch (check_string_nobuf("+CGATT: 1"))
    481e:	83 e7       	ldi	r24, 0x73	; 115
    4820:	96 e0       	ldi	r25, 0x06	; 6
    4822:	0e 94 fc 45 	call	0x8bf8	; 0x8bf8 <_Z18check_string_nobufPKc>
    4826:	81 30       	cpi	r24, 0x01	; 1
    4828:	21 f0       	breq	.+8      	; 0x4832 <_Z12gprs_connectv+0x76a>
    482a:	78 f1       	brcs	.+94     	; 0x488a <_Z12gprs_connectv+0x7c2>
    482c:	82 30       	cpi	r24, 0x02	; 2
    482e:	e1 f0       	breq	.+56     	; 0x4868 <_Z12gprs_connectv+0x7a0>
    4830:	98 c3       	rjmp	.+1840   	; 0x4f62 <_Z12gprs_connectv+0xe9a>
		{
			case (GPRS_MATCH_FAIL):
#ifdef GPRS_DEBUG
UWriteString("CG:f", UART_PC);
    4832:	62 e0       	ldi	r22, 0x02	; 2
    4834:	70 e0       	ldi	r23, 0x00	; 0
    4836:	8d e7       	ldi	r24, 0x7D	; 125
    4838:	96 e0       	ldi	r25, 0x06	; 6
    483a:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <_Z12UWriteStringPKci>
#endif
				gprs_connct_state = GPRS_CONNCT_CMD_CGATT;
    483e:	8f e0       	ldi	r24, 0x0F	; 15
    4840:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <_ZZ12gprs_connectvE17gprs_connct_state>
			
				if (gprs_retry_count++ >= RETRY_CNT)
    4844:	80 91 19 0c 	lds	r24, 0x0C19	; 0x800c19 <_ZZ12gprs_connectvE16gprs_retry_count>
    4848:	91 e0       	ldi	r25, 0x01	; 1
    484a:	98 0f       	add	r25, r24
    484c:	90 93 19 0c 	sts	0x0C19, r25	; 0x800c19 <_ZZ12gprs_connectvE16gprs_retry_count>
    4850:	83 30       	cpi	r24, 0x03	; 3
    4852:	08 f4       	brcc	.+2      	; 0x4856 <_Z12gprs_connectv+0x78e>
    4854:	88 c3       	rjmp	.+1808   	; 0x4f66 <_Z12gprs_connectv+0xe9e>
				{
					gprs.errcode = CON_ERR_OFFSET + GPRS_CONNCT_RSP_CGATT;
    4856:	80 eb       	ldi	r24, 0xB0	; 176
    4858:	80 93 fa 12 	sts	0x12FA, r24	; 0x8012fa <gprs+0x16>
					sts = CON_FAIL;
				
					gprs_connct_state = GPRS_CONNCT_RESET;			//
    485c:	10 92 16 02 	sts	0x0216, r1	; 0x800216 <_ZZ12gprs_connectvE17gprs_connct_state>
					gprs_retry_count = 0;
    4860:	10 92 19 0c 	sts	0x0C19, r1	; 0x800c19 <_ZZ12gprs_connectvE16gprs_retry_count>
				gprs_connct_state = GPRS_CONNCT_CMD_CGATT;
			
				if (gprs_retry_count++ >= RETRY_CNT)
				{
					gprs.errcode = CON_ERR_OFFSET + GPRS_CONNCT_RSP_CGATT;
					sts = CON_FAIL;
    4864:	81 e0       	ldi	r24, 0x01	; 1
    4866:	ae c3       	rjmp	.+1884   	; 0x4fc4 <_Z12gprs_connectv+0xefc>
				}
			break;
			
			case (GPRS_MATCH_OK):
#ifdef GPRS_DEBUG
UWriteString("CG:k", UART_PC);
    4868:	62 e0       	ldi	r22, 0x02	; 2
    486a:	70 e0       	ldi	r23, 0x00	; 0
    486c:	82 e8       	ldi	r24, 0x82	; 130
    486e:	96 e0       	ldi	r25, 0x06	; 6
    4870:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <_Z12UWriteStringPKci>
#endif
				
#ifdef HTTP_ENABLE
						gprs_connct_state = GPRS_CONNCT_CMD_SAPBR_TYPE;
    4874:	8b e1       	ldi	r24, 0x1B	; 27
    4876:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <_ZZ12gprs_connectvE17gprs_connct_state>
#endif	//HTTP_ENABLE

				gprs_retry_count = 0;
    487a:	10 92 19 0c 	sts	0x0C19, r1	; 0x800c19 <_ZZ12gprs_connectvE16gprs_retry_count>
				timeout = 0;
    487e:	10 92 1b 0c 	sts	0x0C1B, r1	; 0x800c1b <_ZZ12gprs_connectvE7timeout+0x1>
    4882:	10 92 1a 0c 	sts	0x0C1A, r1	; 0x800c1a <_ZZ12gprs_connectvE7timeout>
}
#endif

con_status_t gprs_connect(void)
{
	con_status_t sts = CON_IN_PRG;
    4886:	82 e0       	ldi	r24, 0x02	; 2
						gprs_connct_state = GPRS_CONNCT_CMD_SAPBR_TYPE;
#endif	//HTTP_ENABLE

				gprs_retry_count = 0;
				timeout = 0;
			break;
    4888:	9d c3       	rjmp	.+1850   	; 0x4fc4 <_Z12gprs_connectv+0xefc>
			case (GPRS_NO_NEW_MSG):
#ifdef GPRS_DEBUG
UWriteString("CG:w", UART_PC);
    488a:	62 e0       	ldi	r22, 0x02	; 2
    488c:	70 e0       	ldi	r23, 0x00	; 0
    488e:	87 e8       	ldi	r24, 0x87	; 135
    4890:	96 e0       	ldi	r25, 0x06	; 6
    4892:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <_Z12UWriteStringPKci>
#endif
				if(timeout++ >= CGATT_TIMEOUT)
    4896:	80 91 1a 0c 	lds	r24, 0x0C1A	; 0x800c1a <_ZZ12gprs_connectvE7timeout>
    489a:	90 91 1b 0c 	lds	r25, 0x0C1B	; 0x800c1b <_ZZ12gprs_connectvE7timeout+0x1>
    489e:	8a 30       	cpi	r24, 0x0A	; 10
    48a0:	91 05       	cpc	r25, r1
    48a2:	38 f4       	brcc	.+14     	; 0x48b2 <_Z12gprs_connectv+0x7ea>
    48a4:	01 96       	adiw	r24, 0x01	; 1
    48a6:	90 93 1b 0c 	sts	0x0C1B, r25	; 0x800c1b <_ZZ12gprs_connectvE7timeout+0x1>
    48aa:	80 93 1a 0c 	sts	0x0C1A, r24	; 0x800c1a <_ZZ12gprs_connectvE7timeout>
}
#endif

con_status_t gprs_connect(void)
{
	con_status_t sts = CON_IN_PRG;
    48ae:	82 e0       	ldi	r24, 0x02	; 2
    48b0:	89 c3       	rjmp	.+1810   	; 0x4fc4 <_Z12gprs_connectv+0xefc>
#ifdef GPRS_DEBUG
UWriteString("CG:w", UART_PC);
#endif
				if(timeout++ >= CGATT_TIMEOUT)
				{
					timeout = 0;
    48b2:	10 92 1b 0c 	sts	0x0C1B, r1	; 0x800c1b <_ZZ12gprs_connectvE7timeout+0x1>
    48b6:	10 92 1a 0c 	sts	0x0C1A, r1	; 0x800c1a <_ZZ12gprs_connectvE7timeout>
					gprs_connct_state = GPRS_CONNCT_CMD_CGATT;
    48ba:	8f e0       	ldi	r24, 0x0F	; 15
    48bc:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <_ZZ12gprs_connectvE17gprs_connct_state>
				
					if (gprs_retry_count++ >= RETRY_CNT)
    48c0:	80 91 19 0c 	lds	r24, 0x0C19	; 0x800c19 <_ZZ12gprs_connectvE16gprs_retry_count>
    48c4:	91 e0       	ldi	r25, 0x01	; 1
    48c6:	98 0f       	add	r25, r24
    48c8:	90 93 19 0c 	sts	0x0C19, r25	; 0x800c19 <_ZZ12gprs_connectvE16gprs_retry_count>
    48cc:	83 30       	cpi	r24, 0x03	; 3
    48ce:	08 f4       	brcc	.+2      	; 0x48d2 <_Z12gprs_connectv+0x80a>
    48d0:	4c c3       	rjmp	.+1688   	; 0x4f6a <_Z12gprs_connectv+0xea2>
					{
						gprs.module_status = NOT_AVBL;
    48d2:	e4 ee       	ldi	r30, 0xE4	; 228
    48d4:	f2 e1       	ldi	r31, 0x12	; 18
    48d6:	10 8a       	std	Z+16, r1	; 0x10
					
						gprs.errcode = CON_ERR_OFFSET + GPRS_CONNCT_RSP_CGATT;
    48d8:	80 eb       	ldi	r24, 0xB0	; 176
    48da:	86 8b       	std	Z+22, r24	; 0x16
						sts = CON_FAIL;
					
						gprs_connct_state = GPRS_CONNCT_RESET;			
    48dc:	10 92 16 02 	sts	0x0216, r1	; 0x800216 <_ZZ12gprs_connectvE17gprs_connct_state>
						gprs_retry_count = 0;
    48e0:	10 92 19 0c 	sts	0x0C19, r1	; 0x800c19 <_ZZ12gprs_connectvE16gprs_retry_count>
					if (gprs_retry_count++ >= RETRY_CNT)
					{
						gprs.module_status = NOT_AVBL;
					
						gprs.errcode = CON_ERR_OFFSET + GPRS_CONNCT_RSP_CGATT;
						sts = CON_FAIL;
    48e4:	81 e0       	ldi	r24, 0x01	; 1
    48e6:	6e c3       	rjmp	.+1756   	; 0x4fc4 <_Z12gprs_connectv+0xefc>
		break;
#ifdef HTTP_ENABLE
		case GPRS_CONNCT_CMD_SAPBR_TYPE:
		{
#ifdef GPRS_DEBUG
			UWriteString((char *)"cmd: CONTYPE",UART_PC);
    48e8:	62 e0       	ldi	r22, 0x02	; 2
    48ea:	70 e0       	ldi	r23, 0x00	; 0
    48ec:	8c e8       	ldi	r24, 0x8C	; 140
    48ee:	96 e0       	ldi	r25, 0x06	; 6
    48f0:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <_Z12UWriteStringPKci>
#endif			
			flushRxBuffer(GPRS_UART);
    48f4:	80 e0       	ldi	r24, 0x00	; 0
    48f6:	90 e0       	ldi	r25, 0x00	; 0
    48f8:	0e 94 d7 09 	call	0x13ae	; 0x13ae <_Z13flushRxBufferi>
			UWriteString((char *)"AT+SAPBR=3,1,\"CONTYPE\",\"GPRS\"\r", GPRS_UART);
    48fc:	60 e0       	ldi	r22, 0x00	; 0
    48fe:	70 e0       	ldi	r23, 0x00	; 0
    4900:	89 e9       	ldi	r24, 0x99	; 153
    4902:	96 e0       	ldi	r25, 0x06	; 6
    4904:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <_Z12UWriteStringPKci>
			gprs_connct_state = GPRS_CONNCT_RSP_SAPBR_TYPE;
    4908:	8c e1       	ldi	r24, 0x1C	; 28
    490a:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <_ZZ12gprs_connectvE17gprs_connct_state>
}
#endif

con_status_t gprs_connect(void)
{
	con_status_t sts = CON_IN_PRG;
    490e:	82 e0       	ldi	r24, 0x02	; 2
#endif			
			flushRxBuffer(GPRS_UART);
			UWriteString((char *)"AT+SAPBR=3,1,\"CONTYPE\",\"GPRS\"\r", GPRS_UART);
			gprs_connct_state = GPRS_CONNCT_RSP_SAPBR_TYPE;
		}
		break;	
    4910:	59 c3       	rjmp	.+1714   	; 0x4fc4 <_Z12gprs_connectv+0xefc>
		case GPRS_CONNCT_RSP_SAPBR_TYPE:
			switch (check_string_nobuf("OK"))
    4912:	85 e4       	ldi	r24, 0x45	; 69
    4914:	95 e0       	ldi	r25, 0x05	; 5
    4916:	0e 94 fc 45 	call	0x8bf8	; 0x8bf8 <_Z18check_string_nobufPKc>
    491a:	81 30       	cpi	r24, 0x01	; 1
    491c:	21 f0       	breq	.+8      	; 0x4926 <_Z12gprs_connectv+0x85e>
    491e:	78 f1       	brcs	.+94     	; 0x497e <_Z12gprs_connectv+0x8b6>
    4920:	82 30       	cpi	r24, 0x02	; 2
    4922:	e1 f0       	breq	.+56     	; 0x495c <_Z12gprs_connectv+0x894>
    4924:	24 c3       	rjmp	.+1608   	; 0x4f6e <_Z12gprs_connectv+0xea6>
			{
				case (GPRS_MATCH_FAIL):
#ifdef GPRS_DEBUG
					UWriteString((char *)"SAT:f", UART_PC);
    4926:	62 e0       	ldi	r22, 0x02	; 2
    4928:	70 e0       	ldi	r23, 0x00	; 0
    492a:	88 eb       	ldi	r24, 0xB8	; 184
    492c:	96 e0       	ldi	r25, 0x06	; 6
    492e:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <_Z12UWriteStringPKci>
#endif				
					gprs_connct_state = GPRS_CONNCT_CMD_SAPBR_TYPE;
    4932:	8b e1       	ldi	r24, 0x1B	; 27
    4934:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <_ZZ12gprs_connectvE17gprs_connct_state>
				
					if (gprs_retry_count++ >= RETRY_CNT)
    4938:	80 91 19 0c 	lds	r24, 0x0C19	; 0x800c19 <_ZZ12gprs_connectvE16gprs_retry_count>
    493c:	91 e0       	ldi	r25, 0x01	; 1
    493e:	98 0f       	add	r25, r24
    4940:	90 93 19 0c 	sts	0x0C19, r25	; 0x800c19 <_ZZ12gprs_connectvE16gprs_retry_count>
    4944:	83 30       	cpi	r24, 0x03	; 3
    4946:	08 f4       	brcc	.+2      	; 0x494a <_Z12gprs_connectv+0x882>
    4948:	14 c3       	rjmp	.+1576   	; 0x4f72 <_Z12gprs_connectv+0xeaa>
					{
						gprs.errcode = CON_ERR_OFFSET + GPRS_CONNCT_RSP_SAPBR_TYPE;
    494a:	8c eb       	ldi	r24, 0xBC	; 188
    494c:	80 93 fa 12 	sts	0x12FA, r24	; 0x8012fa <gprs+0x16>
						sts = CON_FAIL;
						
						gprs_connct_state = GPRS_CONNCT_RESET;			
    4950:	10 92 16 02 	sts	0x0216, r1	; 0x800216 <_ZZ12gprs_connectvE17gprs_connct_state>
						gprs_retry_count = 0;
    4954:	10 92 19 0c 	sts	0x0C19, r1	; 0x800c19 <_ZZ12gprs_connectvE16gprs_retry_count>
					gprs_connct_state = GPRS_CONNCT_CMD_SAPBR_TYPE;
				
					if (gprs_retry_count++ >= RETRY_CNT)
					{
						gprs.errcode = CON_ERR_OFFSET + GPRS_CONNCT_RSP_SAPBR_TYPE;
						sts = CON_FAIL;
    4958:	81 e0       	ldi	r24, 0x01	; 1
    495a:	34 c3       	rjmp	.+1640   	; 0x4fc4 <_Z12gprs_connectv+0xefc>
						gprs_retry_count = 0;
					}
				break;
				case (GPRS_MATCH_OK):
#ifdef GPRS_DEBUG
					UWriteString((char *)"SAT:k", UART_PC);
    495c:	62 e0       	ldi	r22, 0x02	; 2
    495e:	70 e0       	ldi	r23, 0x00	; 0
    4960:	8e eb       	ldi	r24, 0xBE	; 190
    4962:	96 e0       	ldi	r25, 0x06	; 6
    4964:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <_Z12UWriteStringPKci>
#endif					
					gprs_connct_state = GPRS_CONNCT_CMD_SAPBR_APN;
    4968:	8d e1       	ldi	r24, 0x1D	; 29
    496a:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <_ZZ12gprs_connectvE17gprs_connct_state>
					gprs_retry_count = 0;
    496e:	10 92 19 0c 	sts	0x0C19, r1	; 0x800c19 <_ZZ12gprs_connectvE16gprs_retry_count>
					timeout = 0;
    4972:	10 92 1b 0c 	sts	0x0C1B, r1	; 0x800c1b <_ZZ12gprs_connectvE7timeout+0x1>
    4976:	10 92 1a 0c 	sts	0x0C1A, r1	; 0x800c1a <_ZZ12gprs_connectvE7timeout>
}
#endif

con_status_t gprs_connect(void)
{
	con_status_t sts = CON_IN_PRG;
    497a:	82 e0       	ldi	r24, 0x02	; 2
					UWriteString((char *)"SAT:k", UART_PC);
#endif					
					gprs_connct_state = GPRS_CONNCT_CMD_SAPBR_APN;
					gprs_retry_count = 0;
					timeout = 0;
				break;
    497c:	23 c3       	rjmp	.+1606   	; 0x4fc4 <_Z12gprs_connectv+0xefc>
				case (GPRS_NO_NEW_MSG):
#ifdef GPRS_DEBUG
					UWriteString((char *)"SAT:w", UART_PC);
    497e:	62 e0       	ldi	r22, 0x02	; 2
    4980:	70 e0       	ldi	r23, 0x00	; 0
    4982:	84 ec       	ldi	r24, 0xC4	; 196
    4984:	96 e0       	ldi	r25, 0x06	; 6
    4986:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <_Z12UWriteStringPKci>
#endif					
					if(timeout++ >= SAPBR_TYPE_TIMEOUT)
    498a:	80 91 1a 0c 	lds	r24, 0x0C1A	; 0x800c1a <_ZZ12gprs_connectvE7timeout>
    498e:	90 91 1b 0c 	lds	r25, 0x0C1B	; 0x800c1b <_ZZ12gprs_connectvE7timeout+0x1>
    4992:	8a 30       	cpi	r24, 0x0A	; 10
    4994:	91 05       	cpc	r25, r1
    4996:	38 f4       	brcc	.+14     	; 0x49a6 <_Z12gprs_connectv+0x8de>
    4998:	01 96       	adiw	r24, 0x01	; 1
    499a:	90 93 1b 0c 	sts	0x0C1B, r25	; 0x800c1b <_ZZ12gprs_connectvE7timeout+0x1>
    499e:	80 93 1a 0c 	sts	0x0C1A, r24	; 0x800c1a <_ZZ12gprs_connectvE7timeout>
}
#endif

con_status_t gprs_connect(void)
{
	con_status_t sts = CON_IN_PRG;
    49a2:	82 e0       	ldi	r24, 0x02	; 2
    49a4:	0f c3       	rjmp	.+1566   	; 0x4fc4 <_Z12gprs_connectv+0xefc>
#ifdef GPRS_DEBUG
					UWriteString((char *)"SAT:w", UART_PC);
#endif					
					if(timeout++ >= SAPBR_TYPE_TIMEOUT)
					{
						timeout = 0;
    49a6:	10 92 1b 0c 	sts	0x0C1B, r1	; 0x800c1b <_ZZ12gprs_connectvE7timeout+0x1>
    49aa:	10 92 1a 0c 	sts	0x0C1A, r1	; 0x800c1a <_ZZ12gprs_connectvE7timeout>
						gprs_connct_state = GPRS_CONNCT_CMD_SAPBR_TYPE;
    49ae:	8b e1       	ldi	r24, 0x1B	; 27
    49b0:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <_ZZ12gprs_connectvE17gprs_connct_state>
					
						if (gprs_retry_count++ >= RETRY_CNT)
    49b4:	80 91 19 0c 	lds	r24, 0x0C19	; 0x800c19 <_ZZ12gprs_connectvE16gprs_retry_count>
    49b8:	91 e0       	ldi	r25, 0x01	; 1
    49ba:	98 0f       	add	r25, r24
    49bc:	90 93 19 0c 	sts	0x0C19, r25	; 0x800c19 <_ZZ12gprs_connectvE16gprs_retry_count>
    49c0:	83 30       	cpi	r24, 0x03	; 3
    49c2:	08 f4       	brcc	.+2      	; 0x49c6 <_Z12gprs_connectv+0x8fe>
    49c4:	d8 c2       	rjmp	.+1456   	; 0x4f76 <_Z12gprs_connectv+0xeae>
						{
							gprs.module_status = NOT_AVBL;
    49c6:	e4 ee       	ldi	r30, 0xE4	; 228
    49c8:	f2 e1       	ldi	r31, 0x12	; 18
    49ca:	10 8a       	std	Z+16, r1	; 0x10
					
							gprs.errcode = CON_ERR_OFFSET + GPRS_CONNCT_RSP_SAPBR_TYPE;
    49cc:	8c eb       	ldi	r24, 0xBC	; 188
    49ce:	86 8b       	std	Z+22, r24	; 0x16
							sts = CON_FAIL;
							
							gprs_connct_state = GPRS_CONNCT_RESET;			//
    49d0:	10 92 16 02 	sts	0x0216, r1	; 0x800216 <_ZZ12gprs_connectvE17gprs_connct_state>
							gprs_retry_count = 0;
    49d4:	10 92 19 0c 	sts	0x0C19, r1	; 0x800c19 <_ZZ12gprs_connectvE16gprs_retry_count>
						if (gprs_retry_count++ >= RETRY_CNT)
						{
							gprs.module_status = NOT_AVBL;
					
							gprs.errcode = CON_ERR_OFFSET + GPRS_CONNCT_RSP_SAPBR_TYPE;
							sts = CON_FAIL;
    49d8:	81 e0       	ldi	r24, 0x01	; 1
    49da:	f4 c2       	rjmp	.+1512   	; 0x4fc4 <_Z12gprs_connectv+0xefc>
		break;
		case GPRS_CONNCT_CMD_SAPBR_APN:
		{
			char tmpstr[CMD_BUFFER_LEN];
#ifdef GPRS_DEBUG			
			UWriteString((char *)"cmd: APN",UART_PC);
    49dc:	62 e0       	ldi	r22, 0x02	; 2
    49de:	70 e0       	ldi	r23, 0x00	; 0
    49e0:	8a ec       	ldi	r24, 0xCA	; 202
    49e2:	96 e0       	ldi	r25, 0x06	; 6
    49e4:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <_Z12UWriteStringPKci>
#endif			
			flushRxBuffer(GPRS_UART);
    49e8:	80 e0       	ldi	r24, 0x00	; 0
    49ea:	90 e0       	ldi	r25, 0x00	; 0
    49ec:	0e 94 d7 09 	call	0x13ae	; 0x13ae <_Z13flushRxBufferi>
			sprintf(tmpstr,"AT+SAPBR=3,1,\"APN\",\"%s\"\r", gprs_config_data.apn);
    49f0:	84 eb       	ldi	r24, 0xB4	; 180
    49f2:	92 e1       	ldi	r25, 0x12	; 18
    49f4:	9f 93       	push	r25
    49f6:	8f 93       	push	r24
    49f8:	83 ed       	ldi	r24, 0xD3	; 211
    49fa:	96 e0       	ldi	r25, 0x06	; 6
    49fc:	9f 93       	push	r25
    49fe:	8f 93       	push	r24
    4a00:	8e 01       	movw	r16, r28
    4a02:	0d 5f       	subi	r16, 0xFD	; 253
    4a04:	1f 4f       	sbci	r17, 0xFF	; 255
    4a06:	1f 93       	push	r17
    4a08:	0f 93       	push	r16
    4a0a:	0e 94 f4 47 	call	0x8fe8	; 0x8fe8 <sprintf>
						
			UWriteString(tmpstr, GPRS_UART);
    4a0e:	60 e0       	ldi	r22, 0x00	; 0
    4a10:	70 e0       	ldi	r23, 0x00	; 0
    4a12:	c8 01       	movw	r24, r16
    4a14:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <_Z12UWriteStringPKci>
			gprs_connct_state = GPRS_CONNCT_RSP_SAPBR_APN;		//Anand 27-04-16
    4a18:	8e e1       	ldi	r24, 0x1E	; 30
    4a1a:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <_ZZ12gprs_connectvE17gprs_connct_state>
		}
		break;	
    4a1e:	0f 90       	pop	r0
    4a20:	0f 90       	pop	r0
    4a22:	0f 90       	pop	r0
    4a24:	0f 90       	pop	r0
    4a26:	0f 90       	pop	r0
    4a28:	0f 90       	pop	r0
}
#endif

con_status_t gprs_connect(void)
{
	con_status_t sts = CON_IN_PRG;
    4a2a:	82 e0       	ldi	r24, 0x02	; 2
			sprintf(tmpstr,"AT+SAPBR=3,1,\"APN\",\"%s\"\r", gprs_config_data.apn);
						
			UWriteString(tmpstr, GPRS_UART);
			gprs_connct_state = GPRS_CONNCT_RSP_SAPBR_APN;		//Anand 27-04-16
		}
		break;	
    4a2c:	cb c2       	rjmp	.+1430   	; 0x4fc4 <_Z12gprs_connectv+0xefc>
		case GPRS_CONNCT_RSP_SAPBR_APN:
			switch (check_string_nobuf("OK"))
    4a2e:	85 e4       	ldi	r24, 0x45	; 69
    4a30:	95 e0       	ldi	r25, 0x05	; 5
    4a32:	0e 94 fc 45 	call	0x8bf8	; 0x8bf8 <_Z18check_string_nobufPKc>
    4a36:	81 30       	cpi	r24, 0x01	; 1
    4a38:	21 f0       	breq	.+8      	; 0x4a42 <_Z12gprs_connectv+0x97a>
    4a3a:	78 f1       	brcs	.+94     	; 0x4a9a <_Z12gprs_connectv+0x9d2>
    4a3c:	82 30       	cpi	r24, 0x02	; 2
    4a3e:	e1 f0       	breq	.+56     	; 0x4a78 <_Z12gprs_connectv+0x9b0>
    4a40:	9c c2       	rjmp	.+1336   	; 0x4f7a <_Z12gprs_connectv+0xeb2>
			{
				case (GPRS_MATCH_FAIL):
#ifdef GPRS_DEBUG
					UWriteString((char *)"SAA:f", UART_PC);
    4a42:	62 e0       	ldi	r22, 0x02	; 2
    4a44:	70 e0       	ldi	r23, 0x00	; 0
    4a46:	8c ee       	ldi	r24, 0xEC	; 236
    4a48:	96 e0       	ldi	r25, 0x06	; 6
    4a4a:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <_Z12UWriteStringPKci>
#endif					
					gprs_connct_state = GPRS_CONNCT_CMD_SAPBR_APN;
    4a4e:	8d e1       	ldi	r24, 0x1D	; 29
    4a50:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <_ZZ12gprs_connectvE17gprs_connct_state>
				
					if (gprs_retry_count++ >= RETRY_CNT)
    4a54:	80 91 19 0c 	lds	r24, 0x0C19	; 0x800c19 <_ZZ12gprs_connectvE16gprs_retry_count>
    4a58:	91 e0       	ldi	r25, 0x01	; 1
    4a5a:	98 0f       	add	r25, r24
    4a5c:	90 93 19 0c 	sts	0x0C19, r25	; 0x800c19 <_ZZ12gprs_connectvE16gprs_retry_count>
    4a60:	83 30       	cpi	r24, 0x03	; 3
    4a62:	08 f4       	brcc	.+2      	; 0x4a66 <_Z12gprs_connectv+0x99e>
    4a64:	8c c2       	rjmp	.+1304   	; 0x4f7e <_Z12gprs_connectv+0xeb6>
					{
						gprs.errcode = CON_ERR_OFFSET + GPRS_CONNCT_RSP_SAPBR_APN;
    4a66:	8e eb       	ldi	r24, 0xBE	; 190
    4a68:	80 93 fa 12 	sts	0x12FA, r24	; 0x8012fa <gprs+0x16>
						sts = CON_FAIL;
						
						gprs_connct_state = GPRS_CONNCT_RESET;			
    4a6c:	10 92 16 02 	sts	0x0216, r1	; 0x800216 <_ZZ12gprs_connectvE17gprs_connct_state>
						gprs_retry_count = 0;
    4a70:	10 92 19 0c 	sts	0x0C19, r1	; 0x800c19 <_ZZ12gprs_connectvE16gprs_retry_count>
					gprs_connct_state = GPRS_CONNCT_CMD_SAPBR_APN;
				
					if (gprs_retry_count++ >= RETRY_CNT)
					{
						gprs.errcode = CON_ERR_OFFSET + GPRS_CONNCT_RSP_SAPBR_APN;
						sts = CON_FAIL;
    4a74:	81 e0       	ldi	r24, 0x01	; 1
    4a76:	a6 c2       	rjmp	.+1356   	; 0x4fc4 <_Z12gprs_connectv+0xefc>
						gprs_retry_count = 0;
					}
				break;
				case (GPRS_MATCH_OK):
#ifdef GPRS_DEBUG
					UWriteString((char *)"SAA:k", UART_PC);
    4a78:	62 e0       	ldi	r22, 0x02	; 2
    4a7a:	70 e0       	ldi	r23, 0x00	; 0
    4a7c:	82 ef       	ldi	r24, 0xF2	; 242
    4a7e:	96 e0       	ldi	r25, 0x06	; 6
    4a80:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <_Z12UWriteStringPKci>
#endif					
					gprs_connct_state = GPRS_CONNCT_CMD_SAPBR_IP;
    4a84:	8f e1       	ldi	r24, 0x1F	; 31
    4a86:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <_ZZ12gprs_connectvE17gprs_connct_state>
					gprs_retry_count = 0;
    4a8a:	10 92 19 0c 	sts	0x0C19, r1	; 0x800c19 <_ZZ12gprs_connectvE16gprs_retry_count>
					timeout = 0;
    4a8e:	10 92 1b 0c 	sts	0x0C1B, r1	; 0x800c1b <_ZZ12gprs_connectvE7timeout+0x1>
    4a92:	10 92 1a 0c 	sts	0x0C1A, r1	; 0x800c1a <_ZZ12gprs_connectvE7timeout>
}
#endif

con_status_t gprs_connect(void)
{
	con_status_t sts = CON_IN_PRG;
    4a96:	82 e0       	ldi	r24, 0x02	; 2
					UWriteString((char *)"SAA:k", UART_PC);
#endif					
					gprs_connct_state = GPRS_CONNCT_CMD_SAPBR_IP;
					gprs_retry_count = 0;
					timeout = 0;
				break;
    4a98:	95 c2       	rjmp	.+1322   	; 0x4fc4 <_Z12gprs_connectv+0xefc>
				case (GPRS_NO_NEW_MSG):
#ifdef GPRS_DEBUG
					UWriteString("SAA:w", UART_PC);
    4a9a:	62 e0       	ldi	r22, 0x02	; 2
    4a9c:	70 e0       	ldi	r23, 0x00	; 0
    4a9e:	88 ef       	ldi	r24, 0xF8	; 248
    4aa0:	96 e0       	ldi	r25, 0x06	; 6
    4aa2:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <_Z12UWriteStringPKci>
#endif								
					if(timeout++ >= SAPBR_APN_TIMEOUT)
    4aa6:	80 91 1a 0c 	lds	r24, 0x0C1A	; 0x800c1a <_ZZ12gprs_connectvE7timeout>
    4aaa:	90 91 1b 0c 	lds	r25, 0x0C1B	; 0x800c1b <_ZZ12gprs_connectvE7timeout+0x1>
    4aae:	88 3c       	cpi	r24, 0xC8	; 200
    4ab0:	91 05       	cpc	r25, r1
    4ab2:	38 f4       	brcc	.+14     	; 0x4ac2 <_Z12gprs_connectv+0x9fa>
    4ab4:	01 96       	adiw	r24, 0x01	; 1
    4ab6:	90 93 1b 0c 	sts	0x0C1B, r25	; 0x800c1b <_ZZ12gprs_connectvE7timeout+0x1>
    4aba:	80 93 1a 0c 	sts	0x0C1A, r24	; 0x800c1a <_ZZ12gprs_connectvE7timeout>
}
#endif

con_status_t gprs_connect(void)
{
	con_status_t sts = CON_IN_PRG;
    4abe:	82 e0       	ldi	r24, 0x02	; 2
    4ac0:	81 c2       	rjmp	.+1282   	; 0x4fc4 <_Z12gprs_connectv+0xefc>
#ifdef GPRS_DEBUG
					UWriteString("SAA:w", UART_PC);
#endif								
					if(timeout++ >= SAPBR_APN_TIMEOUT)
					{
						timeout = 0;
    4ac2:	10 92 1b 0c 	sts	0x0C1B, r1	; 0x800c1b <_ZZ12gprs_connectvE7timeout+0x1>
    4ac6:	10 92 1a 0c 	sts	0x0C1A, r1	; 0x800c1a <_ZZ12gprs_connectvE7timeout>
						gprs_connct_state = GPRS_CONNCT_CMD_SAPBR_APN;
    4aca:	8d e1       	ldi	r24, 0x1D	; 29
    4acc:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <_ZZ12gprs_connectvE17gprs_connct_state>
					
						if (gprs_retry_count++ >= RETRY_CNT)
    4ad0:	80 91 19 0c 	lds	r24, 0x0C19	; 0x800c19 <_ZZ12gprs_connectvE16gprs_retry_count>
    4ad4:	91 e0       	ldi	r25, 0x01	; 1
    4ad6:	98 0f       	add	r25, r24
    4ad8:	90 93 19 0c 	sts	0x0C19, r25	; 0x800c19 <_ZZ12gprs_connectvE16gprs_retry_count>
    4adc:	83 30       	cpi	r24, 0x03	; 3
    4ade:	08 f4       	brcc	.+2      	; 0x4ae2 <_Z12gprs_connectv+0xa1a>
    4ae0:	50 c2       	rjmp	.+1184   	; 0x4f82 <_Z12gprs_connectv+0xeba>
						{
							gprs.module_status = NOT_AVBL;
    4ae2:	e4 ee       	ldi	r30, 0xE4	; 228
    4ae4:	f2 e1       	ldi	r31, 0x12	; 18
    4ae6:	10 8a       	std	Z+16, r1	; 0x10
							
							gprs.errcode = CON_ERR_OFFSET + GPRS_CONNCT_RSP_SAPBR_APN;
    4ae8:	8e eb       	ldi	r24, 0xBE	; 190
    4aea:	86 8b       	std	Z+22, r24	; 0x16
							sts = CON_FAIL;
							
							gprs_connct_state = GPRS_CONNCT_RESET;			
    4aec:	10 92 16 02 	sts	0x0216, r1	; 0x800216 <_ZZ12gprs_connectvE17gprs_connct_state>
							gprs_retry_count = 0;
    4af0:	10 92 19 0c 	sts	0x0C19, r1	; 0x800c19 <_ZZ12gprs_connectvE16gprs_retry_count>
						if (gprs_retry_count++ >= RETRY_CNT)
						{
							gprs.module_status = NOT_AVBL;
							
							gprs.errcode = CON_ERR_OFFSET + GPRS_CONNCT_RSP_SAPBR_APN;
							sts = CON_FAIL;
    4af4:	81 e0       	ldi	r24, 0x01	; 1
    4af6:	66 c2       	rjmp	.+1228   	; 0x4fc4 <_Z12gprs_connectv+0xefc>
			}
		break;
		case GPRS_CONNCT_CMD_SAPBR_IP:
		{
#ifdef GPRS_DEBUG
			UWriteString((char *)"cmd: IP", UART_PC);
    4af8:	62 e0       	ldi	r22, 0x02	; 2
    4afa:	70 e0       	ldi	r23, 0x00	; 0
    4afc:	8e ef       	ldi	r24, 0xFE	; 254
    4afe:	96 e0       	ldi	r25, 0x06	; 6
    4b00:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <_Z12UWriteStringPKci>
#endif			
			flushRxBuffer(GPRS_UART);
    4b04:	80 e0       	ldi	r24, 0x00	; 0
    4b06:	90 e0       	ldi	r25, 0x00	; 0
    4b08:	0e 94 d7 09 	call	0x13ae	; 0x13ae <_Z13flushRxBufferi>
			UWriteString((char *)"AT+SAPBR=1,1\r", GPRS_UART);
    4b0c:	60 e0       	ldi	r22, 0x00	; 0
    4b0e:	70 e0       	ldi	r23, 0x00	; 0
    4b10:	86 e0       	ldi	r24, 0x06	; 6
    4b12:	97 e0       	ldi	r25, 0x07	; 7
    4b14:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <_Z12UWriteStringPKci>
			gprs_connct_state = GPRS_CONNCT_RSP_SAPBR_IP;
    4b18:	80 e2       	ldi	r24, 0x20	; 32
    4b1a:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <_ZZ12gprs_connectvE17gprs_connct_state>
}
#endif

con_status_t gprs_connect(void)
{
	con_status_t sts = CON_IN_PRG;
    4b1e:	82 e0       	ldi	r24, 0x02	; 2
#endif			
			flushRxBuffer(GPRS_UART);
			UWriteString((char *)"AT+SAPBR=1,1\r", GPRS_UART);
			gprs_connct_state = GPRS_CONNCT_RSP_SAPBR_IP;
		}
		break;	
    4b20:	51 c2       	rjmp	.+1186   	; 0x4fc4 <_Z12gprs_connectv+0xefc>
		case GPRS_CONNCT_RSP_SAPBR_IP:
			switch (check_string_nobuf("OK"))
    4b22:	85 e4       	ldi	r24, 0x45	; 69
    4b24:	95 e0       	ldi	r25, 0x05	; 5
    4b26:	0e 94 fc 45 	call	0x8bf8	; 0x8bf8 <_Z18check_string_nobufPKc>
    4b2a:	81 30       	cpi	r24, 0x01	; 1
    4b2c:	21 f0       	breq	.+8      	; 0x4b36 <_Z12gprs_connectv+0xa6e>
    4b2e:	80 f1       	brcs	.+96     	; 0x4b90 <_Z12gprs_connectv+0xac8>
    4b30:	82 30       	cpi	r24, 0x02	; 2
    4b32:	e9 f0       	breq	.+58     	; 0x4b6e <_Z12gprs_connectv+0xaa6>
    4b34:	28 c2       	rjmp	.+1104   	; 0x4f86 <_Z12gprs_connectv+0xebe>
			{
				case (GPRS_MATCH_FAIL):
#ifdef GPRS_DEBUG
					UWriteString((char *)"IP:f", UART_PC);
    4b36:	62 e0       	ldi	r22, 0x02	; 2
    4b38:	70 e0       	ldi	r23, 0x00	; 0
    4b3a:	84 e1       	ldi	r24, 0x14	; 20
    4b3c:	97 e0       	ldi	r25, 0x07	; 7
    4b3e:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <_Z12UWriteStringPKci>
#endif				
					gprs_connct_state = GPRS_CONNCT_CMD_SAPBR_IP;
    4b42:	8f e1       	ldi	r24, 0x1F	; 31
    4b44:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <_ZZ12gprs_connectvE17gprs_connct_state>
					
					if (gprs_retry_count++ >= RETRY_CNT)
    4b48:	80 91 19 0c 	lds	r24, 0x0C19	; 0x800c19 <_ZZ12gprs_connectvE16gprs_retry_count>
    4b4c:	91 e0       	ldi	r25, 0x01	; 1
    4b4e:	98 0f       	add	r25, r24
    4b50:	90 93 19 0c 	sts	0x0C19, r25	; 0x800c19 <_ZZ12gprs_connectvE16gprs_retry_count>
    4b54:	83 30       	cpi	r24, 0x03	; 3
    4b56:	08 f4       	brcc	.+2      	; 0x4b5a <_Z12gprs_connectv+0xa92>
    4b58:	18 c2       	rjmp	.+1072   	; 0x4f8a <_Z12gprs_connectv+0xec2>
					{
						gprs.errcode = CON_ERR_OFFSET + GPRS_CONNCT_RSP_SAPBR_IP;
    4b5a:	80 ec       	ldi	r24, 0xC0	; 192
    4b5c:	80 93 fa 12 	sts	0x12FA, r24	; 0x8012fa <gprs+0x16>
					
						gprs_connct_state = GPRS_CONNCT_CMD_SAPBR_DISCON;			
    4b60:	8c e2       	ldi	r24, 0x2C	; 44
    4b62:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <_ZZ12gprs_connectvE17gprs_connct_state>
						gprs_retry_count = 0;
    4b66:	10 92 19 0c 	sts	0x0C19, r1	; 0x800c19 <_ZZ12gprs_connectvE16gprs_retry_count>
}
#endif

con_status_t gprs_connect(void)
{
	con_status_t sts = CON_IN_PRG;
    4b6a:	82 e0       	ldi	r24, 0x02	; 2
    4b6c:	2b c2       	rjmp	.+1110   	; 0x4fc4 <_Z12gprs_connectv+0xefc>
						gprs_retry_count = 0;
					}
				break;
				case (GPRS_MATCH_OK):
#ifdef GPRS_DEBUG
					UWriteString((char *)"IP:k", UART_PC);
    4b6e:	62 e0       	ldi	r22, 0x02	; 2
    4b70:	70 e0       	ldi	r23, 0x00	; 0
    4b72:	89 e1       	ldi	r24, 0x19	; 25
    4b74:	97 e0       	ldi	r25, 0x07	; 7
    4b76:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <_Z12UWriteStringPKci>
#endif					
					//We have passed all steps so lets make status ok
					sts = CON_OK;
					gprs_connct_state = GPRS_CONNCT_CMD_ECHO_OFF;
    4b7a:	82 e0       	ldi	r24, 0x02	; 2
    4b7c:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <_ZZ12gprs_connectvE17gprs_connct_state>
					
					gprs_retry_count = 0;
    4b80:	10 92 19 0c 	sts	0x0C19, r1	; 0x800c19 <_ZZ12gprs_connectvE16gprs_retry_count>
					timeout = 0;
    4b84:	10 92 1b 0c 	sts	0x0C1B, r1	; 0x800c1b <_ZZ12gprs_connectvE7timeout+0x1>
    4b88:	10 92 1a 0c 	sts	0x0C1A, r1	; 0x800c1a <_ZZ12gprs_connectvE7timeout>
				case (GPRS_MATCH_OK):
#ifdef GPRS_DEBUG
					UWriteString((char *)"IP:k", UART_PC);
#endif					
					//We have passed all steps so lets make status ok
					sts = CON_OK;
    4b8c:	80 e0       	ldi	r24, 0x00	; 0
					gprs_connct_state = GPRS_CONNCT_CMD_ECHO_OFF;
					
					gprs_retry_count = 0;
					timeout = 0;
				break;
    4b8e:	1a c2       	rjmp	.+1076   	; 0x4fc4 <_Z12gprs_connectv+0xefc>
				case (GPRS_NO_NEW_MSG):
#ifdef GPRS_DEBUG
					UWriteString("IP:w", UART_PC);
    4b90:	62 e0       	ldi	r22, 0x02	; 2
    4b92:	70 e0       	ldi	r23, 0x00	; 0
    4b94:	8e e1       	ldi	r24, 0x1E	; 30
    4b96:	97 e0       	ldi	r25, 0x07	; 7
    4b98:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <_Z12UWriteStringPKci>
#endif					
					if(timeout++ >= SAPBR_APN_TIMEOUT)
    4b9c:	80 91 1a 0c 	lds	r24, 0x0C1A	; 0x800c1a <_ZZ12gprs_connectvE7timeout>
    4ba0:	90 91 1b 0c 	lds	r25, 0x0C1B	; 0x800c1b <_ZZ12gprs_connectvE7timeout+0x1>
    4ba4:	88 3c       	cpi	r24, 0xC8	; 200
    4ba6:	91 05       	cpc	r25, r1
    4ba8:	38 f4       	brcc	.+14     	; 0x4bb8 <_Z12gprs_connectv+0xaf0>
    4baa:	01 96       	adiw	r24, 0x01	; 1
    4bac:	90 93 1b 0c 	sts	0x0C1B, r25	; 0x800c1b <_ZZ12gprs_connectvE7timeout+0x1>
    4bb0:	80 93 1a 0c 	sts	0x0C1A, r24	; 0x800c1a <_ZZ12gprs_connectvE7timeout>
}
#endif

con_status_t gprs_connect(void)
{
	con_status_t sts = CON_IN_PRG;
    4bb4:	82 e0       	ldi	r24, 0x02	; 2
    4bb6:	06 c2       	rjmp	.+1036   	; 0x4fc4 <_Z12gprs_connectv+0xefc>
#ifdef GPRS_DEBUG
					UWriteString("IP:w", UART_PC);
#endif					
					if(timeout++ >= SAPBR_APN_TIMEOUT)
					{
						timeout = 0;
    4bb8:	10 92 1b 0c 	sts	0x0C1B, r1	; 0x800c1b <_ZZ12gprs_connectvE7timeout+0x1>
    4bbc:	10 92 1a 0c 	sts	0x0C1A, r1	; 0x800c1a <_ZZ12gprs_connectvE7timeout>
						gprs_connct_state = GPRS_CONNCT_CMD_SAPBR_IP;
    4bc0:	8f e1       	ldi	r24, 0x1F	; 31
    4bc2:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <_ZZ12gprs_connectvE17gprs_connct_state>
					
						if (gprs_retry_count++ >= RETRY_CNT)
    4bc6:	80 91 19 0c 	lds	r24, 0x0C19	; 0x800c19 <_ZZ12gprs_connectvE16gprs_retry_count>
    4bca:	91 e0       	ldi	r25, 0x01	; 1
    4bcc:	98 0f       	add	r25, r24
    4bce:	90 93 19 0c 	sts	0x0C19, r25	; 0x800c19 <_ZZ12gprs_connectvE16gprs_retry_count>
    4bd2:	83 30       	cpi	r24, 0x03	; 3
    4bd4:	08 f4       	brcc	.+2      	; 0x4bd8 <_Z12gprs_connectv+0xb10>
    4bd6:	db c1       	rjmp	.+950    	; 0x4f8e <_Z12gprs_connectv+0xec6>
						{
							gprs.module_status = NOT_AVBL;
    4bd8:	e4 ee       	ldi	r30, 0xE4	; 228
    4bda:	f2 e1       	ldi	r31, 0x12	; 18
    4bdc:	10 8a       	std	Z+16, r1	; 0x10
							
							gprs.errcode = CON_ERR_OFFSET + GPRS_CONNCT_RSP_SAPBR_IP;
    4bde:	80 ec       	ldi	r24, 0xC0	; 192
    4be0:	86 8b       	std	Z+22, r24	; 0x16
							sts = CON_FAIL;
							
							gprs_connct_state = GPRS_CONNCT_RESET;			//
    4be2:	10 92 16 02 	sts	0x0216, r1	; 0x800216 <_ZZ12gprs_connectvE17gprs_connct_state>
							gprs_retry_count = 0;
    4be6:	10 92 19 0c 	sts	0x0C19, r1	; 0x800c19 <_ZZ12gprs_connectvE16gprs_retry_count>
						if (gprs_retry_count++ >= RETRY_CNT)
						{
							gprs.module_status = NOT_AVBL;
							
							gprs.errcode = CON_ERR_OFFSET + GPRS_CONNCT_RSP_SAPBR_IP;
							sts = CON_FAIL;
    4bea:	81 e0       	ldi	r24, 0x01	; 1
    4bec:	eb c1       	rjmp	.+982    	; 0x4fc4 <_Z12gprs_connectv+0xefc>
			}
		break;
		case GPRS_CONNCT_CMD_SAPBR_DISCON:
		{
#ifdef GPRS_DEBUG
			UWriteString((char *)"cmd: DISCON", UART_PC);
    4bee:	62 e0       	ldi	r22, 0x02	; 2
    4bf0:	70 e0       	ldi	r23, 0x00	; 0
    4bf2:	83 e2       	ldi	r24, 0x23	; 35
    4bf4:	97 e0       	ldi	r25, 0x07	; 7
    4bf6:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <_Z12UWriteStringPKci>
#endif			
			flushRxBuffer(GPRS_UART);
    4bfa:	80 e0       	ldi	r24, 0x00	; 0
    4bfc:	90 e0       	ldi	r25, 0x00	; 0
    4bfe:	0e 94 d7 09 	call	0x13ae	; 0x13ae <_Z13flushRxBufferi>
			UWriteString((char *)"AT+SAPBR=0,1\r", GPRS_UART);
    4c02:	60 e0       	ldi	r22, 0x00	; 0
    4c04:	70 e0       	ldi	r23, 0x00	; 0
    4c06:	8f e2       	ldi	r24, 0x2F	; 47
    4c08:	97 e0       	ldi	r25, 0x07	; 7
    4c0a:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <_Z12UWriteStringPKci>
			gprs_connct_state = GPRS_CONNCT_RSP_SAPBR_DISCON;
    4c0e:	8d e2       	ldi	r24, 0x2D	; 45
    4c10:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <_ZZ12gprs_connectvE17gprs_connct_state>
}
#endif

con_status_t gprs_connect(void)
{
	con_status_t sts = CON_IN_PRG;
    4c14:	82 e0       	ldi	r24, 0x02	; 2
#endif			
			flushRxBuffer(GPRS_UART);
			UWriteString((char *)"AT+SAPBR=0,1\r", GPRS_UART);
			gprs_connct_state = GPRS_CONNCT_RSP_SAPBR_DISCON;
		}
		break;
    4c16:	d6 c1       	rjmp	.+940    	; 0x4fc4 <_Z12gprs_connectv+0xefc>
		case GPRS_CONNCT_RSP_SAPBR_DISCON:
		switch (check_string_nobuf("OK"))
    4c18:	85 e4       	ldi	r24, 0x45	; 69
    4c1a:	95 e0       	ldi	r25, 0x05	; 5
    4c1c:	0e 94 fc 45 	call	0x8bf8	; 0x8bf8 <_Z18check_string_nobufPKc>
    4c20:	81 30       	cpi	r24, 0x01	; 1
    4c22:	21 f0       	breq	.+8      	; 0x4c2c <_Z12gprs_connectv+0xb64>
    4c24:	70 f1       	brcs	.+92     	; 0x4c82 <_Z12gprs_connectv+0xbba>
    4c26:	82 30       	cpi	r24, 0x02	; 2
    4c28:	e1 f0       	breq	.+56     	; 0x4c62 <_Z12gprs_connectv+0xb9a>
    4c2a:	b3 c1       	rjmp	.+870    	; 0x4f92 <_Z12gprs_connectv+0xeca>
			{
				case (GPRS_MATCH_FAIL):
#ifdef GPRS_DEBUG
					UWriteString((char *)"DISCON:f", UART_PC);
    4c2c:	62 e0       	ldi	r22, 0x02	; 2
    4c2e:	70 e0       	ldi	r23, 0x00	; 0
    4c30:	8d e3       	ldi	r24, 0x3D	; 61
    4c32:	97 e0       	ldi	r25, 0x07	; 7
    4c34:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <_Z12UWriteStringPKci>
#endif				
					gprs_connct_state = GPRS_CONNCT_CMD_SAPBR_DISCON;
    4c38:	8c e2       	ldi	r24, 0x2C	; 44
    4c3a:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <_ZZ12gprs_connectvE17gprs_connct_state>
					//flushRxBuffer(GPRS_UART);
					if (gprs_retry_count++ >= RETRY_CNT)
    4c3e:	80 91 19 0c 	lds	r24, 0x0C19	; 0x800c19 <_ZZ12gprs_connectvE16gprs_retry_count>
    4c42:	91 e0       	ldi	r25, 0x01	; 1
    4c44:	98 0f       	add	r25, r24
    4c46:	90 93 19 0c 	sts	0x0C19, r25	; 0x800c19 <_ZZ12gprs_connectvE16gprs_retry_count>
    4c4a:	83 30       	cpi	r24, 0x03	; 3
    4c4c:	08 f4       	brcc	.+2      	; 0x4c50 <_Z12gprs_connectv+0xb88>
    4c4e:	a3 c1       	rjmp	.+838    	; 0x4f96 <_Z12gprs_connectv+0xece>
					{
						gprs.errcode = CON_ERR_OFFSET + GPRS_CONNCT_RSP_SAPBR_DISCON;
    4c50:	8d ec       	ldi	r24, 0xCD	; 205
    4c52:	80 93 fa 12 	sts	0x12FA, r24	; 0x8012fa <gprs+0x16>
						sts = CON_FAIL;
						
						gprs_connct_state = GPRS_CONNCT_RESET;			//
    4c56:	10 92 16 02 	sts	0x0216, r1	; 0x800216 <_ZZ12gprs_connectvE17gprs_connct_state>
						gprs_retry_count = 0;
    4c5a:	10 92 19 0c 	sts	0x0C19, r1	; 0x800c19 <_ZZ12gprs_connectvE16gprs_retry_count>
					gprs_connct_state = GPRS_CONNCT_CMD_SAPBR_DISCON;
					//flushRxBuffer(GPRS_UART);
					if (gprs_retry_count++ >= RETRY_CNT)
					{
						gprs.errcode = CON_ERR_OFFSET + GPRS_CONNCT_RSP_SAPBR_DISCON;
						sts = CON_FAIL;
    4c5e:	81 e0       	ldi	r24, 0x01	; 1
    4c60:	b1 c1       	rjmp	.+866    	; 0x4fc4 <_Z12gprs_connectv+0xefc>
						gprs_retry_count = 0;
					}
				break;
				case (GPRS_MATCH_OK):
#ifdef GPRS_DEBUG
					UWriteString((char *)"DISCON:k", UART_PC);
    4c62:	62 e0       	ldi	r22, 0x02	; 2
    4c64:	70 e0       	ldi	r23, 0x00	; 0
    4c66:	86 e4       	ldi	r24, 0x46	; 70
    4c68:	97 e0       	ldi	r25, 0x07	; 7
    4c6a:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <_Z12UWriteStringPKci>
#endif				
					
					gprs_connct_state = GPRS_CONNCT_CMD_ECHO_OFF;
    4c6e:	82 e0       	ldi	r24, 0x02	; 2
    4c70:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <_ZZ12gprs_connectvE17gprs_connct_state>
					
					gprs_retry_count = 0;
    4c74:	10 92 19 0c 	sts	0x0C19, r1	; 0x800c19 <_ZZ12gprs_connectvE16gprs_retry_count>
					timeout = 0;
    4c78:	10 92 1b 0c 	sts	0x0C1B, r1	; 0x800c1b <_ZZ12gprs_connectvE7timeout+0x1>
    4c7c:	10 92 1a 0c 	sts	0x0C1A, r1	; 0x800c1a <_ZZ12gprs_connectvE7timeout>
				break;
    4c80:	a1 c1       	rjmp	.+834    	; 0x4fc4 <_Z12gprs_connectv+0xefc>
				case (GPRS_NO_NEW_MSG):
#ifdef GPRS_DEBUG
					UWriteString("DISCON:w", UART_PC);
    4c82:	62 e0       	ldi	r22, 0x02	; 2
    4c84:	70 e0       	ldi	r23, 0x00	; 0
    4c86:	8f e4       	ldi	r24, 0x4F	; 79
    4c88:	97 e0       	ldi	r25, 0x07	; 7
    4c8a:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <_Z12UWriteStringPKci>
#endif					
					if(timeout++ >= SAPBR_DISCON_TIMEOUT)
    4c8e:	80 91 1a 0c 	lds	r24, 0x0C1A	; 0x800c1a <_ZZ12gprs_connectvE7timeout>
    4c92:	90 91 1b 0c 	lds	r25, 0x0C1B	; 0x800c1b <_ZZ12gprs_connectvE7timeout+0x1>
    4c96:	8e 31       	cpi	r24, 0x1E	; 30
    4c98:	91 05       	cpc	r25, r1
    4c9a:	38 f4       	brcc	.+14     	; 0x4caa <_Z12gprs_connectv+0xbe2>
    4c9c:	01 96       	adiw	r24, 0x01	; 1
    4c9e:	90 93 1b 0c 	sts	0x0C1B, r25	; 0x800c1b <_ZZ12gprs_connectvE7timeout+0x1>
    4ca2:	80 93 1a 0c 	sts	0x0C1A, r24	; 0x800c1a <_ZZ12gprs_connectvE7timeout>
}
#endif

con_status_t gprs_connect(void)
{
	con_status_t sts = CON_IN_PRG;
    4ca6:	82 e0       	ldi	r24, 0x02	; 2
    4ca8:	8d c1       	rjmp	.+794    	; 0x4fc4 <_Z12gprs_connectv+0xefc>
#ifdef GPRS_DEBUG
					UWriteString("DISCON:w", UART_PC);
#endif					
					if(timeout++ >= SAPBR_DISCON_TIMEOUT)
					{
						timeout = 0;
    4caa:	10 92 1b 0c 	sts	0x0C1B, r1	; 0x800c1b <_ZZ12gprs_connectvE7timeout+0x1>
    4cae:	10 92 1a 0c 	sts	0x0C1A, r1	; 0x800c1a <_ZZ12gprs_connectvE7timeout>
						gprs_connct_state = GPRS_CONNCT_CMD_SAPBR_DISCON;
    4cb2:	8c e2       	ldi	r24, 0x2C	; 44
    4cb4:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <_ZZ12gprs_connectvE17gprs_connct_state>
					
						if (gprs_retry_count++ >= RETRY_CNT)
    4cb8:	80 91 19 0c 	lds	r24, 0x0C19	; 0x800c19 <_ZZ12gprs_connectvE16gprs_retry_count>
    4cbc:	91 e0       	ldi	r25, 0x01	; 1
    4cbe:	98 0f       	add	r25, r24
    4cc0:	90 93 19 0c 	sts	0x0C19, r25	; 0x800c19 <_ZZ12gprs_connectvE16gprs_retry_count>
    4cc4:	83 30       	cpi	r24, 0x03	; 3
    4cc6:	08 f4       	brcc	.+2      	; 0x4cca <_Z12gprs_connectv+0xc02>
    4cc8:	68 c1       	rjmp	.+720    	; 0x4f9a <_Z12gprs_connectv+0xed2>
						{
							gprs.module_status = NOT_AVBL;
    4cca:	e4 ee       	ldi	r30, 0xE4	; 228
    4ccc:	f2 e1       	ldi	r31, 0x12	; 18
    4cce:	10 8a       	std	Z+16, r1	; 0x10
							
							gprs.errcode = CON_ERR_OFFSET + GPRS_CONNCT_RSP_SAPBR_DISCON;
    4cd0:	8d ec       	ldi	r24, 0xCD	; 205
    4cd2:	86 8b       	std	Z+22, r24	; 0x16
							sts = CON_FAIL;
							
							gprs_connct_state = GPRS_CONNCT_RESET;			//
    4cd4:	10 92 16 02 	sts	0x0216, r1	; 0x800216 <_ZZ12gprs_connectvE17gprs_connct_state>
							gprs_retry_count = 0;
    4cd8:	10 92 19 0c 	sts	0x0C19, r1	; 0x800c19 <_ZZ12gprs_connectvE16gprs_retry_count>
						if (gprs_retry_count++ >= RETRY_CNT)
						{
							gprs.module_status = NOT_AVBL;
							
							gprs.errcode = CON_ERR_OFFSET + GPRS_CONNCT_RSP_SAPBR_DISCON;
							sts = CON_FAIL;
    4cdc:	81 e0       	ldi	r24, 0x01	; 1
    4cde:	72 c1       	rjmp	.+740    	; 0x4fc4 <_Z12gprs_connectv+0xefc>
		break;
#endif	//HTTP_ENABLE
		case GPRS_CONNCT_CMD_CLTS:
		{
			#ifdef GPRS_DEBUG
			UWriteString((char *)"cmd: CLTS", UART_PC);
    4ce0:	62 e0       	ldi	r22, 0x02	; 2
    4ce2:	70 e0       	ldi	r23, 0x00	; 0
    4ce4:	88 e5       	ldi	r24, 0x58	; 88
    4ce6:	97 e0       	ldi	r25, 0x07	; 7
    4ce8:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <_Z12UWriteStringPKci>
			#endif
			flushRxBuffer(GPRS_UART);
    4cec:	80 e0       	ldi	r24, 0x00	; 0
    4cee:	90 e0       	ldi	r25, 0x00	; 0
    4cf0:	0e 94 d7 09 	call	0x13ae	; 0x13ae <_Z13flushRxBufferi>
			UWriteString((char *)"AT+CLTS=1;&w\r", GPRS_UART);
    4cf4:	60 e0       	ldi	r22, 0x00	; 0
    4cf6:	70 e0       	ldi	r23, 0x00	; 0
    4cf8:	82 e6       	ldi	r24, 0x62	; 98
    4cfa:	97 e0       	ldi	r25, 0x07	; 7
    4cfc:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <_Z12UWriteStringPKci>
			gprs_connct_state = GPRS_CONNCT_RSP_CLTS;
    4d00:	87 e2       	ldi	r24, 0x27	; 39
    4d02:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <_ZZ12gprs_connectvE17gprs_connct_state>
}
#endif

con_status_t gprs_connect(void)
{
	con_status_t sts = CON_IN_PRG;
    4d06:	82 e0       	ldi	r24, 0x02	; 2
			#endif
			flushRxBuffer(GPRS_UART);
			UWriteString((char *)"AT+CLTS=1;&w\r", GPRS_UART);
			gprs_connct_state = GPRS_CONNCT_RSP_CLTS;
		}
		break;
    4d08:	5d c1       	rjmp	.+698    	; 0x4fc4 <_Z12gprs_connectv+0xefc>
		case GPRS_CONNCT_RSP_CLTS:
		switch (check_string_nobuf("OK"))
    4d0a:	85 e4       	ldi	r24, 0x45	; 69
    4d0c:	95 e0       	ldi	r25, 0x05	; 5
    4d0e:	0e 94 fc 45 	call	0x8bf8	; 0x8bf8 <_Z18check_string_nobufPKc>
    4d12:	81 30       	cpi	r24, 0x01	; 1
    4d14:	21 f0       	breq	.+8      	; 0x4d1e <_Z12gprs_connectv+0xc56>
    4d16:	78 f1       	brcs	.+94     	; 0x4d76 <_Z12gprs_connectv+0xcae>
    4d18:	82 30       	cpi	r24, 0x02	; 2
    4d1a:	e1 f0       	breq	.+56     	; 0x4d54 <_Z12gprs_connectv+0xc8c>
    4d1c:	40 c1       	rjmp	.+640    	; 0x4f9e <_Z12gprs_connectv+0xed6>
		{
			case (GPRS_MATCH_FAIL):
			#ifdef GPRS_DEBUG
			UWriteString((char *)"CLTS:f", UART_PC);
    4d1e:	62 e0       	ldi	r22, 0x02	; 2
    4d20:	70 e0       	ldi	r23, 0x00	; 0
    4d22:	80 e7       	ldi	r24, 0x70	; 112
    4d24:	97 e0       	ldi	r25, 0x07	; 7
    4d26:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <_Z12UWriteStringPKci>
			#endif
			gprs_connct_state = GPRS_CONNCT_CMD_CLTS;
    4d2a:	86 e2       	ldi	r24, 0x26	; 38
    4d2c:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <_ZZ12gprs_connectvE17gprs_connct_state>
			
			if (gprs_retry_count++ >= RETRY_CNT)
    4d30:	80 91 19 0c 	lds	r24, 0x0C19	; 0x800c19 <_ZZ12gprs_connectvE16gprs_retry_count>
    4d34:	91 e0       	ldi	r25, 0x01	; 1
    4d36:	98 0f       	add	r25, r24
    4d38:	90 93 19 0c 	sts	0x0C19, r25	; 0x800c19 <_ZZ12gprs_connectvE16gprs_retry_count>
    4d3c:	83 30       	cpi	r24, 0x03	; 3
    4d3e:	08 f4       	brcc	.+2      	; 0x4d42 <_Z12gprs_connectv+0xc7a>
    4d40:	30 c1       	rjmp	.+608    	; 0x4fa2 <_Z12gprs_connectv+0xeda>
			{
				gprs.errcode = CON_ERR_OFFSET + GPRS_CONNCT_RSP_CLTS;
    4d42:	87 ec       	ldi	r24, 0xC7	; 199
    4d44:	80 93 fa 12 	sts	0x12FA, r24	; 0x8012fa <gprs+0x16>
				sts = CON_FAIL;
				
				gprs_connct_state = GPRS_CONNCT_RESET;			//
    4d48:	10 92 16 02 	sts	0x0216, r1	; 0x800216 <_ZZ12gprs_connectvE17gprs_connct_state>
				gprs_retry_count = 0;
    4d4c:	10 92 19 0c 	sts	0x0C19, r1	; 0x800c19 <_ZZ12gprs_connectvE16gprs_retry_count>
			gprs_connct_state = GPRS_CONNCT_CMD_CLTS;
			
			if (gprs_retry_count++ >= RETRY_CNT)
			{
				gprs.errcode = CON_ERR_OFFSET + GPRS_CONNCT_RSP_CLTS;
				sts = CON_FAIL;
    4d50:	81 e0       	ldi	r24, 0x01	; 1
    4d52:	38 c1       	rjmp	.+624    	; 0x4fc4 <_Z12gprs_connectv+0xefc>
				gprs_retry_count = 0;
			}
			break;
			case (GPRS_MATCH_OK):
			#ifdef GPRS_DEBUG
			UWriteString((char *)"CLTS:k", UART_PC);
    4d54:	62 e0       	ldi	r22, 0x02	; 2
    4d56:	70 e0       	ldi	r23, 0x00	; 0
    4d58:	87 e7       	ldi	r24, 0x77	; 119
    4d5a:	97 e0       	ldi	r25, 0x07	; 7
    4d5c:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <_Z12UWriteStringPKci>
			#endif
			
			gprs_connct_state = GPRS_CONNCT_CMD_CFUN;
    4d60:	86 e0       	ldi	r24, 0x06	; 6
    4d62:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <_ZZ12gprs_connectvE17gprs_connct_state>
			
			gprs_retry_count = 0;
    4d66:	10 92 19 0c 	sts	0x0C19, r1	; 0x800c19 <_ZZ12gprs_connectvE16gprs_retry_count>
			timeout = 0;
    4d6a:	10 92 1b 0c 	sts	0x0C1B, r1	; 0x800c1b <_ZZ12gprs_connectvE7timeout+0x1>
    4d6e:	10 92 1a 0c 	sts	0x0C1A, r1	; 0x800c1a <_ZZ12gprs_connectvE7timeout>
}
#endif

con_status_t gprs_connect(void)
{
	con_status_t sts = CON_IN_PRG;
    4d72:	82 e0       	ldi	r24, 0x02	; 2
			
			gprs_connct_state = GPRS_CONNCT_CMD_CFUN;
			
			gprs_retry_count = 0;
			timeout = 0;
			break;
    4d74:	27 c1       	rjmp	.+590    	; 0x4fc4 <_Z12gprs_connectv+0xefc>
			case (GPRS_NO_NEW_MSG):
			#ifdef GPRS_DEBUG
			UWriteString("CLTS:w", UART_PC);
    4d76:	62 e0       	ldi	r22, 0x02	; 2
    4d78:	70 e0       	ldi	r23, 0x00	; 0
    4d7a:	8e e7       	ldi	r24, 0x7E	; 126
    4d7c:	97 e0       	ldi	r25, 0x07	; 7
    4d7e:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <_Z12UWriteStringPKci>
			#endif
			if(timeout++ >= CLTS_TIMEOUT)
    4d82:	80 91 1a 0c 	lds	r24, 0x0C1A	; 0x800c1a <_ZZ12gprs_connectvE7timeout>
    4d86:	90 91 1b 0c 	lds	r25, 0x0C1B	; 0x800c1b <_ZZ12gprs_connectvE7timeout+0x1>
    4d8a:	8a 30       	cpi	r24, 0x0A	; 10
    4d8c:	91 05       	cpc	r25, r1
    4d8e:	38 f4       	brcc	.+14     	; 0x4d9e <_Z12gprs_connectv+0xcd6>
    4d90:	01 96       	adiw	r24, 0x01	; 1
    4d92:	90 93 1b 0c 	sts	0x0C1B, r25	; 0x800c1b <_ZZ12gprs_connectvE7timeout+0x1>
    4d96:	80 93 1a 0c 	sts	0x0C1A, r24	; 0x800c1a <_ZZ12gprs_connectvE7timeout>
}
#endif

con_status_t gprs_connect(void)
{
	con_status_t sts = CON_IN_PRG;
    4d9a:	82 e0       	ldi	r24, 0x02	; 2
    4d9c:	13 c1       	rjmp	.+550    	; 0x4fc4 <_Z12gprs_connectv+0xefc>
			#ifdef GPRS_DEBUG
			UWriteString("CLTS:w", UART_PC);
			#endif
			if(timeout++ >= CLTS_TIMEOUT)
			{
				timeout = 0;
    4d9e:	10 92 1b 0c 	sts	0x0C1B, r1	; 0x800c1b <_ZZ12gprs_connectvE7timeout+0x1>
    4da2:	10 92 1a 0c 	sts	0x0C1A, r1	; 0x800c1a <_ZZ12gprs_connectvE7timeout>
				gprs_connct_state = GPRS_CONNCT_CMD_CLTS;
    4da6:	86 e2       	ldi	r24, 0x26	; 38
    4da8:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <_ZZ12gprs_connectvE17gprs_connct_state>
				
				if (gprs_retry_count++ >= RETRY_CNT)
    4dac:	80 91 19 0c 	lds	r24, 0x0C19	; 0x800c19 <_ZZ12gprs_connectvE16gprs_retry_count>
    4db0:	91 e0       	ldi	r25, 0x01	; 1
    4db2:	98 0f       	add	r25, r24
    4db4:	90 93 19 0c 	sts	0x0C19, r25	; 0x800c19 <_ZZ12gprs_connectvE16gprs_retry_count>
    4db8:	83 30       	cpi	r24, 0x03	; 3
    4dba:	08 f4       	brcc	.+2      	; 0x4dbe <_Z12gprs_connectv+0xcf6>
    4dbc:	f4 c0       	rjmp	.+488    	; 0x4fa6 <_Z12gprs_connectv+0xede>
				{
					gprs.module_status = NOT_AVBL;
    4dbe:	e4 ee       	ldi	r30, 0xE4	; 228
    4dc0:	f2 e1       	ldi	r31, 0x12	; 18
    4dc2:	10 8a       	std	Z+16, r1	; 0x10
					
					gprs.errcode = CON_ERR_OFFSET + GPRS_CONNCT_RSP_CLTS;
    4dc4:	87 ec       	ldi	r24, 0xC7	; 199
    4dc6:	86 8b       	std	Z+22, r24	; 0x16
					sts = CON_FAIL;
					
					gprs_connct_state = GPRS_CONNCT_RESET;			//
    4dc8:	10 92 16 02 	sts	0x0216, r1	; 0x800216 <_ZZ12gprs_connectvE17gprs_connct_state>
					gprs_retry_count = 0;
    4dcc:	10 92 19 0c 	sts	0x0C19, r1	; 0x800c19 <_ZZ12gprs_connectvE16gprs_retry_count>
				if (gprs_retry_count++ >= RETRY_CNT)
				{
					gprs.module_status = NOT_AVBL;
					
					gprs.errcode = CON_ERR_OFFSET + GPRS_CONNCT_RSP_CLTS;
					sts = CON_FAIL;
    4dd0:	81 e0       	ldi	r24, 0x01	; 1
    4dd2:	f8 c0       	rjmp	.+496    	; 0x4fc4 <_Z12gprs_connectv+0xefc>
		}
		break;

		case GPRS_CONNCT_RESET:
		{
			timeout = 0;
    4dd4:	10 92 1b 0c 	sts	0x0C1B, r1	; 0x800c1b <_ZZ12gprs_connectvE7timeout+0x1>
    4dd8:	10 92 1a 0c 	sts	0x0C1A, r1	; 0x800c1a <_ZZ12gprs_connectvE7timeout>
			gprs_retry_count = 0;
    4ddc:	10 92 19 0c 	sts	0x0C19, r1	; 0x800c19 <_ZZ12gprs_connectvE16gprs_retry_count>
#ifdef SOFT_RST_GSM
			gprs_connct_state = GPRS_CONNCT_CMD_RFUN;
    4de0:	88 e2       	ldi	r24, 0x28	; 40
    4de2:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <_ZZ12gprs_connectvE17gprs_connct_state>
}
#endif

con_status_t gprs_connect(void)
{
	con_status_t sts = CON_IN_PRG;
    4de6:	82 e0       	ldi	r24, 0x02	; 2
			gprs_connct_state = GPRS_CONNCT_CMD_RFUN;
#else
			gprs_connct_state = GPRS_CONNCT_CMD_ECHO_OFF;
#endif
		}
		break;
    4de8:	ed c0       	rjmp	.+474    	; 0x4fc4 <_Z12gprs_connectv+0xefc>
		
#ifdef SOFT_RST_GSM
		case GPRS_CONNCT_CMD_RFUN:
		{
#ifdef GPRS_DEBUG
			UWriteString((char *)"cmd: RFUN", UART_PC);
    4dea:	62 e0       	ldi	r22, 0x02	; 2
    4dec:	70 e0       	ldi	r23, 0x00	; 0
    4dee:	85 e8       	ldi	r24, 0x85	; 133
    4df0:	97 e0       	ldi	r25, 0x07	; 7
    4df2:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <_Z12UWriteStringPKci>
#endif
			flushRxBuffer(GPRS_UART);
    4df6:	80 e0       	ldi	r24, 0x00	; 0
    4df8:	90 e0       	ldi	r25, 0x00	; 0
    4dfa:	0e 94 d7 09 	call	0x13ae	; 0x13ae <_Z13flushRxBufferi>
			UWriteString((char *)"AT+CFUN=1,1\r", GPRS_UART);
    4dfe:	60 e0       	ldi	r22, 0x00	; 0
    4e00:	70 e0       	ldi	r23, 0x00	; 0
    4e02:	8f e8       	ldi	r24, 0x8F	; 143
    4e04:	97 e0       	ldi	r25, 0x07	; 7
    4e06:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <_Z12UWriteStringPKci>
			gprs_connct_state = GPRS_CONNCT_RSP_RFUN;
    4e0a:	8a e2       	ldi	r24, 0x2A	; 42
    4e0c:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <_ZZ12gprs_connectvE17gprs_connct_state>
			
UWriteString((char *)"CFUN_CNT", UART_PC);			
    4e10:	62 e0       	ldi	r22, 0x02	; 2
    4e12:	70 e0       	ldi	r23, 0x00	; 0
    4e14:	8c e9       	ldi	r24, 0x9C	; 156
    4e16:	97 e0       	ldi	r25, 0x07	; 7
    4e18:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <_Z12UWriteStringPKci>
UWriteInt(cfun_cnt++, UART_PC);
    4e1c:	60 91 fb 12 	lds	r22, 0x12FB	; 0x8012fb <cfun_cnt>
    4e20:	70 91 fc 12 	lds	r23, 0x12FC	; 0x8012fc <cfun_cnt+0x1>
    4e24:	cb 01       	movw	r24, r22
    4e26:	01 96       	adiw	r24, 0x01	; 1
    4e28:	90 93 fc 12 	sts	0x12FC, r25	; 0x8012fc <cfun_cnt+0x1>
    4e2c:	80 93 fb 12 	sts	0x12FB, r24	; 0x8012fb <cfun_cnt>
    4e30:	80 e0       	ldi	r24, 0x00	; 0
    4e32:	90 e0       	ldi	r25, 0x00	; 0
    4e34:	42 e0       	ldi	r20, 0x02	; 2
    4e36:	0e 94 3e 09 	call	0x127c	; 0x127c <_Z9UWriteIntmc>
}
#endif

con_status_t gprs_connect(void)
{
	con_status_t sts = CON_IN_PRG;
    4e3a:	82 e0       	ldi	r24, 0x02	; 2
			
UWriteString((char *)"CFUN_CNT", UART_PC);			
UWriteInt(cfun_cnt++, UART_PC);

		}
		break;
    4e3c:	c3 c0       	rjmp	.+390    	; 0x4fc4 <_Z12gprs_connectv+0xefc>
		
		case GPRS_CONNCT_RSP_RFUN:
		switch (check_string_nobuf("OK"))
    4e3e:	85 e4       	ldi	r24, 0x45	; 69
    4e40:	95 e0       	ldi	r25, 0x05	; 5
    4e42:	0e 94 fc 45 	call	0x8bf8	; 0x8bf8 <_Z18check_string_nobufPKc>
    4e46:	81 30       	cpi	r24, 0x01	; 1
    4e48:	21 f0       	breq	.+8      	; 0x4e52 <_Z12gprs_connectv+0xd8a>
    4e4a:	a0 f1       	brcs	.+104    	; 0x4eb4 <_Z12gprs_connectv+0xdec>
    4e4c:	82 30       	cpi	r24, 0x02	; 2
    4e4e:	09 f1       	breq	.+66     	; 0x4e92 <_Z12gprs_connectv+0xdca>
    4e50:	5f c0       	rjmp	.+190    	; 0x4f10 <_Z12gprs_connectv+0xe48>
			{
				case (GPRS_MATCH_FAIL):
				{
#ifdef GPRS_DEBUG
					UWriteString((char *)"RFUN:f", UART_PC);
    4e52:	62 e0       	ldi	r22, 0x02	; 2
    4e54:	70 e0       	ldi	r23, 0x00	; 0
    4e56:	85 ea       	ldi	r24, 0xA5	; 165
    4e58:	97 e0       	ldi	r25, 0x07	; 7
    4e5a:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <_Z12UWriteStringPKci>
#endif
					gprs_connct_state = GPRS_CONNCT_CMD_RFUN;
    4e5e:	88 e2       	ldi	r24, 0x28	; 40
    4e60:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <_ZZ12gprs_connectvE17gprs_connct_state>
					if (gprs_retry_count++ >= RETRY_CNT)
    4e64:	80 91 19 0c 	lds	r24, 0x0C19	; 0x800c19 <_ZZ12gprs_connectvE16gprs_retry_count>
    4e68:	91 e0       	ldi	r25, 0x01	; 1
    4e6a:	98 0f       	add	r25, r24
    4e6c:	90 93 19 0c 	sts	0x0C19, r25	; 0x800c19 <_ZZ12gprs_connectvE16gprs_retry_count>
    4e70:	83 30       	cpi	r24, 0x03	; 3
    4e72:	08 f4       	brcc	.+2      	; 0x4e76 <_Z12gprs_connectv+0xdae>
    4e74:	4d c0       	rjmp	.+154    	; 0x4f10 <_Z12gprs_connectv+0xe48>
					{
						gprs.errcode = CON_ERR_OFFSET + GPRS_CONNCT_RSP_RFUN;
    4e76:	8a ec       	ldi	r24, 0xCA	; 202
    4e78:	80 93 fa 12 	sts	0x12FA, r24	; 0x8012fa <gprs+0x16>
						sts = CON_FAIL;
				
						gprs_connct_state = GPRS_CONNCT_RFUN_WAIT;
    4e7c:	8b e2       	ldi	r24, 0x2B	; 43
    4e7e:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <_ZZ12gprs_connectvE17gprs_connct_state>
						gprs_retry_count = 0;
    4e82:	10 92 19 0c 	sts	0x0C19, r1	; 0x800c19 <_ZZ12gprs_connectvE16gprs_retry_count>
						timeout = 0;
    4e86:	10 92 1b 0c 	sts	0x0C1B, r1	; 0x800c1b <_ZZ12gprs_connectvE7timeout+0x1>
    4e8a:	10 92 1a 0c 	sts	0x0C1A, r1	; 0x800c1a <_ZZ12gprs_connectvE7timeout>
#endif
					gprs_connct_state = GPRS_CONNCT_CMD_RFUN;
					if (gprs_retry_count++ >= RETRY_CNT)
					{
						gprs.errcode = CON_ERR_OFFSET + GPRS_CONNCT_RSP_RFUN;
						sts = CON_FAIL;
    4e8e:	81 e0       	ldi	r24, 0x01	; 1
    4e90:	8f c0       	rjmp	.+286    	; 0x4fb0 <_Z12gprs_connectv+0xee8>
				}
				break;
				case (GPRS_MATCH_OK):
				{
#ifdef GPRS_DEBUG
					UWriteString((char *)"RFUN:k", UART_PC);
    4e92:	62 e0       	ldi	r22, 0x02	; 2
    4e94:	70 e0       	ldi	r23, 0x00	; 0
    4e96:	8c ea       	ldi	r24, 0xAC	; 172
    4e98:	97 e0       	ldi	r25, 0x07	; 7
    4e9a:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <_Z12UWriteStringPKci>
#endif
					
					gprs_connct_state = GPRS_CONNCT_RFUN_WAIT;
    4e9e:	8b e2       	ldi	r24, 0x2B	; 43
    4ea0:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <_ZZ12gprs_connectvE17gprs_connct_state>
			
					gprs_retry_count = 0;
    4ea4:	10 92 19 0c 	sts	0x0C19, r1	; 0x800c19 <_ZZ12gprs_connectvE16gprs_retry_count>
					timeout = 0;
    4ea8:	10 92 1b 0c 	sts	0x0C1B, r1	; 0x800c1b <_ZZ12gprs_connectvE7timeout+0x1>
    4eac:	10 92 1a 0c 	sts	0x0C1A, r1	; 0x800c1a <_ZZ12gprs_connectvE7timeout>
}
#endif

con_status_t gprs_connect(void)
{
	con_status_t sts = CON_IN_PRG;
    4eb0:	82 e0       	ldi	r24, 0x02	; 2
					gprs_connct_state = GPRS_CONNCT_RFUN_WAIT;
			
					gprs_retry_count = 0;
					timeout = 0;
				}
				break;
    4eb2:	7e c0       	rjmp	.+252    	; 0x4fb0 <_Z12gprs_connectv+0xee8>
				case (GPRS_NO_NEW_MSG):
				{
#ifdef GPRS_DEBUG
					UWriteString("RFUN:w", UART_PC);
    4eb4:	62 e0       	ldi	r22, 0x02	; 2
    4eb6:	70 e0       	ldi	r23, 0x00	; 0
    4eb8:	83 eb       	ldi	r24, 0xB3	; 179
    4eba:	97 e0       	ldi	r25, 0x07	; 7
    4ebc:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <_Z12UWriteStringPKci>
#endif
					if(timeout++ >= SOFT_RST_TIMEOUT)
    4ec0:	80 91 1a 0c 	lds	r24, 0x0C1A	; 0x800c1a <_ZZ12gprs_connectvE7timeout>
    4ec4:	90 91 1b 0c 	lds	r25, 0x0C1B	; 0x800c1b <_ZZ12gprs_connectvE7timeout+0x1>
    4ec8:	8e 31       	cpi	r24, 0x1E	; 30
    4eca:	91 05       	cpc	r25, r1
    4ecc:	30 f4       	brcc	.+12     	; 0x4eda <_Z12gprs_connectv+0xe12>
    4ece:	01 96       	adiw	r24, 0x01	; 1
    4ed0:	90 93 1b 0c 	sts	0x0C1B, r25	; 0x800c1b <_ZZ12gprs_connectvE7timeout+0x1>
    4ed4:	80 93 1a 0c 	sts	0x0C1A, r24	; 0x800c1a <_ZZ12gprs_connectvE7timeout>
    4ed8:	1b c0       	rjmp	.+54     	; 0x4f10 <_Z12gprs_connectv+0xe48>
					{
						timeout = 0;
    4eda:	10 92 1b 0c 	sts	0x0C1B, r1	; 0x800c1b <_ZZ12gprs_connectvE7timeout+0x1>
    4ede:	10 92 1a 0c 	sts	0x0C1A, r1	; 0x800c1a <_ZZ12gprs_connectvE7timeout>
						gprs_connct_state = GPRS_CONNCT_CMD_RFUN;
    4ee2:	88 e2       	ldi	r24, 0x28	; 40
    4ee4:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <_ZZ12gprs_connectvE17gprs_connct_state>
				
						if (gprs_retry_count++ >= RETRY_CNT)
    4ee8:	80 91 19 0c 	lds	r24, 0x0C19	; 0x800c19 <_ZZ12gprs_connectvE16gprs_retry_count>
    4eec:	91 e0       	ldi	r25, 0x01	; 1
    4eee:	98 0f       	add	r25, r24
    4ef0:	90 93 19 0c 	sts	0x0C19, r25	; 0x800c19 <_ZZ12gprs_connectvE16gprs_retry_count>
    4ef4:	83 30       	cpi	r24, 0x03	; 3
    4ef6:	08 f4       	brcc	.+2      	; 0x4efa <_Z12gprs_connectv+0xe32>
    4ef8:	5a c0       	rjmp	.+180    	; 0x4fae <_Z12gprs_connectv+0xee6>
						{
							gprs.module_status = NOT_AVBL;
    4efa:	e4 ee       	ldi	r30, 0xE4	; 228
    4efc:	f2 e1       	ldi	r31, 0x12	; 18
    4efe:	10 8a       	std	Z+16, r1	; 0x10
					
							gprs.errcode = CON_ERR_OFFSET + GPRS_CONNCT_RSP_RFUN;
    4f00:	8a ec       	ldi	r24, 0xCA	; 202
    4f02:	86 8b       	std	Z+22, r24	; 0x16
							sts = CON_FAIL;
					
							gprs_connct_state = GPRS_CONNCT_POWER_UP;			//
    4f04:	81 e0       	ldi	r24, 0x01	; 1
    4f06:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <_ZZ12gprs_connectvE17gprs_connct_state>
							gprs_retry_count = 0;
    4f0a:	10 92 19 0c 	sts	0x0C19, r1	; 0x800c19 <_ZZ12gprs_connectvE16gprs_retry_count>
    4f0e:	50 c0       	rjmp	.+160    	; 0x4fb0 <_Z12gprs_connectv+0xee8>
				}
				break;
			}
		case GPRS_CONNCT_RFUN_WAIT:
		{
			if (timeout++ >= GSM_RST_SECS)		//not getting expected data,
    4f10:	80 91 1a 0c 	lds	r24, 0x0C1A	; 0x800c1a <_ZZ12gprs_connectvE7timeout>
    4f14:	90 91 1b 0c 	lds	r25, 0x0C1B	; 0x800c1b <_ZZ12gprs_connectvE7timeout+0x1>
    4f18:	9c 01       	movw	r18, r24
    4f1a:	2f 5f       	subi	r18, 0xFF	; 255
    4f1c:	3f 4f       	sbci	r19, 0xFF	; 255
    4f1e:	30 93 1b 0c 	sts	0x0C1B, r19	; 0x800c1b <_ZZ12gprs_connectvE7timeout+0x1>
    4f22:	20 93 1a 0c 	sts	0x0C1A, r18	; 0x800c1a <_ZZ12gprs_connectvE7timeout>
    4f26:	c2 97       	sbiw	r24, 0x32	; 50
    4f28:	08 f4       	brcc	.+2      	; 0x4f2c <_Z12gprs_connectv+0xe64>
    4f2a:	3f c0       	rjmp	.+126    	; 0x4faa <_Z12gprs_connectv+0xee2>
			{
				flushRxBuffer(GPRS_UART);
    4f2c:	80 e0       	ldi	r24, 0x00	; 0
    4f2e:	90 e0       	ldi	r25, 0x00	; 0
    4f30:	0e 94 d7 09 	call	0x13ae	; 0x13ae <_Z13flushRxBufferi>
				gprs_connct_state = GPRS_CONNCT_POWER_UP;
    4f34:	81 e0       	ldi	r24, 0x01	; 1
    4f36:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <_ZZ12gprs_connectvE17gprs_connct_state>
				timeout = 0;
    4f3a:	10 92 1b 0c 	sts	0x0C1B, r1	; 0x800c1b <_ZZ12gprs_connectvE7timeout+0x1>
    4f3e:	10 92 1a 0c 	sts	0x0C1A, r1	; 0x800c1a <_ZZ12gprs_connectvE7timeout>
    4f42:	82 e0       	ldi	r24, 0x02	; 2
    4f44:	3f c0       	rjmp	.+126    	; 0x4fc4 <_Z12gprs_connectv+0xefc>
			}
		}
		break;
#endif
		default:
			gprs_connct_state = GPRS_CONNCT_RESET;
    4f46:	10 92 16 02 	sts	0x0216, r1	; 0x800216 <_ZZ12gprs_connectvE17gprs_connct_state>
}
#endif

con_status_t gprs_connect(void)
{
	con_status_t sts = CON_IN_PRG;
    4f4a:	82 e0       	ldi	r24, 0x02	; 2
		}
		break;
#endif
		default:
			gprs_connct_state = GPRS_CONNCT_RESET;
		break;	
    4f4c:	3b c0       	rjmp	.+118    	; 0x4fc4 <_Z12gprs_connectv+0xefc>
}
#endif

con_status_t gprs_connect(void)
{
	con_status_t sts = CON_IN_PRG;
    4f4e:	82 e0       	ldi	r24, 0x02	; 2
    4f50:	39 c0       	rjmp	.+114    	; 0x4fc4 <_Z12gprs_connectv+0xefc>
    4f52:	82 e0       	ldi	r24, 0x02	; 2
    4f54:	37 c0       	rjmp	.+110    	; 0x4fc4 <_Z12gprs_connectv+0xefc>
    4f56:	82 e0       	ldi	r24, 0x02	; 2
    4f58:	35 c0       	rjmp	.+106    	; 0x4fc4 <_Z12gprs_connectv+0xefc>
    4f5a:	82 e0       	ldi	r24, 0x02	; 2
    4f5c:	33 c0       	rjmp	.+102    	; 0x4fc4 <_Z12gprs_connectv+0xefc>
    4f5e:	82 e0       	ldi	r24, 0x02	; 2
    4f60:	31 c0       	rjmp	.+98     	; 0x4fc4 <_Z12gprs_connectv+0xefc>
    4f62:	82 e0       	ldi	r24, 0x02	; 2
    4f64:	2f c0       	rjmp	.+94     	; 0x4fc4 <_Z12gprs_connectv+0xefc>
    4f66:	82 e0       	ldi	r24, 0x02	; 2
    4f68:	2d c0       	rjmp	.+90     	; 0x4fc4 <_Z12gprs_connectv+0xefc>
    4f6a:	82 e0       	ldi	r24, 0x02	; 2
    4f6c:	2b c0       	rjmp	.+86     	; 0x4fc4 <_Z12gprs_connectv+0xefc>
    4f6e:	82 e0       	ldi	r24, 0x02	; 2
    4f70:	29 c0       	rjmp	.+82     	; 0x4fc4 <_Z12gprs_connectv+0xefc>
    4f72:	82 e0       	ldi	r24, 0x02	; 2
    4f74:	27 c0       	rjmp	.+78     	; 0x4fc4 <_Z12gprs_connectv+0xefc>
    4f76:	82 e0       	ldi	r24, 0x02	; 2
    4f78:	25 c0       	rjmp	.+74     	; 0x4fc4 <_Z12gprs_connectv+0xefc>
    4f7a:	82 e0       	ldi	r24, 0x02	; 2
    4f7c:	23 c0       	rjmp	.+70     	; 0x4fc4 <_Z12gprs_connectv+0xefc>
    4f7e:	82 e0       	ldi	r24, 0x02	; 2
    4f80:	21 c0       	rjmp	.+66     	; 0x4fc4 <_Z12gprs_connectv+0xefc>
    4f82:	82 e0       	ldi	r24, 0x02	; 2
    4f84:	1f c0       	rjmp	.+62     	; 0x4fc4 <_Z12gprs_connectv+0xefc>
    4f86:	82 e0       	ldi	r24, 0x02	; 2
    4f88:	1d c0       	rjmp	.+58     	; 0x4fc4 <_Z12gprs_connectv+0xefc>
    4f8a:	82 e0       	ldi	r24, 0x02	; 2
    4f8c:	1b c0       	rjmp	.+54     	; 0x4fc4 <_Z12gprs_connectv+0xefc>
    4f8e:	82 e0       	ldi	r24, 0x02	; 2
    4f90:	19 c0       	rjmp	.+50     	; 0x4fc4 <_Z12gprs_connectv+0xefc>
    4f92:	82 e0       	ldi	r24, 0x02	; 2
    4f94:	17 c0       	rjmp	.+46     	; 0x4fc4 <_Z12gprs_connectv+0xefc>
    4f96:	82 e0       	ldi	r24, 0x02	; 2
    4f98:	15 c0       	rjmp	.+42     	; 0x4fc4 <_Z12gprs_connectv+0xefc>
    4f9a:	82 e0       	ldi	r24, 0x02	; 2
    4f9c:	13 c0       	rjmp	.+38     	; 0x4fc4 <_Z12gprs_connectv+0xefc>
    4f9e:	82 e0       	ldi	r24, 0x02	; 2
    4fa0:	11 c0       	rjmp	.+34     	; 0x4fc4 <_Z12gprs_connectv+0xefc>
    4fa2:	82 e0       	ldi	r24, 0x02	; 2
    4fa4:	0f c0       	rjmp	.+30     	; 0x4fc4 <_Z12gprs_connectv+0xefc>
    4fa6:	82 e0       	ldi	r24, 0x02	; 2
    4fa8:	0d c0       	rjmp	.+26     	; 0x4fc4 <_Z12gprs_connectv+0xefc>
    4faa:	82 e0       	ldi	r24, 0x02	; 2
    4fac:	0b c0       	rjmp	.+22     	; 0x4fc4 <_Z12gprs_connectv+0xefc>
    4fae:	82 e0       	ldi	r24, 0x02	; 2
				}
				break;
			}
		case GPRS_CONNCT_RFUN_WAIT:
		{
			if (timeout++ >= GSM_RST_SECS)		//not getting expected data,
    4fb0:	20 91 1a 0c 	lds	r18, 0x0C1A	; 0x800c1a <_ZZ12gprs_connectvE7timeout>
    4fb4:	30 91 1b 0c 	lds	r19, 0x0C1B	; 0x800c1b <_ZZ12gprs_connectvE7timeout+0x1>
    4fb8:	2f 5f       	subi	r18, 0xFF	; 255
    4fba:	3f 4f       	sbci	r19, 0xFF	; 255
    4fbc:	30 93 1b 0c 	sts	0x0C1B, r19	; 0x800c1b <_ZZ12gprs_connectvE7timeout+0x1>
    4fc0:	20 93 1a 0c 	sts	0x0C1A, r18	; 0x800c1a <_ZZ12gprs_connectvE7timeout>
			gprs_connct_state = GPRS_CONNCT_RESET;
		break;	
	}
	
	return sts;
}
    4fc4:	c7 57       	subi	r28, 0x77	; 119
    4fc6:	df 4f       	sbci	r29, 0xFF	; 255
    4fc8:	0f b6       	in	r0, 0x3f	; 63
    4fca:	f8 94       	cli
    4fcc:	de bf       	out	0x3e, r29	; 62
    4fce:	0f be       	out	0x3f, r0	; 63
    4fd0:	cd bf       	out	0x3d, r28	; 61
    4fd2:	df 91       	pop	r29
    4fd4:	cf 91       	pop	r28
    4fd6:	1f 91       	pop	r17
    4fd8:	0f 91       	pop	r16
    4fda:	08 95       	ret

00004fdc <_Z8readImeiv>:
}

char *readImei(void)
{
	return gprs.imei;
}
    4fdc:	84 ee       	ldi	r24, 0xE4	; 228
    4fde:	92 e1       	ldi	r25, 0x12	; 18
    4fe0:	08 95       	ret

00004fe2 <_Z18decode_online_respPc>:

#ifdef ONLINE_CONFIG_EN
unsigned char decode_online_resp(char *tmpstr)
{
    4fe2:	0f 93       	push	r16
    4fe4:	1f 93       	push	r17
    4fe6:	cf 93       	push	r28
    4fe8:	df 93       	push	r29
    4fea:	cd b7       	in	r28, 0x3d	; 61
    4fec:	de b7       	in	r29, 0x3e	; 62
    4fee:	c8 5c       	subi	r28, 0xC8	; 200
    4ff0:	d1 09       	sbc	r29, r1
    4ff2:	0f b6       	in	r0, 0x3f	; 63
    4ff4:	f8 94       	cli
    4ff6:	de bf       	out	0x3e, r29	; 62
    4ff8:	0f be       	out	0x3f, r0	; 63
    4ffa:	cd bf       	out	0x3d, r28	; 61
    4ffc:	8c 01       	movw	r16, r24
	unsigned char resp = FALSE;

	char temp_buff[100]={0},temp_buff2[100]={0};
	unsigned int index = 0,temp_index = 0,i=0;
	memset(temp_buff, 0, sizeof(temp_buff));
    4ffe:	84 e6       	ldi	r24, 0x64	; 100
    5000:	fe 01       	movw	r30, r28
    5002:	31 96       	adiw	r30, 0x01	; 1
    5004:	df 01       	movw	r26, r30
    5006:	28 2f       	mov	r18, r24
    5008:	1d 92       	st	X+, r1
    500a:	2a 95       	dec	r18
    500c:	e9 f7       	brne	.-6      	; 0x5008 <_Z18decode_online_respPc+0x26>
	memset(temp_buff2, 0, sizeof(temp_buff2));
    500e:	ec 59       	subi	r30, 0x9C	; 156
    5010:	ff 4f       	sbci	r31, 0xFF	; 255
    5012:	df 01       	movw	r26, r30
    5014:	1d 92       	st	X+, r1
    5016:	8a 95       	dec	r24
    5018:	e9 f7       	brne	.-6      	; 0x5014 <_Z18decode_online_respPc+0x32>
	switch(online_cfg.online_cfg_state)
    501a:	80 91 1c 0c 	lds	r24, 0x0C1C	; 0x800c1c <online_cfg>
    501e:	88 23       	and	r24, r24
    5020:	21 f0       	breq	.+8      	; 0x502a <_Z18decode_online_respPc+0x48>
    5022:	81 30       	cpi	r24, 0x01	; 1
    5024:	09 f4       	brne	.+2      	; 0x5028 <_Z18decode_online_respPc+0x46>
    5026:	ce c0       	rjmp	.+412    	; 0x51c4 <_Z18decode_online_respPc+0x1e2>
    5028:	33 c1       	rjmp	.+614    	; 0x5290 <_Z18decode_online_respPc+0x2ae>
	{	
		case CFG_VER_CNT:		
#ifdef DEBUG_ONLINE_CFG
			UWriteString((char *)"VER_CNT", UART_PC);
    502a:	62 e0       	ldi	r22, 0x02	; 2
    502c:	70 e0       	ldi	r23, 0x00	; 0
    502e:	8a eb       	ldi	r24, 0xBA	; 186
    5030:	97 e0       	ldi	r25, 0x07	; 7
    5032:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <_Z12UWriteStringPKci>
#endif

		while((tmpstr[index] != '"') && (index < GPRS_RX_BUFFER_MAX))
    5036:	f8 01       	movw	r30, r16
    5038:	80 81       	ld	r24, Z
    503a:	82 32       	cpi	r24, 0x22	; 34
    503c:	69 f0       	breq	.+26     	; 0x5058 <_Z18decode_online_respPc+0x76>
    503e:	31 96       	adiw	r30, 0x01	; 1
    5040:	80 e0       	ldi	r24, 0x00	; 0
    5042:	90 e0       	ldi	r25, 0x00	; 0
    5044:	04 c0       	rjmp	.+8      	; 0x504e <_Z18decode_online_respPc+0x6c>
    5046:	80 38       	cpi	r24, 0x80	; 128
    5048:	91 05       	cpc	r25, r1
    504a:	09 f4       	brne	.+2      	; 0x504e <_Z18decode_online_respPc+0x6c>
    504c:	2e c1       	rjmp	.+604    	; 0x52aa <_Z18decode_online_respPc+0x2c8>
		index++;
    504e:	01 96       	adiw	r24, 0x01	; 1
		case CFG_VER_CNT:		
#ifdef DEBUG_ONLINE_CFG
			UWriteString((char *)"VER_CNT", UART_PC);
#endif

		while((tmpstr[index] != '"') && (index < GPRS_RX_BUFFER_MAX))
    5050:	21 91       	ld	r18, Z+
    5052:	22 32       	cpi	r18, 0x22	; 34
    5054:	c1 f7       	brne	.-16     	; 0x5046 <_Z18decode_online_respPc+0x64>
    5056:	20 c1       	rjmp	.+576    	; 0x5298 <_Z18decode_online_respPc+0x2b6>
unsigned char decode_online_resp(char *tmpstr)
{
	unsigned char resp = FALSE;

	char temp_buff[100]={0},temp_buff2[100]={0};
	unsigned int index = 0,temp_index = 0,i=0;
    5058:	80 e0       	ldi	r24, 0x00	; 0
    505a:	90 e0       	ldi	r25, 0x00	; 0
#endif

		while((tmpstr[index] != '"') && (index < GPRS_RX_BUFFER_MAX))
		index++;
		if(index < (GPRS_RX_BUFFER_MAX - 1))
		index++;	//skipping "
    505c:	ac 01       	movw	r20, r24
    505e:	4f 5f       	subi	r20, 0xFF	; 255
    5060:	5f 4f       	sbci	r21, 0xFF	; 255
		if (tmpstr[index] == '1')
    5062:	f8 01       	movw	r30, r16
    5064:	e4 0f       	add	r30, r20
    5066:	f5 1f       	adc	r31, r21
    5068:	20 81       	ld	r18, Z
    506a:	21 33       	cpi	r18, 0x31	; 49
    506c:	09 f0       	breq	.+2      	; 0x5070 <_Z18decode_online_respPc+0x8e>
    506e:	94 c0       	rjmp	.+296    	; 0x5198 <_Z18decode_online_respPc+0x1b6>
		{
			index++;
    5070:	02 96       	adiw	r24, 0x02	; 2
			if(index < (GPRS_TEMP_RX_BUFFER_MAX - 1))
    5072:	81 32       	cpi	r24, 0x21	; 33
    5074:	f6 e0       	ldi	r31, 0x06	; 6
    5076:	9f 07       	cpc	r25, r31
    5078:	20 f4       	brcc	.+8      	; 0x5082 <_Z18decode_online_respPc+0xa0>
    507a:	01 c0       	rjmp	.+2      	; 0x507e <_Z18decode_online_respPc+0x9c>
#ifdef DEBUG_ONLINE_CFG
			UWriteString((char *)"VER_CNT", UART_PC);
#endif

		while((tmpstr[index] != '"') && (index < GPRS_RX_BUFFER_MAX))
		index++;
    507c:	ac 01       	movw	r20, r24
		index++;	//skipping "
		if (tmpstr[index] == '1')
		{
			index++;
			if(index < (GPRS_TEMP_RX_BUFFER_MAX - 1))
			index++;	//skipping ,
    507e:	ca 01       	movw	r24, r20
    5080:	02 96       	adiw	r24, 0x02	; 2
			
			memset(&temp_buff,0,sizeof(temp_buff));
    5082:	fe 01       	movw	r30, r28
    5084:	31 96       	adiw	r30, 0x01	; 1
    5086:	24 e6       	ldi	r18, 0x64	; 100
    5088:	df 01       	movw	r26, r30
    508a:	1d 92       	st	X+, r1
    508c:	2a 95       	dec	r18
    508e:	e9 f7       	brne	.-6      	; 0x508a <_Z18decode_online_respPc+0xa8>
			
			temp_index = index;
			for(i=0;tmpstr[temp_index] != '"';i++,temp_index++)
    5090:	b8 01       	movw	r22, r16
    5092:	68 0f       	add	r22, r24
    5094:	79 1f       	adc	r23, r25
    5096:	fb 01       	movw	r30, r22
    5098:	20 81       	ld	r18, Z
    509a:	22 32       	cpi	r18, 0x22	; 34
    509c:	61 f0       	breq	.+24     	; 0x50b6 <_Z18decode_online_respPc+0xd4>
    509e:	01 96       	adiw	r24, 0x01	; 1
    50a0:	d8 01       	movw	r26, r16
    50a2:	a8 0f       	add	r26, r24
    50a4:	b9 1f       	adc	r27, r25
    50a6:	40 e0       	ldi	r20, 0x00	; 0
    50a8:	50 e0       	ldi	r21, 0x00	; 0
    50aa:	4f 5f       	subi	r20, 0xFF	; 255
    50ac:	5f 4f       	sbci	r21, 0xFF	; 255
    50ae:	8d 91       	ld	r24, X+
    50b0:	82 32       	cpi	r24, 0x22	; 34
    50b2:	d9 f7       	brne	.-10     	; 0x50aa <_Z18decode_online_respPc+0xc8>
    50b4:	02 c0       	rjmp	.+4      	; 0x50ba <_Z18decode_online_respPc+0xd8>
    50b6:	40 e0       	ldi	r20, 0x00	; 0
    50b8:	50 e0       	ldi	r21, 0x00	; 0
			{
			}
			memcpy(temp_buff, &tmpstr[index], i);
    50ba:	ce 01       	movw	r24, r28
    50bc:	01 96       	adiw	r24, 0x01	; 1
    50be:	0e 94 a6 47 	call	0x8f4c	; 0x8f4c <memcpy>
	

			online_cfg.ver_cnt = atoi(temp_buff);
    50c2:	ce 01       	movw	r24, r28
    50c4:	01 96       	adiw	r24, 0x01	; 1
    50c6:	0e 94 7c 47 	call	0x8ef8	; 0x8ef8 <atoi>
    50ca:	80 93 1e 0c 	sts	0x0C1E, r24	; 0x800c1e <online_cfg+0x2>
			
			if(online_cfg.ver_cnt>=1	&&	online_cfg.ver_cnt<=99)//valid response
    50ce:	81 50       	subi	r24, 0x01	; 1
    50d0:	83 36       	cpi	r24, 0x63	; 99
    50d2:	08 f0       	brcs	.+2      	; 0x50d6 <_Z18decode_online_respPc+0xf4>
    50d4:	57 c0       	rjmp	.+174    	; 0x5184 <_Z18decode_online_respPc+0x1a2>
			{
#ifdef DEBUG_ONLINE_CFG
				UWriteString((char *)"\r\ntmpstr:", UART_PC);
    50d6:	62 e0       	ldi	r22, 0x02	; 2
    50d8:	70 e0       	ldi	r23, 0x00	; 0
    50da:	82 ec       	ldi	r24, 0xC2	; 194
    50dc:	97 e0       	ldi	r25, 0x07	; 7
    50de:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <_Z12UWriteStringPKci>
				UWriteString(tmpstr, UART_PC);
    50e2:	62 e0       	ldi	r22, 0x02	; 2
    50e4:	70 e0       	ldi	r23, 0x00	; 0
    50e6:	c8 01       	movw	r24, r16
    50e8:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <_Z12UWriteStringPKci>
				UWriteString((char *)"\r\ntemp_buff:", UART_PC);
    50ec:	62 e0       	ldi	r22, 0x02	; 2
    50ee:	70 e0       	ldi	r23, 0x00	; 0
    50f0:	8c ec       	ldi	r24, 0xCC	; 204
    50f2:	97 e0       	ldi	r25, 0x07	; 7
    50f4:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <_Z12UWriteStringPKci>
				UWriteString(temp_buff, UART_PC);
    50f8:	62 e0       	ldi	r22, 0x02	; 2
    50fa:	70 e0       	ldi	r23, 0x00	; 0
    50fc:	ce 01       	movw	r24, r28
    50fe:	01 96       	adiw	r24, 0x01	; 1
    5100:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <_Z12UWriteStringPKci>
				UWriteString((char *)"\r\nver_cnt_from_srvr:", UART_PC);
    5104:	62 e0       	ldi	r22, 0x02	; 2
    5106:	70 e0       	ldi	r23, 0x00	; 0
    5108:	89 ed       	ldi	r24, 0xD9	; 217
    510a:	97 e0       	ldi	r25, 0x07	; 7
    510c:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <_Z12UWriteStringPKci>
				UWriteInt(online_cfg.ver_cnt, UART_PC);
    5110:	0c e1       	ldi	r16, 0x1C	; 28
    5112:	1c e0       	ldi	r17, 0x0C	; 12
    5114:	d8 01       	movw	r26, r16
    5116:	12 96       	adiw	r26, 0x02	; 2
    5118:	6c 91       	ld	r22, X
    511a:	70 e0       	ldi	r23, 0x00	; 0
    511c:	80 e0       	ldi	r24, 0x00	; 0
    511e:	90 e0       	ldi	r25, 0x00	; 0
    5120:	42 e0       	ldi	r20, 0x02	; 2
    5122:	0e 94 3e 09 	call	0x127c	; 0x127c <_Z9UWriteIntmc>
				UWriteString((char *)"\r\ncurr_ver_cnt:", UART_PC);
    5126:	62 e0       	ldi	r22, 0x02	; 2
    5128:	70 e0       	ldi	r23, 0x00	; 0
    512a:	8e ee       	ldi	r24, 0xEE	; 238
    512c:	97 e0       	ldi	r25, 0x07	; 7
    512e:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <_Z12UWriteStringPKci>
				UWriteInt(get_online_cfg_ver_cnt(), UART_PC);
    5132:	d8 d7       	rcall	.+4016   	; 0x60e4 <_Z22get_online_cfg_ver_cntv>
    5134:	68 2f       	mov	r22, r24
    5136:	70 e0       	ldi	r23, 0x00	; 0
    5138:	80 e0       	ldi	r24, 0x00	; 0
    513a:	90 e0       	ldi	r25, 0x00	; 0
    513c:	42 e0       	ldi	r20, 0x02	; 2
    513e:	0e 94 3e 09 	call	0x127c	; 0x127c <_Z9UWriteIntmc>
#endif
				if(online_cfg.ver_cnt == get_online_cfg_ver_cnt())
    5142:	f8 01       	movw	r30, r16
    5144:	12 81       	ldd	r17, Z+2	; 0x02
    5146:	ce d7       	rcall	.+3996   	; 0x60e4 <_Z22get_online_cfg_ver_cntv>
    5148:	18 13       	cpse	r17, r24
    514a:	0a c0       	rjmp	.+20     	; 0x5160 <_Z18decode_online_respPc+0x17e>
				{
					online_cfg.cfg_pending = FALSE;
    514c:	10 92 1d 0c 	sts	0x0C1D, r1	; 0x800c1d <online_cfg+0x1>
#ifdef DEBUG_ONLINE_CFG
					UWriteString((char *)"\r\ncnfg_uptodate\r\n", UART_PC);
    5150:	62 e0       	ldi	r22, 0x02	; 2
    5152:	70 e0       	ldi	r23, 0x00	; 0
    5154:	8e ef       	ldi	r24, 0xFE	; 254
    5156:	97 e0       	ldi	r25, 0x07	; 7
    5158:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <_Z12UWriteStringPKci>
					online_cfg.online_cfg_state = CFG_DW_DATA;
#ifdef DEBUG_ONLINE_CFG
					UWriteString((char *)"ver_not_match", UART_PC);
#endif
				}
				resp= TRUE;
    515c:	81 e0       	ldi	r24, 0x01	; 1
    515e:	b4 c0       	rjmp	.+360    	; 0x52c8 <_Z18decode_online_respPc+0x2e6>
					UWriteString((char *)"\r\ncnfg_uptodate\r\n", UART_PC);
#endif
				}
				else
				{
					set_online_cfg_ver_cnt(online_cfg.ver_cnt);
    5160:	0c e1       	ldi	r16, 0x1C	; 28
    5162:	1c e0       	ldi	r17, 0x0C	; 12
    5164:	d8 01       	movw	r26, r16
    5166:	12 96       	adiw	r26, 0x02	; 2
    5168:	8c 91       	ld	r24, X
    516a:	bf d7       	rcall	.+3966   	; 0x60ea <_Z22set_online_cfg_ver_cnth>
					
					online_cfg.cfg_pending = TRUE;
    516c:	81 e0       	ldi	r24, 0x01	; 1
    516e:	f8 01       	movw	r30, r16
    5170:	81 83       	std	Z+1, r24	; 0x01
					online_cfg.online_cfg_state = CFG_DW_DATA;
    5172:	80 83       	st	Z, r24
#ifdef DEBUG_ONLINE_CFG
					UWriteString((char *)"ver_not_match", UART_PC);
    5174:	62 e0       	ldi	r22, 0x02	; 2
    5176:	70 e0       	ldi	r23, 0x00	; 0
    5178:	80 e1       	ldi	r24, 0x10	; 16
    517a:	98 e0       	ldi	r25, 0x08	; 8
    517c:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <_Z12UWriteStringPKci>
#endif
				}
				resp= TRUE;
    5180:	81 e0       	ldi	r24, 0x01	; 1
    5182:	a2 c0       	rjmp	.+324    	; 0x52c8 <_Z18decode_online_respPc+0x2e6>
			}
			else
			{
				//No response or invalid response	
#ifdef DEBUG_ONLINE_CFG
				UWriteString((char *)"invalid vercnt", UART_PC);
    5184:	62 e0       	ldi	r22, 0x02	; 2
    5186:	70 e0       	ldi	r23, 0x00	; 0
    5188:	8e e1       	ldi	r24, 0x1E	; 30
    518a:	98 e0       	ldi	r25, 0x08	; 8
    518c:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <_Z12UWriteStringPKci>
#endif
				online_cfg.cfg_pending = FALSE;
    5190:	10 92 1d 0c 	sts	0x0C1D, r1	; 0x800c1d <online_cfg+0x1>
				resp = FALSE;
    5194:	80 e0       	ldi	r24, 0x00	; 0
    5196:	98 c0       	rjmp	.+304    	; 0x52c8 <_Z18decode_online_respPc+0x2e6>
			}
			
		}
		else if (tmpstr[index] == '0')
    5198:	20 33       	cpi	r18, 0x30	; 48
    519a:	61 f4       	brne	.+24     	; 0x51b4 <_Z18decode_online_respPc+0x1d2>
		{
#ifdef DEBUG_ONLINE_CFG
			UWriteString((char *)"Ver_not_avail:", UART_PC);
    519c:	62 e0       	ldi	r22, 0x02	; 2
    519e:	70 e0       	ldi	r23, 0x00	; 0
    51a0:	8d e2       	ldi	r24, 0x2D	; 45
    51a2:	98 e0       	ldi	r25, 0x08	; 8
    51a4:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <_Z12UWriteStringPKci>
#endif			
			//Ver cnt not available on server
			online_cfg.cfg_pending = FALSE;
    51a8:	ec e1       	ldi	r30, 0x1C	; 28
    51aa:	fc e0       	ldi	r31, 0x0C	; 12
    51ac:	11 82       	std	Z+1, r1	; 0x01
			online_cfg.online_cfg_state = CFG_VER_CNT;
    51ae:	10 82       	st	Z, r1
			resp = FALSE;
    51b0:	80 e0       	ldi	r24, 0x00	; 0
    51b2:	8a c0       	rjmp	.+276    	; 0x52c8 <_Z18decode_online_respPc+0x2e6>
		}
		else
		{
#ifdef DEBUG_ONLINE_CFG
			UWriteString((char *)"ver_err_und:", UART_PC);
    51b4:	62 e0       	ldi	r22, 0x02	; 2
    51b6:	70 e0       	ldi	r23, 0x00	; 0
    51b8:	8c e3       	ldi	r24, 0x3C	; 60
    51ba:	98 e0       	ldi	r25, 0x08	; 8
    51bc:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <_Z12UWriteStringPKci>
#endif
			
			resp = FALSE;
    51c0:	80 e0       	ldi	r24, 0x00	; 0
    51c2:	82 c0       	rjmp	.+260    	; 0x52c8 <_Z18decode_online_respPc+0x2e6>
		
		break;
		
		case CFG_DW_DATA:
		
		memset(temp_buff, 0, sizeof(temp_buff));
    51c4:	fe 01       	movw	r30, r28
    51c6:	31 96       	adiw	r30, 0x01	; 1
    51c8:	84 e6       	ldi	r24, 0x64	; 100
    51ca:	df 01       	movw	r26, r30
    51cc:	1d 92       	st	X+, r1
    51ce:	8a 95       	dec	r24
    51d0:	e9 f7       	brne	.-6      	; 0x51cc <_Z18decode_online_respPc+0x1ea>



#ifdef DEBUG_ONLINE_CFG
		UWriteString((char *)"tmpstr:", UART_PC);
    51d2:	62 e0       	ldi	r22, 0x02	; 2
    51d4:	70 e0       	ldi	r23, 0x00	; 0
    51d6:	84 ec       	ldi	r24, 0xC4	; 196
    51d8:	97 e0       	ldi	r25, 0x07	; 7
    51da:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <_Z12UWriteStringPKci>
		UWriteString(tmpstr, UART_PC);
    51de:	62 e0       	ldi	r22, 0x02	; 2
    51e0:	70 e0       	ldi	r23, 0x00	; 0
    51e2:	c8 01       	movw	r24, r16
    51e4:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <_Z12UWriteStringPKci>
#endif
		while((tmpstr[index] != '"') && (index < GPRS_RX_BUFFER_MAX))
    51e8:	f8 01       	movw	r30, r16
    51ea:	80 81       	ld	r24, Z
    51ec:	82 32       	cpi	r24, 0x22	; 34
    51ee:	71 f0       	breq	.+28     	; 0x520c <_Z18decode_online_respPc+0x22a>
    51f0:	d8 01       	movw	r26, r16
    51f2:	11 96       	adiw	r26, 0x01	; 1
    51f4:	e0 e0       	ldi	r30, 0x00	; 0
    51f6:	f0 e0       	ldi	r31, 0x00	; 0
    51f8:	04 c0       	rjmp	.+8      	; 0x5202 <_Z18decode_online_respPc+0x220>
    51fa:	e0 38       	cpi	r30, 0x80	; 128
    51fc:	f1 05       	cpc	r31, r1
    51fe:	09 f4       	brne	.+2      	; 0x5202 <_Z18decode_online_respPc+0x220>
    5200:	5c c0       	rjmp	.+184    	; 0x52ba <_Z18decode_online_respPc+0x2d8>
		index++;
    5202:	31 96       	adiw	r30, 0x01	; 1

#ifdef DEBUG_ONLINE_CFG
		UWriteString((char *)"tmpstr:", UART_PC);
		UWriteString(tmpstr, UART_PC);
#endif
		while((tmpstr[index] != '"') && (index < GPRS_RX_BUFFER_MAX))
    5204:	8d 91       	ld	r24, X+
    5206:	82 32       	cpi	r24, 0x22	; 34
    5208:	c1 f7       	brne	.-16     	; 0x51fa <_Z18decode_online_respPc+0x218>
    520a:	4b c0       	rjmp	.+150    	; 0x52a2 <_Z18decode_online_respPc+0x2c0>
unsigned char decode_online_resp(char *tmpstr)
{
	unsigned char resp = FALSE;

	char temp_buff[100]={0},temp_buff2[100]={0};
	unsigned int index = 0,temp_index = 0,i=0;
    520c:	e0 e0       	ldi	r30, 0x00	; 0
    520e:	f0 e0       	ldi	r31, 0x00	; 0
		UWriteString(tmpstr, UART_PC);
#endif
		while((tmpstr[index] != '"') && (index < GPRS_RX_BUFFER_MAX))
		index++;
		if(index < (GPRS_RX_BUFFER_MAX - 1))
		index++;	//skipping "
    5210:	9f 01       	movw	r18, r30
    5212:	2f 5f       	subi	r18, 0xFF	; 255
    5214:	3f 4f       	sbci	r19, 0xFF	; 255
		if (tmpstr[index] == '1')
    5216:	d8 01       	movw	r26, r16
    5218:	a2 0f       	add	r26, r18
    521a:	b3 1f       	adc	r27, r19
    521c:	8c 91       	ld	r24, X
    521e:	81 33       	cpi	r24, 0x31	; 49
    5220:	e9 f4       	brne	.+58     	; 0x525c <_Z18decode_online_respPc+0x27a>
		{
			index++;
    5222:	32 96       	adiw	r30, 0x02	; 2
			if(index < (GPRS_TEMP_RX_BUFFER_MAX - 1))
    5224:	e1 32       	cpi	r30, 0x21	; 33
    5226:	86 e0       	ldi	r24, 0x06	; 6
    5228:	f8 07       	cpc	r31, r24
    522a:	20 f4       	brcc	.+8      	; 0x5234 <_Z18decode_online_respPc+0x252>
    522c:	01 c0       	rjmp	.+2      	; 0x5230 <_Z18decode_online_respPc+0x24e>
#ifdef DEBUG_ONLINE_CFG
		UWriteString((char *)"tmpstr:", UART_PC);
		UWriteString(tmpstr, UART_PC);
#endif
		while((tmpstr[index] != '"') && (index < GPRS_RX_BUFFER_MAX))
		index++;
    522e:	9f 01       	movw	r18, r30
		index++;	//skipping "
		if (tmpstr[index] == '1')
		{
			index++;
			if(index < (GPRS_TEMP_RX_BUFFER_MAX - 1))
			index++;	//skipping ,
    5230:	f9 01       	movw	r30, r18
    5232:	32 96       	adiw	r30, 0x02	; 2
			memcpy(temp_buff, &tmpstr[index], CONFIG_RESP_LENGTH);
    5234:	e0 0f       	add	r30, r16
    5236:	f1 1f       	adc	r31, r17
    5238:	89 e4       	ldi	r24, 0x49	; 73
    523a:	de 01       	movw	r26, r28
    523c:	11 96       	adiw	r26, 0x01	; 1
    523e:	01 90       	ld	r0, Z+
    5240:	0d 92       	st	X+, r0
    5242:	8a 95       	dec	r24
			if(syncOnlineCnfgData(temp_buff))
    5244:	e1 f7       	brne	.-8      	; 0x523e <_Z18decode_online_respPc+0x25c>
    5246:	ce 01       	movw	r24, r28
    5248:	01 96       	adiw	r24, 0x01	; 1
    524a:	56 d4       	rcall	.+2220   	; 0x5af8 <_Z18syncOnlineCnfgDataPc>
    524c:	88 23       	and	r24, r24
    524e:	11 f1       	breq	.+68     	; 0x5294 <_Z18decode_online_respPc+0x2b2>
			{
				resp = TRUE;
				online_cfg.cfg_pending = FALSE;
    5250:	ec e1       	ldi	r30, 0x1C	; 28
    5252:	fc e0       	ldi	r31, 0x0C	; 12
    5254:	11 82       	std	Z+1, r1	; 0x01
				online_cfg.online_cfg_state = CFG_VER_CNT;
    5256:	10 82       	st	Z, r1
			if(index < (GPRS_TEMP_RX_BUFFER_MAX - 1))
			index++;	//skipping ,
			memcpy(temp_buff, &tmpstr[index], CONFIG_RESP_LENGTH);
			if(syncOnlineCnfgData(temp_buff))
			{
				resp = TRUE;
    5258:	81 e0       	ldi	r24, 0x01	; 1
    525a:	36 c0       	rjmp	.+108    	; 0x52c8 <_Z18decode_online_respPc+0x2e6>
			{
				resp = FALSE;
			}
			
		}
		else if (tmpstr[index] == '0')
    525c:	80 33       	cpi	r24, 0x30	; 48
    525e:	61 f4       	brne	.+24     	; 0x5278 <_Z18decode_online_respPc+0x296>
		{
#ifdef DEBUG_ONLINE_CFG
			UWriteString((char *)"config_not_avail:", UART_PC);
    5260:	62 e0       	ldi	r22, 0x02	; 2
    5262:	70 e0       	ldi	r23, 0x00	; 0
    5264:	89 e4       	ldi	r24, 0x49	; 73
    5266:	98 e0       	ldi	r25, 0x08	; 8
    5268:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <_Z12UWriteStringPKci>
#endif
			//No response or invalid response
			online_cfg.cfg_pending = FALSE;
    526c:	ec e1       	ldi	r30, 0x1C	; 28
    526e:	fc e0       	ldi	r31, 0x0C	; 12
    5270:	11 82       	std	Z+1, r1	; 0x01
			online_cfg.online_cfg_state = CFG_VER_CNT;
    5272:	10 82       	st	Z, r1
			resp = FALSE;
    5274:	80 e0       	ldi	r24, 0x00	; 0
    5276:	28 c0       	rjmp	.+80     	; 0x52c8 <_Z18decode_online_respPc+0x2e6>
		}
		else
		{
#ifdef DEBUG_ONLINE_CFG
			UWriteString((char *)"cnfg_data_und:", UART_PC);
    5278:	62 e0       	ldi	r22, 0x02	; 2
    527a:	70 e0       	ldi	r23, 0x00	; 0
    527c:	8b e5       	ldi	r24, 0x5B	; 91
    527e:	98 e0       	ldi	r25, 0x08	; 8
    5280:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <_Z12UWriteStringPKci>
#endif
			//unexpected response
			online_cfg.cfg_pending = FALSE;
    5284:	ec e1       	ldi	r30, 0x1C	; 28
    5286:	fc e0       	ldi	r31, 0x0C	; 12
    5288:	11 82       	std	Z+1, r1	; 0x01
			online_cfg.online_cfg_state = CFG_VER_CNT;
    528a:	10 82       	st	Z, r1
			resp = FALSE;
    528c:	80 e0       	ldi	r24, 0x00	; 0
    528e:	1c c0       	rjmp	.+56     	; 0x52c8 <_Z18decode_online_respPc+0x2e6>
}

#ifdef ONLINE_CONFIG_EN
unsigned char decode_online_resp(char *tmpstr)
{
	unsigned char resp = FALSE;
    5290:	80 e0       	ldi	r24, 0x00	; 0
    5292:	1a c0       	rjmp	.+52     	; 0x52c8 <_Z18decode_online_respPc+0x2e6>
				online_cfg.cfg_pending = FALSE;
				online_cfg.online_cfg_state = CFG_VER_CNT;
			}
			else
			{
				resp = FALSE;
    5294:	80 e0       	ldi	r24, 0x00	; 0
			
		break;
		default:
		break;
	}
	return resp;
    5296:	18 c0       	rjmp	.+48     	; 0x52c8 <_Z18decode_online_respPc+0x2e6>
			UWriteString((char *)"VER_CNT", UART_PC);
#endif

		while((tmpstr[index] != '"') && (index < GPRS_RX_BUFFER_MAX))
		index++;
		if(index < (GPRS_RX_BUFFER_MAX - 1))
    5298:	8f 37       	cpi	r24, 0x7F	; 127
    529a:	91 05       	cpc	r25, r1
    529c:	08 f0       	brcs	.+2      	; 0x52a0 <_Z18decode_online_respPc+0x2be>
    529e:	8a cf       	rjmp	.-236    	; 0x51b4 <_Z18decode_online_respPc+0x1d2>
    52a0:	dd ce       	rjmp	.-582    	; 0x505c <_Z18decode_online_respPc+0x7a>
		UWriteString((char *)"tmpstr:", UART_PC);
		UWriteString(tmpstr, UART_PC);
#endif
		while((tmpstr[index] != '"') && (index < GPRS_RX_BUFFER_MAX))
		index++;
		if(index < (GPRS_RX_BUFFER_MAX - 1))
    52a2:	ef 37       	cpi	r30, 0x7F	; 127
    52a4:	f1 05       	cpc	r31, r1
    52a6:	40 f7       	brcc	.-48     	; 0x5278 <_Z18decode_online_respPc+0x296>
    52a8:	b3 cf       	rjmp	.-154    	; 0x5210 <_Z18decode_online_respPc+0x22e>

		while((tmpstr[index] != '"') && (index < GPRS_RX_BUFFER_MAX))
		index++;
		if(index < (GPRS_RX_BUFFER_MAX - 1))
		index++;	//skipping "
		if (tmpstr[index] == '1')
    52aa:	f8 01       	movw	r30, r16
    52ac:	e0 58       	subi	r30, 0x80	; 128
    52ae:	ff 4f       	sbci	r31, 0xFF	; 255
    52b0:	20 81       	ld	r18, Z
    52b2:	21 33       	cpi	r18, 0x31	; 49
    52b4:	09 f0       	breq	.+2      	; 0x52b8 <_Z18decode_online_respPc+0x2d6>
    52b6:	70 cf       	rjmp	.-288    	; 0x5198 <_Z18decode_online_respPc+0x1b6>
    52b8:	e1 ce       	rjmp	.-574    	; 0x507c <_Z18decode_online_respPc+0x9a>
#endif
		while((tmpstr[index] != '"') && (index < GPRS_RX_BUFFER_MAX))
		index++;
		if(index < (GPRS_RX_BUFFER_MAX - 1))
		index++;	//skipping "
		if (tmpstr[index] == '1')
    52ba:	d8 01       	movw	r26, r16
    52bc:	a0 58       	subi	r26, 0x80	; 128
    52be:	bf 4f       	sbci	r27, 0xFF	; 255
    52c0:	8c 91       	ld	r24, X
    52c2:	81 33       	cpi	r24, 0x31	; 49
    52c4:	59 f6       	brne	.-106    	; 0x525c <_Z18decode_online_respPc+0x27a>
    52c6:	b3 cf       	rjmp	.-154    	; 0x522e <_Z18decode_online_respPc+0x24c>
		break;
		default:
		break;
	}
	return resp;
}
    52c8:	c8 53       	subi	r28, 0x38	; 56
    52ca:	df 4f       	sbci	r29, 0xFF	; 255
    52cc:	0f b6       	in	r0, 0x3f	; 63
    52ce:	f8 94       	cli
    52d0:	de bf       	out	0x3e, r29	; 62
    52d2:	0f be       	out	0x3f, r0	; 63
    52d4:	cd bf       	out	0x3d, r28	; 61
    52d6:	df 91       	pop	r29
    52d8:	cf 91       	pop	r28
    52da:	1f 91       	pop	r17
    52dc:	0f 91       	pop	r16
    52de:	08 95       	ret

000052e0 <_Z12post_requestPcS_>:
		break;
	}
	return sts;
}
http_status_t post_request(char *url_str, char *server_response)
{
    52e0:	0f 93       	push	r16
    52e2:	1f 93       	push	r17
    52e4:	cf 93       	push	r28
    52e6:	df 93       	push	r29
    52e8:	cd b7       	in	r28, 0x3d	; 61
    52ea:	de b7       	in	r29, 0x3e	; 62
    52ec:	ca 57       	subi	r28, 0x7A	; 122
    52ee:	d5 40       	sbci	r29, 0x05	; 5
    52f0:	0f b6       	in	r0, 0x3f	; 63
    52f2:	f8 94       	cli
    52f4:	de bf       	out	0x3e, r29	; 62
    52f6:	0f be       	out	0x3f, r0	; 63
    52f8:	cd bf       	out	0x3d, r28	; 61
	static gprs_http_state_t http_state = GPRS_HTTP_CMD_URL;
	static char http_retry_cnt = 0;
	int num_byte = 0;
    52fa:	1a 82       	std	Y+2, r1	; 0x02
    52fc:	19 82       	std	Y+1, r1	; 0x01
	static unsigned int timeout = 0;
	static unsigned char gprs_sync_retry_cnt = 0;		// 15-2-19 VC: 
#ifdef ONLINE_CONFIG_EN
	static unsigned char gprs_cfg_retry_cnt = 0;
#endif
	switch (http_state)
    52fe:	e0 91 13 02 	lds	r30, 0x0213	; 0x800213 <_ZZ12post_requestPcS_E10http_state>
    5302:	4e 2f       	mov	r20, r30
    5304:	50 e0       	ldi	r21, 0x00	; 0
    5306:	fa 01       	movw	r30, r20
    5308:	35 97       	sbiw	r30, 0x05	; 5
    530a:	eb 30       	cpi	r30, 0x0B	; 11
    530c:	f1 05       	cpc	r31, r1
    530e:	08 f0       	brcs	.+2      	; 0x5312 <_Z12post_requestPcS_+0x32>
    5310:	81 c2       	rjmp	.+1282   	; 0x5814 <_Z12post_requestPcS_+0x534>
    5312:	8c 01       	movw	r16, r24
    5314:	88 27       	eor	r24, r24
    5316:	e8 50       	subi	r30, 0x08	; 8
    5318:	ff 4f       	sbci	r31, 0xFF	; 255
    531a:	8f 4f       	sbci	r24, 0xFF	; 255
    531c:	0c 94 fa 46 	jmp	0x8df4	; 0x8df4 <__tablejump2__>
	{
		case GPRS_HTTP_CMD_URL:
		{
			{
#ifdef GPRS_DEBUG_URL
				UWriteString((char*) url_str, UART_PC);
    5320:	62 e0       	ldi	r22, 0x02	; 2
    5322:	70 e0       	ldi	r23, 0x00	; 0
    5324:	c8 01       	movw	r24, r16
    5326:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <_Z12UWriteStringPKci>
#endif
				flushRxBuffer(GPRS_UART);
    532a:	80 e0       	ldi	r24, 0x00	; 0
    532c:	90 e0       	ldi	r25, 0x00	; 0
    532e:	0e 94 d7 09 	call	0x13ae	; 0x13ae <_Z13flushRxBufferi>
				
				UWriteString((char*) url_str, GPRS_UART);		//Anand 27-04-16
    5332:	60 e0       	ldi	r22, 0x00	; 0
    5334:	70 e0       	ldi	r23, 0x00	; 0
    5336:	c8 01       	movw	r24, r16
    5338:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <_Z12UWriteStringPKci>
			}
			
			http_state = GPRS_HTTP_RSP_URL;
    533c:	86 e0       	ldi	r24, 0x06	; 6
    533e:	80 93 13 02 	sts	0x0213, r24	; 0x800213 <_ZZ12post_requestPcS_E10http_state>
{
	static gprs_http_state_t http_state = GPRS_HTTP_CMD_URL;
	static char http_retry_cnt = 0;
	int num_byte = 0;
	
	http_status_t sts = HTTP_IN_PRG;
    5342:	12 e0       	ldi	r17, 0x02	; 2
				UWriteString((char*) url_str, GPRS_UART);		//Anand 27-04-16
			}
			
			http_state = GPRS_HTTP_RSP_URL;
		}
		break;
    5344:	6e c2       	rjmp	.+1244   	; 0x5822 <_Z12post_requestPcS_+0x542>
		case GPRS_HTTP_RSP_URL:
			switch (check_string_nobuf("OK"))
    5346:	85 e4       	ldi	r24, 0x45	; 69
    5348:	95 e0       	ldi	r25, 0x05	; 5
    534a:	0e 94 fc 45 	call	0x8bf8	; 0x8bf8 <_Z18check_string_nobufPKc>
    534e:	81 30       	cpi	r24, 0x01	; 1
    5350:	21 f0       	breq	.+8      	; 0x535a <_Z12post_requestPcS_+0x7a>
    5352:	88 f1       	brcs	.+98     	; 0x53b6 <_Z12post_requestPcS_+0xd6>
    5354:	82 30       	cpi	r24, 0x02	; 2
    5356:	d1 f0       	breq	.+52     	; 0x538c <_Z12post_requestPcS_+0xac>
    5358:	5f c2       	rjmp	.+1214   	; 0x5818 <_Z12post_requestPcS_+0x538>
			{
				case (GPRS_MATCH_FAIL):
#ifdef GPRS_DEBUG
					UWriteString("URL:f", UART_PC);
    535a:	62 e0       	ldi	r22, 0x02	; 2
    535c:	70 e0       	ldi	r23, 0x00	; 0
    535e:	8a e6       	ldi	r24, 0x6A	; 106
    5360:	98 e0       	ldi	r25, 0x08	; 8
    5362:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <_Z12UWriteStringPKci>
#endif				
					http_state = GPRS_HTTP_CMD_URL;
    5366:	85 e0       	ldi	r24, 0x05	; 5
    5368:	80 93 13 02 	sts	0x0213, r24	; 0x800213 <_ZZ12post_requestPcS_E10http_state>
				
					if (http_retry_cnt++ >= HTTP_RETRY_CNT)
    536c:	80 91 10 0c 	lds	r24, 0x0C10	; 0x800c10 <_ZZ12post_requestPcS_E14http_retry_cnt>
    5370:	91 e0       	ldi	r25, 0x01	; 1
    5372:	98 0f       	add	r25, r24
    5374:	90 93 10 0c 	sts	0x0C10, r25	; 0x800c10 <_ZZ12post_requestPcS_E14http_retry_cnt>
    5378:	83 30       	cpi	r24, 0x03	; 3
    537a:	08 f4       	brcc	.+2      	; 0x537e <_Z12post_requestPcS_+0x9e>
    537c:	4f c2       	rjmp	.+1182   	; 0x581c <_Z12post_requestPcS_+0x53c>
					{
						http.errcode = HTTP_ERR_OFFSET + GPRS_HTTP_RSP_URL;
    537e:	86 ec       	ldi	r24, 0xC6	; 198
    5380:	80 93 4c 0c 	sts	0x0C4C, r24	; 0x800c4c <http>
						sts = HTTP_FAIL;
						http_state = GPRS_HTTP_CMD_URL;
						
						http_retry_cnt = 0;
    5384:	10 92 10 0c 	sts	0x0C10, r1	; 0x800c10 <_ZZ12post_requestPcS_E14http_retry_cnt>
					http_state = GPRS_HTTP_CMD_URL;
				
					if (http_retry_cnt++ >= HTTP_RETRY_CNT)
					{
						http.errcode = HTTP_ERR_OFFSET + GPRS_HTTP_RSP_URL;
						sts = HTTP_FAIL;
    5388:	11 e0       	ldi	r17, 0x01	; 1
    538a:	4b c2       	rjmp	.+1174   	; 0x5822 <_Z12post_requestPcS_+0x542>
					}
					
				break;
				case (GPRS_MATCH_OK):
#ifdef GPRS_DEBUG_URL
					UWriteString("URL:k", UART_PC);
    538c:	62 e0       	ldi	r22, 0x02	; 2
    538e:	70 e0       	ldi	r23, 0x00	; 0
    5390:	80 e7       	ldi	r24, 0x70	; 112
    5392:	98 e0       	ldi	r25, 0x08	; 8
    5394:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <_Z12UWriteStringPKci>
#endif					
					http_state = GPRS_HTTP_CMD_POST;//GPRS_HTTP_CMD_DATA_LEN;
    5398:	8b e0       	ldi	r24, 0x0B	; 11
    539a:	80 93 13 02 	sts	0x0213, r24	; 0x800213 <_ZZ12post_requestPcS_E10http_state>
					flushRxBuffer(GPRS_UART);				// HJ 15-07-2016  
    539e:	80 e0       	ldi	r24, 0x00	; 0
    53a0:	90 e0       	ldi	r25, 0x00	; 0
    53a2:	0e 94 d7 09 	call	0x13ae	; 0x13ae <_Z13flushRxBufferi>
					
					http_retry_cnt = 0;
    53a6:	10 92 10 0c 	sts	0x0C10, r1	; 0x800c10 <_ZZ12post_requestPcS_E14http_retry_cnt>
					timeout = 0;
    53aa:	10 92 0f 0c 	sts	0x0C0F, r1	; 0x800c0f <_ZZ12post_requestPcS_E7timeout+0x1>
    53ae:	10 92 0e 0c 	sts	0x0C0E, r1	; 0x800c0e <_ZZ12post_requestPcS_E7timeout>
{
	static gprs_http_state_t http_state = GPRS_HTTP_CMD_URL;
	static char http_retry_cnt = 0;
	int num_byte = 0;
	
	http_status_t sts = HTTP_IN_PRG;
    53b2:	12 e0       	ldi	r17, 0x02	; 2
					http_state = GPRS_HTTP_CMD_POST;//GPRS_HTTP_CMD_DATA_LEN;
					flushRxBuffer(GPRS_UART);				// HJ 15-07-2016  
					
					http_retry_cnt = 0;
					timeout = 0;
				break;
    53b4:	36 c2       	rjmp	.+1132   	; 0x5822 <_Z12post_requestPcS_+0x542>
				case (GPRS_NO_NEW_MSG):
#ifdef GPRS_DEBUG
					UWriteString("URL:w", UART_PC);
    53b6:	62 e0       	ldi	r22, 0x02	; 2
    53b8:	70 e0       	ldi	r23, 0x00	; 0
    53ba:	86 e7       	ldi	r24, 0x76	; 118
    53bc:	98 e0       	ldi	r25, 0x08	; 8
    53be:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <_Z12UWriteStringPKci>
#endif					
					if(timeout++ >= HTTPURL_TIMEOUT)
    53c2:	80 91 0e 0c 	lds	r24, 0x0C0E	; 0x800c0e <_ZZ12post_requestPcS_E7timeout>
    53c6:	90 91 0f 0c 	lds	r25, 0x0C0F	; 0x800c0f <_ZZ12post_requestPcS_E7timeout+0x1>
    53ca:	8e 31       	cpi	r24, 0x1E	; 30
    53cc:	91 05       	cpc	r25, r1
    53ce:	38 f4       	brcc	.+14     	; 0x53de <_Z12post_requestPcS_+0xfe>
    53d0:	01 96       	adiw	r24, 0x01	; 1
    53d2:	90 93 0f 0c 	sts	0x0C0F, r25	; 0x800c0f <_ZZ12post_requestPcS_E7timeout+0x1>
    53d6:	80 93 0e 0c 	sts	0x0C0E, r24	; 0x800c0e <_ZZ12post_requestPcS_E7timeout>
{
	static gprs_http_state_t http_state = GPRS_HTTP_CMD_URL;
	static char http_retry_cnt = 0;
	int num_byte = 0;
	
	http_status_t sts = HTTP_IN_PRG;
    53da:	12 e0       	ldi	r17, 0x02	; 2
    53dc:	22 c2       	rjmp	.+1092   	; 0x5822 <_Z12post_requestPcS_+0x542>
#ifdef GPRS_DEBUG
					UWriteString("URL:w", UART_PC);
#endif					
					if(timeout++ >= HTTPURL_TIMEOUT)
					{
						timeout = 0;
    53de:	10 92 0f 0c 	sts	0x0C0F, r1	; 0x800c0f <_ZZ12post_requestPcS_E7timeout+0x1>
    53e2:	10 92 0e 0c 	sts	0x0C0E, r1	; 0x800c0e <_ZZ12post_requestPcS_E7timeout>
						http_state = GPRS_HTTP_CMD_URL;
    53e6:	85 e0       	ldi	r24, 0x05	; 5
    53e8:	80 93 13 02 	sts	0x0213, r24	; 0x800213 <_ZZ12post_requestPcS_E10http_state>
					
						if (http_retry_cnt++ >= HTTP_RETRY_CNT)
    53ec:	80 91 10 0c 	lds	r24, 0x0C10	; 0x800c10 <_ZZ12post_requestPcS_E14http_retry_cnt>
    53f0:	91 e0       	ldi	r25, 0x01	; 1
    53f2:	98 0f       	add	r25, r24
    53f4:	90 93 10 0c 	sts	0x0C10, r25	; 0x800c10 <_ZZ12post_requestPcS_E14http_retry_cnt>
    53f8:	83 30       	cpi	r24, 0x03	; 3
    53fa:	38 f0       	brcs	.+14     	; 0x540a <_Z12post_requestPcS_+0x12a>
						{							
							http.errcode = HTTP_ERR_OFFSET + GPRS_HTTP_RSP_URL;
    53fc:	86 ec       	ldi	r24, 0xC6	; 198
    53fe:	80 93 4c 0c 	sts	0x0C4C, r24	; 0x800c4c <http>
							sts = HTTP_FAIL;
							http_state = GPRS_HTTP_CMD_URL;			//
							http_retry_cnt = 0;
    5402:	10 92 10 0c 	sts	0x0C10, r1	; 0x800c10 <_ZZ12post_requestPcS_E14http_retry_cnt>
						http_state = GPRS_HTTP_CMD_URL;
					
						if (http_retry_cnt++ >= HTTP_RETRY_CNT)
						{							
							http.errcode = HTTP_ERR_OFFSET + GPRS_HTTP_RSP_URL;
							sts = HTTP_FAIL;
    5406:	11 e0       	ldi	r17, 0x01	; 1
    5408:	01 c0       	rjmp	.+2      	; 0x540c <_Z12post_requestPcS_+0x12c>
{
	static gprs_http_state_t http_state = GPRS_HTTP_CMD_URL;
	static char http_retry_cnt = 0;
	int num_byte = 0;
	
	http_status_t sts = HTTP_IN_PRG;
    540a:	12 e0       	ldi	r17, 0x02	; 2
							http.errcode = HTTP_ERR_OFFSET + GPRS_HTTP_RSP_URL;
							sts = HTTP_FAIL;
							http_state = GPRS_HTTP_CMD_URL;			//
							http_retry_cnt = 0;
						}
						flushRxBuffer(GPRS_UART);				// HJ 15-07-2016  
    540c:	80 e0       	ldi	r24, 0x00	; 0
    540e:	90 e0       	ldi	r25, 0x00	; 0
    5410:	0e 94 d7 09 	call	0x13ae	; 0x13ae <_Z13flushRxBufferi>
    5414:	06 c2       	rjmp	.+1036   	; 0x5822 <_Z12post_requestPcS_+0x542>
				break;
			}
		break;
		case GPRS_HTTP_CMD_POST:
#ifdef GPRS_DEBUG_URL
			UWriteString("cmd: POST", UART_PC);
    5416:	62 e0       	ldi	r22, 0x02	; 2
    5418:	70 e0       	ldi	r23, 0x00	; 0
    541a:	8c e7       	ldi	r24, 0x7C	; 124
    541c:	98 e0       	ldi	r25, 0x08	; 8
    541e:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <_Z12UWriteStringPKci>
#endif			
			flushRxBuffer(GPRS_UART);
    5422:	80 e0       	ldi	r24, 0x00	; 0
    5424:	90 e0       	ldi	r25, 0x00	; 0
    5426:	0e 94 d7 09 	call	0x13ae	; 0x13ae <_Z13flushRxBufferi>
			UWriteString((char *)"AT+HTTPACTION=0\r", GPRS_UART);
    542a:	60 e0       	ldi	r22, 0x00	; 0
    542c:	70 e0       	ldi	r23, 0x00	; 0
    542e:	86 e8       	ldi	r24, 0x86	; 134
    5430:	98 e0       	ldi	r25, 0x08	; 8
    5432:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <_Z12UWriteStringPKci>
			http_state = GPRS_HTTP_RSP_POST;
    5436:	8c e0       	ldi	r24, 0x0C	; 12
    5438:	80 93 13 02 	sts	0x0213, r24	; 0x800213 <_ZZ12post_requestPcS_E10http_state>
{
	static gprs_http_state_t http_state = GPRS_HTTP_CMD_URL;
	static char http_retry_cnt = 0;
	int num_byte = 0;
	
	http_status_t sts = HTTP_IN_PRG;
    543c:	12 e0       	ldi	r17, 0x02	; 2
			UWriteString("cmd: POST", UART_PC);
#endif			
			flushRxBuffer(GPRS_UART);
			UWriteString((char *)"AT+HTTPACTION=0\r", GPRS_UART);
			http_state = GPRS_HTTP_RSP_POST;
		break;
    543e:	f1 c1       	rjmp	.+994    	; 0x5822 <_Z12post_requestPcS_+0x542>
		case GPRS_HTTP_RSP_POST:
			switch (check_string_nobuf("OK"))
    5440:	85 e4       	ldi	r24, 0x45	; 69
    5442:	95 e0       	ldi	r25, 0x05	; 5
    5444:	0e 94 fc 45 	call	0x8bf8	; 0x8bf8 <_Z18check_string_nobufPKc>
    5448:	81 30       	cpi	r24, 0x01	; 1
    544a:	21 f0       	breq	.+8      	; 0x5454 <_Z12post_requestPcS_+0x174>
    544c:	c8 f1       	brcs	.+114    	; 0x54c0 <_Z12post_requestPcS_+0x1e0>
    544e:	82 30       	cpi	r24, 0x02	; 2
    5450:	11 f1       	breq	.+68     	; 0x5496 <_Z12post_requestPcS_+0x1b6>
    5452:	e6 c1       	rjmp	.+972    	; 0x5820 <_Z12post_requestPcS_+0x540>
			{
				case (GPRS_MATCH_FAIL):
#ifdef GPRS_DEBUG_URL
					UWriteString("POST:f", UART_PC);
    5454:	62 e0       	ldi	r22, 0x02	; 2
    5456:	70 e0       	ldi	r23, 0x00	; 0
    5458:	87 e9       	ldi	r24, 0x97	; 151
    545a:	98 e0       	ldi	r25, 0x08	; 8
    545c:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <_Z12UWriteStringPKci>
#endif				
					http_state = GPRS_HTTP_CMD_POST;
    5460:	8b e0       	ldi	r24, 0x0B	; 11
    5462:	80 93 13 02 	sts	0x0213, r24	; 0x800213 <_ZZ12post_requestPcS_E10http_state>
				
					if (http_retry_cnt++ >= HTTP_RETRY_CNT)
    5466:	80 91 10 0c 	lds	r24, 0x0C10	; 0x800c10 <_ZZ12post_requestPcS_E14http_retry_cnt>
    546a:	91 e0       	ldi	r25, 0x01	; 1
    546c:	98 0f       	add	r25, r24
    546e:	90 93 10 0c 	sts	0x0C10, r25	; 0x800c10 <_ZZ12post_requestPcS_E14http_retry_cnt>
    5472:	83 30       	cpi	r24, 0x03	; 3
    5474:	50 f0       	brcs	.+20     	; 0x548a <_Z12post_requestPcS_+0x1aa>
					{
						http.errcode = HTTP_ERR_OFFSET + GPRS_HTTP_RSP_POST;
    5476:	8c ec       	ldi	r24, 0xCC	; 204
    5478:	80 93 4c 0c 	sts	0x0C4C, r24	; 0x800c4c <http>
						sts = HTTP_FAIL;
						
						http_state = GPRS_HTTP_CMD_URL;			//
    547c:	85 e0       	ldi	r24, 0x05	; 5
    547e:	80 93 13 02 	sts	0x0213, r24	; 0x800213 <_ZZ12post_requestPcS_E10http_state>
						http_retry_cnt = 0;
    5482:	10 92 10 0c 	sts	0x0C10, r1	; 0x800c10 <_ZZ12post_requestPcS_E14http_retry_cnt>
					http_state = GPRS_HTTP_CMD_POST;
				
					if (http_retry_cnt++ >= HTTP_RETRY_CNT)
					{
						http.errcode = HTTP_ERR_OFFSET + GPRS_HTTP_RSP_POST;
						sts = HTTP_FAIL;
    5486:	11 e0       	ldi	r17, 0x01	; 1
    5488:	01 c0       	rjmp	.+2      	; 0x548c <_Z12post_requestPcS_+0x1ac>
{
	static gprs_http_state_t http_state = GPRS_HTTP_CMD_URL;
	static char http_retry_cnt = 0;
	int num_byte = 0;
	
	http_status_t sts = HTTP_IN_PRG;
    548a:	12 e0       	ldi	r17, 0x02	; 2
						sts = HTTP_FAIL;
						
						http_state = GPRS_HTTP_CMD_URL;			//
						http_retry_cnt = 0;
					}
					flushRxBuffer(GPRS_UART);				// HJ 15-07-2016  
    548c:	80 e0       	ldi	r24, 0x00	; 0
    548e:	90 e0       	ldi	r25, 0x00	; 0
    5490:	0e 94 d7 09 	call	0x13ae	; 0x13ae <_Z13flushRxBufferi>
				break;
    5494:	c6 c1       	rjmp	.+908    	; 0x5822 <_Z12post_requestPcS_+0x542>
				case (GPRS_MATCH_OK):
#ifdef GPRS_DEBUG_URL
					UWriteString("POST:k", UART_PC);
    5496:	62 e0       	ldi	r22, 0x02	; 2
    5498:	70 e0       	ldi	r23, 0x00	; 0
    549a:	8e e9       	ldi	r24, 0x9E	; 158
    549c:	98 e0       	ldi	r25, 0x08	; 8
    549e:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <_Z12UWriteStringPKci>
#endif					
					http_state = GPRS_HTTP_RSP_1_POST;
    54a2:	8d e0       	ldi	r24, 0x0D	; 13
    54a4:	80 93 13 02 	sts	0x0213, r24	; 0x800213 <_ZZ12post_requestPcS_E10http_state>
					flushRxBuffer(GPRS_UART);				// HJ 15-07-2016  
    54a8:	80 e0       	ldi	r24, 0x00	; 0
    54aa:	90 e0       	ldi	r25, 0x00	; 0
    54ac:	0e 94 d7 09 	call	0x13ae	; 0x13ae <_Z13flushRxBufferi>
					
					http_retry_cnt = 0;
    54b0:	10 92 10 0c 	sts	0x0C10, r1	; 0x800c10 <_ZZ12post_requestPcS_E14http_retry_cnt>
					timeout = 0;
    54b4:	10 92 0f 0c 	sts	0x0C0F, r1	; 0x800c0f <_ZZ12post_requestPcS_E7timeout+0x1>
    54b8:	10 92 0e 0c 	sts	0x0C0E, r1	; 0x800c0e <_ZZ12post_requestPcS_E7timeout>
{
	static gprs_http_state_t http_state = GPRS_HTTP_CMD_URL;
	static char http_retry_cnt = 0;
	int num_byte = 0;
	
	http_status_t sts = HTTP_IN_PRG;
    54bc:	12 e0       	ldi	r17, 0x02	; 2
					http_state = GPRS_HTTP_RSP_1_POST;
					flushRxBuffer(GPRS_UART);				// HJ 15-07-2016  
					
					http_retry_cnt = 0;
					timeout = 0;
				break;
    54be:	b1 c1       	rjmp	.+866    	; 0x5822 <_Z12post_requestPcS_+0x542>
				case (GPRS_NO_NEW_MSG):
#ifdef GPRS_DEBUG_URL
					UWriteString("POST:w", UART_PC);
    54c0:	62 e0       	ldi	r22, 0x02	; 2
    54c2:	70 e0       	ldi	r23, 0x00	; 0
    54c4:	85 ea       	ldi	r24, 0xA5	; 165
    54c6:	98 e0       	ldi	r25, 0x08	; 8
    54c8:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <_Z12UWriteStringPKci>
#endif					
					if(timeout++ >= HTTPPOST_TIMEOUT)
    54cc:	80 91 0e 0c 	lds	r24, 0x0C0E	; 0x800c0e <_ZZ12post_requestPcS_E7timeout>
    54d0:	90 91 0f 0c 	lds	r25, 0x0C0F	; 0x800c0f <_ZZ12post_requestPcS_E7timeout+0x1>
    54d4:	8e 31       	cpi	r24, 0x1E	; 30
    54d6:	91 05       	cpc	r25, r1
    54d8:	38 f4       	brcc	.+14     	; 0x54e8 <_Z12post_requestPcS_+0x208>
    54da:	01 96       	adiw	r24, 0x01	; 1
    54dc:	90 93 0f 0c 	sts	0x0C0F, r25	; 0x800c0f <_ZZ12post_requestPcS_E7timeout+0x1>
    54e0:	80 93 0e 0c 	sts	0x0C0E, r24	; 0x800c0e <_ZZ12post_requestPcS_E7timeout>
{
	static gprs_http_state_t http_state = GPRS_HTTP_CMD_URL;
	static char http_retry_cnt = 0;
	int num_byte = 0;
	
	http_status_t sts = HTTP_IN_PRG;
    54e4:	12 e0       	ldi	r17, 0x02	; 2
    54e6:	9d c1       	rjmp	.+826    	; 0x5822 <_Z12post_requestPcS_+0x542>
#ifdef GPRS_DEBUG_URL
					UWriteString("POST:w", UART_PC);
#endif					
					if(timeout++ >= HTTPPOST_TIMEOUT)
					{
						timeout = 0;
    54e8:	10 92 0f 0c 	sts	0x0C0F, r1	; 0x800c0f <_ZZ12post_requestPcS_E7timeout+0x1>
    54ec:	10 92 0e 0c 	sts	0x0C0E, r1	; 0x800c0e <_ZZ12post_requestPcS_E7timeout>
						http_state = GPRS_HTTP_CMD_POST;
    54f0:	8b e0       	ldi	r24, 0x0B	; 11
    54f2:	80 93 13 02 	sts	0x0213, r24	; 0x800213 <_ZZ12post_requestPcS_E10http_state>
					
						if (http_retry_cnt++ >= HTTP_RETRY_CNT)
    54f6:	80 91 10 0c 	lds	r24, 0x0C10	; 0x800c10 <_ZZ12post_requestPcS_E14http_retry_cnt>
    54fa:	91 e0       	ldi	r25, 0x01	; 1
    54fc:	98 0f       	add	r25, r24
    54fe:	90 93 10 0c 	sts	0x0C10, r25	; 0x800c10 <_ZZ12post_requestPcS_E14http_retry_cnt>
    5502:	83 30       	cpi	r24, 0x03	; 3
    5504:	50 f0       	brcs	.+20     	; 0x551a <_Z12post_requestPcS_+0x23a>
						{							
							http.errcode = HTTP_ERR_OFFSET + GPRS_HTTP_RSP_POST;
    5506:	8c ec       	ldi	r24, 0xCC	; 204
    5508:	80 93 4c 0c 	sts	0x0C4C, r24	; 0x800c4c <http>
							sts = HTTP_FAIL;
							
							http_state = GPRS_HTTP_CMD_URL;			//
    550c:	85 e0       	ldi	r24, 0x05	; 5
    550e:	80 93 13 02 	sts	0x0213, r24	; 0x800213 <_ZZ12post_requestPcS_E10http_state>
							http_retry_cnt = 0;
    5512:	10 92 10 0c 	sts	0x0C10, r1	; 0x800c10 <_ZZ12post_requestPcS_E14http_retry_cnt>
						http_state = GPRS_HTTP_CMD_POST;
					
						if (http_retry_cnt++ >= HTTP_RETRY_CNT)
						{							
							http.errcode = HTTP_ERR_OFFSET + GPRS_HTTP_RSP_POST;
							sts = HTTP_FAIL;
    5516:	11 e0       	ldi	r17, 0x01	; 1
    5518:	01 c0       	rjmp	.+2      	; 0x551c <_Z12post_requestPcS_+0x23c>
{
	static gprs_http_state_t http_state = GPRS_HTTP_CMD_URL;
	static char http_retry_cnt = 0;
	int num_byte = 0;
	
	http_status_t sts = HTTP_IN_PRG;
    551a:	12 e0       	ldi	r17, 0x02	; 2
							sts = HTTP_FAIL;
							
							http_state = GPRS_HTTP_CMD_URL;			//
							http_retry_cnt = 0;
						}
						flushRxBuffer(GPRS_UART);				// HJ 15-07-2016  
    551c:	80 e0       	ldi	r24, 0x00	; 0
    551e:	90 e0       	ldi	r25, 0x00	; 0
    5520:	0e 94 d7 09 	call	0x13ae	; 0x13ae <_Z13flushRxBufferi>
    5524:	7e c1       	rjmp	.+764    	; 0x5822 <_Z12post_requestPcS_+0x542>
		case GPRS_HTTP_RSP_1_POST:
		{
			char tmpstr[GPRS_RX_BUFFER_MAX];
			
			// NOTE : CAUTION WHY IT WAS WORKING WITH SIM900 WITHOUT SPADE AFTER COLON ????
			char resp = check_string("+HTTPACTION: 0,", tmpstr, &num_byte);		// For Sim800
    5526:	ae 01       	movw	r20, r28
    5528:	4f 5f       	subi	r20, 0xFF	; 255
    552a:	5f 4f       	sbci	r21, 0xFF	; 255
    552c:	be 01       	movw	r22, r28
    552e:	6d 5f       	subi	r22, 0xFD	; 253
    5530:	7f 4f       	sbci	r23, 0xFF	; 255
    5532:	8c ea       	ldi	r24, 0xAC	; 172
    5534:	98 e0       	ldi	r25, 0x08	; 8
    5536:	0e 94 75 45 	call	0x8aea	; 0x8aea <_Z12check_stringPKcPcPi>
			int http_resp = 0;
			
			switch (resp)
    553a:	81 30       	cpi	r24, 0x01	; 1
    553c:	29 f0       	breq	.+10     	; 0x5548 <_Z12post_requestPcS_+0x268>
    553e:	08 f4       	brcc	.+2      	; 0x5542 <_Z12post_requestPcS_+0x262>
    5540:	72 c0       	rjmp	.+228    	; 0x5626 <_Z12post_requestPcS_+0x346>
    5542:	82 30       	cpi	r24, 0x02	; 2
    5544:	61 f1       	breq	.+88     	; 0x559e <_Z12post_requestPcS_+0x2be>
    5546:	90 c0       	rjmp	.+288    	; 0x5668 <_Z12post_requestPcS_+0x388>
			{
				case (GPRS_MATCH_FAIL): 
#ifdef GPRS_DEBUG
					UWriteString("ACT:f", UART_PC);
    5548:	62 e0       	ldi	r22, 0x02	; 2
    554a:	70 e0       	ldi	r23, 0x00	; 0
    554c:	8c eb       	ldi	r24, 0xBC	; 188
    554e:	98 e0       	ldi	r25, 0x08	; 8
    5550:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <_Z12UWriteStringPKci>
#endif					
					http_state = GPRS_HTTP_CMD_POST;
    5554:	8b e0       	ldi	r24, 0x0B	; 11
    5556:	80 93 13 02 	sts	0x0213, r24	; 0x800213 <_ZZ12post_requestPcS_E10http_state>
					http_retry_cnt++;
    555a:	80 91 10 0c 	lds	r24, 0x0C10	; 0x800c10 <_ZZ12post_requestPcS_E14http_retry_cnt>
    555e:	8f 5f       	subi	r24, 0xFF	; 255
    5560:	80 93 10 0c 	sts	0x0C10, r24	; 0x800c10 <_ZZ12post_requestPcS_E14http_retry_cnt>
#ifdef ONLINE_CONFIG_EN
					if((online_cfg.cfg_pending)	&&	(http_retry_cnt >= HTTP_RETRY_CNT)	)
    5564:	90 91 1d 0c 	lds	r25, 0x0C1D	; 0x800c1d <online_cfg+0x1>
    5568:	99 23       	and	r25, r25
    556a:	29 f0       	breq	.+10     	; 0x5576 <_Z12post_requestPcS_+0x296>
    556c:	83 30       	cpi	r24, 0x03	; 3
    556e:	78 f0       	brcs	.+30     	; 0x558e <_Z12post_requestPcS_+0x2ae>
					{
						online_cfg.cfg_pending = FALSE;
    5570:	10 92 1d 0c 	sts	0x0C1D, r1	; 0x800c1d <online_cfg+0x1>
    5574:	02 c0       	rjmp	.+4      	; 0x557a <_Z12post_requestPcS_+0x29a>
					}
#endif
					if (http_retry_cnt >= HTTP_RETRY_CNT) 
    5576:	83 30       	cpi	r24, 0x03	; 3
    5578:	60 f0       	brcs	.+24     	; 0x5592 <_Z12post_requestPcS_+0x2b2>
					{
						http.errcode = HTTP_ERR_OFFSET + GPRS_HTTP_RSP_1_POST;
    557a:	8d ec       	ldi	r24, 0xCD	; 205
    557c:	80 93 4c 0c 	sts	0x0C4C, r24	; 0x800c4c <http>
						sts = HTTP_FAIL;
						
						http_state = GPRS_HTTP_CMD_URL;
    5580:	85 e0       	ldi	r24, 0x05	; 5
    5582:	80 93 13 02 	sts	0x0213, r24	; 0x800213 <_ZZ12post_requestPcS_E10http_state>
						http_retry_cnt = 0;
    5586:	10 92 10 0c 	sts	0x0C10, r1	; 0x800c10 <_ZZ12post_requestPcS_E14http_retry_cnt>
					}
#endif
					if (http_retry_cnt >= HTTP_RETRY_CNT) 
					{
						http.errcode = HTTP_ERR_OFFSET + GPRS_HTTP_RSP_1_POST;
						sts = HTTP_FAIL;
    558a:	11 e0       	ldi	r17, 0x01	; 1
    558c:	03 c0       	rjmp	.+6      	; 0x5594 <_Z12post_requestPcS_+0x2b4>
{
	static gprs_http_state_t http_state = GPRS_HTTP_CMD_URL;
	static char http_retry_cnt = 0;
	int num_byte = 0;
	
	http_status_t sts = HTTP_IN_PRG;
    558e:	12 e0       	ldi	r17, 0x02	; 2
    5590:	01 c0       	rjmp	.+2      	; 0x5594 <_Z12post_requestPcS_+0x2b4>
    5592:	12 e0       	ldi	r17, 0x02	; 2
						sts = HTTP_FAIL;
						
						http_state = GPRS_HTTP_CMD_URL;
						http_retry_cnt = 0;
					}
					flushRxBuffer(GPRS_UART);				// HJ 15-07-2016  
    5594:	80 e0       	ldi	r24, 0x00	; 0
    5596:	90 e0       	ldi	r25, 0x00	; 0
    5598:	0e 94 d7 09 	call	0x13ae	; 0x13ae <_Z13flushRxBufferi>
					break;
    559c:	42 c1       	rjmp	.+644    	; 0x5822 <_Z12post_requestPcS_+0x542>
				case (GPRS_MATCH_OK):
					{
#ifdef GPRS_DEBUG_URL
						UWriteString("ACT:k", UART_PC);
    559e:	62 e0       	ldi	r22, 0x02	; 2
    55a0:	70 e0       	ldi	r23, 0x00	; 0
    55a2:	82 ec       	ldi	r24, 0xC2	; 194
    55a4:	98 e0       	ldi	r25, 0x08	; 8
    55a6:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <_Z12UWriteStringPKci>
						UWriteString(tmpstr, UART_PC);
    55aa:	62 e0       	ldi	r22, 0x02	; 2
    55ac:	70 e0       	ldi	r23, 0x00	; 0
    55ae:	ce 01       	movw	r24, r28
    55b0:	03 96       	adiw	r24, 0x03	; 3
    55b2:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <_Z12UWriteStringPKci>

							}
						}
						else
						{
							if(((getRtuState() == RTU_GPRS_CONFIG)|| (get_frmwr_update_state() == HEX_FILE_UPDATE_PRG)) && (gprs_sync_retry_cnt++ >= GPRS_SYNC_RETRY_CNT))		// 15-2-19 VC: need to check for network
    55b6:	0e 94 98 3a 	call	0x7530	; 0x7530 <_Z11getRtuStatev>
    55ba:	83 30       	cpi	r24, 0x03	; 3
    55bc:	21 f0       	breq	.+8      	; 0x55c6 <_Z12post_requestPcS_+0x2e6>
    55be:	0e 94 ac 3d 	call	0x7b58	; 0x7b58 <_Z22get_frmwr_update_statev>
    55c2:	82 30       	cpi	r24, 0x02	; 2
    55c4:	59 f4       	brne	.+22     	; 0x55dc <_Z12post_requestPcS_+0x2fc>
    55c6:	80 91 0d 0c 	lds	r24, 0x0C0D	; 0x800c0d <_ZZ12post_requestPcS_E19gprs_sync_retry_cnt>
    55ca:	82 30       	cpi	r24, 0x02	; 2
    55cc:	20 f4       	brcc	.+8      	; 0x55d6 <_Z12post_requestPcS_+0x2f6>
    55ce:	8f 5f       	subi	r24, 0xFF	; 255
    55d0:	80 93 0d 0c 	sts	0x0C0D, r24	; 0x800c0d <_ZZ12post_requestPcS_E19gprs_sync_retry_cnt>
    55d4:	03 c0       	rjmp	.+6      	; 0x55dc <_Z12post_requestPcS_+0x2fc>
							{
								gprs_sync_retry_cnt = 0;
    55d6:	10 92 0d 0c 	sts	0x0C0D, r1	; 0x800c0d <_ZZ12post_requestPcS_E19gprs_sync_retry_cnt>
    55da:	10 c0       	rjmp	.+32     	; 0x55fc <_Z12post_requestPcS_+0x31c>
								
							}
#ifdef ONLINE_CONFIG_EN
							else if((online_cfg.cfg_pending)	&&	(gprs_cfg_retry_cnt++ >= GPRS_CFG_RETRY_CNT)	)
    55dc:	80 91 1d 0c 	lds	r24, 0x0C1D	; 0x800c1d <online_cfg+0x1>
    55e0:	88 23       	and	r24, r24
    55e2:	61 f0       	breq	.+24     	; 0x55fc <_Z12post_requestPcS_+0x31c>
    55e4:	80 91 0c 0c 	lds	r24, 0x0C0C	; 0x800c0c <_ZZ12post_requestPcS_E18gprs_cfg_retry_cnt>
    55e8:	91 e0       	ldi	r25, 0x01	; 1
    55ea:	98 0f       	add	r25, r24
    55ec:	90 93 0c 0c 	sts	0x0C0C, r25	; 0x800c0c <_ZZ12post_requestPcS_E18gprs_cfg_retry_cnt>
    55f0:	83 30       	cpi	r24, 0x03	; 3
    55f2:	20 f0       	brcs	.+8      	; 0x55fc <_Z12post_requestPcS_+0x31c>
							{
								online_cfg.cfg_pending = FALSE;
    55f4:	10 92 1d 0c 	sts	0x0C1D, r1	; 0x800c1d <online_cfg+0x1>
								gprs_cfg_retry_cnt = 0;
    55f8:	10 92 0c 0c 	sts	0x0C0C, r1	; 0x800c0c <_ZZ12post_requestPcS_E18gprs_cfg_retry_cnt>
							}
#endif
#ifdef GPRS_DEBUG_URL
							UWriteString("URL:F", UART_PC);
    55fc:	62 e0       	ldi	r22, 0x02	; 2
    55fe:	70 e0       	ldi	r23, 0x00	; 0
    5600:	88 ec       	ldi	r24, 0xC8	; 200
    5602:	98 e0       	ldi	r25, 0x08	; 8
    5604:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <_Z12UWriteStringPKci>
#endif
							sts = HTTP_FAIL;
							http_state = GPRS_HTTP_CMD_URL;	
    5608:	85 e0       	ldi	r24, 0x05	; 5
    560a:	80 93 13 02 	sts	0x0213, r24	; 0x800213 <_ZZ12post_requestPcS_E10http_state>
						}

						flushRxBuffer(GPRS_UART);				// HJ 15-07-2016  
    560e:	80 e0       	ldi	r24, 0x00	; 0
    5610:	90 e0       	ldi	r25, 0x00	; 0
    5612:	0e 94 d7 09 	call	0x13ae	; 0x13ae <_Z13flushRxBufferi>
						http_retry_cnt = 0;
    5616:	10 92 10 0c 	sts	0x0C10, r1	; 0x800c10 <_ZZ12post_requestPcS_E14http_retry_cnt>
						timeout = 0;		//Anand -28-04-16
    561a:	10 92 0f 0c 	sts	0x0C0F, r1	; 0x800c0f <_ZZ12post_requestPcS_E7timeout+0x1>
    561e:	10 92 0e 0c 	sts	0x0C0E, r1	; 0x800c0e <_ZZ12post_requestPcS_E7timeout>
					}
					break;
    5622:	11 e0       	ldi	r17, 0x01	; 1
    5624:	fe c0       	rjmp	.+508    	; 0x5822 <_Z12post_requestPcS_+0x542>
				case (GPRS_NO_NEW_MSG): 
#ifdef GPRS_DEBUG
					
#endif					
					if(timeout++ >= HTTPPOST_1_TIMEOUT)
    5626:	80 91 0e 0c 	lds	r24, 0x0C0E	; 0x800c0e <_ZZ12post_requestPcS_E7timeout>
    562a:	90 91 0f 0c 	lds	r25, 0x0C0F	; 0x800c0f <_ZZ12post_requestPcS_E7timeout+0x1>
    562e:	8e 3e       	cpi	r24, 0xEE	; 238
    5630:	22 e0       	ldi	r18, 0x02	; 2
    5632:	92 07       	cpc	r25, r18
    5634:	38 f4       	brcc	.+14     	; 0x5644 <_Z12post_requestPcS_+0x364>
    5636:	01 96       	adiw	r24, 0x01	; 1
    5638:	90 93 0f 0c 	sts	0x0C0F, r25	; 0x800c0f <_ZZ12post_requestPcS_E7timeout+0x1>
    563c:	80 93 0e 0c 	sts	0x0C0E, r24	; 0x800c0e <_ZZ12post_requestPcS_E7timeout>
{
	static gprs_http_state_t http_state = GPRS_HTTP_CMD_URL;
	static char http_retry_cnt = 0;
	int num_byte = 0;
	
	http_status_t sts = HTTP_IN_PRG;
    5640:	12 e0       	ldi	r17, 0x02	; 2
    5642:	ef c0       	rjmp	.+478    	; 0x5822 <_Z12post_requestPcS_+0x542>
#ifdef GPRS_DEBUG
					
#endif					
					if(timeout++ >= HTTPPOST_1_TIMEOUT)
					{
						timeout = 0;
    5644:	10 92 0f 0c 	sts	0x0C0F, r1	; 0x800c0f <_ZZ12post_requestPcS_E7timeout+0x1>
    5648:	10 92 0e 0c 	sts	0x0C0E, r1	; 0x800c0e <_ZZ12post_requestPcS_E7timeout>
						
						http.errcode = HTTP_ERR_OFFSET + GPRS_HTTP_RSP_1_POST;
    564c:	8d ec       	ldi	r24, 0xCD	; 205
    564e:	80 93 4c 0c 	sts	0x0C4C, r24	; 0x800c4c <http>
						sts = HTTP_FAIL;
						
						http_state = GPRS_HTTP_CMD_URL;			//
    5652:	85 e0       	ldi	r24, 0x05	; 5
    5654:	80 93 13 02 	sts	0x0213, r24	; 0x800213 <_ZZ12post_requestPcS_E10http_state>
						http_retry_cnt = 0;
    5658:	10 92 10 0c 	sts	0x0C10, r1	; 0x800c10 <_ZZ12post_requestPcS_E14http_retry_cnt>
					
						flushRxBuffer(GPRS_UART);	
    565c:	80 e0       	ldi	r24, 0x00	; 0
    565e:	90 e0       	ldi	r25, 0x00	; 0
    5660:	0e 94 d7 09 	call	0x13ae	; 0x13ae <_Z13flushRxBufferi>
					if(timeout++ >= HTTPPOST_1_TIMEOUT)
					{
						timeout = 0;
						
						http.errcode = HTTP_ERR_OFFSET + GPRS_HTTP_RSP_1_POST;
						sts = HTTP_FAIL;
    5664:	11 e0       	ldi	r17, 0x01	; 1
    5666:	dd c0       	rjmp	.+442    	; 0x5822 <_Z12post_requestPcS_+0x542>
{
	static gprs_http_state_t http_state = GPRS_HTTP_CMD_URL;
	static char http_retry_cnt = 0;
	int num_byte = 0;
	
	http_status_t sts = HTTP_IN_PRG;
    5668:	12 e0       	ldi	r17, 0x02	; 2
					break;
				default:
					break;
			}
		}
		break;
    566a:	db c0       	rjmp	.+438    	; 0x5822 <_Z12post_requestPcS_+0x542>
		case GPRS_HTTP_CMD_READ:
#ifdef GPRS_DEBUG
			UWriteString((char *)"cmd: READ", UART_PC);
    566c:	62 e0       	ldi	r22, 0x02	; 2
    566e:	70 e0       	ldi	r23, 0x00	; 0
    5670:	8e ec       	ldi	r24, 0xCE	; 206
    5672:	98 e0       	ldi	r25, 0x08	; 8
    5674:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <_Z12UWriteStringPKci>
#endif			
			UWriteString((char *)"AT+HTTPREAD\r", GPRS_UART);
    5678:	60 e0       	ldi	r22, 0x00	; 0
    567a:	70 e0       	ldi	r23, 0x00	; 0
    567c:	88 ed       	ldi	r24, 0xD8	; 216
    567e:	98 e0       	ldi	r25, 0x08	; 8
    5680:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <_Z12UWriteStringPKci>
			http_state = GPRS_HTTP_RSP_READ;
    5684:	8f e0       	ldi	r24, 0x0F	; 15
    5686:	80 93 13 02 	sts	0x0213, r24	; 0x800213 <_ZZ12post_requestPcS_E10http_state>
{
	static gprs_http_state_t http_state = GPRS_HTTP_CMD_URL;
	static char http_retry_cnt = 0;
	int num_byte = 0;
	
	http_status_t sts = HTTP_IN_PRG;
    568a:	12 e0       	ldi	r17, 0x02	; 2
#ifdef GPRS_DEBUG
			UWriteString((char *)"cmd: READ", UART_PC);
#endif			
			UWriteString((char *)"AT+HTTPREAD\r", GPRS_UART);
			http_state = GPRS_HTTP_RSP_READ;
		break;
    568c:	ca c0       	rjmp	.+404    	; 0x5822 <_Z12post_requestPcS_+0x542>
		case GPRS_HTTP_RSP_READ:
		{
			
			char tmpstr[GPRS_RX_READ_BUFFER_MAX];
			char resp = check_string("+HTTPREAD: ", tmpstr, &num_byte);	
    568e:	ae 01       	movw	r20, r28
    5690:	4f 5f       	subi	r20, 0xFF	; 255
    5692:	5f 4f       	sbci	r21, 0xFF	; 255
    5694:	be 01       	movw	r22, r28
    5696:	6d 5f       	subi	r22, 0xFD	; 253
    5698:	7f 4f       	sbci	r23, 0xFF	; 255
    569a:	85 ee       	ldi	r24, 0xE5	; 229
    569c:	98 e0       	ldi	r25, 0x08	; 8
    569e:	0e 94 75 45 	call	0x8aea	; 0x8aea <_Z12check_stringPKcPcPi>
			char rsp = TRUE;

			switch (resp)
    56a2:	81 30       	cpi	r24, 0x01	; 1
    56a4:	29 f0       	breq	.+10     	; 0x56b0 <_Z12post_requestPcS_+0x3d0>
    56a6:	08 f4       	brcc	.+2      	; 0x56aa <_Z12post_requestPcS_+0x3ca>
    56a8:	79 c0       	rjmp	.+242    	; 0x579c <_Z12post_requestPcS_+0x4bc>
    56aa:	82 30       	cpi	r24, 0x02	; 2
    56ac:	19 f1       	breq	.+70     	; 0x56f4 <_Z12post_requestPcS_+0x414>
    56ae:	b0 c0       	rjmp	.+352    	; 0x5810 <_Z12post_requestPcS_+0x530>
			{
				case (GPRS_MATCH_FAIL): 
					
					http_retry_cnt++;
    56b0:	80 91 10 0c 	lds	r24, 0x0C10	; 0x800c10 <_ZZ12post_requestPcS_E14http_retry_cnt>
    56b4:	8f 5f       	subi	r24, 0xFF	; 255
    56b6:	80 93 10 0c 	sts	0x0C10, r24	; 0x800c10 <_ZZ12post_requestPcS_E14http_retry_cnt>
#ifdef ONLINE_CONFIG_EN
					if((online_cfg.cfg_pending)	&&	(http_retry_cnt >= HTTP_RETRY_CNT)	)
    56ba:	90 91 1d 0c 	lds	r25, 0x0C1D	; 0x800c1d <online_cfg+0x1>
    56be:	99 23       	and	r25, r25
    56c0:	29 f0       	breq	.+10     	; 0x56cc <_Z12post_requestPcS_+0x3ec>
    56c2:	83 30       	cpi	r24, 0x03	; 3
    56c4:	78 f0       	brcs	.+30     	; 0x56e4 <_Z12post_requestPcS_+0x404>
					{
						online_cfg.cfg_pending = FALSE;
    56c6:	10 92 1d 0c 	sts	0x0C1D, r1	; 0x800c1d <online_cfg+0x1>
    56ca:	02 c0       	rjmp	.+4      	; 0x56d0 <_Z12post_requestPcS_+0x3f0>
					}
#endif
					if (http_retry_cnt >= HTTP_RETRY_CNT) 
    56cc:	83 30       	cpi	r24, 0x03	; 3
    56ce:	60 f0       	brcs	.+24     	; 0x56e8 <_Z12post_requestPcS_+0x408>
					{
						http.errcode = HTTP_ERR_OFFSET + GPRS_HTTP_RSP_READ;
    56d0:	8f ec       	ldi	r24, 0xCF	; 207
    56d2:	80 93 4c 0c 	sts	0x0C4C, r24	; 0x800c4c <http>
						sts = HTTP_FAIL;
						
						http_state = GPRS_HTTP_CMD_URL;
    56d6:	85 e0       	ldi	r24, 0x05	; 5
    56d8:	80 93 13 02 	sts	0x0213, r24	; 0x800213 <_ZZ12post_requestPcS_E10http_state>
						http_retry_cnt = 0;
    56dc:	10 92 10 0c 	sts	0x0C10, r1	; 0x800c10 <_ZZ12post_requestPcS_E14http_retry_cnt>
					}
#endif
					if (http_retry_cnt >= HTTP_RETRY_CNT) 
					{
						http.errcode = HTTP_ERR_OFFSET + GPRS_HTTP_RSP_READ;
						sts = HTTP_FAIL;
    56e0:	11 e0       	ldi	r17, 0x01	; 1
    56e2:	03 c0       	rjmp	.+6      	; 0x56ea <_Z12post_requestPcS_+0x40a>
{
	static gprs_http_state_t http_state = GPRS_HTTP_CMD_URL;
	static char http_retry_cnt = 0;
	int num_byte = 0;
	
	http_status_t sts = HTTP_IN_PRG;
    56e4:	12 e0       	ldi	r17, 0x02	; 2
    56e6:	01 c0       	rjmp	.+2      	; 0x56ea <_Z12post_requestPcS_+0x40a>
    56e8:	12 e0       	ldi	r17, 0x02	; 2
						sts = HTTP_FAIL;
						
						http_state = GPRS_HTTP_CMD_URL;
						http_retry_cnt = 0;
					}
					flushRxBuffer(GPRS_UART);				// HJ 15-07-2016  
    56ea:	80 e0       	ldi	r24, 0x00	; 0
    56ec:	90 e0       	ldi	r25, 0x00	; 0
    56ee:	0e 94 d7 09 	call	0x13ae	; 0x13ae <_Z13flushRxBufferi>
					break;
    56f2:	97 c0       	rjmp	.+302    	; 0x5822 <_Z12post_requestPcS_+0x542>
				case (GPRS_MATCH_OK):
					{
#ifdef GPRS_DEBUG_URL
						UWriteString("READ:k", UART_PC);
    56f4:	62 e0       	ldi	r22, 0x02	; 2
    56f6:	70 e0       	ldi	r23, 0x00	; 0
    56f8:	81 ef       	ldi	r24, 0xF1	; 241
    56fa:	98 e0       	ldi	r25, 0x08	; 8
    56fc:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <_Z12UWriteStringPKci>
						
#endif
			
					//Lets Decode recieve data from server
						if(getRtuState() == RTU_GPRS_CONFIG)
    5700:	0e 94 98 3a 	call	0x7530	; 0x7530 <_Z11getRtuStatev>
    5704:	83 30       	cpi	r24, 0x03	; 3
    5706:	81 f4       	brne	.+32     	; 0x5728 <_Z12post_requestPcS_+0x448>
						{

							releaseCnfgState();
    5708:	b6 d2       	rcall	.+1388   	; 0x5c76 <_Z16releaseCnfgStatev>
							flushRxBuffer(GPRS_UART);				// 12-2-19 VC: when operation is done then delet the current buff
    570a:	80 e0       	ldi	r24, 0x00	; 0
    570c:	90 e0       	ldi	r25, 0x00	; 0
    570e:	0e 94 d7 09 	call	0x13ae	; 0x13ae <_Z13flushRxBufferi>
							sts = HTTP_PASS;						// gives ok for response to server		
						
							http_state = GPRS_HTTP_CMD_URL;		//Anand 29-03-16 Need Something to do here
    5712:	85 e0       	ldi	r24, 0x05	; 5
    5714:	80 93 13 02 	sts	0x0213, r24	; 0x800213 <_ZZ12post_requestPcS_E10http_state>
							http_retry_cnt = 0;
    5718:	10 92 10 0c 	sts	0x0C10, r1	; 0x800c10 <_ZZ12post_requestPcS_E14http_retry_cnt>
							timeout = 0;		//Anand -28-04-16
    571c:	10 92 0f 0c 	sts	0x0C0F, r1	; 0x800c0f <_ZZ12post_requestPcS_E7timeout+0x1>
    5720:	10 92 0e 0c 	sts	0x0C0E, r1	; 0x800c0e <_ZZ12post_requestPcS_E7timeout>
						if(getRtuState() == RTU_GPRS_CONFIG)
						{

							releaseCnfgState();
							flushRxBuffer(GPRS_UART);				// 12-2-19 VC: when operation is done then delet the current buff
							sts = HTTP_PASS;						// gives ok for response to server		
    5724:	10 e0       	ldi	r17, 0x00	; 0
    5726:	7d c0       	rjmp	.+250    	; 0x5822 <_Z12post_requestPcS_+0x542>
						
							http_state = GPRS_HTTP_CMD_URL;		//Anand 29-03-16 Need Something to do here
							http_retry_cnt = 0;
							timeout = 0;		//Anand -28-04-16
						}
						else if (get_frmwr_update_state() == HEX_FILE_UPDATE_PRG)
    5728:	0e 94 ac 3d 	call	0x7b58	; 0x7b58 <_Z22get_frmwr_update_statev>
    572c:	82 30       	cpi	r24, 0x02	; 2
    572e:	01 f5       	brne	.+64     	; 0x5770 <_Z12post_requestPcS_+0x490>
						{
							rsp = update_flash_hexfile(tmpstr);
    5730:	ce 01       	movw	r24, r28
    5732:	03 96       	adiw	r24, 0x03	; 3
    5734:	16 d3       	rcall	.+1580   	; 0x5d62 <_Z20update_flash_hexfilePc>
							if(rsp == TRUE)								// 4-2-19 VC: think thats required or not
    5736:	81 30       	cpi	r24, 0x01	; 1
    5738:	31 f4       	brne	.+12     	; 0x5746 <_Z12post_requestPcS_+0x466>
							{
								flushRxBuffer(GPRS_UART);				// 12-2-19 VC: when operation is done then delet the current buff
    573a:	80 e0       	ldi	r24, 0x00	; 0
    573c:	90 e0       	ldi	r25, 0x00	; 0
    573e:	0e 94 d7 09 	call	0x13ae	; 0x13ae <_Z13flushRxBufferi>
								sts = HTTP_PASS;						// gives ok for response to server
    5742:	10 e0       	ldi	r17, 0x00	; 0
    5744:	0b c0       	rjmp	.+22     	; 0x575c <_Z12post_requestPcS_+0x47c>
							}
							else
							{
								
								flushRxBuffer(GPRS_UART);
    5746:	80 e0       	ldi	r24, 0x00	; 0
    5748:	90 e0       	ldi	r25, 0x00	; 0
    574a:	0e 94 d7 09 	call	0x13ae	; 0x13ae <_Z13flushRxBufferi>
								sts = HTTP_FAIL;
							
								#ifdef GPRS_DEBUG_URL
								UWriteString((char *)"READ:f", UART_PC);
    574e:	62 e0       	ldi	r22, 0x02	; 2
    5750:	70 e0       	ldi	r23, 0x00	; 0
    5752:	88 ef       	ldi	r24, 0xF8	; 248
    5754:	98 e0       	ldi	r25, 0x08	; 8
    5756:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <_Z12UWriteStringPKci>
							}
							else
							{
								
								flushRxBuffer(GPRS_UART);
								sts = HTTP_FAIL;
    575a:	11 e0       	ldi	r17, 0x01	; 1
								#ifdef GPRS_DEBUG_URL
								UWriteString((char *)"READ:f", UART_PC);
								
								#endif
							}
							http_state = GPRS_HTTP_CMD_URL;		// Need Something to do here
    575c:	85 e0       	ldi	r24, 0x05	; 5
    575e:	80 93 13 02 	sts	0x0213, r24	; 0x800213 <_ZZ12post_requestPcS_E10http_state>
							http_retry_cnt = 0;
    5762:	10 92 10 0c 	sts	0x0C10, r1	; 0x800c10 <_ZZ12post_requestPcS_E14http_retry_cnt>
							timeout = 0;
    5766:	10 92 0f 0c 	sts	0x0C0F, r1	; 0x800c0f <_ZZ12post_requestPcS_E7timeout+0x1>
    576a:	10 92 0e 0c 	sts	0x0C0E, r1	; 0x800c0e <_ZZ12post_requestPcS_E7timeout>
    576e:	59 c0       	rjmp	.+178    	; 0x5822 <_Z12post_requestPcS_+0x542>
						}
						else
						{
#ifdef ONLINE_CONFIG_EN
							decode_online_resp(tmpstr);
    5770:	ce 01       	movw	r24, r28
    5772:	03 96       	adiw	r24, 0x03	; 3
    5774:	36 dc       	rcall	.-1940   	; 0x4fe2 <_Z18decode_online_respPc>
							sts = HTTP_PASS;
							http_state = GPRS_HTTP_CMD_URL;
    5776:	15 e0       	ldi	r17, 0x05	; 5
    5778:	10 93 13 02 	sts	0x0213, r17	; 0x800213 <_ZZ12post_requestPcS_E10http_state>
#else
#endif						
							if(rsp == TRUE)
							{
								http_retry_cnt = 0;
    577c:	10 92 10 0c 	sts	0x0C10, r1	; 0x800c10 <_ZZ12post_requestPcS_E14http_retry_cnt>
								flushRxBuffer(GPRS_UART);
    5780:	80 e0       	ldi	r24, 0x00	; 0
    5782:	90 e0       	ldi	r25, 0x00	; 0
    5784:	0e 94 d7 09 	call	0x13ae	; 0x13ae <_Z13flushRxBufferi>
								UWriteString((char *)"READ:f", UART_PC);
								
#endif
							}
							
							http_state = GPRS_HTTP_CMD_URL;
    5788:	10 93 13 02 	sts	0x0213, r17	; 0x800213 <_ZZ12post_requestPcS_E10http_state>
							http_retry_cnt = 0;
    578c:	10 92 10 0c 	sts	0x0C10, r1	; 0x800c10 <_ZZ12post_requestPcS_E14http_retry_cnt>
							timeout = 0;
    5790:	10 92 0f 0c 	sts	0x0C0F, r1	; 0x800c0f <_ZZ12post_requestPcS_E7timeout+0x1>
    5794:	10 92 0e 0c 	sts	0x0C0E, r1	; 0x800c0e <_ZZ12post_requestPcS_E7timeout>
    5798:	10 e0       	ldi	r17, 0x00	; 0
    579a:	43 c0       	rjmp	.+134    	; 0x5822 <_Z12post_requestPcS_+0x542>
						}
					}
				break;
				case (GPRS_NO_NEW_MSG): 
#ifdef GPRS_DEBUG
					UWriteString("READ:w", UART_PC);
    579c:	62 e0       	ldi	r22, 0x02	; 2
    579e:	70 e0       	ldi	r23, 0x00	; 0
    57a0:	8f ef       	ldi	r24, 0xFF	; 255
    57a2:	98 e0       	ldi	r25, 0x08	; 8
    57a4:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <_Z12UWriteStringPKci>
#endif					
					if(timeout++ >= HTTPREAD_TIMEOUT)
    57a8:	80 91 0e 0c 	lds	r24, 0x0C0E	; 0x800c0e <_ZZ12post_requestPcS_E7timeout>
    57ac:	90 91 0f 0c 	lds	r25, 0x0C0F	; 0x800c0f <_ZZ12post_requestPcS_E7timeout+0x1>
    57b0:	8a 30       	cpi	r24, 0x0A	; 10
    57b2:	91 05       	cpc	r25, r1
    57b4:	38 f4       	brcc	.+14     	; 0x57c4 <_Z12post_requestPcS_+0x4e4>
    57b6:	01 96       	adiw	r24, 0x01	; 1
    57b8:	90 93 0f 0c 	sts	0x0C0F, r25	; 0x800c0f <_ZZ12post_requestPcS_E7timeout+0x1>
    57bc:	80 93 0e 0c 	sts	0x0C0E, r24	; 0x800c0e <_ZZ12post_requestPcS_E7timeout>
{
	static gprs_http_state_t http_state = GPRS_HTTP_CMD_URL;
	static char http_retry_cnt = 0;
	int num_byte = 0;
	
	http_status_t sts = HTTP_IN_PRG;
    57c0:	12 e0       	ldi	r17, 0x02	; 2
    57c2:	2f c0       	rjmp	.+94     	; 0x5822 <_Z12post_requestPcS_+0x542>
#ifdef GPRS_DEBUG
					UWriteString("READ:w", UART_PC);
#endif					
					if(timeout++ >= HTTPREAD_TIMEOUT)
					{
						timeout = 0;
    57c4:	10 92 0f 0c 	sts	0x0C0F, r1	; 0x800c0f <_ZZ12post_requestPcS_E7timeout+0x1>
    57c8:	10 92 0e 0c 	sts	0x0C0E, r1	; 0x800c0e <_ZZ12post_requestPcS_E7timeout>
					
					http_retry_cnt++;
    57cc:	80 91 10 0c 	lds	r24, 0x0C10	; 0x800c10 <_ZZ12post_requestPcS_E14http_retry_cnt>
    57d0:	8f 5f       	subi	r24, 0xFF	; 255
    57d2:	80 93 10 0c 	sts	0x0C10, r24	; 0x800c10 <_ZZ12post_requestPcS_E14http_retry_cnt>
#ifdef ONLINE_CONFIG_EN
						if((online_cfg.cfg_pending)	&&	(http_retry_cnt >= HTTP_RETRY_CNT)	)
    57d6:	90 91 1d 0c 	lds	r25, 0x0C1D	; 0x800c1d <online_cfg+0x1>
    57da:	99 23       	and	r25, r25
    57dc:	29 f0       	breq	.+10     	; 0x57e8 <_Z12post_requestPcS_+0x508>
    57de:	83 30       	cpi	r24, 0x03	; 3
    57e0:	78 f0       	brcs	.+30     	; 0x5800 <_Z12post_requestPcS_+0x520>
						{
							online_cfg.cfg_pending = FALSE;
    57e2:	10 92 1d 0c 	sts	0x0C1D, r1	; 0x800c1d <online_cfg+0x1>
    57e6:	02 c0       	rjmp	.+4      	; 0x57ec <_Z12post_requestPcS_+0x50c>
						}
#endif
						if (http_retry_cnt >= HTTP_RETRY_CNT)
    57e8:	83 30       	cpi	r24, 0x03	; 3
    57ea:	60 f0       	brcs	.+24     	; 0x5804 <_Z12post_requestPcS_+0x524>
						{							
							http.errcode = HTTP_ERR_OFFSET + GPRS_HTTP_RSP_READ;
    57ec:	8f ec       	ldi	r24, 0xCF	; 207
    57ee:	80 93 4c 0c 	sts	0x0C4C, r24	; 0x800c4c <http>
							sts = HTTP_FAIL;
							
							http_state = GPRS_HTTP_CMD_URL;			//
    57f2:	85 e0       	ldi	r24, 0x05	; 5
    57f4:	80 93 13 02 	sts	0x0213, r24	; 0x800213 <_ZZ12post_requestPcS_E10http_state>
							http_retry_cnt = 0;
    57f8:	10 92 10 0c 	sts	0x0C10, r1	; 0x800c10 <_ZZ12post_requestPcS_E14http_retry_cnt>
						}
#endif
						if (http_retry_cnt >= HTTP_RETRY_CNT)
						{							
							http.errcode = HTTP_ERR_OFFSET + GPRS_HTTP_RSP_READ;
							sts = HTTP_FAIL;
    57fc:	11 e0       	ldi	r17, 0x01	; 1
    57fe:	03 c0       	rjmp	.+6      	; 0x5806 <_Z12post_requestPcS_+0x526>
{
	static gprs_http_state_t http_state = GPRS_HTTP_CMD_URL;
	static char http_retry_cnt = 0;
	int num_byte = 0;
	
	http_status_t sts = HTTP_IN_PRG;
    5800:	12 e0       	ldi	r17, 0x02	; 2
    5802:	01 c0       	rjmp	.+2      	; 0x5806 <_Z12post_requestPcS_+0x526>
    5804:	12 e0       	ldi	r17, 0x02	; 2
							sts = HTTP_FAIL;
							
							http_state = GPRS_HTTP_CMD_URL;			//
							http_retry_cnt = 0;
						}
						flushRxBuffer(GPRS_UART);	
    5806:	80 e0       	ldi	r24, 0x00	; 0
    5808:	90 e0       	ldi	r25, 0x00	; 0
    580a:	0e 94 d7 09 	call	0x13ae	; 0x13ae <_Z13flushRxBufferi>
    580e:	09 c0       	rjmp	.+18     	; 0x5822 <_Z12post_requestPcS_+0x542>
{
	static gprs_http_state_t http_state = GPRS_HTTP_CMD_URL;
	static char http_retry_cnt = 0;
	int num_byte = 0;
	
	http_status_t sts = HTTP_IN_PRG;
    5810:	12 e0       	ldi	r17, 0x02	; 2
					break;
				default:
					break;
			}
		}
		break;
    5812:	07 c0       	rjmp	.+14     	; 0x5822 <_Z12post_requestPcS_+0x542>
{
	static gprs_http_state_t http_state = GPRS_HTTP_CMD_URL;
	static char http_retry_cnt = 0;
	int num_byte = 0;
	
	http_status_t sts = HTTP_IN_PRG;
    5814:	12 e0       	ldi	r17, 0x02	; 2
    5816:	05 c0       	rjmp	.+10     	; 0x5822 <_Z12post_requestPcS_+0x542>
    5818:	12 e0       	ldi	r17, 0x02	; 2
    581a:	03 c0       	rjmp	.+6      	; 0x5822 <_Z12post_requestPcS_+0x542>
    581c:	12 e0       	ldi	r17, 0x02	; 2
    581e:	01 c0       	rjmp	.+2      	; 0x5822 <_Z12post_requestPcS_+0x542>
    5820:	12 e0       	ldi	r17, 0x02	; 2
		break;
		default:
		break;
	}
	return sts;
}
    5822:	81 2f       	mov	r24, r17
    5824:	c6 58       	subi	r28, 0x86	; 134
    5826:	da 4f       	sbci	r29, 0xFA	; 250
    5828:	0f b6       	in	r0, 0x3f	; 63
    582a:	f8 94       	cli
    582c:	de bf       	out	0x3e, r29	; 62
    582e:	0f be       	out	0x3f, r0	; 63
    5830:	cd bf       	out	0x3d, r28	; 61
    5832:	df 91       	pop	r29
    5834:	cf 91       	pop	r28
    5836:	1f 91       	pop	r17
    5838:	0f 91       	pop	r16
    583a:	08 95       	ret

0000583c <_Z12http_handlerv>:
	}
	return sts;
}

void http_handler(void)
{
    583c:	cf 93       	push	r28
    583e:	df 93       	push	r29
    5840:	1f 92       	push	r1
    5842:	1f 92       	push	r1
    5844:	cd b7       	in	r28, 0x3d	; 61
    5846:	de b7       	in	r29, 0x3e	; 62
	char fms_server_resp_buff[2];	// use #define for size of buffer
	static char http_buff[GPRS_TX_BUFFER_MAX];
	static gprs_upload_data_pkt_id_t upload_code = GPRS_NO_DATA;
	static unsigned char upload_retry_cnt = 0;
	static unsigned char http_conn_sts = FALSE;
	switch(gprs.state)
    5848:	e0 91 f3 12 	lds	r30, 0x12F3	; 0x8012f3 <gprs+0xf>
    584c:	8e 2f       	mov	r24, r30
    584e:	90 e0       	ldi	r25, 0x00	; 0
    5850:	fc 01       	movw	r30, r24
    5852:	31 97       	sbiw	r30, 0x01	; 1
    5854:	ea 30       	cpi	r30, 0x0A	; 10
    5856:	f1 05       	cpc	r31, r1
    5858:	08 f0       	brcs	.+2      	; 0x585c <_Z12http_handlerv+0x20>
    585a:	46 c1       	rjmp	.+652    	; 0x5ae8 <_Z12http_handlerv+0x2ac>
    585c:	88 27       	eor	r24, r24
    585e:	ed 5f       	subi	r30, 0xFD	; 253
    5860:	fe 4f       	sbci	r31, 0xFE	; 254
    5862:	8f 4f       	sbci	r24, 0xFF	; 255
    5864:	0c 94 fa 46 	jmp	0x8df4	; 0x8df4 <__tablejump2__>
	{
		case GPRS_IDLE:
			if(getGPRSConfigErrSts())			// 22-2-19 VC: after reading all config parameter
    5868:	80 91 f9 12 	lds	r24, 0x12F9	; 0x8012f9 <gprs+0x15>
    586c:	88 23       	and	r24, r24
    586e:	21 f0       	breq	.+8      	; 0x5878 <_Z12http_handlerv+0x3c>
			{
				gprs.state = GPRS_CONNECT;		
    5870:	82 e0       	ldi	r24, 0x02	; 2
    5872:	80 93 f3 12 	sts	0x12F3, r24	; 0x8012f3 <gprs+0xf>
    5876:	3b c1       	rjmp	.+630    	; 0x5aee <_Z12http_handlerv+0x2b2>
			}
			else
			{
				
#ifdef GPRS_DEBUG
				UWriteString("CON:F", UART_PC);
    5878:	62 e0       	ldi	r22, 0x02	; 2
    587a:	70 e0       	ldi	r23, 0x00	; 0
    587c:	86 e0       	ldi	r24, 0x06	; 6
    587e:	99 e0       	ldi	r25, 0x09	; 9
    5880:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <_Z12UWriteStringPKci>
    5884:	34 c1       	rjmp	.+616    	; 0x5aee <_Z12http_handlerv+0x2b2>
		
		case GPRS_CONNECT:
#ifdef GPRS_DEBUG
			
#endif
			status = (char) gprs_connect();				//Connect to sim module and service provider
    5886:	0e 94 64 20 	call	0x40c8	; 0x40c8 <_Z12gprs_connectv>
			if(status == CON_OK)
    588a:	81 11       	cpse	r24, r1
    588c:	04 c0       	rjmp	.+8      	; 0x5896 <_Z12http_handlerv+0x5a>
			{
				
				gprs.state = GPRS_CONN_STS;
    588e:	83 e0       	ldi	r24, 0x03	; 3
    5890:	80 93 f3 12 	sts	0x12F3, r24	; 0x8012f3 <gprs+0xf>
    5894:	2c c1       	rjmp	.+600    	; 0x5aee <_Z12http_handlerv+0x2b2>
			}
			else if(status == CON_FAIL)
    5896:	81 30       	cpi	r24, 0x01	; 1
    5898:	09 f0       	breq	.+2      	; 0x589c <_Z12http_handlerv+0x60>
    589a:	29 c1       	rjmp	.+594    	; 0x5aee <_Z12http_handlerv+0x2b2>
			{
				gprs.state = GPRS_IDLE;		//Lets go to idle and wait for trigger to re do
    589c:	e4 ee       	ldi	r30, 0xE4	; 228
    589e:	f2 e1       	ldi	r31, 0x12	; 18
    58a0:	87 87       	std	Z+15, r24	; 0x0f
{
	return gprs.connect_sts;
}
void setGPRSConnSts(gprs_status_t sts)		//Anand 25.04.2014
{
	gprs.connect_sts = sts;
    58a2:	14 8a       	std	Z+20, r1	; 0x14
    58a4:	24 c1       	rjmp	.+584    	; 0x5aee <_Z12http_handlerv+0x2b2>
			{
				
			}
		break;
		case GPRS_CONN_STS:
			status = (char)gprs_connect_status();
    58a6:	0e 94 9d 1d 	call	0x3b3a	; 0x3b3a <_Z19gprs_connect_statusv>
			if(status == CON_OK)
    58aa:	81 11       	cpse	r24, r1
    58ac:	16 c0       	rjmp	.+44     	; 0x58da <_Z12http_handlerv+0x9e>
{
	return gprs.connect_sts;
}
void setGPRSConnSts(gprs_status_t sts)		//Anand 25.04.2014
{
	gprs.connect_sts = sts;
    58ae:	81 e0       	ldi	r24, 0x01	; 1
    58b0:	80 93 f8 12 	sts	0x12F8, r24	; 0x8012f8 <gprs+0x14>
		case GPRS_CONN_STS:
			status = (char)gprs_connect_status();
			if(status == CON_OK)
			{
				setGPRSConnSts(AVBL);
				if (check_unsent_log() || (getRtuState() == RTU_GPRS_CONFIG)  || (get_frmwr_update_state() == HEX_FILE_UPDATE_PRG)) // 29-1-2019 VC: added for gprs sync
    58b4:	a1 d6       	rcall	.+3394   	; 0x65f8 <_Z16check_unsent_logv>
    58b6:	81 11       	cpse	r24, r1
    58b8:	08 c0       	rjmp	.+16     	; 0x58ca <_Z12http_handlerv+0x8e>
    58ba:	0e 94 98 3a 	call	0x7530	; 0x7530 <_Z11getRtuStatev>
    58be:	83 30       	cpi	r24, 0x03	; 3
    58c0:	21 f0       	breq	.+8      	; 0x58ca <_Z12http_handlerv+0x8e>
    58c2:	0e 94 ac 3d 	call	0x7b58	; 0x7b58 <_Z22get_frmwr_update_statev>
    58c6:	82 30       	cpi	r24, 0x02	; 2
    58c8:	21 f4       	brne	.+8      	; 0x58d2 <_Z12http_handlerv+0x96>
				{
					gprs.state = GPRS_HTTP_INIT;
    58ca:	84 e0       	ldi	r24, 0x04	; 4
    58cc:	80 93 f3 12 	sts	0x12F3, r24	; 0x8012f3 <gprs+0xf>
    58d0:	0e c1       	rjmp	.+540    	; 0x5aee <_Z12http_handlerv+0x2b2>
				}
				else
				{
					gprs.state = GPRS_SESSION_IDLE;					
    58d2:	89 e0       	ldi	r24, 0x09	; 9
    58d4:	80 93 f3 12 	sts	0x12F3, r24	; 0x8012f3 <gprs+0xf>
    58d8:	0a c1       	rjmp	.+532    	; 0x5aee <_Z12http_handlerv+0x2b2>
				}
			}
			else if(status == CON_FAIL)
    58da:	81 30       	cpi	r24, 0x01	; 1
    58dc:	09 f0       	breq	.+2      	; 0x58e0 <_Z12http_handlerv+0xa4>
    58de:	07 c1       	rjmp	.+526    	; 0x5aee <_Z12http_handlerv+0x2b2>
{
	return gprs.connect_sts;
}
void setGPRSConnSts(gprs_status_t sts)		//Anand 25.04.2014
{
	gprs.connect_sts = sts;
    58e0:	e4 ee       	ldi	r30, 0xE4	; 228
    58e2:	f2 e1       	ldi	r31, 0x12	; 18
    58e4:	14 8a       	std	Z+20, r1	; 0x14
				}
			}
			else if(status == CON_FAIL)
			{
				setGPRSConnSts(NOT_AVBL);
				gprs.state = GPRS_IDLE;		//Lets go to idle and wait for trigger to re do
    58e6:	87 87       	std	Z+15, r24	; 0x0f
    58e8:	02 c1       	rjmp	.+516    	; 0x5aee <_Z12http_handlerv+0x2b2>
			{
				
			}
		break;
		case GPRS_HTTP_INIT:
			status = (char)http_connect();				// Establish HTTP Connection
    58ea:	0e 94 0f 1f 	call	0x3e1e	; 0x3e1e <_Z12http_connectv>
			if(status == HTTP_PASS)
    58ee:	81 11       	cpse	r24, r1
    58f0:	09 c0       	rjmp	.+18     	; 0x5904 <_Z12http_handlerv+0xc8>
			{
				http_conn_sts = TRUE;
    58f2:	81 e0       	ldi	r24, 0x01	; 1
    58f4:	80 93 08 0c 	sts	0x0C08, r24	; 0x800c08 <_ZZ12http_handlervE13http_conn_sts>
{
	return gprs.server_status;
}
void setGPRSSrvrSts(gprs_status_t sts)		//Anand 25.04.2014
{
	gprs.server_status = sts;
    58f8:	e4 ee       	ldi	r30, 0xE4	; 228
    58fa:	f2 e1       	ldi	r31, 0x12	; 18
    58fc:	83 8b       	std	Z+19, r24	; 0x13
			status = (char)http_connect();				// Establish HTTP Connection
			if(status == HTTP_PASS)
			{
				http_conn_sts = TRUE;
				setGPRSSrvrSts(AVBL);
				gprs.state = GPRS_CONNECT_FMS_SERVER;			
    58fe:	86 e0       	ldi	r24, 0x06	; 6
    5900:	87 87       	std	Z+15, r24	; 0x0f
    5902:	f5 c0       	rjmp	.+490    	; 0x5aee <_Z12http_handlerv+0x2b2>
			}
			else if(status == HTTP_FAIL)
    5904:	81 30       	cpi	r24, 0x01	; 1
    5906:	09 f0       	breq	.+2      	; 0x590a <_Z12http_handlerv+0xce>
    5908:	f2 c0       	rjmp	.+484    	; 0x5aee <_Z12http_handlerv+0x2b2>
			{
				//Lets go to idle and wait for trigger to re do
				
				gprs.state = GPRS_HTTP_CLOSE;
    590a:	85 e0       	ldi	r24, 0x05	; 5
    590c:	80 93 f3 12 	sts	0x12F3, r24	; 0x8012f3 <gprs+0xf>
    5910:	ee c0       	rjmp	.+476    	; 0x5aee <_Z12http_handlerv+0x2b2>
		break;
		case GPRS_CONNECT_FMS_SERVER:

		break;
		case GPRS_PREPARE_LOG:
			if((!upload_code) || (getRtuState() == RTU_GPRS_CONFIG) || (get_frmwr_update_state() == HEX_FILE_UPDATE_PRG)) // 2-2-19 VC: adding for testing and need to think
    5912:	80 91 07 0c 	lds	r24, 0x0C07	; 0x800c07 <_ZZ12http_handlervE11upload_code>
    5916:	88 23       	and	r24, r24
    5918:	41 f0       	breq	.+16     	; 0x592a <_Z12http_handlerv+0xee>
    591a:	0e 94 98 3a 	call	0x7530	; 0x7530 <_Z11getRtuStatev>
    591e:	83 30       	cpi	r24, 0x03	; 3
    5920:	21 f0       	breq	.+8      	; 0x592a <_Z12http_handlerv+0xee>
    5922:	0e 94 ac 3d 	call	0x7b58	; 0x7b58 <_Z22get_frmwr_update_statev>
    5926:	82 30       	cpi	r24, 0x02	; 2
			{
				upload_code=controlRTUGprsUpload();
    5928:	d9 f4       	brne	.+54     	; 0x5960 <_Z12http_handlerv+0x124>
    592a:	7b d6       	rcall	.+3318   	; 0x6622 <_Z20controlRTUGprsUploadv>
    592c:	80 93 07 0c 	sts	0x0C07, r24	; 0x800c07 <_ZZ12http_handlervE11upload_code>
				memset(http_buff, 0, GPRS_TX_BUFFER_MAX);
    5930:	90 ec       	ldi	r25, 0xC0	; 192
    5932:	e7 e4       	ldi	r30, 0x47	; 71
    5934:	fb e0       	ldi	r31, 0x0B	; 11
    5936:	df 01       	movw	r26, r30
    5938:	1d 92       	st	X+, r1
    593a:	9a 95       	dec	r25
    593c:	e9 f7       	brne	.-6      	; 0x5938 <_Z12http_handlerv+0xfc>
				rtuPrepareGPRSData(http_buff, upload_code);
    593e:	68 2f       	mov	r22, r24
    5940:	cf 01       	movw	r24, r30
    5942:	84 d7       	rcall	.+3848   	; 0x684c <_Z18rtuPrepareGPRSDataPc25gprs_upload_data_pkt_id_t>
#ifdef GPRS_DEBUG
				UWriteString((char *)"uploadcode=", UART_PC);
    5944:	62 e0       	ldi	r22, 0x02	; 2
    5946:	70 e0       	ldi	r23, 0x00	; 0
    5948:	8c e0       	ldi	r24, 0x0C	; 12
    594a:	99 e0       	ldi	r25, 0x09	; 9
    594c:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <_Z12UWriteStringPKci>
				UWriteInt(upload_code, UART_PC);
    5950:	60 91 07 0c 	lds	r22, 0x0C07	; 0x800c07 <_ZZ12http_handlervE11upload_code>
    5954:	70 e0       	ldi	r23, 0x00	; 0
    5956:	80 e0       	ldi	r24, 0x00	; 0
    5958:	90 e0       	ldi	r25, 0x00	; 0
    595a:	42 e0       	ldi	r20, 0x02	; 2
    595c:	0e 94 3e 09 	call	0x127c	; 0x127c <_Z9UWriteIntmc>
#endif

			}
			if (upload_code)
    5960:	80 91 07 0c 	lds	r24, 0x0C07	; 0x800c07 <_ZZ12http_handlervE11upload_code>
    5964:	88 23       	and	r24, r24
    5966:	21 f0       	breq	.+8      	; 0x5970 <_Z12http_handlerv+0x134>
			{
				gprs.state = GPRS_LOGS_UPLOAD;
    5968:	88 e0       	ldi	r24, 0x08	; 8
    596a:	80 93 f3 12 	sts	0x12F3, r24	; 0x8012f3 <gprs+0xf>
    596e:	bf c0       	rjmp	.+382    	; 0x5aee <_Z12http_handlerv+0x2b2>
			}
			else
			{
				// close the http connection
				
				gprs.state = GPRS_SESSION_IDLE;
    5970:	89 e0       	ldi	r24, 0x09	; 9
    5972:	80 93 f3 12 	sts	0x12F3, r24	; 0x8012f3 <gprs+0xf>
    5976:	bb c0       	rjmp	.+374    	; 0x5aee <_Z12http_handlerv+0x2b2>
			}
		break;
		case GPRS_LOGS_UPLOAD:
			if (upload_code)
    5978:	80 91 07 0c 	lds	r24, 0x0C07	; 0x800c07 <_ZZ12http_handlervE11upload_code>
    597c:	88 23       	and	r24, r24
    597e:	09 f4       	brne	.+2      	; 0x5982 <_Z12http_handlerv+0x146>
    5980:	65 c0       	rjmp	.+202    	; 0x5a4c <_Z12http_handlerv+0x210>
			{

				status = (char)post_request(http_buff, fms_server_resp_buff);
    5982:	be 01       	movw	r22, r28
    5984:	6f 5f       	subi	r22, 0xFF	; 255
    5986:	7f 4f       	sbci	r23, 0xFF	; 255
    5988:	87 e4       	ldi	r24, 0x47	; 71
    598a:	9b e0       	ldi	r25, 0x0B	; 11
    598c:	a9 dc       	rcall	.-1710   	; 0x52e0 <_Z12post_requestPcS_>
				
				if (status == HTTP_PASS)
    598e:	81 11       	cpse	r24, r1
    5990:	39 c0       	rjmp	.+114    	; 0x5a04 <_Z12http_handlerv+0x1c8>
				{
					   if (upload_code == GPRS_RTU_DATA_FLASH)
    5992:	80 91 07 0c 	lds	r24, 0x0C07	; 0x800c07 <_ZZ12http_handlervE11upload_code>
    5996:	81 3a       	cpi	r24, 0xA1	; 161
						decrement_unsent_log_cnt(upload_code);	
    5998:	09 f4       	brne	.+2      	; 0x599c <_Z12http_handlerv+0x160>
    599a:	1e d6       	rcall	.+3132   	; 0x65d8 <_Z24decrement_unsent_log_cntc>
					
					upload_retry_cnt = 0;
    599c:	10 92 46 0b 	sts	0x0B46, r1	; 0x800b46 <_ZZ12http_handlervE16upload_retry_cnt>
					gprs.state = GPRS_PREPARE_LOG;
    59a0:	87 e0       	ldi	r24, 0x07	; 7
    59a2:	80 93 f3 12 	sts	0x12F3, r24	; 0x8012f3 <gprs+0xf>
					if(upload_code == GPRS_RTU_DATA_RAM	||	upload_code == GPRS_RTU_DATA_FLASH)
    59a6:	80 91 07 0c 	lds	r24, 0x0C07	; 0x800c07 <_ZZ12http_handlervE11upload_code>
    59aa:	90 e6       	ldi	r25, 0x60	; 96
    59ac:	98 0f       	add	r25, r24
    59ae:	92 30       	cpi	r25, 0x02	; 2
    59b0:	18 f5       	brcc	.+70     	; 0x59f8 <_Z12http_handlerv+0x1bc>
					{
						
						if(db_save_status)
    59b2:	20 91 1a 02 	lds	r18, 0x021A	; 0x80021a <db_save_status>
    59b6:	30 91 1b 02 	lds	r19, 0x021B	; 0x80021b <db_save_status+0x1>
    59ba:	23 2b       	or	r18, r19
    59bc:	79 f0       	breq	.+30     	; 0x59dc <_Z12http_handlerv+0x1a0>
						{
							db_save_status = FALSE;
    59be:	10 92 1b 02 	sts	0x021B, r1	; 0x80021b <db_save_status+0x1>
    59c2:	10 92 1a 02 	sts	0x021A, r1	; 0x80021a <db_save_status>
							
							if(ram_data.status&(1 << POWER_ON_BIT))
    59c6:	20 91 ad 13 	lds	r18, 0x13AD	; 0x8013ad <ram_data+0x10>
    59ca:	30 91 ae 13 	lds	r19, 0x13AE	; 0x8013ae <ram_data+0x11>
    59ce:	24 ff       	sbrs	r18, 4
    59d0:	05 c0       	rjmp	.+10     	; 0x59dc <_Z12http_handlerv+0x1a0>
							{
								ram_data.status &= ~(1 << POWER_ON_BIT);
    59d2:	2f 7e       	andi	r18, 0xEF	; 239
    59d4:	30 93 ae 13 	sts	0x13AE, r19	; 0x8013ae <ram_data+0x11>
    59d8:	20 93 ad 13 	sts	0x13AD, r18	; 0x8013ad <ram_data+0x10>
							}
							
						}
						if(upload_code == GPRS_RTU_DATA_FLASH)
    59dc:	81 3a       	cpi	r24, 0xA1	; 161
    59de:	61 f4       	brne	.+24     	; 0x59f8 <_Z12http_handlerv+0x1bc>
						{

							if(freq_updated_data.unsent_rtu_logs_GPRS != 0)
    59e0:	80 91 34 13 	lds	r24, 0x1334	; 0x801334 <freq_updated_data+0x1>
    59e4:	90 91 35 13 	lds	r25, 0x1335	; 0x801335 <freq_updated_data+0x2>
    59e8:	89 2b       	or	r24, r25
    59ea:	31 f0       	breq	.+12     	; 0x59f8 <_Z12http_handlerv+0x1bc>
							{
								{
									db_save_status = TRUE;
    59ec:	81 e0       	ldi	r24, 0x01	; 1
    59ee:	90 e0       	ldi	r25, 0x00	; 0
    59f0:	90 93 1b 02 	sts	0x021B, r25	; 0x80021b <db_save_status+0x1>
    59f4:	80 93 1a 02 	sts	0x021A, r24	; 0x80021a <db_save_status>
								}
							}
						}
					}

					upload_code = GPRS_NO_DATA;
    59f8:	10 92 07 0c 	sts	0x0C07, r1	; 0x800c07 <_ZZ12http_handlervE11upload_code>
					set_live_pckt_ready(FALSE);
    59fc:	80 e0       	ldi	r24, 0x00	; 0
    59fe:	0e 94 b3 46 	call	0x8d66	; 0x8d66 <_Z19set_live_pckt_readyh>
    5a02:	75 c0       	rjmp	.+234    	; 0x5aee <_Z12http_handlerv+0x2b2>
#ifdef GPRS_DEBUG
					
#endif			
				}
				else if (status == HTTP_FAIL)
    5a04:	81 30       	cpi	r24, 0x01	; 1
    5a06:	09 f0       	breq	.+2      	; 0x5a0a <_Z12http_handlerv+0x1ce>
    5a08:	72 c0       	rjmp	.+228    	; 0x5aee <_Z12http_handlerv+0x2b2>
				{
					gprs.state = GPRS_PREPARE_LOG;		//need to think about this  HJ 15-7-2016
    5a0a:	87 e0       	ldi	r24, 0x07	; 7
    5a0c:	80 93 f3 12 	sts	0x12F3, r24	; 0x8012f3 <gprs+0xf>
					upload_code = GPRS_NO_DATA;
    5a10:	10 92 07 0c 	sts	0x0C07, r1	; 0x800c07 <_ZZ12http_handlervE11upload_code>
					upload_retry_cnt++;
    5a14:	80 91 46 0b 	lds	r24, 0x0B46	; 0x800b46 <_ZZ12http_handlervE16upload_retry_cnt>
    5a18:	8f 5f       	subi	r24, 0xFF	; 255
					if (upload_retry_cnt >= UPLOAD_RETRY_CNT)
    5a1a:	83 30       	cpi	r24, 0x03	; 3
    5a1c:	18 f4       	brcc	.+6      	; 0x5a24 <_Z12http_handlerv+0x1e8>
				}
				else if (status == HTTP_FAIL)
				{
					gprs.state = GPRS_PREPARE_LOG;		//need to think about this  HJ 15-7-2016
					upload_code = GPRS_NO_DATA;
					upload_retry_cnt++;
    5a1e:	80 93 46 0b 	sts	0x0B46, r24	; 0x800b46 <_ZZ12http_handlervE16upload_retry_cnt>
    5a22:	65 c0       	rjmp	.+202    	; 0x5aee <_Z12http_handlerv+0x2b2>
					if (upload_retry_cnt >= UPLOAD_RETRY_CNT)
					{
						upload_retry_cnt = 0;
    5a24:	10 92 46 0b 	sts	0x0B46, r1	; 0x800b46 <_ZZ12http_handlervE16upload_retry_cnt>
{
	return gprs.server_status;
}
void setGPRSSrvrSts(gprs_status_t sts)		//Anand 25.04.2014
{
	gprs.server_status = sts;
    5a28:	e4 ee       	ldi	r30, 0xE4	; 228
    5a2a:	f2 e1       	ldi	r31, 0x12	; 18
    5a2c:	13 8a       	std	Z+19, r1	; 0x13
					if (upload_retry_cnt >= UPLOAD_RETRY_CNT)
					{
						upload_retry_cnt = 0;
						
						setGPRSSrvrSts(NOT_AVBL);
						gprs.state = GPRS_HTTP_CLOSE;
    5a2e:	85 e0       	ldi	r24, 0x05	; 5
    5a30:	87 87       	std	Z+15, r24	; 0x0f
						set_live_pckt_ready(FALSE);
    5a32:	80 e0       	ldi	r24, 0x00	; 0
    5a34:	0e 94 b3 46 	call	0x8d66	; 0x8d66 <_Z19set_live_pckt_readyh>
						if(get_frmwr_update_state() == HEX_FILE_UPDATE_PRG)	//01-08-2020 SK:
    5a38:	0e 94 ac 3d 	call	0x7b58	; 0x7b58 <_Z22get_frmwr_update_statev>
    5a3c:	82 30       	cpi	r24, 0x02	; 2
						{
							set_hex_file_updt_state(CONN_ERROR);
    5a3e:	09 f0       	breq	.+2      	; 0x5a42 <_Z12http_handlerv+0x206>
    5a40:	56 c0       	rjmp	.+172    	; 0x5aee <_Z12http_handlerv+0x2b2>
    5a42:	86 e0       	ldi	r24, 0x06	; 6
							set_flash_file_rqst_type(HEX_NO_RQST);
    5a44:	d9 d2       	rcall	.+1458   	; 0x5ff8 <_Z23set_hex_file_updt_state21hex_file_updt_state_t>
    5a46:	80 e0       	ldi	r24, 0x00	; 0
    5a48:	47 d3       	rcall	.+1678   	; 0x60d8 <_Z24set_flash_file_rqst_type26hex_file_updt_gprs_state_t>
    5a4a:	51 c0       	rjmp	.+162    	; 0x5aee <_Z12http_handlerv+0x2b2>
#endif
				}
			}
			else
			{
				upload_retry_cnt = 0;
    5a4c:	10 92 46 0b 	sts	0x0B46, r1	; 0x800b46 <_ZZ12http_handlervE16upload_retry_cnt>
				gprs.state = GPRS_SESSION_IDLE;
    5a50:	89 e0       	ldi	r24, 0x09	; 9
    5a52:	80 93 f3 12 	sts	0x12F3, r24	; 0x8012f3 <gprs+0xf>
    5a56:	4b c0       	rjmp	.+150    	; 0x5aee <_Z12http_handlerv+0x2b2>
			}
		break;

		case GPRS_HTTP_CLOSE:
			status = http_close();
    5a58:	0e 94 98 1f 	call	0x3f30	; 0x3f30 <_Z10http_closev>
			if (status == HTTP_PASS)
    5a5c:	81 11       	cpse	r24, r1
    5a5e:	0c c0       	rjmp	.+24     	; 0x5a78 <_Z12http_handlerv+0x23c>
			{
				http_conn_sts = FALSE;
    5a60:	10 92 08 0c 	sts	0x0C08, r1	; 0x800c08 <_ZZ12http_handlervE13http_conn_sts>
				
				gprs.state = GPRS_CONNECT;
    5a64:	82 e0       	ldi	r24, 0x02	; 2
    5a66:	80 93 f3 12 	sts	0x12F3, r24	; 0x8012f3 <gprs+0xf>
				
#ifdef GPRS_DEBUG
				UWriteString("CON:CLOSE", UART_PC);
    5a6a:	62 e0       	ldi	r22, 0x02	; 2
    5a6c:	70 e0       	ldi	r23, 0x00	; 0
    5a6e:	88 e1       	ldi	r24, 0x18	; 24
    5a70:	99 e0       	ldi	r25, 0x09	; 9
    5a72:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <_Z12UWriteStringPKci>
    5a76:	3b c0       	rjmp	.+118    	; 0x5aee <_Z12http_handlerv+0x2b2>
#endif
			}
			else if (status == HTTP_FAIL)
    5a78:	81 30       	cpi	r24, 0x01	; 1
    5a7a:	c9 f5       	brne	.+114    	; 0x5aee <_Z12http_handlerv+0x2b2>
			{
				http_conn_sts = FALSE;
    5a7c:	10 92 08 0c 	sts	0x0C08, r1	; 0x800c08 <_ZZ12http_handlervE13http_conn_sts>
				
				gprs.state = GPRS_CONNECT;
    5a80:	82 e0       	ldi	r24, 0x02	; 2
    5a82:	80 93 f3 12 	sts	0x12F3, r24	; 0x8012f3 <gprs+0xf>
    5a86:	33 c0       	rjmp	.+102    	; 0x5aee <_Z12http_handlerv+0x2b2>
		static unsigned char gprs_conn_retry_time = 0;
#ifdef GPRS_DEBUG

#endif
			
			if(gprs_conn_retry_time++ > GPRS_CONN_RETRY_TIME)
    5a88:	80 91 45 0b 	lds	r24, 0x0B45	; 0x800b45 <_ZZ12http_handlervE20gprs_conn_retry_time>
    5a8c:	85 36       	cpi	r24, 0x65	; 101
    5a8e:	20 f4       	brcc	.+8      	; 0x5a98 <_Z12http_handlerv+0x25c>
    5a90:	8f 5f       	subi	r24, 0xFF	; 255
    5a92:	80 93 45 0b 	sts	0x0B45, r24	; 0x800b45 <_ZZ12http_handlervE20gprs_conn_retry_time>
			{
				gprs_conn_retry_time = 0;
    5a96:	05 c0       	rjmp	.+10     	; 0x5aa2 <_Z12http_handlerv+0x266>
    5a98:	10 92 45 0b 	sts	0x0B45, r1	; 0x800b45 <_ZZ12http_handlervE20gprs_conn_retry_time>
				gprs.state = GPRS_CONN_STS;	
    5a9c:	83 e0       	ldi	r24, 0x03	; 3
    5a9e:	80 93 f3 12 	sts	0x12F3, r24	; 0x8012f3 <gprs+0xf>
#ifdef GPRS_DEBUG

#endif
			}
			// 13-2-19 VC: need to check for gprs_config mode
			if(check_unsent_log() || (getRtuState() == RTU_GPRS_CONFIG) || (get_frmwr_update_state() == HEX_FILE_UPDATE_PRG))		// Check for new dispense or refuel logs
    5aa2:	aa d5       	rcall	.+2900   	; 0x65f8 <_Z16check_unsent_logv>
    5aa4:	81 11       	cpse	r24, r1
    5aa6:	08 c0       	rjmp	.+16     	; 0x5ab8 <_Z12http_handlerv+0x27c>
    5aa8:	0e 94 98 3a 	call	0x7530	; 0x7530 <_Z11getRtuStatev>
    5aac:	83 30       	cpi	r24, 0x03	; 3
    5aae:	21 f0       	breq	.+8      	; 0x5ab8 <_Z12http_handlerv+0x27c>
    5ab0:	0e 94 ac 3d 	call	0x7b58	; 0x7b58 <_Z22get_frmwr_update_statev>
    5ab4:	82 30       	cpi	r24, 0x02	; 2
    5ab6:	d9 f4       	brne	.+54     	; 0x5aee <_Z12http_handlerv+0x2b2>
			{
				
				if (getGPRSConnSts() == AVBL)				// HJ 06-09-2017
    5ab8:	80 91 f8 12 	lds	r24, 0x12F8	; 0x8012f8 <gprs+0x14>
    5abc:	81 30       	cpi	r24, 0x01	; 1
    5abe:	71 f4       	brne	.+28     	; 0x5adc <_Z12http_handlerv+0x2a0>
				{
					
					if (http_conn_sts == TRUE)
    5ac0:	80 91 08 0c 	lds	r24, 0x0C08	; 0x800c08 <_ZZ12http_handlervE13http_conn_sts>
    5ac4:	81 30       	cpi	r24, 0x01	; 1
    5ac6:	21 f4       	brne	.+8      	; 0x5ad0 <_Z12http_handlerv+0x294>
					{
						gprs.state = GPRS_PREPARE_LOG;			// HJ 06-09-2017
    5ac8:	87 e0       	ldi	r24, 0x07	; 7
    5aca:	80 93 f3 12 	sts	0x12F3, r24	; 0x8012f3 <gprs+0xf>
    5ace:	0f c0       	rjmp	.+30     	; 0x5aee <_Z12http_handlerv+0x2b2>
{
	return gprs.server_status;
}
void setGPRSSrvrSts(gprs_status_t sts)		//Anand 25.04.2014
{
	gprs.server_status = sts;
    5ad0:	e4 ee       	ldi	r30, 0xE4	; 228
    5ad2:	f2 e1       	ldi	r31, 0x12	; 18
    5ad4:	13 8a       	std	Z+19, r1	; 0x13
					}
					else
					{
						
						setGPRSSrvrSts(NOT_AVBL);
						gprs.state = GPRS_CONN_STS;
    5ad6:	83 e0       	ldi	r24, 0x03	; 3
    5ad8:	87 87       	std	Z+15, r24	; 0x0f
    5ada:	09 c0       	rjmp	.+18     	; 0x5aee <_Z12http_handlerv+0x2b2>
					}
				}
				else
				{
					gprs.state = GPRS_CONNECT;				// HJ 06-09-2017
    5adc:	e4 ee       	ldi	r30, 0xE4	; 228
    5ade:	f2 e1       	ldi	r31, 0x12	; 18
    5ae0:	82 e0       	ldi	r24, 0x02	; 2
    5ae2:	87 87       	std	Z+15, r24	; 0x0f
{
	return gprs.server_status;
}
void setGPRSSrvrSts(gprs_status_t sts)		//Anand 25.04.2014
{
	gprs.server_status = sts;
    5ae4:	13 8a       	std	Z+19, r1	; 0x13
    5ae6:	03 c0       	rjmp	.+6      	; 0x5aee <_Z12http_handlerv+0x2b2>
		break;
		case GPRS_CONFIG:
			
		break;
		default:
			gprs.state = GPRS_IDLE;
    5ae8:	81 e0       	ldi	r24, 0x01	; 1
    5aea:	80 93 f3 12 	sts	0x12F3, r24	; 0x8012f3 <gprs+0xf>
		break;
	}	
}
    5aee:	0f 90       	pop	r0
    5af0:	0f 90       	pop	r0
    5af2:	df 91       	pop	r29
    5af4:	cf 91       	pop	r28
    5af6:	08 95       	ret

00005af8 <_Z18syncOnlineCnfgDataPc>:
	}*/
	return 1;
}
void set_hexfile_init_addr(void)
{
	flash_hexfile.addr = FL_HEX_FILE_START_ADDR;
    5af8:	cf 92       	push	r12
    5afa:	df 92       	push	r13
    5afc:	ef 92       	push	r14
    5afe:	ff 92       	push	r15
    5b00:	0f 93       	push	r16
    5b02:	1f 93       	push	r17
    5b04:	cf 93       	push	r28
    5b06:	df 93       	push	r29
    5b08:	cd b7       	in	r28, 0x3d	; 61
    5b0a:	de b7       	in	r29, 0x3e	; 62
    5b0c:	c9 54       	subi	r28, 0x49	; 73
    5b0e:	d1 09       	sbc	r29, r1
    5b10:	0f b6       	in	r0, 0x3f	; 63
    5b12:	f8 94       	cli
    5b14:	de bf       	out	0x3e, r29	; 62
    5b16:	0f be       	out	0x3f, r0	; 63
    5b18:	cd bf       	out	0x3d, r28	; 61
    5b1a:	8c 01       	movw	r16, r24
    5b1c:	ce 01       	movw	r24, r28
    5b1e:	01 96       	adiw	r24, 0x01	; 1
    5b20:	7c 01       	movw	r14, r24
    5b22:	89 e1       	ldi	r24, 0x19	; 25
    5b24:	d7 01       	movw	r26, r14
    5b26:	1d 92       	st	X+, r1
    5b28:	8a 95       	dec	r24
    5b2a:	e9 f7       	brne	.-6      	; 0x5b26 <_Z18syncOnlineCnfgDataPc+0x2e>
    5b2c:	62 e0       	ldi	r22, 0x02	; 2
    5b2e:	70 e0       	ldi	r23, 0x00	; 0
    5b30:	83 ed       	ldi	r24, 0xD3	; 211
    5b32:	97 e0       	ldi	r25, 0x07	; 7
    5b34:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <_Z12UWriteStringPKci>
    5b38:	62 e0       	ldi	r22, 0x02	; 2
    5b3a:	70 e0       	ldi	r23, 0x00	; 0
    5b3c:	c8 01       	movw	r24, r16
    5b3e:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <_Z12UWriteStringPKci>
    5b42:	fe 01       	movw	r30, r28
    5b44:	7a 96       	adiw	r30, 0x1a	; 26
    5b46:	80 e3       	ldi	r24, 0x30	; 48
    5b48:	df 01       	movw	r26, r30
    5b4a:	1d 92       	st	X+, r1
    5b4c:	8a 95       	dec	r24
    5b4e:	e9 f7       	brne	.-6      	; 0x5b4a <_Z18syncOnlineCnfgDataPc+0x52>
    5b50:	f7 01       	movw	r30, r14
    5b52:	01 90       	ld	r0, Z+
    5b54:	00 20       	and	r0, r0
    5b56:	e9 f7       	brne	.-6      	; 0x5b52 <_Z18syncOnlineCnfgDataPc+0x5a>
    5b58:	31 97       	sbiw	r30, 0x01	; 1
    5b5a:	af 01       	movw	r20, r30
    5b5c:	4e 19       	sub	r20, r14
    5b5e:	5f 09       	sbc	r21, r15
    5b60:	60 e0       	ldi	r22, 0x00	; 0
    5b62:	70 e0       	ldi	r23, 0x00	; 0
    5b64:	c7 01       	movw	r24, r14
    5b66:	0e 94 af 47 	call	0x8f5e	; 0x8f5e <memset>
    5b6a:	f8 01       	movw	r30, r16
    5b6c:	40 81       	ld	r20, Z
    5b6e:	4e 32       	cpi	r20, 0x2E	; 46
    5b70:	09 f4       	brne	.+2      	; 0x5b74 <_Z18syncOnlineCnfgDataPc+0x7c>
    5b72:	4d c0       	rjmp	.+154    	; 0x5c0e <_Z18syncOnlineCnfgDataPc+0x116>
    5b74:	42 32       	cpi	r20, 0x22	; 34
    5b76:	09 f4       	brne	.+2      	; 0x5b7a <_Z18syncOnlineCnfgDataPc+0x82>
    5b78:	43 c0       	rjmp	.+134    	; 0x5c00 <_Z18syncOnlineCnfgDataPc+0x108>
    5b7a:	31 96       	adiw	r30, 0x01	; 1
    5b7c:	80 e0       	ldi	r24, 0x00	; 0
    5b7e:	90 e0       	ldi	r25, 0x00	; 0
    5b80:	dc 01       	movw	r26, r24
    5b82:	20 e0       	ldi	r18, 0x00	; 0
    5b84:	30 e0       	ldi	r19, 0x00	; 0
    5b86:	02 c0       	rjmp	.+4      	; 0x5b8c <_Z18syncOnlineCnfgDataPc+0x94>
    5b88:	42 32       	cpi	r20, 0x22	; 34
    5b8a:	19 f1       	breq	.+70     	; 0x5bd2 <_Z18syncOnlineCnfgDataPc+0xda>
    5b8c:	88 0f       	add	r24, r24
    5b8e:	99 1f       	adc	r25, r25
    5b90:	aa 1f       	adc	r26, r26
    5b92:	bb 1f       	adc	r27, r27
    5b94:	6c 01       	movw	r12, r24
    5b96:	7d 01       	movw	r14, r26
    5b98:	cc 0c       	add	r12, r12
    5b9a:	dd 1c       	adc	r13, r13
    5b9c:	ee 1c       	adc	r14, r14
    5b9e:	ff 1c       	adc	r15, r15
    5ba0:	cc 0c       	add	r12, r12
    5ba2:	dd 1c       	adc	r13, r13
    5ba4:	ee 1c       	adc	r14, r14
    5ba6:	ff 1c       	adc	r15, r15
    5ba8:	8c 0d       	add	r24, r12
    5baa:	9d 1d       	adc	r25, r13
    5bac:	ae 1d       	adc	r26, r14
    5bae:	bf 1d       	adc	r27, r15
    5bb0:	50 e0       	ldi	r21, 0x00	; 0
    5bb2:	40 53       	subi	r20, 0x30	; 48
    5bb4:	51 09       	sbc	r21, r1
    5bb6:	05 2e       	mov	r0, r21
    5bb8:	00 0c       	add	r0, r0
    5bba:	66 0b       	sbc	r22, r22
    5bbc:	77 0b       	sbc	r23, r23
    5bbe:	84 0f       	add	r24, r20
    5bc0:	95 1f       	adc	r25, r21
    5bc2:	a6 1f       	adc	r26, r22
    5bc4:	b7 1f       	adc	r27, r23
    5bc6:	2f 5f       	subi	r18, 0xFF	; 255
    5bc8:	3f 4f       	sbci	r19, 0xFF	; 255
    5bca:	41 91       	ld	r20, Z+
    5bcc:	4e 32       	cpi	r20, 0x2E	; 46
    5bce:	e1 f6       	brne	.-72     	; 0x5b88 <_Z18syncOnlineCnfgDataPc+0x90>
    5bd0:	23 c0       	rjmp	.+70     	; 0x5c18 <_Z18syncOnlineCnfgDataPc+0x120>
    5bd2:	f8 01       	movw	r30, r16
    5bd4:	e2 0f       	add	r30, r18
    5bd6:	f3 1f       	adc	r31, r19
    5bd8:	50 81       	ld	r21, Z
    5bda:	52 32       	cpi	r21, 0x22	; 34
    5bdc:	b1 f0       	breq	.+44     	; 0x5c0a <_Z18syncOnlineCnfgDataPc+0x112>
    5bde:	2f 5f       	subi	r18, 0xFF	; 255
    5be0:	3f 4f       	sbci	r19, 0xFF	; 255
    5be2:	f8 01       	movw	r30, r16
    5be4:	e2 0f       	add	r30, r18
    5be6:	f3 1f       	adc	r31, r19
    5be8:	30 e0       	ldi	r19, 0x00	; 0
    5bea:	33 0f       	add	r19, r19
    5bec:	43 2f       	mov	r20, r19
    5bee:	44 0f       	add	r20, r20
    5bf0:	44 0f       	add	r20, r20
    5bf2:	34 0f       	add	r19, r20
    5bf4:	30 53       	subi	r19, 0x30	; 48
    5bf6:	35 0f       	add	r19, r21
    5bf8:	51 91       	ld	r21, Z+
    5bfa:	52 32       	cpi	r21, 0x22	; 34
    5bfc:	b1 f7       	brne	.-20     	; 0x5bea <_Z18syncOnlineCnfgDataPc+0xf2>
    5bfe:	0f c0       	rjmp	.+30     	; 0x5c1e <_Z18syncOnlineCnfgDataPc+0x126>
    5c00:	80 e0       	ldi	r24, 0x00	; 0
    5c02:	90 e0       	ldi	r25, 0x00	; 0
    5c04:	dc 01       	movw	r26, r24
    5c06:	30 e0       	ldi	r19, 0x00	; 0
    5c08:	0a c0       	rjmp	.+20     	; 0x5c1e <_Z18syncOnlineCnfgDataPc+0x126>
    5c0a:	30 e0       	ldi	r19, 0x00	; 0
    5c0c:	08 c0       	rjmp	.+16     	; 0x5c1e <_Z18syncOnlineCnfgDataPc+0x126>
    5c0e:	80 e0       	ldi	r24, 0x00	; 0
    5c10:	90 e0       	ldi	r25, 0x00	; 0
    5c12:	dc 01       	movw	r26, r24
    5c14:	20 e0       	ldi	r18, 0x00	; 0
    5c16:	30 e0       	ldi	r19, 0x00	; 0
    5c18:	2f 5f       	subi	r18, 0xFF	; 255
    5c1a:	3f 4f       	sbci	r19, 0xFF	; 255
    5c1c:	da cf       	rjmp	.-76     	; 0x5bd2 <_Z18syncOnlineCnfgDataPc+0xda>
    5c1e:	9c ab       	std	Y+52, r25	; 0x34
    5c20:	8b ab       	std	Y+51, r24	; 0x33
    5c22:	3d ab       	std	Y+53, r19	; 0x35
    5c24:	62 e0       	ldi	r22, 0x02	; 2
    5c26:	70 e0       	ldi	r23, 0x00	; 0
    5c28:	82 e2       	ldi	r24, 0x22	; 34
    5c2a:	99 e0       	ldi	r25, 0x09	; 9
    5c2c:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <_Z12UWriteStringPKci>
    5c30:	60 91 0c 0b 	lds	r22, 0x0B0C	; 0x800b0c <product_info+0x2>
    5c34:	70 91 0d 0b 	lds	r23, 0x0B0D	; 0x800b0d <product_info+0x3>
    5c38:	80 e0       	ldi	r24, 0x00	; 0
    5c3a:	90 e0       	ldi	r25, 0x00	; 0
    5c3c:	42 e0       	ldi	r20, 0x02	; 2
    5c3e:	0e 94 3e 09 	call	0x127c	; 0x127c <_Z9UWriteIntmc>
    5c42:	60 91 1e 0c 	lds	r22, 0x0C1E	; 0x800c1e <online_cfg+0x2>
    5c46:	ce 01       	movw	r24, r28
    5c48:	4a 96       	adiw	r24, 0x1a	; 26
    5c4a:	0e 94 61 04 	call	0x8c2	; 0x8c2 <_Z17update_rtu_configP12online_cfg_th>
    5c4e:	8e d4       	rcall	.+2332   	; 0x656c <_Z18prepare_FL_LogDatav>
    5c50:	0e 94 53 37 	call	0x6ea6	; 0x6ea6 <_Z16save_FL_rtu_datav>
    5c54:	81 e0       	ldi	r24, 0x01	; 1
    5c56:	c7 5b       	subi	r28, 0xB7	; 183
    5c58:	df 4f       	sbci	r29, 0xFF	; 255
    5c5a:	0f b6       	in	r0, 0x3f	; 63
    5c5c:	f8 94       	cli
    5c5e:	de bf       	out	0x3e, r29	; 62
    5c60:	0f be       	out	0x3f, r0	; 63
    5c62:	cd bf       	out	0x3d, r28	; 61
    5c64:	df 91       	pop	r29
    5c66:	cf 91       	pop	r28
    5c68:	1f 91       	pop	r17
    5c6a:	0f 91       	pop	r16
    5c6c:	ff 90       	pop	r15
    5c6e:	ef 90       	pop	r14
    5c70:	df 90       	pop	r13
    5c72:	cf 90       	pop	r12
    5c74:	08 95       	ret

00005c76 <_Z16releaseCnfgStatev>:
    5c76:	80 e0       	ldi	r24, 0x00	; 0
    5c78:	0c 94 9b 3a 	jmp	0x7536	; 0x7536 <_Z11setRtuState11RTU_state_t>
    5c7c:	08 95       	ret

00005c7e <_Z18init_hex_file_datav>:
    5c7e:	cf 93       	push	r28
    5c80:	df 93       	push	r29
    5c82:	ce ef       	ldi	r28, 0xFE	; 254
    5c84:	d2 e1       	ldi	r29, 0x12	; 18
    5c86:	89 e0       	ldi	r24, 0x09	; 9
    5c88:	fe 01       	movw	r30, r28
    5c8a:	11 92       	st	Z+, r1
    5c8c:	8a 95       	dec	r24
    5c8e:	e9 f7       	brne	.-6      	; 0x5c8a <_Z18init_hex_file_datav+0xc>
    5c90:	80 e0       	ldi	r24, 0x00	; 0
    5c92:	90 e0       	ldi	r25, 0x00	; 0
    5c94:	a0 e6       	ldi	r26, 0x60	; 96
    5c96:	b0 e0       	ldi	r27, 0x00	; 0
    5c98:	88 83       	st	Y, r24
    5c9a:	99 83       	std	Y+1, r25	; 0x01
    5c9c:	aa 83       	std	Y+2, r26	; 0x02
    5c9e:	bb 83       	std	Y+3, r27	; 0x03
    5ca0:	8f ef       	ldi	r24, 0xFF	; 255
    5ca2:	0e 94 b2 3d 	call	0x7b64	; 0x7b64 <_Z16set_frmwr_choiceh>
    5ca6:	81 e0       	ldi	r24, 0x01	; 1
    5ca8:	88 87       	std	Y+8, r24	; 0x08
    5caa:	df 91       	pop	r29
    5cac:	cf 91       	pop	r28
    5cae:	08 95       	ret

00005cb0 <_Z13validate_dataPhPci>:
    5cb0:	cf 92       	push	r12
    5cb2:	df 92       	push	r13
    5cb4:	ef 92       	push	r14
    5cb6:	ff 92       	push	r15
    5cb8:	0f 93       	push	r16
    5cba:	1f 93       	push	r17
    5cbc:	cf 93       	push	r28
    5cbe:	df 93       	push	r29
    5cc0:	ec 01       	movw	r28, r24
    5cc2:	8a 01       	movw	r16, r20
    5cc4:	d8 80       	ld	r13, Y
    5cc6:	14 16       	cp	r1, r20
    5cc8:	15 06       	cpc	r1, r21
    5cca:	0c f0       	brlt	.+2      	; 0x5cce <_Z13validate_dataPhPci+0x1e>
    5ccc:	40 c0       	rjmp	.+128    	; 0x5d4e <_Z13validate_dataPhPci+0x9e>
    5cce:	e6 2f       	mov	r30, r22
    5cd0:	f7 2f       	mov	r31, r23
    5cd2:	20 e0       	ldi	r18, 0x00	; 0
    5cd4:	30 e0       	ldi	r19, 0x00	; 0
    5cd6:	60 e0       	ldi	r22, 0x00	; 0
    5cd8:	80 e0       	ldi	r24, 0x00	; 0
    5cda:	41 e0       	ldi	r20, 0x01	; 1
    5cdc:	78 01       	movw	r14, r16
    5cde:	91 e0       	ldi	r25, 0x01	; 1
    5ce0:	e9 1a       	sub	r14, r25
    5ce2:	f1 08       	sbc	r15, r1
    5ce4:	cc 24       	eor	r12, r12
    5ce6:	c3 94       	inc	r12
    5ce8:	72 2f       	mov	r23, r18
    5cea:	df 01       	movw	r26, r30
    5cec:	90 81       	ld	r25, Z
    5cee:	50 ed       	ldi	r21, 0xD0	; 208
    5cf0:	59 0f       	add	r21, r25
    5cf2:	5a 30       	cpi	r21, 0x0A	; 10
    5cf4:	10 f4       	brcc	.+4      	; 0x5cfa <_Z13validate_dataPhPci+0x4a>
    5cf6:	50 83       	st	Z, r21
    5cf8:	06 c0       	rjmp	.+12     	; 0x5d06 <_Z13validate_dataPhPci+0x56>
    5cfa:	5f eb       	ldi	r21, 0xBF	; 191
    5cfc:	59 0f       	add	r21, r25
    5cfe:	56 30       	cpi	r21, 0x06	; 6
    5d00:	38 f5       	brcc	.+78     	; 0x5d50 <_Z13validate_dataPhPci+0xa0>
    5d02:	97 53       	subi	r25, 0x37	; 55
    5d04:	90 83       	st	Z, r25
    5d06:	70 ff       	sbrs	r23, 0
    5d08:	16 c0       	rjmp	.+44     	; 0x5d36 <_Z13validate_dataPhPci+0x86>
    5d0a:	90 e1       	ldi	r25, 0x10	; 16
    5d0c:	69 9f       	mul	r22, r25
    5d0e:	b0 01       	movw	r22, r0
    5d10:	11 24       	eor	r1, r1
    5d12:	9c 91       	ld	r25, X
    5d14:	69 2b       	or	r22, r25
    5d16:	91 e0       	ldi	r25, 0x01	; 1
    5d18:	94 0f       	add	r25, r20
    5d1a:	de 01       	movw	r26, r28
    5d1c:	a4 0f       	add	r26, r20
    5d1e:	b1 1d       	adc	r27, r1
    5d20:	6c 93       	st	X, r22
    5d22:	2e 15       	cp	r18, r14
    5d24:	3f 05       	cpc	r19, r15
    5d26:	1c f4       	brge	.+6      	; 0x5d2e <_Z13validate_dataPhPci+0x7e>
    5d28:	d6 0e       	add	r13, r22
    5d2a:	49 2f       	mov	r20, r25
    5d2c:	09 c0       	rjmp	.+18     	; 0x5d40 <_Z13validate_dataPhPci+0x90>
    5d2e:	d1 94       	neg	r13
    5d30:	6d 15       	cp	r22, r13
    5d32:	19 f0       	breq	.+6      	; 0x5d3a <_Z13validate_dataPhPci+0x8a>
    5d34:	0d c0       	rjmp	.+26     	; 0x5d50 <_Z13validate_dataPhPci+0xa0>
    5d36:	6c 91       	ld	r22, X
    5d38:	03 c0       	rjmp	.+6      	; 0x5d40 <_Z13validate_dataPhPci+0x90>
    5d3a:	6d 2d       	mov	r22, r13
    5d3c:	49 2f       	mov	r20, r25
    5d3e:	8c 2d       	mov	r24, r12
    5d40:	2f 5f       	subi	r18, 0xFF	; 255
    5d42:	3f 4f       	sbci	r19, 0xFF	; 255
    5d44:	31 96       	adiw	r30, 0x01	; 1
    5d46:	02 17       	cp	r16, r18
    5d48:	13 07       	cpc	r17, r19
    5d4a:	71 f6       	brne	.-100    	; 0x5ce8 <_Z13validate_dataPhPci+0x38>
    5d4c:	01 c0       	rjmp	.+2      	; 0x5d50 <_Z13validate_dataPhPci+0xa0>
    5d4e:	80 e0       	ldi	r24, 0x00	; 0
    5d50:	df 91       	pop	r29
    5d52:	cf 91       	pop	r28
    5d54:	1f 91       	pop	r17
    5d56:	0f 91       	pop	r16
    5d58:	ff 90       	pop	r15
    5d5a:	ef 90       	pop	r14
    5d5c:	df 90       	pop	r13
    5d5e:	cf 90       	pop	r12
    5d60:	08 95       	ret

00005d62 <_Z20update_flash_hexfilePc>:
    5d62:	af 92       	push	r10
    5d64:	bf 92       	push	r11
    5d66:	cf 92       	push	r12
    5d68:	df 92       	push	r13
    5d6a:	ef 92       	push	r14
    5d6c:	ff 92       	push	r15
    5d6e:	0f 93       	push	r16
    5d70:	1f 93       	push	r17
    5d72:	cf 93       	push	r28
    5d74:	df 93       	push	r29
    5d76:	cd b7       	in	r28, 0x3d	; 61
    5d78:	de b7       	in	r29, 0x3e	; 62
    5d7a:	a0 97       	sbiw	r28, 0x20	; 32
    5d7c:	0f b6       	in	r0, 0x3f	; 63
    5d7e:	f8 94       	cli
    5d80:	de bf       	out	0x3e, r29	; 62
    5d82:	0f be       	out	0x3f, r0	; 63
    5d84:	cd bf       	out	0x3d, r28	; 61
    5d86:	8c 01       	movw	r16, r24
    5d88:	fe 01       	movw	r30, r28
    5d8a:	31 96       	adiw	r30, 0x01	; 1
    5d8c:	80 e2       	ldi	r24, 0x20	; 32
    5d8e:	df 01       	movw	r26, r30
    5d90:	1d 92       	st	X+, r1
    5d92:	8a 95       	dec	r24
    5d94:	e9 f7       	brne	.-6      	; 0x5d90 <_Z20update_flash_hexfilePc+0x2e>
    5d96:	f8 01       	movw	r30, r16
    5d98:	80 81       	ld	r24, Z
    5d9a:	82 32       	cpi	r24, 0x22	; 34
    5d9c:	71 f0       	breq	.+28     	; 0x5dba <_Z20update_flash_hexfilePc+0x58>
    5d9e:	31 96       	adiw	r30, 0x01	; 1
    5da0:	80 e0       	ldi	r24, 0x00	; 0
    5da2:	90 e0       	ldi	r25, 0x00	; 0
    5da4:	05 c0       	rjmp	.+10     	; 0x5db0 <_Z20update_flash_hexfilePc+0x4e>
    5da6:	82 32       	cpi	r24, 0x22	; 34
    5da8:	26 e0       	ldi	r18, 0x06	; 6
    5daa:	92 07       	cpc	r25, r18
    5dac:	09 f4       	brne	.+2      	; 0x5db0 <_Z20update_flash_hexfilePc+0x4e>
    5dae:	08 c1       	rjmp	.+528    	; 0x5fc0 <_Z20update_flash_hexfilePc+0x25e>
    5db0:	01 96       	adiw	r24, 0x01	; 1
    5db2:	21 91       	ld	r18, Z+
    5db4:	22 32       	cpi	r18, 0x22	; 34
    5db6:	b9 f7       	brne	.-18     	; 0x5da6 <_Z20update_flash_hexfilePc+0x44>
    5db8:	fc c0       	rjmp	.+504    	; 0x5fb2 <_Z20update_flash_hexfilePc+0x250>
    5dba:	80 e0       	ldi	r24, 0x00	; 0
    5dbc:	90 e0       	ldi	r25, 0x00	; 0
    5dbe:	f8 01       	movw	r30, r16
    5dc0:	e8 0f       	add	r30, r24
    5dc2:	f9 1f       	adc	r31, r25
    5dc4:	21 81       	ldd	r18, Z+1	; 0x01
    5dc6:	21 33       	cpi	r18, 0x31	; 49
    5dc8:	09 f0       	breq	.+2      	; 0x5dcc <_Z20update_flash_hexfilePc+0x6a>
    5dca:	c9 c0       	rjmp	.+402    	; 0x5f5e <_Z20update_flash_hexfilePc+0x1fc>
    5dcc:	7c 01       	movw	r14, r24
    5dce:	a2 e0       	ldi	r26, 0x02	; 2
    5dd0:	ea 0e       	add	r14, r26
    5dd2:	f1 1c       	adc	r15, r1
    5dd4:	b1 e2       	ldi	r27, 0x21	; 33
    5dd6:	eb 16       	cp	r14, r27
    5dd8:	b6 e0       	ldi	r27, 0x06	; 6
    5dda:	fb 06       	cpc	r15, r27
    5ddc:	58 f4       	brcc	.+22     	; 0x5df4 <_Z20update_flash_hexfilePc+0x92>
    5dde:	7c 01       	movw	r14, r24
    5de0:	e3 e0       	ldi	r30, 0x03	; 3
    5de2:	ee 0e       	add	r14, r30
    5de4:	f1 1c       	adc	r15, r1
    5de6:	06 c0       	rjmp	.+12     	; 0x5df4 <_Z20update_flash_hexfilePc+0x92>
    5de8:	0f 2e       	mov	r0, r31
    5dea:	f3 e2       	ldi	r31, 0x23	; 35
    5dec:	ef 2e       	mov	r14, r31
    5dee:	f6 e0       	ldi	r31, 0x06	; 6
    5df0:	ff 2e       	mov	r15, r31
    5df2:	f0 2d       	mov	r31, r0
    5df4:	80 91 05 13 	lds	r24, 0x1305	; 0x801305 <flash_hexfile+0x7>
    5df8:	81 30       	cpi	r24, 0x01	; 1
    5dfa:	19 f0       	breq	.+6      	; 0x5e02 <_Z20update_flash_hexfilePc+0xa0>
    5dfc:	82 30       	cpi	r24, 0x02	; 2
    5dfe:	e9 f1       	breq	.+122    	; 0x5e7a <_Z20update_flash_hexfilePc+0x118>
    5e00:	9b c0       	rjmp	.+310    	; 0x5f38 <_Z20update_flash_hexfilePc+0x1d6>
    5e02:	43 e0       	ldi	r20, 0x03	; 3
    5e04:	50 e0       	ldi	r21, 0x00	; 0
    5e06:	66 e6       	ldi	r22, 0x66	; 102
    5e08:	72 e0       	ldi	r23, 0x02	; 2
    5e0a:	c8 01       	movw	r24, r16
    5e0c:	8e 0d       	add	r24, r14
    5e0e:	9f 1d       	adc	r25, r15
    5e10:	0e 94 99 47 	call	0x8f32	; 0x8f32 <memcmp>
    5e14:	89 2b       	or	r24, r25
    5e16:	09 f0       	breq	.+2      	; 0x5e1a <_Z20update_flash_hexfilePc+0xb8>
    5e18:	91 c0       	rjmp	.+290    	; 0x5f3c <_Z20update_flash_hexfilePc+0x1da>
    5e1a:	c7 01       	movw	r24, r14
    5e1c:	08 96       	adiw	r24, 0x08	; 8
    5e1e:	80 0f       	add	r24, r16
    5e20:	91 1f       	adc	r25, r17
    5e22:	0e 94 80 14 	call	0x2900	; 0x2900 <_Z7hex2intPc>
    5e26:	57 01       	movw	r10, r14
    5e28:	fa e0       	ldi	r31, 0x0A	; 10
    5e2a:	af 0e       	add	r10, r31
    5e2c:	b1 1c       	adc	r11, r1
    5e2e:	c8 2e       	mov	r12, r24
    5e30:	d1 2c       	mov	r13, r1
    5e32:	dc 2c       	mov	r13, r12
    5e34:	cc 24       	eor	r12, r12
    5e36:	c8 01       	movw	r24, r16
    5e38:	8a 0d       	add	r24, r10
    5e3a:	9b 1d       	adc	r25, r11
    5e3c:	0e 94 80 14 	call	0x2900	; 0x2900 <_Z7hex2intPc>
    5e40:	c8 2a       	or	r12, r24
    5e42:	0e 94 74 3d 	call	0x7ae8	; 0x7ae8 <_Z12get_rtu_cnfgv>
    5e46:	8c 25       	eor	r24, r12
    5e48:	9d 25       	eor	r25, r13
    5e4a:	93 70       	andi	r25, 0x03	; 3
    5e4c:	89 2b       	or	r24, r25
    5e4e:	09 f0       	breq	.+2      	; 0x5e52 <_Z20update_flash_hexfilePc+0xf0>
    5e50:	77 c0       	rjmp	.+238    	; 0x5f40 <_Z20update_flash_hexfilePc+0x1de>
    5e52:	23 e0       	ldi	r18, 0x03	; 3
    5e54:	e2 0e       	add	r14, r18
    5e56:	f1 1c       	adc	r15, r1
    5e58:	c8 01       	movw	r24, r16
    5e5a:	8e 0d       	add	r24, r14
    5e5c:	9f 1d       	adc	r25, r15
    5e5e:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <_Z18update_e2p_frm_verPc>
    5e62:	ee ef       	ldi	r30, 0xFE	; 254
    5e64:	f2 e1       	ldi	r31, 0x12	; 18
    5e66:	82 e0       	ldi	r24, 0x02	; 2
    5e68:	87 83       	std	Z+7, r24	; 0x07
    5e6a:	15 82       	std	Z+5, r1	; 0x05
    5e6c:	14 82       	std	Z+4, r1	; 0x04
    5e6e:	87 e0       	ldi	r24, 0x07	; 7
    5e70:	86 83       	std	Z+6, r24	; 0x06
    5e72:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_Z15flashClrHexFilev>
    5e76:	81 e0       	ldi	r24, 0x01	; 1
    5e78:	6a c0       	rjmp	.+212    	; 0x5f4e <_Z20update_flash_hexfilePc+0x1ec>
    5e7a:	0f 2e       	mov	r0, r31
    5e7c:	fa e3       	ldi	r31, 0x3A	; 58
    5e7e:	bf 2e       	mov	r11, r31
    5e80:	f0 2d       	mov	r31, r0
    5e82:	ce 01       	movw	r24, r28
    5e84:	01 96       	adiw	r24, 0x01	; 1
    5e86:	6c 01       	movw	r12, r24
    5e88:	68 94       	set
    5e8a:	aa 24       	eor	r10, r10
    5e8c:	a5 f8       	bld	r10, 5
    5e8e:	f8 01       	movw	r30, r16
    5e90:	ee 0d       	add	r30, r14
    5e92:	ff 1d       	adc	r31, r15
    5e94:	80 81       	ld	r24, Z
    5e96:	8a 33       	cpi	r24, 0x3A	; 58
    5e98:	09 f0       	breq	.+2      	; 0x5e9c <_Z20update_flash_hexfilePc+0x13a>
    5e9a:	55 c0       	rjmp	.+170    	; 0x5f46 <_Z20update_flash_hexfilePc+0x1e4>
    5e9c:	b9 82       	std	Y+1, r11	; 0x01
    5e9e:	97 01       	movw	r18, r14
    5ea0:	2e 5f       	subi	r18, 0xFE	; 254
    5ea2:	3f 4f       	sbci	r19, 0xFF	; 255
    5ea4:	f8 01       	movw	r30, r16
    5ea6:	ee 0d       	add	r30, r14
    5ea8:	ff 1d       	adc	r31, r15
    5eaa:	41 81       	ldd	r20, Z+1	; 0x01
    5eac:	42 95       	swap	r20
    5eae:	40 7f       	andi	r20, 0xF0	; 240
    5eb0:	f8 01       	movw	r30, r16
    5eb2:	e2 0f       	add	r30, r18
    5eb4:	f3 1f       	adc	r31, r19
    5eb6:	80 81       	ld	r24, Z
    5eb8:	90 ed       	ldi	r25, 0xD0	; 208
    5eba:	98 0f       	add	r25, r24
    5ebc:	9a 30       	cpi	r25, 0x0A	; 10
    5ebe:	10 f4       	brcc	.+4      	; 0x5ec4 <_Z20update_flash_hexfilePc+0x162>
    5ec0:	90 83       	st	Z, r25
    5ec2:	07 c0       	rjmp	.+14     	; 0x5ed2 <_Z20update_flash_hexfilePc+0x170>
    5ec4:	9f eb       	ldi	r25, 0xBF	; 191
    5ec6:	98 0f       	add	r25, r24
    5ec8:	96 30       	cpi	r25, 0x06	; 6
    5eca:	08 f0       	brcs	.+2      	; 0x5ece <_Z20update_flash_hexfilePc+0x16c>
    5ecc:	3e c0       	rjmp	.+124    	; 0x5f4a <_Z20update_flash_hexfilePc+0x1e8>
    5ece:	87 53       	subi	r24, 0x37	; 55
    5ed0:	80 83       	st	Z, r24
    5ed2:	93 e0       	ldi	r25, 0x03	; 3
    5ed4:	e9 0e       	add	r14, r25
    5ed6:	f1 1c       	adc	r15, r1
    5ed8:	80 81       	ld	r24, Z
    5eda:	48 2b       	or	r20, r24
    5edc:	4a 83       	std	Y+2, r20	; 0x02
    5ede:	50 e0       	ldi	r21, 0x00	; 0
    5ee0:	4c 5f       	subi	r20, 0xFC	; 252
    5ee2:	5f 4f       	sbci	r21, 0xFF	; 255
    5ee4:	44 0f       	add	r20, r20
    5ee6:	55 1f       	adc	r21, r21
    5ee8:	b8 01       	movw	r22, r16
    5eea:	6e 0d       	add	r22, r14
    5eec:	7f 1d       	adc	r23, r15
    5eee:	ce 01       	movw	r24, r28
    5ef0:	02 96       	adiw	r24, 0x02	; 2
    5ef2:	de de       	rcall	.-580    	; 0x5cb0 <_Z13validate_dataPhPci>
    5ef4:	88 23       	and	r24, r24
    5ef6:	59 f1       	breq	.+86     	; 0x5f4e <_Z20update_flash_hexfilePc+0x1ec>
    5ef8:	6e ef       	ldi	r22, 0xFE	; 254
    5efa:	72 e1       	ldi	r23, 0x12	; 18
    5efc:	c6 01       	movw	r24, r12
    5efe:	0e 94 8f 1b 	call	0x371e	; 0x371e <_Z13flashWriteHexPhPm>
    5f02:	ee ef       	ldi	r30, 0xFE	; 254
    5f04:	f2 e1       	ldi	r31, 0x12	; 18
    5f06:	84 81       	ldd	r24, Z+4	; 0x04
    5f08:	95 81       	ldd	r25, Z+5	; 0x05
    5f0a:	01 96       	adiw	r24, 0x01	; 1
    5f0c:	95 83       	std	Z+5, r25	; 0x05
    5f0e:	84 83       	std	Z+4, r24	; 0x04
    5f10:	8a 81       	ldd	r24, Y+2	; 0x02
    5f12:	90 e0       	ldi	r25, 0x00	; 0
    5f14:	04 96       	adiw	r24, 0x04	; 4
    5f16:	88 0f       	add	r24, r24
    5f18:	99 1f       	adc	r25, r25
    5f1a:	e8 0e       	add	r14, r24
    5f1c:	f9 1e       	adc	r15, r25
    5f1e:	d6 01       	movw	r26, r12
    5f20:	ea 2d       	mov	r30, r10
    5f22:	1d 92       	st	X+, r1
    5f24:	ea 95       	dec	r30
    5f26:	e9 f7       	brne	.-6      	; 0x5f22 <_Z20update_flash_hexfilePc+0x1c0>
    5f28:	f8 01       	movw	r30, r16
    5f2a:	ee 0d       	add	r30, r14
    5f2c:	ff 1d       	adc	r31, r15
    5f2e:	80 81       	ld	r24, Z
    5f30:	82 32       	cpi	r24, 0x22	; 34
    5f32:	09 f0       	breq	.+2      	; 0x5f36 <_Z20update_flash_hexfilePc+0x1d4>
    5f34:	ac cf       	rjmp	.-168    	; 0x5e8e <_Z20update_flash_hexfilePc+0x12c>
    5f36:	39 c0       	rjmp	.+114    	; 0x5faa <_Z20update_flash_hexfilePc+0x248>
    5f38:	80 e0       	ldi	r24, 0x00	; 0
    5f3a:	09 c0       	rjmp	.+18     	; 0x5f4e <_Z20update_flash_hexfilePc+0x1ec>
    5f3c:	80 e0       	ldi	r24, 0x00	; 0
    5f3e:	07 c0       	rjmp	.+14     	; 0x5f4e <_Z20update_flash_hexfilePc+0x1ec>
    5f40:	75 01       	movw	r14, r10
    5f42:	80 e0       	ldi	r24, 0x00	; 0
    5f44:	04 c0       	rjmp	.+8      	; 0x5f4e <_Z20update_flash_hexfilePc+0x1ec>
    5f46:	80 e0       	ldi	r24, 0x00	; 0
    5f48:	02 c0       	rjmp	.+4      	; 0x5f4e <_Z20update_flash_hexfilePc+0x1ec>
    5f4a:	79 01       	movw	r14, r18
    5f4c:	80 e0       	ldi	r24, 0x00	; 0
    5f4e:	f8 01       	movw	r30, r16
    5f50:	ee 0d       	add	r30, r14
    5f52:	ff 1d       	adc	r31, r15
    5f54:	90 81       	ld	r25, Z
    5f56:	92 32       	cpi	r25, 0x22	; 34
    5f58:	d1 f5       	brne	.+116    	; 0x5fce <_Z20update_flash_hexfilePc+0x26c>
    5f5a:	81 e0       	ldi	r24, 0x01	; 1
    5f5c:	38 c0       	rjmp	.+112    	; 0x5fce <_Z20update_flash_hexfilePc+0x26c>
    5f5e:	20 33       	cpi	r18, 0x30	; 48
    5f60:	a9 f4       	brne	.+42     	; 0x5f8c <_Z20update_flash_hexfilePc+0x22a>
    5f62:	80 91 05 13 	lds	r24, 0x1305	; 0x801305 <flash_hexfile+0x7>
    5f66:	81 30       	cpi	r24, 0x01	; 1
    5f68:	19 f0       	breq	.+6      	; 0x5f70 <_Z20update_flash_hexfilePc+0x20e>
    5f6a:	82 30       	cpi	r24, 0x02	; 2
    5f6c:	29 f0       	breq	.+10     	; 0x5f78 <_Z20update_flash_hexfilePc+0x216>
    5f6e:	0a c0       	rjmp	.+20     	; 0x5f84 <_Z20update_flash_hexfilePc+0x222>
    5f70:	88 e0       	ldi	r24, 0x08	; 8
    5f72:	80 93 04 13 	sts	0x1304, r24	; 0x801304 <flash_hexfile+0x6>
    5f76:	06 c0       	rjmp	.+12     	; 0x5f84 <_Z20update_flash_hexfilePc+0x222>
    5f78:	8b e0       	ldi	r24, 0x0B	; 11
    5f7a:	80 93 04 13 	sts	0x1304, r24	; 0x801304 <flash_hexfile+0x6>
    5f7e:	83 e0       	ldi	r24, 0x03	; 3
    5f80:	0e 94 a9 3d 	call	0x7b52	; 0x7b52 <_Z22set_frmwr_update_state20frmwr_update_state_t>
    5f84:	10 92 05 13 	sts	0x1305, r1	; 0x801305 <flash_hexfile+0x7>
    5f88:	81 e0       	ldi	r24, 0x01	; 1
    5f8a:	21 c0       	rjmp	.+66     	; 0x5fce <_Z20update_flash_hexfilePc+0x26c>
    5f8c:	22 33       	cpi	r18, 0x32	; 50
    5f8e:	79 f4       	brne	.+30     	; 0x5fae <_Z20update_flash_hexfilePc+0x24c>
    5f90:	80 91 05 13 	lds	r24, 0x1305	; 0x801305 <flash_hexfile+0x7>
    5f94:	82 30       	cpi	r24, 0x02	; 2
    5f96:	29 f4       	brne	.+10     	; 0x5fa2 <_Z20update_flash_hexfilePc+0x240>
    5f98:	85 e0       	ldi	r24, 0x05	; 5
    5f9a:	80 93 04 13 	sts	0x1304, r24	; 0x801304 <flash_hexfile+0x6>
    5f9e:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_Z15flashClrHexFilev>
    5fa2:	10 92 05 13 	sts	0x1305, r1	; 0x801305 <flash_hexfile+0x7>
    5fa6:	81 e0       	ldi	r24, 0x01	; 1
    5fa8:	12 c0       	rjmp	.+36     	; 0x5fce <_Z20update_flash_hexfilePc+0x26c>
    5faa:	81 e0       	ldi	r24, 0x01	; 1
    5fac:	10 c0       	rjmp	.+32     	; 0x5fce <_Z20update_flash_hexfilePc+0x26c>
    5fae:	80 e0       	ldi	r24, 0x00	; 0
    5fb0:	0e c0       	rjmp	.+28     	; 0x5fce <_Z20update_flash_hexfilePc+0x26c>
    5fb2:	81 32       	cpi	r24, 0x21	; 33
    5fb4:	f6 e0       	ldi	r31, 0x06	; 6
    5fb6:	9f 07       	cpc	r25, r31
    5fb8:	08 f4       	brcc	.+2      	; 0x5fbc <_Z20update_flash_hexfilePc+0x25a>
    5fba:	01 cf       	rjmp	.-510    	; 0x5dbe <_Z20update_flash_hexfilePc+0x5c>
    5fbc:	80 e0       	ldi	r24, 0x00	; 0
    5fbe:	07 c0       	rjmp	.+14     	; 0x5fce <_Z20update_flash_hexfilePc+0x26c>
    5fc0:	f8 01       	movw	r30, r16
    5fc2:	ee 5d       	subi	r30, 0xDE	; 222
    5fc4:	f9 4f       	sbci	r31, 0xF9	; 249
    5fc6:	20 81       	ld	r18, Z
    5fc8:	21 33       	cpi	r18, 0x31	; 49
    5fca:	49 f6       	brne	.-110    	; 0x5f5e <_Z20update_flash_hexfilePc+0x1fc>
    5fcc:	0d cf       	rjmp	.-486    	; 0x5de8 <_Z20update_flash_hexfilePc+0x86>
    5fce:	a0 96       	adiw	r28, 0x20	; 32
    5fd0:	0f b6       	in	r0, 0x3f	; 63
    5fd2:	f8 94       	cli
    5fd4:	de bf       	out	0x3e, r29	; 62
    5fd6:	0f be       	out	0x3f, r0	; 63
    5fd8:	cd bf       	out	0x3d, r28	; 61
    5fda:	df 91       	pop	r29
    5fdc:	cf 91       	pop	r28
    5fde:	1f 91       	pop	r17
    5fe0:	0f 91       	pop	r16
    5fe2:	ff 90       	pop	r15
    5fe4:	ef 90       	pop	r14
    5fe6:	df 90       	pop	r13
    5fe8:	cf 90       	pop	r12
    5fea:	bf 90       	pop	r11
    5fec:	af 90       	pop	r10
    5fee:	08 95       	ret

00005ff0 <_Z23release_hex_file_statesv>:
    5ff0:	08 95       	ret

00005ff2 <_Z23get_hex_file_updt_statev>:
    5ff2:	80 91 04 13 	lds	r24, 0x1304	; 0x801304 <flash_hexfile+0x6>
    5ff6:	08 95       	ret

00005ff8 <_Z23set_hex_file_updt_state21hex_file_updt_state_t>:
    5ff8:	80 93 04 13 	sts	0x1304, r24	; 0x801304 <flash_hexfile+0x6>
    5ffc:	08 95       	ret

00005ffe <_Z22check_pending_hex_datav>:
    5ffe:	bf 92       	push	r11
    6000:	cf 92       	push	r12
    6002:	df 92       	push	r13
    6004:	ef 92       	push	r14
    6006:	ff 92       	push	r15
    6008:	0f 93       	push	r16
    600a:	1f 93       	push	r17
    600c:	cf 93       	push	r28
    600e:	df 93       	push	r29
    6010:	cd b7       	in	r28, 0x3d	; 61
    6012:	de b7       	in	r29, 0x3e	; 62
    6014:	a0 97       	sbiw	r28, 0x20	; 32
    6016:	0f b6       	in	r0, 0x3f	; 63
    6018:	f8 94       	cli
    601a:	de bf       	out	0x3e, r29	; 62
    601c:	0f be       	out	0x3f, r0	; 63
    601e:	cd bf       	out	0x3d, r28	; 61
    6020:	fe 01       	movw	r30, r28
    6022:	31 96       	adiw	r30, 0x01	; 1
    6024:	80 e2       	ldi	r24, 0x20	; 32
    6026:	df 01       	movw	r26, r30
    6028:	1d 92       	st	X+, r1
    602a:	8a 95       	dec	r24
    602c:	e9 f7       	brne	.-6      	; 0x6028 <_Z22check_pending_hex_datav+0x2a>
    602e:	00 e0       	ldi	r16, 0x00	; 0
    6030:	10 e0       	ldi	r17, 0x00	; 0
    6032:	0f 2e       	mov	r0, r31
    6034:	c1 2c       	mov	r12, r1
    6036:	d1 2c       	mov	r13, r1
    6038:	f0 e6       	ldi	r31, 0x60	; 96
    603a:	ef 2e       	mov	r14, r31
    603c:	f1 2c       	mov	r15, r1
    603e:	f0 2d       	mov	r31, r0
    6040:	a8 95       	wdr
    6042:	ae 01       	movw	r20, r28
    6044:	4f 5f       	subi	r20, 0xFF	; 255
    6046:	5f 4f       	sbci	r21, 0xFF	; 255
    6048:	c7 01       	movw	r24, r14
    604a:	b6 01       	movw	r22, r12
    604c:	0e 94 bb 1b 	call	0x3776	; 0x3776 <_Z19read_flash_file_rowmPh>
    6050:	89 81       	ldd	r24, Y+1	; 0x01
    6052:	8a 33       	cpi	r24, 0x3A	; 58
    6054:	d1 f4       	brne	.+52     	; 0x608a <_Z22check_pending_hex_datav+0x8c>
    6056:	6a 81       	ldd	r22, Y+2	; 0x02
    6058:	e6 e0       	ldi	r30, 0x06	; 6
    605a:	f0 e0       	ldi	r31, 0x00	; 0
    605c:	ec 0f       	add	r30, r28
    605e:	fd 1f       	adc	r31, r29
    6060:	e6 0f       	add	r30, r22
    6062:	f1 1d       	adc	r31, r1
    6064:	b0 80       	ld	r11, Z
    6066:	6c 5f       	subi	r22, 0xFC	; 252
    6068:	ce 01       	movw	r24, r28
    606a:	02 96       	adiw	r24, 0x02	; 2
    606c:	0e 94 56 14 	call	0x28ac	; 0x28ac <_Z11getChecksumPhc>
    6070:	b8 12       	cpse	r11, r24
    6072:	0b c0       	rjmp	.+22     	; 0x608a <_Z22check_pending_hex_datav+0x8c>
    6074:	b0 e2       	ldi	r27, 0x20	; 32
    6076:	cb 0e       	add	r12, r27
    6078:	d1 1c       	adc	r13, r1
    607a:	e1 1c       	adc	r14, r1
    607c:	f1 1c       	adc	r15, r1
    607e:	0f 5f       	subi	r16, 0xFF	; 255
    6080:	1f 4f       	sbci	r17, 0xFF	; 255
    6082:	8a 81       	ldd	r24, Y+2	; 0x02
    6084:	81 50       	subi	r24, 0x01	; 1
    6086:	8e 3f       	cpi	r24, 0xFE	; 254
    6088:	d8 f2       	brcs	.-74     	; 0x6040 <_Z22check_pending_hex_datav+0x42>
    608a:	8a 81       	ldd	r24, Y+2	; 0x02
    608c:	8f 3f       	cpi	r24, 0xFF	; 255
    608e:	69 f4       	brne	.+26     	; 0x60aa <_Z22check_pending_hex_datav+0xac>
    6090:	01 15       	cp	r16, r1
    6092:	11 05       	cpc	r17, r1
    6094:	61 f0       	breq	.+24     	; 0x60ae <_Z22check_pending_hex_datav+0xb0>
    6096:	c0 92 fe 12 	sts	0x12FE, r12	; 0x8012fe <flash_hexfile>
    609a:	d0 92 ff 12 	sts	0x12FF, r13	; 0x8012ff <flash_hexfile+0x1>
    609e:	e0 92 00 13 	sts	0x1300, r14	; 0x801300 <flash_hexfile+0x2>
    60a2:	f0 92 01 13 	sts	0x1301, r15	; 0x801301 <flash_hexfile+0x3>
    60a6:	81 e0       	ldi	r24, 0x01	; 1
    60a8:	03 c0       	rjmp	.+6      	; 0x60b0 <_Z22check_pending_hex_datav+0xb2>
    60aa:	80 e0       	ldi	r24, 0x00	; 0
    60ac:	01 c0       	rjmp	.+2      	; 0x60b0 <_Z22check_pending_hex_datav+0xb2>
    60ae:	80 e0       	ldi	r24, 0x00	; 0
    60b0:	10 93 03 13 	sts	0x1303, r17	; 0x801303 <flash_hexfile+0x5>
    60b4:	00 93 02 13 	sts	0x1302, r16	; 0x801302 <flash_hexfile+0x4>
    60b8:	a0 96       	adiw	r28, 0x20	; 32
    60ba:	0f b6       	in	r0, 0x3f	; 63
    60bc:	f8 94       	cli
    60be:	de bf       	out	0x3e, r29	; 62
    60c0:	0f be       	out	0x3f, r0	; 63
    60c2:	cd bf       	out	0x3d, r28	; 61
    60c4:	df 91       	pop	r29
    60c6:	cf 91       	pop	r28
    60c8:	1f 91       	pop	r17
    60ca:	0f 91       	pop	r16
    60cc:	ff 90       	pop	r15
    60ce:	ef 90       	pop	r14
    60d0:	df 90       	pop	r13
    60d2:	cf 90       	pop	r12
    60d4:	bf 90       	pop	r11
    60d6:	08 95       	ret

000060d8 <_Z24set_flash_file_rqst_type26hex_file_updt_gprs_state_t>:
    60d8:	80 93 05 13 	sts	0x1305, r24	; 0x801305 <flash_hexfile+0x7>
    60dc:	08 95       	ret

000060de <_Z24get_flash_file_rqst_typev>:
    60de:	80 91 05 13 	lds	r24, 0x1305	; 0x801305 <flash_hexfile+0x7>
    60e2:	08 95       	ret

000060e4 <_Z22get_online_cfg_ver_cntv>:
    60e4:	80 91 fd 12 	lds	r24, 0x12FD	; 0x8012fd <e2p_online_cnfg>
    60e8:	08 95       	ret

000060ea <_Z22set_online_cfg_ver_cnth>:
    60ea:	80 93 fd 12 	sts	0x12FD, r24	; 0x8012fd <e2p_online_cnfg>
    60ee:	08 95       	ret

000060f0 <_Z22get_hex_file_updt_modev>:
}

hex_file_updt_mode_t get_hex_file_updt_mode(void)
{
	return flash_hexfile.hex_file_updt_mode;
}
    60f0:	80 91 06 13 	lds	r24, 0x1306	; 0x801306 <flash_hexfile+0x8>
    60f4:	08 95       	ret

000060f6 <_Z22set_hex_file_updt_mode20hex_file_updt_mode_t>:

void set_hex_file_updt_mode(hex_file_updt_mode_t mode)
{
	flash_hexfile.hex_file_updt_mode = mode;
    60f6:	80 93 06 13 	sts	0x1306, r24	; 0x801306 <flash_hexfile+0x8>
    60fa:	08 95       	ret

000060fc <_Z19GLCD_InitalizePortsv>:
//
//-------------------------------------------------------------------------------------------------
unsigned char GLCD_ReadByteFromROMMemory(char *ptr)
{
	return pgm_read_byte(ptr);
}
    60fc:	8f ef       	ldi	r24, 0xFF	; 255
    60fe:	81 b9       	out	0x01, r24	; 1
    6100:	12 b8       	out	0x02, r1	; 2
    6102:	8a b1       	in	r24, 0x0a	; 10
    6104:	80 6c       	ori	r24, 0xC0	; 192
    6106:	8a b9       	out	0x0a, r24	; 10
    6108:	8a b1       	in	r24, 0x0a	; 10
    610a:	80 63       	ori	r24, 0x30	; 48
    610c:	8a b9       	out	0x0a, r24	; 10
    610e:	8b b1       	in	r24, 0x0b	; 11
    6110:	80 6c       	ori	r24, 0xC0	; 192
    6112:	8b b9       	out	0x0b, r24	; 11
    6114:	8b b1       	in	r24, 0x0b	; 11
    6116:	80 63       	ori	r24, 0x30	; 48
    6118:	8b b9       	out	0x0b, r24	; 11
    611a:	08 95       	ret

0000611c <_Z21GLCD_EnableControllerh>:
    611c:	88 23       	and	r24, r24
    611e:	19 f0       	breq	.+6      	; 0x6126 <_Z21GLCD_EnableControllerh+0xa>
    6120:	81 30       	cpi	r24, 0x01	; 1
    6122:	19 f0       	breq	.+6      	; 0x612a <_Z21GLCD_EnableControllerh+0xe>
    6124:	08 95       	ret
    6126:	5f 98       	cbi	0x0b, 7	; 11
    6128:	08 95       	ret
    612a:	5e 98       	cbi	0x0b, 6	; 11
    612c:	08 95       	ret

0000612e <_Z22GLCD_DisableControllerh>:
    612e:	88 23       	and	r24, r24
    6130:	19 f0       	breq	.+6      	; 0x6138 <_Z22GLCD_DisableControllerh+0xa>
    6132:	81 30       	cpi	r24, 0x01	; 1
    6134:	19 f0       	breq	.+6      	; 0x613c <_Z22GLCD_DisableControllerh+0xe>
    6136:	08 95       	ret
    6138:	5f 9a       	sbi	0x0b, 7	; 11
    613a:	08 95       	ret
    613c:	5e 9a       	sbi	0x0b, 6	; 11
    613e:	08 95       	ret

00006140 <_Z17GLCD_WriteCommandhh>:
    6140:	cf 93       	push	r28
    6142:	df 93       	push	r29
    6144:	d8 2f       	mov	r29, r24
    6146:	c6 2f       	mov	r28, r22
    6148:	5c 98       	cbi	0x0b, 4	; 11
    614a:	86 2f       	mov	r24, r22
    614c:	e7 df       	rcall	.-50     	; 0x611c <_Z21GLCD_EnableControllerh>
    614e:	d2 b9       	out	0x02, r29	; 2
    6150:	5d 9a       	sbi	0x0b, 5	; 11
    6152:	85 e0       	ldi	r24, 0x05	; 5
    6154:	8a 95       	dec	r24
    6156:	f1 f7       	brne	.-4      	; 0x6154 <_Z17GLCD_WriteCommandhh+0x14>
    6158:	5d 98       	cbi	0x0b, 5	; 11
    615a:	8c 2f       	mov	r24, r28
    615c:	e8 df       	rcall	.-48     	; 0x612e <_Z22GLCD_DisableControllerh>
    615e:	85 e0       	ldi	r24, 0x05	; 5
    6160:	8a 95       	dec	r24
    6162:	f1 f7       	brne	.-4      	; 0x6160 <_Z17GLCD_WriteCommandhh+0x20>
    6164:	df 91       	pop	r29
    6166:	cf 91       	pop	r28
    6168:	08 95       	ret

0000616a <_Z14GLCD_WriteDatah>:
    616a:	cf 93       	push	r28
    616c:	c8 2f       	mov	r28, r24
    616e:	5c 9a       	sbi	0x0b, 4	; 11
    6170:	80 91 08 13 	lds	r24, 0x1308	; 0x801308 <screen_x>
    6174:	82 95       	swap	r24
    6176:	86 95       	lsr	r24
    6178:	86 95       	lsr	r24
    617a:	83 70       	andi	r24, 0x03	; 3
    617c:	cf df       	rcall	.-98     	; 0x611c <_Z21GLCD_EnableControllerh>
    617e:	c2 b9       	out	0x02, r28	; 2
    6180:	5d 9a       	sbi	0x0b, 5	; 11
    6182:	85 e0       	ldi	r24, 0x05	; 5
    6184:	8a 95       	dec	r24
    6186:	f1 f7       	brne	.-4      	; 0x6184 <_Z14GLCD_WriteDatah+0x1a>
    6188:	5d 98       	cbi	0x0b, 5	; 11
    618a:	80 91 08 13 	lds	r24, 0x1308	; 0x801308 <screen_x>
    618e:	82 95       	swap	r24
    6190:	86 95       	lsr	r24
    6192:	86 95       	lsr	r24
    6194:	83 70       	andi	r24, 0x03	; 3
    6196:	cb df       	rcall	.-106    	; 0x612e <_Z22GLCD_DisableControllerh>
    6198:	80 91 08 13 	lds	r24, 0x1308	; 0x801308 <screen_x>
    619c:	8f 5f       	subi	r24, 0xFF	; 255
    619e:	1a f0       	brmi	.+6      	; 0x61a6 <_Z14GLCD_WriteDatah+0x3c>
    61a0:	80 93 08 13 	sts	0x1308, r24	; 0x801308 <screen_x>
    61a4:	02 c0       	rjmp	.+4      	; 0x61aa <_Z14GLCD_WriteDatah+0x40>
    61a6:	10 92 08 13 	sts	0x1308, r1	; 0x801308 <screen_x>
    61aa:	85 e0       	ldi	r24, 0x05	; 5
    61ac:	8a 95       	dec	r24
    61ae:	f1 f7       	brne	.-4      	; 0x61ac <_Z14GLCD_WriteDatah+0x42>
    61b0:	cf 91       	pop	r28
    61b2:	08 95       	ret

000061b4 <_Z14GLCD_Initalizev>:
//
//-------------------------------------------------------------------------------------------------
void GLCD_Initalize(void)
{
	unsigned char i;
	GLCD_InitalizePorts();
    61b4:	a3 df       	rcall	.-186    	; 0x60fc <_Z19GLCD_InitalizePortsv>
	
	for(i = 0; i < 2; i++)
	{
		GLCD_WriteCommand((DISPLAY_ON_CMD | ON), i);
    61b6:	60 e0       	ldi	r22, 0x00	; 0
    61b8:	8f e3       	ldi	r24, 0x3F	; 63
    61ba:	c2 df       	rcall	.-124    	; 0x6140 <_Z17GLCD_WriteCommandhh>
    61bc:	61 e0       	ldi	r22, 0x01	; 1
    61be:	8f e3       	ldi	r24, 0x3F	; 63
    61c0:	bf cf       	rjmp	.-130    	; 0x6140 <_Z17GLCD_WriteCommandhh>
    61c2:	08 95       	ret

000061c4 <_Z9GLCD_GoTohh>:
}
//-------------------------------------------------------------------------------------------------
//
//-------------------------------------------------------------------------------------------------
void GLCD_GoTo(unsigned char x, unsigned char y)
{
    61c4:	0f 93       	push	r16
    61c6:	1f 93       	push	r17
    61c8:	cf 93       	push	r28
    61ca:	df 93       	push	r29
    61cc:	18 2f       	mov	r17, r24
	unsigned char i;
	screen_x = x;
    61ce:	80 93 08 13 	sts	0x1308, r24	; 0x801308 <screen_x>
	screen_y = y;
    61d2:	60 93 07 13 	sts	0x1307, r22	; 0x801307 <screen_y>

	for(i = 0; i < (KS0108_SCREEN_WIDTH / 32); i++)//64
    61d6:	c0 e0       	ldi	r28, 0x00	; 0
	{
		GLCD_WriteCommand((DISPLAY_SET_Y | 0), i);
		GLCD_WriteCommand((DISPLAY_SET_X | y), i);
    61d8:	d6 2f       	mov	r29, r22
    61da:	d8 6b       	ori	r29, 0xB8	; 184
	screen_x = x;
	screen_y = y;

	for(i = 0; i < (KS0108_SCREEN_WIDTH / 32); i++)//64
	{
		GLCD_WriteCommand((DISPLAY_SET_Y | 0), i);
    61dc:	6c 2f       	mov	r22, r28
    61de:	80 e4       	ldi	r24, 0x40	; 64
    61e0:	af df       	rcall	.-162    	; 0x6140 <_Z17GLCD_WriteCommandhh>
		GLCD_WriteCommand((DISPLAY_SET_X | y), i);
    61e2:	6c 2f       	mov	r22, r28
    61e4:	8d 2f       	mov	r24, r29
    61e6:	ac df       	rcall	.-168    	; 0x6140 <_Z17GLCD_WriteCommandhh>
		GLCD_WriteCommand((DISPLAY_START_LINE | 0), i);
    61e8:	6c 2f       	mov	r22, r28
    61ea:	80 ec       	ldi	r24, 0xC0	; 192
    61ec:	a9 df       	rcall	.-174    	; 0x6140 <_Z17GLCD_WriteCommandhh>
{
	unsigned char i;
	screen_x = x;
	screen_y = y;

	for(i = 0; i < (KS0108_SCREEN_WIDTH / 32); i++)//64
    61ee:	cf 5f       	subi	r28, 0xFF	; 255
    61f0:	c4 30       	cpi	r28, 0x04	; 4
    61f2:	a1 f7       	brne	.-24     	; 0x61dc <_Z9GLCD_GoTohh+0x18>
	{
		GLCD_WriteCommand((DISPLAY_SET_Y | 0), i);
		GLCD_WriteCommand((DISPLAY_SET_X | y), i);
		GLCD_WriteCommand((DISPLAY_START_LINE | 0), i);
	}
	GLCD_WriteCommand((DISPLAY_SET_Y | (x % 64)), (x / 64));
    61f4:	c1 2f       	mov	r28, r17
    61f6:	c2 95       	swap	r28
    61f8:	c6 95       	lsr	r28
    61fa:	c6 95       	lsr	r28
    61fc:	c3 70       	andi	r28, 0x03	; 3
    61fe:	81 2f       	mov	r24, r17
    6200:	8f 73       	andi	r24, 0x3F	; 63
    6202:	6c 2f       	mov	r22, r28
    6204:	80 64       	ori	r24, 0x40	; 64
	GLCD_WriteCommand((DISPLAY_SET_X | y), (x / 64));
    6206:	9c df       	rcall	.-200    	; 0x6140 <_Z17GLCD_WriteCommandhh>
    6208:	6c 2f       	mov	r22, r28
    620a:	8d 2f       	mov	r24, r29
    620c:	99 df       	rcall	.-206    	; 0x6140 <_Z17GLCD_WriteCommandhh>
	
}
    620e:	df 91       	pop	r29
    6210:	cf 91       	pop	r28
    6212:	1f 91       	pop	r17
    6214:	0f 91       	pop	r16
    6216:	08 95       	ret

00006218 <_Z16GLCD_ClearScreenv>:
//-------------------------------------------------------------------------------------------------
//
//-------------------------------------------------------------------------------------------------
void GLCD_ClearScreen(void)
{
    6218:	cf 93       	push	r28
    621a:	df 93       	push	r29
	unsigned char i, j;
	for(j = 0; j < (KS0108_SCREEN_HEIGHT / 8); j++)
    621c:	d0 e0       	ldi	r29, 0x00	; 0
	{
		GLCD_GoTo(0,j);
    621e:	6d 2f       	mov	r22, r29
    6220:	80 e0       	ldi	r24, 0x00	; 0
    6222:	d0 df       	rcall	.-96     	; 0x61c4 <_Z9GLCD_GoTohh>
    6224:	c0 e0       	ldi	r28, 0x00	; 0
		for(i = 0; i < KS0108_SCREEN_WIDTH; i++)
			GLCD_WriteData(0x00);
    6226:	80 e0       	ldi	r24, 0x00	; 0
    6228:	a0 df       	rcall	.-192    	; 0x616a <_Z14GLCD_WriteDatah>
{
	unsigned char i, j;
	for(j = 0; j < (KS0108_SCREEN_HEIGHT / 8); j++)
	{
		GLCD_GoTo(0,j);
		for(i = 0; i < KS0108_SCREEN_WIDTH; i++)
    622a:	cf 5f       	subi	r28, 0xFF	; 255
    622c:	c0 38       	cpi	r28, 0x80	; 128
    622e:	d9 f7       	brne	.-10     	; 0x6226 <_Z16GLCD_ClearScreenv+0xe>
//
//-------------------------------------------------------------------------------------------------
void GLCD_ClearScreen(void)
{
	unsigned char i, j;
	for(j = 0; j < (KS0108_SCREEN_HEIGHT / 8); j++)
    6230:	df 5f       	subi	r29, 0xFF	; 255
    6232:	d8 30       	cpi	r29, 0x08	; 8
    6234:	a1 f7       	brne	.-24     	; 0x621e <_Z16GLCD_ClearScreenv+0x6>
		GLCD_GoTo(0,j);
		for(i = 0; i < KS0108_SCREEN_WIDTH; i++)
			GLCD_WriteData(0x00);
	}
	//GLCD_GoTo(0, 0);
}
    6236:	df 91       	pop	r29
    6238:	cf 91       	pop	r28
    623a:	08 95       	ret

0000623c <_Z14GLCD_WriteCharc>:
//-------------------------------------------------------------------------------------------------
//
//-------------------------------------------------------------------------------------------------
void GLCD_WriteChar(char charToWrite)
{
    623c:	0f 93       	push	r16
    623e:	1f 93       	push	r17
    6240:	cf 93       	push	r28
    6242:	df 93       	push	r29
	int i;
	charToWrite -= ' ';			//' ' == 32
	for(i = 0; i < 5; i++)
		GLCD_WriteData(GLCD_ReadByteFromROMMemory((char *)(font5x8 + (5 * charToWrite) + i)));
    6244:	80 52       	subi	r24, 0x20	; 32
    6246:	90 e0       	ldi	r25, 0x00	; 0
    6248:	8c 01       	movw	r16, r24
    624a:	00 0f       	add	r16, r16
    624c:	11 1f       	adc	r17, r17
    624e:	00 0f       	add	r16, r16
    6250:	11 1f       	adc	r17, r17
    6252:	08 0f       	add	r16, r24
    6254:	19 1f       	adc	r17, r25
    6256:	e8 01       	movw	r28, r16
    6258:	ce 5c       	subi	r28, 0xCE	; 206
    625a:	dd 4f       	sbci	r29, 0xFD	; 253
    625c:	09 5c       	subi	r16, 0xC9	; 201
    625e:	1d 4f       	sbci	r17, 0xFD	; 253
//-------------------------------------------------------------------------------------------------
//
//-------------------------------------------------------------------------------------------------
unsigned char GLCD_ReadByteFromROMMemory(char *ptr)
{
	return pgm_read_byte(ptr);
    6260:	fe 01       	movw	r30, r28
    6262:	84 91       	lpm	r24, Z
void GLCD_WriteChar(char charToWrite)
{
	int i;
	charToWrite -= ' ';			//' ' == 32
	for(i = 0; i < 5; i++)
		GLCD_WriteData(GLCD_ReadByteFromROMMemory((char *)(font5x8 + (5 * charToWrite) + i)));
    6264:	82 df       	rcall	.-252    	; 0x616a <_Z14GLCD_WriteDatah>
    6266:	21 96       	adiw	r28, 0x01	; 1
//-------------------------------------------------------------------------------------------------
void GLCD_WriteChar(char charToWrite)
{
	int i;
	charToWrite -= ' ';			//' ' == 32
	for(i = 0; i < 5; i++)
    6268:	c0 17       	cp	r28, r16
    626a:	d1 07       	cpc	r29, r17
    626c:	c9 f7       	brne	.-14     	; 0x6260 <_Z14GLCD_WriteCharc+0x24>
		GLCD_WriteData(GLCD_ReadByteFromROMMemory((char *)(font5x8 + (5 * charToWrite) + i)));
	GLCD_WriteData(0x00);
    626e:	80 e0       	ldi	r24, 0x00	; 0
    6270:	7c df       	rcall	.-264    	; 0x616a <_Z14GLCD_WriteDatah>
}
    6272:	df 91       	pop	r29
    6274:	cf 91       	pop	r28
    6276:	1f 91       	pop	r17
    6278:	0f 91       	pop	r16
    627a:	08 95       	ret

0000627c <_Z18GLCD_WriteChar_invc>:
//-------------------------------------------------------------------------------------------------
//
//-------------------------------------------------------------------------------------------------
void GLCD_WriteChar_inv(char charToWrite)
{
    627c:	0f 93       	push	r16
    627e:	1f 93       	push	r17
    6280:	cf 93       	push	r28
    6282:	df 93       	push	r29
	int i;
	charToWrite -= ' ';			//' ' == 32
	for(i = 0; i < 5; i++)
		GLCD_WriteData(~GLCD_ReadByteFromROMMemory((char *)(font5x8 + (5 * charToWrite) + i)));
    6284:	80 52       	subi	r24, 0x20	; 32
    6286:	90 e0       	ldi	r25, 0x00	; 0
    6288:	8c 01       	movw	r16, r24
    628a:	00 0f       	add	r16, r16
    628c:	11 1f       	adc	r17, r17
    628e:	00 0f       	add	r16, r16
    6290:	11 1f       	adc	r17, r17
    6292:	08 0f       	add	r16, r24
    6294:	19 1f       	adc	r17, r25
    6296:	e8 01       	movw	r28, r16
    6298:	ce 5c       	subi	r28, 0xCE	; 206
    629a:	dd 4f       	sbci	r29, 0xFD	; 253
    629c:	09 5c       	subi	r16, 0xC9	; 201
    629e:	1d 4f       	sbci	r17, 0xFD	; 253
//-------------------------------------------------------------------------------------------------
//
//-------------------------------------------------------------------------------------------------
unsigned char GLCD_ReadByteFromROMMemory(char *ptr)
{
	return pgm_read_byte(ptr);
    62a0:	fe 01       	movw	r30, r28
    62a2:	84 91       	lpm	r24, Z
void GLCD_WriteChar_inv(char charToWrite)
{
	int i;
	charToWrite -= ' ';			//' ' == 32
	for(i = 0; i < 5; i++)
		GLCD_WriteData(~GLCD_ReadByteFromROMMemory((char *)(font5x8 + (5 * charToWrite) + i)));
    62a4:	80 95       	com	r24
    62a6:	61 df       	rcall	.-318    	; 0x616a <_Z14GLCD_WriteDatah>
    62a8:	21 96       	adiw	r28, 0x01	; 1
//-------------------------------------------------------------------------------------------------
void GLCD_WriteChar_inv(char charToWrite)
{
	int i;
	charToWrite -= ' ';			//' ' == 32
	for(i = 0; i < 5; i++)
    62aa:	c0 17       	cp	r28, r16
    62ac:	d1 07       	cpc	r29, r17
    62ae:	c1 f7       	brne	.-16     	; 0x62a0 <_Z18GLCD_WriteChar_invc+0x24>
		GLCD_WriteData(~GLCD_ReadByteFromROMMemory((char *)(font5x8 + (5 * charToWrite) + i)));
	GLCD_WriteData(~0x00);
    62b0:	8f ef       	ldi	r24, 0xFF	; 255
    62b2:	5b df       	rcall	.-330    	; 0x616a <_Z14GLCD_WriteDatah>
}
    62b4:	df 91       	pop	r29
    62b6:	cf 91       	pop	r28
    62b8:	1f 91       	pop	r17
    62ba:	0f 91       	pop	r16
    62bc:	08 95       	ret

000062be <_Z16GLCD_WriteStringPc>:
//-------------------------------------------------------------------------------------------------
//
//-------------------------------------------------------------------------------------------------
void GLCD_WriteString(char * stringToWrite)
{
    62be:	cf 93       	push	r28
    62c0:	df 93       	push	r29
    62c2:	ec 01       	movw	r28, r24
	while(*stringToWrite)
    62c4:	88 81       	ld	r24, Y
    62c6:	88 23       	and	r24, r24
    62c8:	29 f0       	breq	.+10     	; 0x62d4 <_Z16GLCD_WriteStringPc+0x16>
    62ca:	21 96       	adiw	r28, 0x01	; 1
		GLCD_WriteChar(*stringToWrite++);
    62cc:	b7 df       	rcall	.-146    	; 0x623c <_Z14GLCD_WriteCharc>
//-------------------------------------------------------------------------------------------------
//
//-------------------------------------------------------------------------------------------------
void GLCD_WriteString(char * stringToWrite)
{
	while(*stringToWrite)
    62ce:	89 91       	ld	r24, Y+
    62d0:	81 11       	cpse	r24, r1
    62d2:	fc cf       	rjmp	.-8      	; 0x62cc <_Z16GLCD_WriteStringPc+0xe>
		GLCD_WriteChar(*stringToWrite++);
}
    62d4:	df 91       	pop	r29
    62d6:	cf 91       	pop	r28
    62d8:	08 95       	ret

000062da <_Z20GLCD_WriteString_invPc>:

//-------------------------------------------------------------------------------------------------
//
//-------------------------------------------------------------------------------------------------
void GLCD_WriteString_inv(char * stringToWrite)
{
    62da:	cf 93       	push	r28
    62dc:	df 93       	push	r29
    62de:	ec 01       	movw	r28, r24
	while(*stringToWrite)
    62e0:	88 81       	ld	r24, Y
    62e2:	88 23       	and	r24, r24
    62e4:	29 f0       	breq	.+10     	; 0x62f0 <_Z20GLCD_WriteString_invPc+0x16>
    62e6:	21 96       	adiw	r28, 0x01	; 1
		GLCD_WriteChar_inv(*stringToWrite++);
    62e8:	c9 df       	rcall	.-110    	; 0x627c <_Z18GLCD_WriteChar_invc>
//-------------------------------------------------------------------------------------------------
//
//-------------------------------------------------------------------------------------------------
void GLCD_WriteString_inv(char * stringToWrite)
{
	while(*stringToWrite)
    62ea:	89 91       	ld	r24, Y+
    62ec:	81 11       	cpse	r24, r1
    62ee:	fc cf       	rjmp	.-8      	; 0x62e8 <_Z20GLCD_WriteString_invPc+0xe>
		GLCD_WriteChar_inv(*stringToWrite++);
}
    62f0:	df 91       	pop	r29
    62f2:	cf 91       	pop	r28
    62f4:	08 95       	ret

000062f6 <_Z7I2CInitv>:
}

void I2CClose()
{
	//Disable the module
	TWCR&=(~(1<<TWEN));
    62f6:	82 e0       	ldi	r24, 0x02	; 2
    62f8:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    62fc:	e9 eb       	ldi	r30, 0xB9	; 185
    62fe:	f0 e0       	ldi	r31, 0x00	; 0
    6300:	80 81       	ld	r24, Z
    6302:	83 60       	ori	r24, 0x03	; 3
    6304:	80 83       	st	Z, r24
    6306:	ec eb       	ldi	r30, 0xBC	; 188
    6308:	f0 e0       	ldi	r31, 0x00	; 0
    630a:	80 81       	ld	r24, Z
    630c:	84 60       	ori	r24, 0x04	; 4
    630e:	80 83       	st	Z, r24
    6310:	08 95       	ret

00006312 <_Z9I2CDeinitv>:
    6312:	10 92 b8 00 	sts	0x00B8, r1	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    6316:	e9 eb       	ldi	r30, 0xB9	; 185
    6318:	f0 e0       	ldi	r31, 0x00	; 0
    631a:	80 81       	ld	r24, Z
    631c:	8c 7f       	andi	r24, 0xFC	; 252
    631e:	80 83       	st	Z, r24
    6320:	ec eb       	ldi	r30, 0xBC	; 188
    6322:	f0 e0       	ldi	r31, 0x00	; 0
    6324:	80 81       	ld	r24, Z
    6326:	8b 7f       	andi	r24, 0xFB	; 251
    6328:	80 83       	st	Z, r24
    632a:	08 95       	ret

0000632c <_Z8I2CResetv>:
		return FALSE;	//Error
	
}
void I2CReset(void)
{
	TWCR = 0; //releases SDA and SCL lines to high impedance
    632c:	ec eb       	ldi	r30, 0xBC	; 188
    632e:	f0 e0       	ldi	r31, 0x00	; 0
    6330:	10 82       	st	Z, r1
//	TWCR = _BV(TWEN) | _BV(TWEA); //reinitialize TWI
	TWCR=(1<<TWINT)|(1<<TWEN);
    6332:	84 e8       	ldi	r24, 0x84	; 132
    6334:	80 83       	st	Z, r24
    6336:	08 95       	ret

00006338 <_Z8I2CStartv>:
	//Disable the module
	TWCR&=(~(1<<TWEN));
}

uint8_t I2CStart()				// HJ 05-07-2017   Repalce void with uint8_t
{
    6338:	ff 92       	push	r15
    633a:	0f 93       	push	r16
    633c:	1f 93       	push	r17
    633e:	cf 93       	push	r28
    6340:	df 93       	push	r29
	int cnt = 0, retry_cnt = 0;
	//Put Start Condition on Bus
	TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWSTA);
    6342:	84 ea       	ldi	r24, 0xA4	; 164
    6344:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
	TWCR&=(~(1<<TWEN));
}

uint8_t I2CStart()				// HJ 05-07-2017   Repalce void with uint8_t
{
	int cnt = 0, retry_cnt = 0;
    6348:	40 e0       	ldi	r20, 0x00	; 0
    634a:	50 e0       	ldi	r21, 0x00	; 0
	//Put Start Condition on Bus
	TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWSTA);

	//Poll Till Done
	while(!(TWCR & (1<<TWINT)))
    634c:	cc eb       	ldi	r28, 0xBC	; 188
    634e:	d0 e0       	ldi	r29, 0x00	; 0
			retry_cnt++;
			I2CReset();
			cnt = 0;
			
			//Give Start Condition again
			TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWSTA); //
    6350:	14 ea       	ldi	r17, 0xA4	; 164
		{
			if(retry_cnt)
			{
				return FALSE;
			}
			retry_cnt++;
    6352:	01 e0       	ldi	r16, 0x01	; 1
    6354:	f1 2c       	mov	r15, r1
	TWCR&=(~(1<<TWEN));
}

uint8_t I2CStart()				// HJ 05-07-2017   Repalce void with uint8_t
{
	int cnt = 0, retry_cnt = 0;
    6356:	88 ee       	ldi	r24, 0xE8	; 232
    6358:	93 e0       	ldi	r25, 0x03	; 3
	//Put Start Condition on Bus
	TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWSTA);

	//Poll Till Done
	while(!(TWCR & (1<<TWINT)))
    635a:	28 81       	ld	r18, Y
    635c:	22 23       	and	r18, r18
    635e:	6c f0       	brlt	.+26     	; 0x637a <_Z8I2CStartv+0x42>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    6360:	28 e1       	ldi	r18, 0x18	; 24
    6362:	2a 95       	dec	r18
    6364:	f1 f7       	brne	.-4      	; 0x6362 <_Z8I2CStartv+0x2a>
    6366:	00 c0       	rjmp	.+0      	; 0x6368 <_Z8I2CStartv+0x30>
    6368:	01 97       	sbiw	r24, 0x01	; 1
	// Added Failsafe and timeout routines
	{
		cnt++;
		_delay_us(10);
		if (cnt >= 1000)
    636a:	b9 f7       	brne	.-18     	; 0x635a <_Z8I2CStartv+0x22>
		{
			if(retry_cnt)
    636c:	45 2b       	or	r20, r21
    636e:	39 f4       	brne	.+14     	; 0x637e <_Z8I2CStartv+0x46>
			{
				return FALSE;
			}
			retry_cnt++;
			I2CReset();
    6370:	dd df       	rcall	.-70     	; 0x632c <_Z8I2CResetv>
			cnt = 0;
			
			//Give Start Condition again
			TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWSTA); //
    6372:	18 83       	st	Y, r17
		{
			if(retry_cnt)
			{
				return FALSE;
			}
			retry_cnt++;
    6374:	40 2f       	mov	r20, r16
    6376:	5f 2d       	mov	r21, r15
    6378:	ee cf       	rjmp	.-36     	; 0x6356 <_Z8I2CStartv+0x1e>
			//Give Start Condition again
			TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWSTA); //
			//break;
		}
	}
	return TRUE;
    637a:	81 e0       	ldi	r24, 0x01	; 1
    637c:	01 c0       	rjmp	.+2      	; 0x6380 <_Z8I2CStartv+0x48>
		_delay_us(10);
		if (cnt >= 1000)
		{
			if(retry_cnt)
			{
				return FALSE;
    637e:	80 e0       	ldi	r24, 0x00	; 0
			TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWSTA); //
			//break;
		}
	}
	return TRUE;
}
    6380:	df 91       	pop	r29
    6382:	cf 91       	pop	r28
    6384:	1f 91       	pop	r17
    6386:	0f 91       	pop	r16
    6388:	ff 90       	pop	r15
    638a:	08 95       	ret

0000638c <_Z7I2CStopv>:

uint8_t I2CStop()			// HJ 05-07-2017   Repalce void with uint8_t
{
    638c:	ff 92       	push	r15
    638e:	0f 93       	push	r16
    6390:	1f 93       	push	r17
    6392:	cf 93       	push	r28
    6394:	df 93       	push	r29
	int cnt = 0, retry_cnt = 0;
	//Put Stop Condition on bus
	TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
    6396:	84 e9       	ldi	r24, 0x94	; 148
    6398:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
	return TRUE;
}

uint8_t I2CStop()			// HJ 05-07-2017   Repalce void with uint8_t
{
	int cnt = 0, retry_cnt = 0;
    639c:	40 e0       	ldi	r20, 0x00	; 0
    639e:	50 e0       	ldi	r21, 0x00	; 0
	//Put Stop Condition on bus
	TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
	
	//Wait for STOP to finish
	while(TWCR & (1<<TWSTO))
    63a0:	cc eb       	ldi	r28, 0xBC	; 188
    63a2:	d0 e0       	ldi	r29, 0x00	; 0
			retry_cnt++;
			I2CReset();
			cnt = 0;
			
			//Give Stop Condition again
			TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
    63a4:	14 e9       	ldi	r17, 0x94	; 148
		{
			if(retry_cnt)
			{
				return FALSE;
			}
			retry_cnt++;
    63a6:	01 e0       	ldi	r16, 0x01	; 1
    63a8:	f1 2c       	mov	r15, r1
	return TRUE;
}

uint8_t I2CStop()			// HJ 05-07-2017   Repalce void with uint8_t
{
	int cnt = 0, retry_cnt = 0;
    63aa:	88 ee       	ldi	r24, 0xE8	; 232
    63ac:	93 e0       	ldi	r25, 0x03	; 3
	//Put Stop Condition on bus
	TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
	
	//Wait for STOP to finish
	while(TWCR & (1<<TWSTO))
    63ae:	28 81       	ld	r18, Y
    63b0:	24 ff       	sbrs	r18, 4
    63b2:	0d c0       	rjmp	.+26     	; 0x63ce <_Z7I2CStopv+0x42>
    63b4:	28 e1       	ldi	r18, 0x18	; 24
    63b6:	2a 95       	dec	r18
    63b8:	f1 f7       	brne	.-4      	; 0x63b6 <_Z7I2CStopv+0x2a>
    63ba:	00 c0       	rjmp	.+0      	; 0x63bc <_Z7I2CStopv+0x30>
    63bc:	01 97       	sbiw	r24, 0x01	; 1
	// Added Failsafe and timeout routines
	{
		cnt++;
		_delay_us(10);
		if (cnt >= 1000)
    63be:	b9 f7       	brne	.-18     	; 0x63ae <_Z7I2CStopv+0x22>
		{
			if(retry_cnt)
    63c0:	45 2b       	or	r20, r21
    63c2:	39 f4       	brne	.+14     	; 0x63d2 <_Z7I2CStopv+0x46>
			{
				return FALSE;
			}
			retry_cnt++;
			I2CReset();
    63c4:	b3 df       	rcall	.-154    	; 0x632c <_Z8I2CResetv>
			cnt = 0;
			
			//Give Stop Condition again
			TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
    63c6:	18 83       	st	Y, r17
		{
			if(retry_cnt)
			{
				return FALSE;
			}
			retry_cnt++;
    63c8:	40 2f       	mov	r20, r16
    63ca:	5f 2d       	mov	r21, r15
    63cc:	ee cf       	rjmp	.-36     	; 0x63aa <_Z7I2CStopv+0x1e>
			//Give Stop Condition again
			TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
			//break;
		}
	}
	return TRUE;
    63ce:	81 e0       	ldi	r24, 0x01	; 1
    63d0:	01 c0       	rjmp	.+2      	; 0x63d4 <_Z7I2CStopv+0x48>
		_delay_us(10);
		if (cnt >= 1000)
		{
			if(retry_cnt)
			{
				return FALSE;
    63d2:	80 e0       	ldi	r24, 0x00	; 0
			//break;
		}
	}
	return TRUE;
	//_delay_loop_2(250);
}
    63d4:	df 91       	pop	r29
    63d6:	cf 91       	pop	r28
    63d8:	1f 91       	pop	r17
    63da:	0f 91       	pop	r16
    63dc:	ff 90       	pop	r15
    63de:	08 95       	ret

000063e0 <_Z12I2CWriteByteh>:

uint8_t I2CWriteByte(uint8_t data)
{
    63e0:	0f 93       	push	r16
    63e2:	1f 93       	push	r17
    63e4:	cf 93       	push	r28
    63e6:	df 93       	push	r29
	int cnt = 0, retry_cnt = 0;
	TWDR=data;	
    63e8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>

	//Initiate Transfer
	TWCR=(1<<TWEN)|(1<<TWINT);
    63ec:	84 e8       	ldi	r24, 0x84	; 132
    63ee:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
	//_delay_loop_2(250);
}

uint8_t I2CWriteByte(uint8_t data)
{
	int cnt = 0, retry_cnt = 0;
    63f2:	40 e0       	ldi	r20, 0x00	; 0
    63f4:	50 e0       	ldi	r21, 0x00	; 0

	//Initiate Transfer
	TWCR=(1<<TWEN)|(1<<TWINT);

	//Poll Till Done
	while(!(TWCR & (1<<TWINT)))
    63f6:	cc eb       	ldi	r28, 0xBC	; 188
    63f8:	d0 e0       	ldi	r29, 0x00	; 0
		{
			if(retry_cnt)
			{
				return FALSE;
			}
			retry_cnt++;
    63fa:	01 e0       	ldi	r16, 0x01	; 1
    63fc:	10 e0       	ldi	r17, 0x00	; 0
	//_delay_loop_2(250);
}

uint8_t I2CWriteByte(uint8_t data)
{
	int cnt = 0, retry_cnt = 0;
    63fe:	88 ee       	ldi	r24, 0xE8	; 232
    6400:	93 e0       	ldi	r25, 0x03	; 3

	//Initiate Transfer
	TWCR=(1<<TWEN)|(1<<TWINT);

	//Poll Till Done
	while(!(TWCR & (1<<TWINT)))
    6402:	28 81       	ld	r18, Y
    6404:	22 23       	and	r18, r18
    6406:	64 f0       	brlt	.+24     	; 0x6420 <_Z12I2CWriteByteh+0x40>
    6408:	28 e1       	ldi	r18, 0x18	; 24
    640a:	2a 95       	dec	r18
    640c:	f1 f7       	brne	.-4      	; 0x640a <_Z12I2CWriteByteh+0x2a>
    640e:	00 c0       	rjmp	.+0      	; 0x6410 <_Z12I2CWriteByteh+0x30>
    6410:	01 97       	sbiw	r24, 0x01	; 1
	// Added Failsafe and timeout routines
	{
		cnt++;
		_delay_us(10);
		if (cnt >= 1000)
    6412:	b9 f7       	brne	.-18     	; 0x6402 <_Z12I2CWriteByteh+0x22>
		{
			if(retry_cnt)
    6414:	45 2b       	or	r20, r21
    6416:	d1 f4       	brne	.+52     	; 0x644c <_Z12I2CWriteByteh+0x6c>
			{
				return FALSE;
			}
			retry_cnt++;
			I2CReset();
    6418:	89 df       	rcall	.-238    	; 0x632c <_Z8I2CResetv>
		{
			if(retry_cnt)
			{
				return FALSE;
			}
			retry_cnt++;
    641a:	40 2f       	mov	r20, r16
    641c:	51 2f       	mov	r21, r17
    641e:	ef cf       	rjmp	.-34     	; 0x63fe <_Z12I2CWriteByteh+0x1e>
			cnt = 0;
		}
	}

	//Check Status
	if((TWSR & 0xF8) == 0x18 || (TWSR & 0xF8) == 0x28 || (TWSR & 0xF8) == 0x40)
    6420:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    6424:	88 7f       	andi	r24, 0xF8	; 248
    6426:	88 31       	cpi	r24, 0x18	; 24
    6428:	69 f0       	breq	.+26     	; 0x6444 <_Z12I2CWriteByteh+0x64>
    642a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    642e:	88 7f       	andi	r24, 0xF8	; 248
    6430:	88 32       	cpi	r24, 0x28	; 40
    6432:	51 f0       	breq	.+20     	; 0x6448 <_Z12I2CWriteByteh+0x68>
    6434:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    6438:	98 7f       	andi	r25, 0xF8	; 248
    643a:	81 e0       	ldi	r24, 0x01	; 1
    643c:	90 34       	cpi	r25, 0x40	; 64
    643e:	39 f0       	breq	.+14     	; 0x644e <_Z12I2CWriteByteh+0x6e>
    6440:	80 e0       	ldi	r24, 0x00	; 0
    6442:	05 c0       	rjmp	.+10     	; 0x644e <_Z12I2CWriteByteh+0x6e>
    6444:	81 e0       	ldi	r24, 0x01	; 1
    6446:	03 c0       	rjmp	.+6      	; 0x644e <_Z12I2CWriteByteh+0x6e>
    6448:	81 e0       	ldi	r24, 0x01	; 1
    644a:	01 c0       	rjmp	.+2      	; 0x644e <_Z12I2CWriteByteh+0x6e>
		_delay_us(10);
		if (cnt >= 1000)
		{
			if(retry_cnt)
			{
				return FALSE;
    644c:	80 e0       	ldi	r24, 0x00	; 0

		return TRUE;
	}
	else
		return FALSE;	//Error
}
    644e:	df 91       	pop	r29
    6450:	cf 91       	pop	r28
    6452:	1f 91       	pop	r17
    6454:	0f 91       	pop	r16
    6456:	08 95       	ret

00006458 <_Z11I2CReadBytePhh>:

uint8_t I2CReadByte(uint8_t *data,uint8_t ack)
{
    6458:	ef 92       	push	r14
    645a:	ff 92       	push	r15
    645c:	0f 93       	push	r16
    645e:	1f 93       	push	r17
    6460:	cf 93       	push	r28
    6462:	df 93       	push	r29
    6464:	8c 01       	movw	r16, r24
	int cnt = 0, retry_cnt = 0;
	//Set up ACK
	if(ack)
    6466:	66 23       	and	r22, r22
    6468:	31 f0       	breq	.+12     	; 0x6476 <_Z11I2CReadBytePhh+0x1e>
	{
		//return ACK after reception
		TWCR|=(1<<TWEA);
    646a:	ec eb       	ldi	r30, 0xBC	; 188
    646c:	f0 e0       	ldi	r31, 0x00	; 0
    646e:	80 81       	ld	r24, Z
    6470:	80 64       	ori	r24, 0x40	; 64
    6472:	80 83       	st	Z, r24
    6474:	05 c0       	rjmp	.+10     	; 0x6480 <_Z11I2CReadBytePhh+0x28>
	else
	{
		//return NACK after reception
		//Signals slave to stop giving more data
		//usually used for last /*byte*/char read.
		TWCR&=(~(1<<TWEA));
    6476:	ec eb       	ldi	r30, 0xBC	; 188
    6478:	f0 e0       	ldi	r31, 0x00	; 0
    647a:	80 81       	ld	r24, Z
    647c:	8f 7b       	andi	r24, 0xBF	; 191
    647e:	80 83       	st	Z, r24
	}

	//Now enable Reception of data by clearing TWINT
	TWCR|=(1<<TWINT);
    6480:	ec eb       	ldi	r30, 0xBC	; 188
    6482:	f0 e0       	ldi	r31, 0x00	; 0
    6484:	80 81       	ld	r24, Z
    6486:	80 68       	ori	r24, 0x80	; 128
    6488:	80 83       	st	Z, r24
		return FALSE;	//Error
}

uint8_t I2CReadByte(uint8_t *data,uint8_t ack)
{
	int cnt = 0, retry_cnt = 0;
    648a:	40 e0       	ldi	r20, 0x00	; 0
    648c:	50 e0       	ldi	r21, 0x00	; 0

	//Now enable Reception of data by clearing TWINT
	TWCR|=(1<<TWINT);

	//Wait till done
	while(!(TWCR & (1<<TWINT)))
    648e:	cc eb       	ldi	r28, 0xBC	; 188
    6490:	d0 e0       	ldi	r29, 0x00	; 0
		{
			if(retry_cnt)
			{
				return FALSE;
			}
			retry_cnt++;
    6492:	ee 24       	eor	r14, r14
    6494:	e3 94       	inc	r14
    6496:	f1 2c       	mov	r15, r1
		return FALSE;	//Error
}

uint8_t I2CReadByte(uint8_t *data,uint8_t ack)
{
	int cnt = 0, retry_cnt = 0;
    6498:	88 ee       	ldi	r24, 0xE8	; 232
    649a:	93 e0       	ldi	r25, 0x03	; 3

	//Now enable Reception of data by clearing TWINT
	TWCR|=(1<<TWINT);

	//Wait till done
	while(!(TWCR & (1<<TWINT)))
    649c:	28 81       	ld	r18, Y
    649e:	22 23       	and	r18, r18
    64a0:	64 f0       	brlt	.+24     	; 0x64ba <_Z11I2CReadBytePhh+0x62>
    64a2:	28 e1       	ldi	r18, 0x18	; 24
    64a4:	2a 95       	dec	r18
    64a6:	f1 f7       	brne	.-4      	; 0x64a4 <_Z11I2CReadBytePhh+0x4c>
    64a8:	00 c0       	rjmp	.+0      	; 0x64aa <_Z11I2CReadBytePhh+0x52>
    64aa:	01 97       	sbiw	r24, 0x01	; 1
	// Added Failsafe and timeout routines
	{
		cnt++;
		_delay_us(10);
		if (cnt >= 1000)
    64ac:	b9 f7       	brne	.-18     	; 0x649c <_Z11I2CReadBytePhh+0x44>
		{
			if(retry_cnt)
    64ae:	45 2b       	or	r20, r21
    64b0:	a1 f4       	brne	.+40     	; 0x64da <_Z11I2CReadBytePhh+0x82>
			{
				return FALSE;
			}
			retry_cnt++;
			I2CReset();
    64b2:	3c df       	rcall	.-392    	; 0x632c <_Z8I2CResetv>
		{
			if(retry_cnt)
			{
				return FALSE;
			}
			retry_cnt++;
    64b4:	4e 2d       	mov	r20, r14
    64b6:	5f 2d       	mov	r21, r15
    64b8:	ef cf       	rjmp	.-34     	; 0x6498 <_Z11I2CReadBytePhh+0x40>
			cnt = 0;
		}
	}

	//Check status
	if((TWSR & 0xF8) == 0x58 || (TWSR & 0xF8) == 0x50)
    64ba:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    64be:	88 7f       	andi	r24, 0xF8	; 248
    64c0:	88 35       	cpi	r24, 0x58	; 88
    64c2:	29 f0       	breq	.+10     	; 0x64ce <_Z11I2CReadBytePhh+0x76>
    64c4:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    64c8:	88 7f       	andi	r24, 0xF8	; 248
    64ca:	80 35       	cpi	r24, 0x50	; 80
    64cc:	41 f4       	brne	.+16     	; 0x64de <_Z11I2CReadBytePhh+0x86>
		//	or
		//Data received and NACK returned

		//Read the data

		*data=TWDR;
    64ce:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    64d2:	f8 01       	movw	r30, r16
    64d4:	80 83       	st	Z, r24
		return TRUE;
    64d6:	81 e0       	ldi	r24, 0x01	; 1
    64d8:	03 c0       	rjmp	.+6      	; 0x64e0 <_Z11I2CReadBytePhh+0x88>
		_delay_us(10);
		if (cnt >= 1000)
		{
			if(retry_cnt)
			{
				return FALSE;
    64da:	80 e0       	ldi	r24, 0x00	; 0
    64dc:	01 c0       	rjmp	.+2      	; 0x64e0 <_Z11I2CReadBytePhh+0x88>

		*data=TWDR;
		return TRUE;
	}
	else
		return FALSE;	//Error
    64de:	80 e0       	ldi	r24, 0x00	; 0
	
}
    64e0:	df 91       	pop	r29
    64e2:	cf 91       	pop	r28
    64e4:	1f 91       	pop	r17
    64e6:	0f 91       	pop	r16
    64e8:	ff 90       	pop	r15
    64ea:	ef 90       	pop	r14
    64ec:	08 95       	ret

000064ee <_Z15gprsPowerUpInitv>:
void jump_to_bootloader()
{
#ifdef DEBUG_HEX_FILE_STORE
UWriteString("jump to bootloader",UART_PC);
#endif
	asm volatile("jmp 0x1F000");
    64ee:	72 9a       	sbi	0x0e, 2	; 14
    64f0:	08 95       	ret

000064f2 <_Z8gpioInitv>:
    64f2:	cf 93       	push	r28
    64f4:	df 93       	push	r29
    64f6:	e7 e0       	ldi	r30, 0x07	; 7
    64f8:	f1 e0       	ldi	r31, 0x01	; 1
    64fa:	10 82       	st	Z, r1
    64fc:	a1 e0       	ldi	r26, 0x01	; 1
    64fe:	b1 e0       	ldi	r27, 0x01	; 1
    6500:	1c 92       	st	X, r1
    6502:	13 ba       	out	0x13, r1	; 19
    6504:	10 ba       	out	0x10, r1	; 16
    6506:	1d b8       	out	0x0d, r1	; 13
    6508:	1a b8       	out	0x0a, r1	; 10
    650a:	17 b8       	out	0x07, r1	; 7
    650c:	14 b8       	out	0x04, r1	; 4
    650e:	11 b8       	out	0x01, r1	; 1
    6510:	39 9a       	sbi	0x07, 1	; 7
    6512:	41 9a       	sbi	0x08, 1	; 8
    6514:	20 9a       	sbi	0x04, 0	; 4
    6516:	38 9a       	sbi	0x07, 0	; 7
    6518:	41 98       	cbi	0x08, 1	; 8
    651a:	40 98       	cbi	0x08, 0	; 8
    651c:	80 ef       	ldi	r24, 0xF0	; 240
    651e:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__TEXT_REGION_LENGTH__+0x70010a>
    6522:	10 82       	st	Z, r1
    6524:	8c e3       	ldi	r24, 0x3C	; 60
    6526:	8c 93       	st	X, r24
    6528:	10 82       	st	Z, r1
    652a:	8f ef       	ldi	r24, 0xFF	; 255
    652c:	8c 93       	st	X, r24
    652e:	3c 98       	cbi	0x07, 4	; 7
    6530:	87 b1       	in	r24, 0x07	; 7
    6532:	8f 71       	andi	r24, 0x1F	; 31
    6534:	87 b9       	out	0x07, r24	; 7
    6536:	80 81       	ld	r24, Z
    6538:	8f 7b       	andi	r24, 0xBF	; 191
    653a:	80 83       	st	Z, r24
    653c:	8c 91       	ld	r24, X
    653e:	84 60       	ori	r24, 0x04	; 4
    6540:	8c 93       	st	X, r24
    6542:	c2 e0       	ldi	r28, 0x02	; 2
    6544:	d1 e0       	ldi	r29, 0x01	; 1
    6546:	88 81       	ld	r24, Y
    6548:	84 60       	ori	r24, 0x04	; 4
    654a:	88 83       	st	Y, r24
    654c:	8c 91       	ld	r24, X
    654e:	88 60       	ori	r24, 0x08	; 8
    6550:	8c 93       	st	X, r24
    6552:	80 81       	ld	r24, Z
    6554:	8e 7f       	andi	r24, 0xFE	; 254
    6556:	80 83       	st	Z, r24
    6558:	e4 e0       	ldi	r30, 0x04	; 4
    655a:	f1 e0       	ldi	r31, 0x01	; 1
    655c:	80 81       	ld	r24, Z
    655e:	8b 7f       	andi	r24, 0xFB	; 251
    6560:	80 83       	st	Z, r24
    6562:	6a 9a       	sbi	0x0d, 2	; 13
    6564:	c4 df       	rcall	.-120    	; 0x64ee <_Z15gprsPowerUpInitv>
    6566:	df 91       	pop	r29
    6568:	cf 91       	pop	r28
    656a:	08 95       	ret

0000656c <_Z18prepare_FL_LogDatav>:
    656c:	88 e1       	ldi	r24, 0x18	; 24
    656e:	ed e9       	ldi	r30, 0x9D	; 157
    6570:	f3 e1       	ldi	r31, 0x13	; 19
    6572:	a0 e8       	ldi	r26, 0x80	; 128
    6574:	b3 e1       	ldi	r27, 0x13	; 19
    6576:	01 90       	ld	r0, Z+
    6578:	0d 92       	st	X+, r0
    657a:	8a 95       	dec	r24
    657c:	e1 f7       	brne	.-8      	; 0x6576 <_Z18prepare_FL_LogDatav+0xa>
    657e:	10 92 9c 13 	sts	0x139C, r1	; 0x80139c <FL_rtu_log+0x1f>
    6582:	08 95       	ret

00006584 <_Z19prepare_e2p_y_totalv>:
    6584:	80 91 1f 13 	lds	r24, 0x131F	; 0x80131f <yest_total>
    6588:	90 91 20 13 	lds	r25, 0x1320	; 0x801320 <yest_total+0x1>
    658c:	a0 91 21 13 	lds	r26, 0x1321	; 0x801321 <yest_total+0x2>
    6590:	b0 91 22 13 	lds	r27, 0x1322	; 0x801322 <yest_total+0x3>
    6594:	80 93 e8 0a 	sts	0x0AE8, r24	; 0x800ae8 <__data_end>
    6598:	90 93 e9 0a 	sts	0x0AE9, r25	; 0x800ae9 <__data_end+0x1>
    659c:	a0 93 ea 0a 	sts	0x0AEA, r26	; 0x800aea <__data_end+0x2>
    65a0:	b0 93 eb 0a 	sts	0x0AEB, r27	; 0x800aeb <__data_end+0x3>
    65a4:	08 95       	ret

000065a6 <_Z20prepare_GPRS_LogDatav>:
    65a6:	cf 93       	push	r28
    65a8:	df 93       	push	r29
    65aa:	c3 e4       	ldi	r28, 0x43	; 67
    65ac:	d3 e1       	ldi	r29, 0x13	; 19
    65ae:	8a e1       	ldi	r24, 0x1A	; 26
    65b0:	fe 01       	movw	r30, r28
    65b2:	11 92       	st	Z+, r1
    65b4:	8a 95       	dec	r24
    65b6:	e9 f7       	brne	.-6      	; 0x65b2 <_Z20prepare_GPRS_LogDatav+0xc>
    65b8:	80 ea       	ldi	r24, 0xA0	; 160
    65ba:	88 83       	st	Y, r24
    65bc:	88 e1       	ldi	r24, 0x18	; 24
    65be:	ed e9       	ldi	r30, 0x9D	; 157
    65c0:	f3 e1       	ldi	r31, 0x13	; 19
    65c2:	a4 e4       	ldi	r26, 0x44	; 68
    65c4:	b3 e1       	ldi	r27, 0x13	; 19
    65c6:	01 90       	ld	r0, Z+
    65c8:	0d 92       	st	X+, r0
    65ca:	8a 95       	dec	r24
    65cc:	e1 f7       	brne	.-8      	; 0x65c6 <_Z20prepare_GPRS_LogDatav+0x20>
    65ce:	81 e0       	ldi	r24, 0x01	; 1
    65d0:	89 8f       	std	Y+25, r24	; 0x19
    65d2:	df 91       	pop	r29
    65d4:	cf 91       	pop	r28
    65d6:	08 95       	ret

000065d8 <_Z24decrement_unsent_log_cntc>:
    65d8:	81 3a       	cpi	r24, 0xA1	; 161
    65da:	69 f4       	brne	.+26     	; 0x65f6 <_Z24decrement_unsent_log_cntc+0x1e>
    65dc:	80 91 34 13 	lds	r24, 0x1334	; 0x801334 <freq_updated_data+0x1>
    65e0:	90 91 35 13 	lds	r25, 0x1335	; 0x801335 <freq_updated_data+0x2>
    65e4:	00 97       	sbiw	r24, 0x00	; 0
    65e6:	29 f0       	breq	.+10     	; 0x65f2 <_Z24decrement_unsent_log_cntc+0x1a>
    65e8:	01 97       	sbiw	r24, 0x01	; 1
    65ea:	90 93 35 13 	sts	0x1335, r25	; 0x801335 <freq_updated_data+0x2>
    65ee:	80 93 34 13 	sts	0x1334, r24	; 0x801334 <freq_updated_data+0x1>
    65f2:	0c 94 8e 1a 	jmp	0x351c	; 0x351c <_Z27flashWriteFreqUpdatedConfigv>
    65f6:	08 95       	ret

000065f8 <_Z16check_unsent_logv>:
    65f8:	80 91 34 13 	lds	r24, 0x1334	; 0x801334 <freq_updated_data+0x1>
    65fc:	90 91 35 13 	lds	r25, 0x1335	; 0x801335 <freq_updated_data+0x2>
    6600:	89 2b       	or	r24, r25
    6602:	59 f4       	brne	.+22     	; 0x661a <_Z16check_unsent_logv+0x22>
    6604:	80 91 5c 13 	lds	r24, 0x135C	; 0x80135c <WEB_data+0x19>
    6608:	81 11       	cpse	r24, r1
    660a:	09 c0       	rjmp	.+18     	; 0x661e <_Z16check_unsent_logv+0x26>
    660c:	81 e0       	ldi	r24, 0x01	; 1
    660e:	90 91 1d 0c 	lds	r25, 0x0C1D	; 0x800c1d <online_cfg+0x1>
    6612:	91 11       	cpse	r25, r1
    6614:	05 c0       	rjmp	.+10     	; 0x6620 <_Z16check_unsent_logv+0x28>
    6616:	80 e0       	ldi	r24, 0x00	; 0
    6618:	08 95       	ret
    661a:	81 e0       	ldi	r24, 0x01	; 1
    661c:	08 95       	ret
    661e:	81 e0       	ldi	r24, 0x01	; 1
    6620:	08 95       	ret

00006622 <_Z20controlRTUGprsUploadv>:
    6622:	af 92       	push	r10
    6624:	bf 92       	push	r11
    6626:	cf 92       	push	r12
    6628:	df 92       	push	r13
    662a:	ef 92       	push	r14
    662c:	ff 92       	push	r15
    662e:	0f 93       	push	r16
    6630:	1f 93       	push	r17
    6632:	cf 93       	push	r28
    6634:	df 93       	push	r29
    6636:	cd b7       	in	r28, 0x3d	; 61
    6638:	de b7       	in	r29, 0x3e	; 62
    663a:	a0 97       	sbiw	r28, 0x20	; 32
    663c:	0f b6       	in	r0, 0x3f	; 63
    663e:	f8 94       	cli
    6640:	de bf       	out	0x3e, r29	; 62
    6642:	0f be       	out	0x3f, r0	; 63
    6644:	cd bf       	out	0x3d, r28	; 61
    6646:	80 91 26 13 	lds	r24, 0x1326	; 0x801326 <_ZL17manage_frmwr_updt>
    664a:	82 30       	cpi	r24, 0x02	; 2
    664c:	39 f4       	brne	.+14     	; 0x665c <_Z20controlRTUGprsUploadv+0x3a>
    664e:	47 dd       	rcall	.-1394   	; 0x60de <_Z24get_flash_file_rqst_typev>
    6650:	88 23       	and	r24, r24
    6652:	21 f0       	breq	.+8      	; 0x665c <_Z20controlRTUGprsUploadv+0x3a>
    6654:	d1 df       	rcall	.-94     	; 0x65f8 <_Z16check_unsent_logv>
    6656:	88 23       	and	r24, r24
    6658:	09 f4       	brne	.+2      	; 0x665c <_Z20controlRTUGprsUploadv+0x3a>
    665a:	e0 c0       	rjmp	.+448    	; 0x681c <_Z20controlRTUGprsUploadv+0x1fa>
    665c:	80 91 1d 0c 	lds	r24, 0x0C1D	; 0x800c1d <online_cfg+0x1>
    6660:	81 11       	cpse	r24, r1
    6662:	de c0       	rjmp	.+444    	; 0x6820 <_Z20controlRTUGprsUploadv+0x1fe>
    6664:	80 91 28 13 	lds	r24, 0x1328	; 0x801328 <RTU_state>
    6668:	83 30       	cpi	r24, 0x03	; 3
    666a:	09 f4       	brne	.+2      	; 0x666e <_Z20controlRTUGprsUploadv+0x4c>
    666c:	db c0       	rjmp	.+438    	; 0x6824 <_Z20controlRTUGprsUploadv+0x202>
    666e:	80 91 34 13 	lds	r24, 0x1334	; 0x801334 <freq_updated_data+0x1>
    6672:	90 91 35 13 	lds	r25, 0x1335	; 0x801335 <freq_updated_data+0x2>
    6676:	89 2b       	or	r24, r25
    6678:	09 f4       	brne	.+2      	; 0x667c <_Z20controlRTUGprsUploadv+0x5a>
    667a:	c4 c0       	rjmp	.+392    	; 0x6804 <_Z20controlRTUGprsUploadv+0x1e2>
    667c:	80 e0       	ldi	r24, 0x00	; 0
    667e:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <_Z25flashGetCurrDataWriteAddrc>
    6682:	ab 01       	movw	r20, r22
    6684:	bc 01       	movw	r22, r24
    6686:	80 91 34 13 	lds	r24, 0x1334	; 0x801334 <freq_updated_data+0x1>
    668a:	90 91 35 13 	lds	r25, 0x1335	; 0x801335 <freq_updated_data+0x2>
    668e:	a0 e0       	ldi	r26, 0x00	; 0
    6690:	b0 e0       	ldi	r27, 0x00	; 0
    6692:	88 0f       	add	r24, r24
    6694:	99 1f       	adc	r25, r25
    6696:	aa 1f       	adc	r26, r26
    6698:	bb 1f       	adc	r27, r27
    669a:	88 0f       	add	r24, r24
    669c:	99 1f       	adc	r25, r25
    669e:	aa 1f       	adc	r26, r26
    66a0:	bb 1f       	adc	r27, r27
    66a2:	88 0f       	add	r24, r24
    66a4:	99 1f       	adc	r25, r25
    66a6:	aa 1f       	adc	r26, r26
    66a8:	bb 1f       	adc	r27, r27
    66aa:	88 0f       	add	r24, r24
    66ac:	99 1f       	adc	r25, r25
    66ae:	aa 1f       	adc	r26, r26
    66b0:	bb 1f       	adc	r27, r27
    66b2:	88 0f       	add	r24, r24
    66b4:	99 1f       	adc	r25, r25
    66b6:	aa 1f       	adc	r26, r26
    66b8:	bb 1f       	adc	r27, r27
    66ba:	8a 01       	movw	r16, r20
    66bc:	9b 01       	movw	r18, r22
    66be:	08 1b       	sub	r16, r24
    66c0:	19 0b       	sbc	r17, r25
    66c2:	2a 0b       	sbc	r18, r26
    66c4:	3b 0b       	sbc	r19, r27
    66c6:	d9 01       	movw	r26, r18
    66c8:	c8 01       	movw	r24, r16
    66ca:	81 15       	cp	r24, r1
    66cc:	90 42       	sbci	r25, 0x20	; 32
    66ce:	a1 05       	cpc	r26, r1
    66d0:	b1 05       	cpc	r27, r1
    66d2:	20 f1       	brcs	.+72     	; 0x671c <_Z20controlRTUGprsUploadv+0xfa>
    66d4:	80 e0       	ldi	r24, 0x00	; 0
    66d6:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <_Z25flashGetCurrDataWriteAddrc>
    66da:	6b 01       	movw	r12, r22
    66dc:	7c 01       	movw	r14, r24
    66de:	80 91 34 13 	lds	r24, 0x1334	; 0x801334 <freq_updated_data+0x1>
    66e2:	90 91 35 13 	lds	r25, 0x1335	; 0x801335 <freq_updated_data+0x2>
    66e6:	a0 e0       	ldi	r26, 0x00	; 0
    66e8:	b0 e0       	ldi	r27, 0x00	; 0
    66ea:	88 0f       	add	r24, r24
    66ec:	99 1f       	adc	r25, r25
    66ee:	aa 1f       	adc	r26, r26
    66f0:	bb 1f       	adc	r27, r27
    66f2:	88 0f       	add	r24, r24
    66f4:	99 1f       	adc	r25, r25
    66f6:	aa 1f       	adc	r26, r26
    66f8:	bb 1f       	adc	r27, r27
    66fa:	88 0f       	add	r24, r24
    66fc:	99 1f       	adc	r25, r25
    66fe:	aa 1f       	adc	r26, r26
    6700:	bb 1f       	adc	r27, r27
    6702:	88 0f       	add	r24, r24
    6704:	99 1f       	adc	r25, r25
    6706:	aa 1f       	adc	r26, r26
    6708:	bb 1f       	adc	r27, r27
    670a:	88 0f       	add	r24, r24
    670c:	99 1f       	adc	r25, r25
    670e:	aa 1f       	adc	r26, r26
    6710:	bb 1f       	adc	r27, r27
    6712:	c8 1a       	sub	r12, r24
    6714:	d9 0a       	sbc	r13, r25
    6716:	ea 0a       	sbc	r14, r26
    6718:	fb 0a       	sbc	r15, r27
    671a:	2a c0       	rjmp	.+84     	; 0x6770 <_Z20controlRTUGprsUploadv+0x14e>
    671c:	80 e0       	ldi	r24, 0x00	; 0
    671e:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <_Z25flashGetCurrDataWriteAddrc>
    6722:	6b 01       	movw	r12, r22
    6724:	7c 01       	movw	r14, r24
    6726:	80 91 34 13 	lds	r24, 0x1334	; 0x801334 <freq_updated_data+0x1>
    672a:	90 91 35 13 	lds	r25, 0x1335	; 0x801335 <freq_updated_data+0x2>
    672e:	a0 e0       	ldi	r26, 0x00	; 0
    6730:	b0 e0       	ldi	r27, 0x00	; 0
    6732:	88 0f       	add	r24, r24
    6734:	99 1f       	adc	r25, r25
    6736:	aa 1f       	adc	r26, r26
    6738:	bb 1f       	adc	r27, r27
    673a:	88 0f       	add	r24, r24
    673c:	99 1f       	adc	r25, r25
    673e:	aa 1f       	adc	r26, r26
    6740:	bb 1f       	adc	r27, r27
    6742:	88 0f       	add	r24, r24
    6744:	99 1f       	adc	r25, r25
    6746:	aa 1f       	adc	r26, r26
    6748:	bb 1f       	adc	r27, r27
    674a:	88 0f       	add	r24, r24
    674c:	99 1f       	adc	r25, r25
    674e:	aa 1f       	adc	r26, r26
    6750:	bb 1f       	adc	r27, r27
    6752:	88 0f       	add	r24, r24
    6754:	99 1f       	adc	r25, r25
    6756:	aa 1f       	adc	r26, r26
    6758:	bb 1f       	adc	r27, r27
    675a:	c8 1a       	sub	r12, r24
    675c:	d9 0a       	sbc	r13, r25
    675e:	ea 0a       	sbc	r14, r26
    6760:	fb 0a       	sbc	r15, r27
    6762:	20 e2       	ldi	r18, 0x20	; 32
    6764:	c2 1a       	sub	r12, r18
    6766:	d1 08       	sbc	r13, r1
    6768:	20 ee       	ldi	r18, 0xE0	; 224
    676a:	e2 0a       	sbc	r14, r18
    676c:	2f ef       	ldi	r18, 0xFF	; 255
    676e:	f2 0a       	sbc	r15, r18
    6770:	80 91 4e 0c 	lds	r24, 0x0C4E	; 0x800c4e <gprs_rx_isr_handler+0x1>
    6774:	81 11       	cpse	r24, r1
    6776:	42 c0       	rjmp	.+132    	; 0x67fc <_Z20controlRTUGprsUploadv+0x1da>
    6778:	ce 01       	movw	r24, r28
    677a:	01 96       	adiw	r24, 0x01	; 1
    677c:	5c 01       	movw	r10, r24
    677e:	80 e2       	ldi	r24, 0x20	; 32
    6780:	d5 01       	movw	r26, r10
    6782:	1d 92       	st	X+, r1
    6784:	8a 95       	dec	r24
    6786:	e9 f7       	brne	.-6      	; 0x6782 <_Z20controlRTUGprsUploadv+0x160>
    6788:	8a e1       	ldi	r24, 0x1A	; 26
    678a:	e3 e4       	ldi	r30, 0x43	; 67
    678c:	f3 e1       	ldi	r31, 0x13	; 19
    678e:	df 01       	movw	r26, r30
    6790:	1d 92       	st	X+, r1
    6792:	8a 95       	dec	r24
    6794:	e9 f7       	brne	.-6      	; 0x6790 <_Z20controlRTUGprsUploadv+0x16e>
    6796:	f8 94       	cli
    6798:	0e 94 cc 15 	call	0x2b98	; 0x2b98 <_Z4WRENv>
    679c:	85 01       	movw	r16, r10
    679e:	20 e2       	ldi	r18, 0x20	; 32
    67a0:	30 e0       	ldi	r19, 0x00	; 0
    67a2:	40 e0       	ldi	r20, 0x00	; 0
    67a4:	50 e0       	ldi	r21, 0x00	; 0
    67a6:	c7 01       	movw	r24, r14
    67a8:	b6 01       	movw	r22, r12
    67aa:	0e 94 6c 16 	call	0x2cd8	; 0x2cd8 <_Z14readContToBuffmmPc>
    67ae:	0e 94 d1 15 	call	0x2ba2	; 0x2ba2 <_Z4WRDIv>
    67b2:	78 94       	sei
    67b4:	f8 a0       	ldd	r15, Y+32	; 0x20
    67b6:	6f e1       	ldi	r22, 0x1F	; 31
    67b8:	c5 01       	movw	r24, r10
    67ba:	0e 94 56 14 	call	0x28ac	; 0x28ac <_Z11getChecksumPhc>
    67be:	f8 12       	cpse	r15, r24
    67c0:	0e c0       	rjmp	.+28     	; 0x67de <_Z20controlRTUGprsUploadv+0x1bc>
    67c2:	81 ea       	ldi	r24, 0xA1	; 161
    67c4:	80 93 43 13 	sts	0x1343, r24	; 0x801343 <WEB_data>
    67c8:	88 e1       	ldi	r24, 0x18	; 24
    67ca:	fe 01       	movw	r30, r28
    67cc:	34 96       	adiw	r30, 0x04	; 4
    67ce:	a4 e4       	ldi	r26, 0x44	; 68
    67d0:	b3 e1       	ldi	r27, 0x13	; 19
    67d2:	01 90       	ld	r0, Z+
    67d4:	0d 92       	st	X+, r0
    67d6:	8a 95       	dec	r24
    67d8:	e1 f7       	brne	.-8      	; 0x67d2 <_Z20controlRTUGprsUploadv+0x1b0>
    67da:	81 ea       	ldi	r24, 0xA1	; 161
    67dc:	26 c0       	rjmp	.+76     	; 0x682a <_Z20controlRTUGprsUploadv+0x208>
    67de:	80 91 34 13 	lds	r24, 0x1334	; 0x801334 <freq_updated_data+0x1>
    67e2:	90 91 35 13 	lds	r25, 0x1335	; 0x801335 <freq_updated_data+0x2>
    67e6:	00 97       	sbiw	r24, 0x00	; 0
    67e8:	59 f0       	breq	.+22     	; 0x6800 <_Z20controlRTUGprsUploadv+0x1de>
    67ea:	01 97       	sbiw	r24, 0x01	; 1
    67ec:	90 93 35 13 	sts	0x1335, r25	; 0x801335 <freq_updated_data+0x2>
    67f0:	80 93 34 13 	sts	0x1334, r24	; 0x801334 <freq_updated_data+0x1>
    67f4:	0e 94 8e 1a 	call	0x351c	; 0x351c <_Z27flashWriteFreqUpdatedConfigv>
    67f8:	80 e0       	ldi	r24, 0x00	; 0
    67fa:	17 c0       	rjmp	.+46     	; 0x682a <_Z20controlRTUGprsUploadv+0x208>
    67fc:	80 e0       	ldi	r24, 0x00	; 0
    67fe:	15 c0       	rjmp	.+42     	; 0x682a <_Z20controlRTUGprsUploadv+0x208>
    6800:	80 e0       	ldi	r24, 0x00	; 0
    6802:	13 c0       	rjmp	.+38     	; 0x682a <_Z20controlRTUGprsUploadv+0x208>
    6804:	80 91 5c 13 	lds	r24, 0x135C	; 0x80135c <WEB_data+0x19>
    6808:	88 23       	and	r24, r24
    680a:	71 f0       	breq	.+28     	; 0x6828 <_Z20controlRTUGprsUploadv+0x206>
    680c:	62 e0       	ldi	r22, 0x02	; 2
    680e:	70 e0       	ldi	r23, 0x00	; 0
    6810:	8d e2       	ldi	r24, 0x2D	; 45
    6812:	99 e0       	ldi	r25, 0x09	; 9
    6814:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <_Z12UWriteStringPKci>
    6818:	80 ea       	ldi	r24, 0xA0	; 160
    681a:	07 c0       	rjmp	.+14     	; 0x682a <_Z20controlRTUGprsUploadv+0x208>
    681c:	83 ea       	ldi	r24, 0xA3	; 163
    681e:	05 c0       	rjmp	.+10     	; 0x682a <_Z20controlRTUGprsUploadv+0x208>
    6820:	84 ea       	ldi	r24, 0xA4	; 164
    6822:	03 c0       	rjmp	.+6      	; 0x682a <_Z20controlRTUGprsUploadv+0x208>
    6824:	82 ea       	ldi	r24, 0xA2	; 162
    6826:	01 c0       	rjmp	.+2      	; 0x682a <_Z20controlRTUGprsUploadv+0x208>
    6828:	80 e0       	ldi	r24, 0x00	; 0
    682a:	a0 96       	adiw	r28, 0x20	; 32
    682c:	0f b6       	in	r0, 0x3f	; 63
    682e:	f8 94       	cli
    6830:	de bf       	out	0x3e, r29	; 62
    6832:	0f be       	out	0x3f, r0	; 63
    6834:	cd bf       	out	0x3d, r28	; 61
    6836:	df 91       	pop	r29
    6838:	cf 91       	pop	r28
    683a:	1f 91       	pop	r17
    683c:	0f 91       	pop	r16
    683e:	ff 90       	pop	r15
    6840:	ef 90       	pop	r14
    6842:	df 90       	pop	r13
    6844:	cf 90       	pop	r12
    6846:	bf 90       	pop	r11
    6848:	af 90       	pop	r10
    684a:	08 95       	ret

0000684c <_Z18rtuPrepareGPRSDataPc25gprs_upload_data_pkt_id_t>:
    684c:	2f 92       	push	r2
    684e:	3f 92       	push	r3
    6850:	4f 92       	push	r4
    6852:	5f 92       	push	r5
    6854:	6f 92       	push	r6
    6856:	7f 92       	push	r7
    6858:	8f 92       	push	r8
    685a:	9f 92       	push	r9
    685c:	af 92       	push	r10
    685e:	bf 92       	push	r11
    6860:	cf 92       	push	r12
    6862:	df 92       	push	r13
    6864:	ef 92       	push	r14
    6866:	ff 92       	push	r15
    6868:	0f 93       	push	r16
    686a:	1f 93       	push	r17
    686c:	cf 93       	push	r28
    686e:	df 93       	push	r29
    6870:	cd b7       	in	r28, 0x3d	; 61
    6872:	de b7       	in	r29, 0x3e	; 62
    6874:	2e 97       	sbiw	r28, 0x0e	; 14
    6876:	0f b6       	in	r0, 0x3f	; 63
    6878:	f8 94       	cli
    687a:	de bf       	out	0x3e, r29	; 62
    687c:	0f be       	out	0x3f, r0	; 63
    687e:	cd bf       	out	0x3d, r28	; 61
    6880:	1c 01       	movw	r2, r24
    6882:	8b e1       	ldi	r24, 0x1B	; 27
    6884:	e0 e3       	ldi	r30, 0x30	; 48
    6886:	f9 e0       	ldi	r31, 0x09	; 9
    6888:	d1 01       	movw	r26, r2
    688a:	01 90       	ld	r0, Z+
    688c:	0d 92       	st	X+, r0
    688e:	8a 95       	dec	r24
    6890:	e1 f7       	brne	.-8      	; 0x688a <_Z18rtuPrepareGPRSDataPc25gprs_upload_data_pkt_id_t+0x3e>
    6892:	d1 01       	movw	r26, r2
    6894:	0d 90       	ld	r0, X+
    6896:	00 20       	and	r0, r0
    6898:	e9 f7       	brne	.-6      	; 0x6894 <_Z18rtuPrepareGPRSDataPc25gprs_upload_data_pkt_id_t+0x48>
    689a:	11 97       	sbiw	r26, 0x01	; 1
    689c:	8d e0       	ldi	r24, 0x0D	; 13
    689e:	eb e4       	ldi	r30, 0x4B	; 75
    68a0:	f9 e0       	ldi	r31, 0x09	; 9
    68a2:	01 90       	ld	r0, Z+
    68a4:	0d 92       	st	X+, r0
    68a6:	8a 95       	dec	r24
    68a8:	e1 f7       	brne	.-8      	; 0x68a2 <_Z18rtuPrepareGPRSDataPc25gprs_upload_data_pkt_id_t+0x56>
    68aa:	d1 01       	movw	r26, r2
    68ac:	0d 90       	ld	r0, X+
    68ae:	00 20       	and	r0, r0
    68b0:	e9 f7       	brne	.-6      	; 0x68ac <_Z18rtuPrepareGPRSDataPc25gprs_upload_data_pkt_id_t+0x60>
    68b2:	11 97       	sbiw	r26, 0x01	; 1
    68b4:	8d 01       	movw	r16, r26
    68b6:	02 19       	sub	r16, r2
    68b8:	13 09       	sbc	r17, r3
    68ba:	63 3a       	cpi	r22, 0xA3	; 163
    68bc:	09 f0       	breq	.+2      	; 0x68c0 <_Z18rtuPrepareGPRSDataPc25gprs_upload_data_pkt_id_t+0x74>
    68be:	55 c0       	rjmp	.+170    	; 0x696a <_Z18rtuPrepareGPRSDataPc25gprs_upload_data_pkt_id_t+0x11e>
    68c0:	80 91 05 13 	lds	r24, 0x1305	; 0x801305 <flash_hexfile+0x7>
    68c4:	81 30       	cpi	r24, 0x01	; 1
    68c6:	19 f0       	breq	.+6      	; 0x68ce <_Z18rtuPrepareGPRSDataPc25gprs_upload_data_pkt_id_t+0x82>
    68c8:	82 30       	cpi	r24, 0x02	; 2
    68ca:	11 f1       	breq	.+68     	; 0x6910 <_Z18rtuPrepareGPRSDataPc25gprs_upload_data_pkt_id_t+0xc4>
    68cc:	d2 c2       	rjmp	.+1444   	; 0x6e72 <_Z18rtuPrepareGPRSDataPc25gprs_upload_data_pkt_id_t+0x626>
    68ce:	80 91 25 13 	lds	r24, 0x1325	; 0x801325 <rtu_data+0x1>
    68d2:	8f 93       	push	r24
    68d4:	80 91 24 13 	lds	r24, 0x1324	; 0x801324 <rtu_data>
    68d8:	8f 93       	push	r24
    68da:	8a e6       	ldi	r24, 0x6A	; 106
    68dc:	92 e0       	ldi	r25, 0x02	; 2
    68de:	9f 93       	push	r25
    68e0:	8f 93       	push	r24
    68e2:	86 e6       	ldi	r24, 0x66	; 102
    68e4:	92 e0       	ldi	r25, 0x02	; 2
    68e6:	9f 93       	push	r25
    68e8:	8f 93       	push	r24
    68ea:	88 e5       	ldi	r24, 0x58	; 88
    68ec:	99 e0       	ldi	r25, 0x09	; 9
    68ee:	9f 93       	push	r25
    68f0:	8f 93       	push	r24
    68f2:	91 01       	movw	r18, r2
    68f4:	20 0f       	add	r18, r16
    68f6:	31 1f       	adc	r19, r17
    68f8:	3a 83       	std	Y+2, r19	; 0x02
    68fa:	29 83       	std	Y+1, r18	; 0x01
    68fc:	3f 93       	push	r19
    68fe:	2f 93       	push	r18
    6900:	0e 94 f4 47 	call	0x8fe8	; 0x8fe8 <sprintf>
    6904:	0f b6       	in	r0, 0x3f	; 63
    6906:	f8 94       	cli
    6908:	de bf       	out	0x3e, r29	; 62
    690a:	0f be       	out	0x3f, r0	; 63
    690c:	cd bf       	out	0x3d, r28	; 61
    690e:	b1 c2       	rjmp	.+1378   	; 0x6e72 <_Z18rtuPrepareGPRSDataPc25gprs_upload_data_pkt_id_t+0x626>
    6910:	e0 90 02 13 	lds	r14, 0x1302	; 0x801302 <flash_hexfile+0x4>
    6914:	f0 90 03 13 	lds	r15, 0x1303	; 0x801303 <flash_hexfile+0x5>
    6918:	5f ef       	ldi	r21, 0xFF	; 255
    691a:	e5 1a       	sub	r14, r21
    691c:	f5 0a       	sbc	r15, r21
    691e:	d0 90 24 13 	lds	r13, 0x1324	; 0x801324 <rtu_data>
    6922:	c0 90 25 13 	lds	r12, 0x1325	; 0x801325 <rtu_data+0x1>
    6926:	0e 94 f5 03 	call	0x7ea	; 0x7ea <_Z15get_e2p_frm_verv>
    692a:	1f 92       	push	r1
    692c:	2e e1       	ldi	r18, 0x1E	; 30
    692e:	2f 93       	push	r18
    6930:	ff 92       	push	r15
    6932:	ef 92       	push	r14
    6934:	cf 92       	push	r12
    6936:	df 92       	push	r13
    6938:	9f 93       	push	r25
    693a:	8f 93       	push	r24
    693c:	86 e6       	ldi	r24, 0x66	; 102
    693e:	92 e0       	ldi	r25, 0x02	; 2
    6940:	9f 93       	push	r25
    6942:	8f 93       	push	r24
    6944:	8d e8       	ldi	r24, 0x8D	; 141
    6946:	99 e0       	ldi	r25, 0x09	; 9
    6948:	9f 93       	push	r25
    694a:	8f 93       	push	r24
    694c:	c1 01       	movw	r24, r2
    694e:	80 0f       	add	r24, r16
    6950:	91 1f       	adc	r25, r17
    6952:	9a 83       	std	Y+2, r25	; 0x02
    6954:	89 83       	std	Y+1, r24	; 0x01
    6956:	9f 93       	push	r25
    6958:	8f 93       	push	r24
    695a:	0e 94 f4 47 	call	0x8fe8	; 0x8fe8 <sprintf>
    695e:	0f b6       	in	r0, 0x3f	; 63
    6960:	f8 94       	cli
    6962:	de bf       	out	0x3e, r29	; 62
    6964:	0f be       	out	0x3f, r0	; 63
    6966:	cd bf       	out	0x3d, r28	; 61
    6968:	84 c2       	rjmp	.+1288   	; 0x6e72 <_Z18rtuPrepareGPRSDataPc25gprs_upload_data_pkt_id_t+0x626>
    696a:	62 3a       	cpi	r22, 0xA2	; 162
    696c:	69 f5       	brne	.+90     	; 0x69c8 <_Z18rtuPrepareGPRSDataPc25gprs_upload_data_pkt_id_t+0x17c>
    696e:	d1 01       	movw	r26, r2
    6970:	a0 0f       	add	r26, r16
    6972:	b1 1f       	adc	r27, r17
    6974:	83 e2       	ldi	r24, 0x23	; 35
    6976:	e9 ec       	ldi	r30, 0xC9	; 201
    6978:	f9 e0       	ldi	r31, 0x09	; 9
    697a:	01 90       	ld	r0, Z+
    697c:	0d 92       	st	X+, r0
    697e:	8a 95       	dec	r24
    6980:	e1 f7       	brne	.-8      	; 0x697a <_Z18rtuPrepareGPRSDataPc25gprs_upload_data_pkt_id_t+0x12e>
    6982:	f1 01       	movw	r30, r2
    6984:	01 90       	ld	r0, Z+
    6986:	00 20       	and	r0, r0
    6988:	e9 f7       	brne	.-6      	; 0x6984 <_Z18rtuPrepareGPRSDataPc25gprs_upload_data_pkt_id_t+0x138>
    698a:	31 97       	sbiw	r30, 0x01	; 1
    698c:	8f 01       	movw	r16, r30
    698e:	02 19       	sub	r16, r2
    6990:	13 09       	sbc	r17, r3
    6992:	0e 94 ee 27 	call	0x4fdc	; 0x4fdc <_Z8readImeiv>
    6996:	fc 01       	movw	r30, r24
    6998:	d1 01       	movw	r26, r2
    699a:	a0 0f       	add	r26, r16
    699c:	b1 1f       	adc	r27, r17
    699e:	9f e0       	ldi	r25, 0x0F	; 15
    69a0:	01 90       	ld	r0, Z+
    69a2:	0d 92       	st	X+, r0
    69a4:	9a 95       	dec	r25
    69a6:	e1 f7       	brne	.-8      	; 0x69a0 <_Z18rtuPrepareGPRSDataPc25gprs_upload_data_pkt_id_t+0x154>
    69a8:	f8 01       	movw	r30, r16
    69aa:	3f 96       	adiw	r30, 0x0f	; 15
    69ac:	91 01       	movw	r18, r2
    69ae:	2e 0f       	add	r18, r30
    69b0:	3f 1f       	adc	r19, r31
    69b2:	3a 83       	std	Y+2, r19	; 0x02
    69b4:	29 83       	std	Y+1, r18	; 0x01
    69b6:	82 e2       	ldi	r24, 0x22	; 34
    69b8:	9d e0       	ldi	r25, 0x0D	; 13
    69ba:	d9 01       	movw	r26, r18
    69bc:	11 96       	adiw	r26, 0x01	; 1
    69be:	9c 93       	st	X, r25
    69c0:	8e 93       	st	-X, r24
    69c2:	12 96       	adiw	r26, 0x02	; 2
    69c4:	1c 92       	st	X, r1
    69c6:	55 c2       	rjmp	.+1194   	; 0x6e72 <_Z18rtuPrepareGPRSDataPc25gprs_upload_data_pkt_id_t+0x626>
    69c8:	64 3a       	cpi	r22, 0xA4	; 164
    69ca:	09 f0       	breq	.+2      	; 0x69ce <_Z18rtuPrepareGPRSDataPc25gprs_upload_data_pkt_id_t+0x182>
    69cc:	51 c0       	rjmp	.+162    	; 0x6a70 <_Z18rtuPrepareGPRSDataPc25gprs_upload_data_pkt_id_t+0x224>
    69ce:	80 91 1c 0c 	lds	r24, 0x0C1C	; 0x800c1c <online_cfg>
    69d2:	88 23       	and	r24, r24
    69d4:	19 f0       	breq	.+6      	; 0x69dc <_Z18rtuPrepareGPRSDataPc25gprs_upload_data_pkt_id_t+0x190>
    69d6:	81 30       	cpi	r24, 0x01	; 1
    69d8:	29 f1       	breq	.+74     	; 0x6a24 <_Z18rtuPrepareGPRSDataPc25gprs_upload_data_pkt_id_t+0x1d8>
    69da:	4b c2       	rjmp	.+1174   	; 0x6e72 <_Z18rtuPrepareGPRSDataPc25gprs_upload_data_pkt_id_t+0x626>
    69dc:	8a e6       	ldi	r24, 0x6A	; 106
    69de:	92 e0       	ldi	r25, 0x02	; 2
    69e0:	9f 93       	push	r25
    69e2:	8f 93       	push	r24
    69e4:	ea e0       	ldi	r30, 0x0A	; 10
    69e6:	fb e0       	ldi	r31, 0x0B	; 11
    69e8:	81 81       	ldd	r24, Z+1	; 0x01
    69ea:	8f 93       	push	r24
    69ec:	80 81       	ld	r24, Z
    69ee:	8f 93       	push	r24
    69f0:	8c ee       	ldi	r24, 0xEC	; 236
    69f2:	99 e0       	ldi	r25, 0x09	; 9
    69f4:	9f 93       	push	r25
    69f6:	8f 93       	push	r24
    69f8:	02 0d       	add	r16, r2
    69fa:	13 1d       	adc	r17, r3
    69fc:	1f 93       	push	r17
    69fe:	0f 93       	push	r16
    6a00:	0e 94 f4 47 	call	0x8fe8	; 0x8fe8 <sprintf>
    6a04:	f1 01       	movw	r30, r2
    6a06:	01 90       	ld	r0, Z+
    6a08:	00 20       	and	r0, r0
    6a0a:	e9 f7       	brne	.-6      	; 0x6a06 <_Z18rtuPrepareGPRSDataPc25gprs_upload_data_pkt_id_t+0x1ba>
    6a0c:	31 97       	sbiw	r30, 0x01	; 1
    6a0e:	82 e2       	ldi	r24, 0x22	; 34
    6a10:	9d e0       	ldi	r25, 0x0D	; 13
    6a12:	91 83       	std	Z+1, r25	; 0x01
    6a14:	80 83       	st	Z, r24
    6a16:	12 82       	std	Z+2, r1	; 0x02
    6a18:	0f b6       	in	r0, 0x3f	; 63
    6a1a:	f8 94       	cli
    6a1c:	de bf       	out	0x3e, r29	; 62
    6a1e:	0f be       	out	0x3f, r0	; 63
    6a20:	cd bf       	out	0x3d, r28	; 61
    6a22:	27 c2       	rjmp	.+1102   	; 0x6e72 <_Z18rtuPrepareGPRSDataPc25gprs_upload_data_pkt_id_t+0x626>
    6a24:	8a e6       	ldi	r24, 0x6A	; 106
    6a26:	92 e0       	ldi	r25, 0x02	; 2
    6a28:	9f 93       	push	r25
    6a2a:	8f 93       	push	r24
    6a2c:	ea e0       	ldi	r30, 0x0A	; 10
    6a2e:	fb e0       	ldi	r31, 0x0B	; 11
    6a30:	81 81       	ldd	r24, Z+1	; 0x01
    6a32:	8f 93       	push	r24
    6a34:	80 81       	ld	r24, Z
    6a36:	8f 93       	push	r24
    6a38:	8a e1       	ldi	r24, 0x1A	; 26
    6a3a:	9a e0       	ldi	r25, 0x0A	; 10
    6a3c:	9f 93       	push	r25
    6a3e:	8f 93       	push	r24
    6a40:	02 0d       	add	r16, r2
    6a42:	13 1d       	adc	r17, r3
    6a44:	1f 93       	push	r17
    6a46:	0f 93       	push	r16
    6a48:	0e 94 f4 47 	call	0x8fe8	; 0x8fe8 <sprintf>
    6a4c:	d1 01       	movw	r26, r2
    6a4e:	0d 90       	ld	r0, X+
    6a50:	00 20       	and	r0, r0
    6a52:	e9 f7       	brne	.-6      	; 0x6a4e <_Z18rtuPrepareGPRSDataPc25gprs_upload_data_pkt_id_t+0x202>
    6a54:	11 97       	sbiw	r26, 0x01	; 1
    6a56:	82 e2       	ldi	r24, 0x22	; 34
    6a58:	9d e0       	ldi	r25, 0x0D	; 13
    6a5a:	11 96       	adiw	r26, 0x01	; 1
    6a5c:	9c 93       	st	X, r25
    6a5e:	8e 93       	st	-X, r24
    6a60:	12 96       	adiw	r26, 0x02	; 2
    6a62:	1c 92       	st	X, r1
    6a64:	0f b6       	in	r0, 0x3f	; 63
    6a66:	f8 94       	cli
    6a68:	de bf       	out	0x3e, r29	; 62
    6a6a:	0f be       	out	0x3f, r0	; 63
    6a6c:	cd bf       	out	0x3d, r28	; 61
    6a6e:	01 c2       	rjmp	.+1026   	; 0x6e72 <_Z18rtuPrepareGPRSDataPc25gprs_upload_data_pkt_id_t+0x626>
    6a70:	60 3a       	cpi	r22, 0xA0	; 160
    6a72:	09 f0       	breq	.+2      	; 0x6a76 <_Z18rtuPrepareGPRSDataPc25gprs_upload_data_pkt_id_t+0x22a>
    6a74:	fe c0       	rjmp	.+508    	; 0x6c72 <_Z18rtuPrepareGPRSDataPc25gprs_upload_data_pkt_id_t+0x426>
    6a76:	e3 e4       	ldi	r30, 0x43	; 67
    6a78:	f3 e1       	ldi	r31, 0x13	; 19
    6a7a:	65 85       	ldd	r22, Z+13	; 0x0d
    6a7c:	76 85       	ldd	r23, Z+14	; 0x0e
    6a7e:	87 85       	ldd	r24, Z+15	; 0x0f
    6a80:	90 89       	ldd	r25, Z+16	; 0x10
    6a82:	41 84       	ldd	r4, Z+9	; 0x09
    6a84:	52 84       	ldd	r5, Z+10	; 0x0a
    6a86:	63 84       	ldd	r6, Z+11	; 0x0b
    6a88:	74 84       	ldd	r7, Z+12	; 0x0c
    6a8a:	25 81       	ldd	r18, Z+5	; 0x05
    6a8c:	36 81       	ldd	r19, Z+6	; 0x06
    6a8e:	47 81       	ldd	r20, Z+7	; 0x07
    6a90:	50 85       	ldd	r21, Z+8	; 0x08
    6a92:	29 83       	std	Y+1, r18	; 0x01
    6a94:	3a 83       	std	Y+2, r19	; 0x02
    6a96:	4b 83       	std	Y+3, r20	; 0x03
    6a98:	5c 83       	std	Y+4, r21	; 0x04
    6a9a:	21 81       	ldd	r18, Z+1	; 0x01
    6a9c:	32 81       	ldd	r19, Z+2	; 0x02
    6a9e:	43 81       	ldd	r20, Z+3	; 0x03
    6aa0:	54 81       	ldd	r21, Z+4	; 0x04
    6aa2:	2d 83       	std	Y+5, r18	; 0x05
    6aa4:	3e 83       	std	Y+6, r19	; 0x06
    6aa6:	4f 83       	std	Y+7, r20	; 0x07
    6aa8:	58 87       	std	Y+8, r21	; 0x08
    6aaa:	0f 2e       	mov	r0, r31
    6aac:	f8 ee       	ldi	r31, 0xE8	; 232
    6aae:	8f 2e       	mov	r8, r31
    6ab0:	f3 e0       	ldi	r31, 0x03	; 3
    6ab2:	9f 2e       	mov	r9, r31
    6ab4:	a1 2c       	mov	r10, r1
    6ab6:	b1 2c       	mov	r11, r1
    6ab8:	f0 2d       	mov	r31, r0
    6aba:	a5 01       	movw	r20, r10
    6abc:	94 01       	movw	r18, r8
    6abe:	0e 94 d8 46 	call	0x8db0	; 0x8db0 <__udivmodsi4>
    6ac2:	29 87       	std	Y+9, r18	; 0x09
    6ac4:	3a 87       	std	Y+10, r19	; 0x0a
    6ac6:	4b 87       	std	Y+11, r20	; 0x0b
    6ac8:	5c 87       	std	Y+12, r21	; 0x0c
    6aca:	0f 2e       	mov	r0, r31
    6acc:	fa e0       	ldi	r31, 0x0A	; 10
    6ace:	cf 2e       	mov	r12, r31
    6ad0:	d1 2c       	mov	r13, r1
    6ad2:	e1 2c       	mov	r14, r1
    6ad4:	f1 2c       	mov	r15, r1
    6ad6:	f0 2d       	mov	r31, r0
    6ad8:	a7 01       	movw	r20, r14
    6ada:	96 01       	movw	r18, r12
    6adc:	0e 94 d8 46 	call	0x8db0	; 0x8db0 <__udivmodsi4>
    6ae0:	5f 93       	push	r21
    6ae2:	4f 93       	push	r20
    6ae4:	3f 93       	push	r19
    6ae6:	2f 93       	push	r18
    6ae8:	69 85       	ldd	r22, Y+9	; 0x09
    6aea:	7a 85       	ldd	r23, Y+10	; 0x0a
    6aec:	8b 85       	ldd	r24, Y+11	; 0x0b
    6aee:	9c 85       	ldd	r25, Y+12	; 0x0c
    6af0:	20 e8       	ldi	r18, 0x80	; 128
    6af2:	36 e9       	ldi	r19, 0x96	; 150
    6af4:	48 e9       	ldi	r20, 0x98	; 152
    6af6:	50 e0       	ldi	r21, 0x00	; 0
    6af8:	0e 94 d8 46 	call	0x8db0	; 0x8db0 <__udivmodsi4>
    6afc:	9f 93       	push	r25
    6afe:	8f 93       	push	r24
    6b00:	7f 93       	push	r23
    6b02:	6f 93       	push	r22
    6b04:	c3 01       	movw	r24, r6
    6b06:	b2 01       	movw	r22, r4
    6b08:	a5 01       	movw	r20, r10
    6b0a:	94 01       	movw	r18, r8
    6b0c:	0e 94 d8 46 	call	0x8db0	; 0x8db0 <__udivmodsi4>
    6b10:	72 2e       	mov	r7, r18
    6b12:	63 2e       	mov	r6, r19
    6b14:	54 2e       	mov	r5, r20
    6b16:	45 2e       	mov	r4, r21
    6b18:	a7 01       	movw	r20, r14
    6b1a:	96 01       	movw	r18, r12
    6b1c:	0e 94 d8 46 	call	0x8db0	; 0x8db0 <__udivmodsi4>
    6b20:	5f 93       	push	r21
    6b22:	4f 93       	push	r20
    6b24:	3f 93       	push	r19
    6b26:	2f 93       	push	r18
    6b28:	4f 92       	push	r4
    6b2a:	5f 92       	push	r5
    6b2c:	6f 92       	push	r6
    6b2e:	7f 92       	push	r7
    6b30:	69 81       	ldd	r22, Y+1	; 0x01
    6b32:	7a 81       	ldd	r23, Y+2	; 0x02
    6b34:	8b 81       	ldd	r24, Y+3	; 0x03
    6b36:	9c 81       	ldd	r25, Y+4	; 0x04
    6b38:	a5 01       	movw	r20, r10
    6b3a:	94 01       	movw	r18, r8
    6b3c:	0e 94 d8 46 	call	0x8db0	; 0x8db0 <__udivmodsi4>
    6b40:	72 2e       	mov	r7, r18
    6b42:	63 2e       	mov	r6, r19
    6b44:	54 2e       	mov	r5, r20
    6b46:	45 2e       	mov	r4, r21
    6b48:	a7 01       	movw	r20, r14
    6b4a:	96 01       	movw	r18, r12
    6b4c:	0e 94 d8 46 	call	0x8db0	; 0x8db0 <__udivmodsi4>
    6b50:	5f 93       	push	r21
    6b52:	4f 93       	push	r20
    6b54:	3f 93       	push	r19
    6b56:	2f 93       	push	r18
    6b58:	4f 92       	push	r4
    6b5a:	5f 92       	push	r5
    6b5c:	6f 92       	push	r6
    6b5e:	7f 92       	push	r7
    6b60:	6d 81       	ldd	r22, Y+5	; 0x05
    6b62:	7e 81       	ldd	r23, Y+6	; 0x06
    6b64:	8f 81       	ldd	r24, Y+7	; 0x07
    6b66:	98 85       	ldd	r25, Y+8	; 0x08
    6b68:	a5 01       	movw	r20, r10
    6b6a:	94 01       	movw	r18, r8
    6b6c:	0e 94 d8 46 	call	0x8db0	; 0x8db0 <__udivmodsi4>
    6b70:	b2 2e       	mov	r11, r18
    6b72:	a3 2e       	mov	r10, r19
    6b74:	94 2e       	mov	r9, r20
    6b76:	85 2e       	mov	r8, r21
    6b78:	a7 01       	movw	r20, r14
    6b7a:	96 01       	movw	r18, r12
    6b7c:	0e 94 d8 46 	call	0x8db0	; 0x8db0 <__udivmodsi4>
    6b80:	5f 93       	push	r21
    6b82:	4f 93       	push	r20
    6b84:	3f 93       	push	r19
    6b86:	2f 93       	push	r18
    6b88:	8f 92       	push	r8
    6b8a:	9f 92       	push	r9
    6b8c:	af 92       	push	r10
    6b8e:	bf 92       	push	r11
    6b90:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <db_save_status+0x1>
    6b94:	8f 93       	push	r24
    6b96:	80 91 1a 02 	lds	r24, 0x021A	; 0x80021a <db_save_status>
    6b9a:	8f 93       	push	r24
    6b9c:	ea e0       	ldi	r30, 0x0A	; 10
    6b9e:	fb e0       	ldi	r31, 0x0B	; 11
    6ba0:	81 81       	ldd	r24, Z+1	; 0x01
    6ba2:	8f 93       	push	r24
    6ba4:	80 81       	ld	r24, Z
    6ba6:	8f 93       	push	r24
    6ba8:	83 e4       	ldi	r24, 0x43	; 67
    6baa:	9a e0       	ldi	r25, 0x0A	; 10
    6bac:	9f 93       	push	r25
    6bae:	8f 93       	push	r24
    6bb0:	02 0d       	add	r16, r2
    6bb2:	13 1d       	adc	r17, r3
    6bb4:	1f 93       	push	r17
    6bb6:	0f 93       	push	r16
    6bb8:	0e 94 f4 47 	call	0x8fe8	; 0x8fe8 <sprintf>
    6bbc:	f1 01       	movw	r30, r2
    6bbe:	01 90       	ld	r0, Z+
    6bc0:	00 20       	and	r0, r0
    6bc2:	e9 f7       	brne	.-6      	; 0x6bbe <_Z18rtuPrepareGPRSDataPc25gprs_upload_data_pkt_id_t+0x372>
    6bc4:	31 97       	sbiw	r30, 0x01	; 1
    6bc6:	bf 01       	movw	r22, r30
    6bc8:	62 19       	sub	r22, r2
    6bca:	73 09       	sbc	r23, r3
    6bcc:	f1 01       	movw	r30, r2
    6bce:	e6 0f       	add	r30, r22
    6bd0:	f7 1f       	adc	r31, r23
    6bd2:	0f b6       	in	r0, 0x3f	; 63
    6bd4:	f8 94       	cli
    6bd6:	de bf       	out	0x3e, r29	; 62
    6bd8:	0f be       	out	0x3f, r0	; 63
    6bda:	cd bf       	out	0x3d, r28	; 61
    6bdc:	40 e0       	ldi	r20, 0x00	; 0
    6bde:	50 e0       	ldi	r21, 0x00	; 0
    6be0:	03 e4       	ldi	r16, 0x43	; 67
    6be2:	13 e1       	ldi	r17, 0x13	; 19
    6be4:	ee 24       	eor	r14, r14
    6be6:	e3 94       	inc	r14
    6be8:	f1 2c       	mov	r15, r1
    6bea:	97 01       	movw	r18, r14
    6bec:	04 2e       	mov	r0, r20
    6bee:	02 c0       	rjmp	.+4      	; 0x6bf4 <_Z18rtuPrepareGPRSDataPc25gprs_upload_data_pkt_id_t+0x3a8>
    6bf0:	22 0f       	add	r18, r18
    6bf2:	33 1f       	adc	r19, r19
    6bf4:	0a 94       	dec	r0
    6bf6:	e2 f7       	brpl	.-8      	; 0x6bf0 <_Z18rtuPrepareGPRSDataPc25gprs_upload_data_pkt_id_t+0x3a4>
    6bf8:	d8 01       	movw	r26, r16
    6bfa:	51 96       	adiw	r26, 0x11	; 17
    6bfc:	8d 91       	ld	r24, X+
    6bfe:	9c 91       	ld	r25, X
    6c00:	52 97       	sbiw	r26, 0x12	; 18
    6c02:	82 23       	and	r24, r18
    6c04:	93 23       	and	r25, r19
    6c06:	04 2e       	mov	r0, r20
    6c08:	02 c0       	rjmp	.+4      	; 0x6c0e <_Z18rtuPrepareGPRSDataPc25gprs_upload_data_pkt_id_t+0x3c2>
    6c0a:	96 95       	lsr	r25
    6c0c:	87 95       	ror	r24
    6c0e:	0a 94       	dec	r0
    6c10:	e2 f7       	brpl	.-8      	; 0x6c0a <_Z18rtuPrepareGPRSDataPc25gprs_upload_data_pkt_id_t+0x3be>
    6c12:	80 5d       	subi	r24, 0xD0	; 208
    6c14:	81 93       	st	Z+, r24
    6c16:	4f 5f       	subi	r20, 0xFF	; 255
    6c18:	5f 4f       	sbci	r21, 0xFF	; 255
    6c1a:	48 30       	cpi	r20, 0x08	; 8
    6c1c:	51 05       	cpc	r21, r1
    6c1e:	29 f7       	brne	.-54     	; 0x6bea <_Z18rtuPrepareGPRSDataPc25gprs_upload_data_pkt_id_t+0x39e>
    6c20:	e3 e4       	ldi	r30, 0x43	; 67
    6c22:	f3 e1       	ldi	r31, 0x13	; 19
    6c24:	80 8d       	ldd	r24, Z+24	; 0x18
    6c26:	1f 92       	push	r1
    6c28:	8f 93       	push	r24
    6c2a:	87 89       	ldd	r24, Z+23	; 0x17
    6c2c:	1f 92       	push	r1
    6c2e:	8f 93       	push	r24
    6c30:	86 89       	ldd	r24, Z+22	; 0x16
    6c32:	1f 92       	push	r1
    6c34:	8f 93       	push	r24
    6c36:	85 89       	ldd	r24, Z+21	; 0x15
    6c38:	1f 92       	push	r1
    6c3a:	8f 93       	push	r24
    6c3c:	84 89       	ldd	r24, Z+20	; 0x14
    6c3e:	1f 92       	push	r1
    6c40:	8f 93       	push	r24
    6c42:	83 89       	ldd	r24, Z+19	; 0x13
    6c44:	1f 92       	push	r1
    6c46:	8f 93       	push	r24
    6c48:	85 e9       	ldi	r24, 0x95	; 149
    6c4a:	9a e0       	ldi	r25, 0x0A	; 10
    6c4c:	9f 93       	push	r25
    6c4e:	8f 93       	push	r24
    6c50:	68 5f       	subi	r22, 0xF8	; 248
    6c52:	7f 4f       	sbci	r23, 0xFF	; 255
    6c54:	f1 01       	movw	r30, r2
    6c56:	e6 0f       	add	r30, r22
    6c58:	f7 1f       	adc	r31, r23
    6c5a:	fa 83       	std	Y+2, r31	; 0x02
    6c5c:	e9 83       	std	Y+1, r30	; 0x01
    6c5e:	ff 93       	push	r31
    6c60:	ef 93       	push	r30
    6c62:	0e 94 f4 47 	call	0x8fe8	; 0x8fe8 <sprintf>
    6c66:	0f b6       	in	r0, 0x3f	; 63
    6c68:	f8 94       	cli
    6c6a:	de bf       	out	0x3e, r29	; 62
    6c6c:	0f be       	out	0x3f, r0	; 63
    6c6e:	cd bf       	out	0x3d, r28	; 61
    6c70:	00 c1       	rjmp	.+512    	; 0x6e72 <_Z18rtuPrepareGPRSDataPc25gprs_upload_data_pkt_id_t+0x626>
    6c72:	61 3a       	cpi	r22, 0xA1	; 161
    6c74:	09 f0       	breq	.+2      	; 0x6c78 <_Z18rtuPrepareGPRSDataPc25gprs_upload_data_pkt_id_t+0x42c>
    6c76:	fd c0       	rjmp	.+506    	; 0x6e72 <_Z18rtuPrepareGPRSDataPc25gprs_upload_data_pkt_id_t+0x626>
    6c78:	e3 e4       	ldi	r30, 0x43	; 67
    6c7a:	f3 e1       	ldi	r31, 0x13	; 19
    6c7c:	65 85       	ldd	r22, Z+13	; 0x0d
    6c7e:	76 85       	ldd	r23, Z+14	; 0x0e
    6c80:	87 85       	ldd	r24, Z+15	; 0x0f
    6c82:	90 89       	ldd	r25, Z+16	; 0x10
    6c84:	41 84       	ldd	r4, Z+9	; 0x09
    6c86:	52 84       	ldd	r5, Z+10	; 0x0a
    6c88:	63 84       	ldd	r6, Z+11	; 0x0b
    6c8a:	74 84       	ldd	r7, Z+12	; 0x0c
    6c8c:	25 81       	ldd	r18, Z+5	; 0x05
    6c8e:	36 81       	ldd	r19, Z+6	; 0x06
    6c90:	47 81       	ldd	r20, Z+7	; 0x07
    6c92:	50 85       	ldd	r21, Z+8	; 0x08
    6c94:	29 83       	std	Y+1, r18	; 0x01
    6c96:	3a 83       	std	Y+2, r19	; 0x02
    6c98:	4b 83       	std	Y+3, r20	; 0x03
    6c9a:	5c 83       	std	Y+4, r21	; 0x04
    6c9c:	21 81       	ldd	r18, Z+1	; 0x01
    6c9e:	32 81       	ldd	r19, Z+2	; 0x02
    6ca0:	43 81       	ldd	r20, Z+3	; 0x03
    6ca2:	54 81       	ldd	r21, Z+4	; 0x04
    6ca4:	2d 83       	std	Y+5, r18	; 0x05
    6ca6:	3e 83       	std	Y+6, r19	; 0x06
    6ca8:	4f 83       	std	Y+7, r20	; 0x07
    6caa:	58 87       	std	Y+8, r21	; 0x08
    6cac:	0f 2e       	mov	r0, r31
    6cae:	f8 ee       	ldi	r31, 0xE8	; 232
    6cb0:	8f 2e       	mov	r8, r31
    6cb2:	f3 e0       	ldi	r31, 0x03	; 3
    6cb4:	9f 2e       	mov	r9, r31
    6cb6:	a1 2c       	mov	r10, r1
    6cb8:	b1 2c       	mov	r11, r1
    6cba:	f0 2d       	mov	r31, r0
    6cbc:	a5 01       	movw	r20, r10
    6cbe:	94 01       	movw	r18, r8
    6cc0:	0e 94 d8 46 	call	0x8db0	; 0x8db0 <__udivmodsi4>
    6cc4:	29 87       	std	Y+9, r18	; 0x09
    6cc6:	3a 87       	std	Y+10, r19	; 0x0a
    6cc8:	4b 87       	std	Y+11, r20	; 0x0b
    6cca:	5c 87       	std	Y+12, r21	; 0x0c
    6ccc:	0f 2e       	mov	r0, r31
    6cce:	fa e0       	ldi	r31, 0x0A	; 10
    6cd0:	cf 2e       	mov	r12, r31
    6cd2:	d1 2c       	mov	r13, r1
    6cd4:	e1 2c       	mov	r14, r1
    6cd6:	f1 2c       	mov	r15, r1
    6cd8:	f0 2d       	mov	r31, r0
    6cda:	a7 01       	movw	r20, r14
    6cdc:	96 01       	movw	r18, r12
    6cde:	0e 94 d8 46 	call	0x8db0	; 0x8db0 <__udivmodsi4>
    6ce2:	5f 93       	push	r21
    6ce4:	4f 93       	push	r20
    6ce6:	3f 93       	push	r19
    6ce8:	2f 93       	push	r18
    6cea:	69 85       	ldd	r22, Y+9	; 0x09
    6cec:	7a 85       	ldd	r23, Y+10	; 0x0a
    6cee:	8b 85       	ldd	r24, Y+11	; 0x0b
    6cf0:	9c 85       	ldd	r25, Y+12	; 0x0c
    6cf2:	20 e8       	ldi	r18, 0x80	; 128
    6cf4:	36 e9       	ldi	r19, 0x96	; 150
    6cf6:	48 e9       	ldi	r20, 0x98	; 152
    6cf8:	50 e0       	ldi	r21, 0x00	; 0
    6cfa:	0e 94 d8 46 	call	0x8db0	; 0x8db0 <__udivmodsi4>
    6cfe:	9f 93       	push	r25
    6d00:	8f 93       	push	r24
    6d02:	7f 93       	push	r23
    6d04:	6f 93       	push	r22
    6d06:	c3 01       	movw	r24, r6
    6d08:	b2 01       	movw	r22, r4
    6d0a:	a5 01       	movw	r20, r10
    6d0c:	94 01       	movw	r18, r8
    6d0e:	0e 94 d8 46 	call	0x8db0	; 0x8db0 <__udivmodsi4>
    6d12:	72 2e       	mov	r7, r18
    6d14:	63 2e       	mov	r6, r19
    6d16:	54 2e       	mov	r5, r20
    6d18:	45 2e       	mov	r4, r21
    6d1a:	a7 01       	movw	r20, r14
    6d1c:	96 01       	movw	r18, r12
    6d1e:	0e 94 d8 46 	call	0x8db0	; 0x8db0 <__udivmodsi4>
    6d22:	5f 93       	push	r21
    6d24:	4f 93       	push	r20
    6d26:	3f 93       	push	r19
    6d28:	2f 93       	push	r18
    6d2a:	4f 92       	push	r4
    6d2c:	5f 92       	push	r5
    6d2e:	6f 92       	push	r6
    6d30:	7f 92       	push	r7
    6d32:	69 81       	ldd	r22, Y+1	; 0x01
    6d34:	7a 81       	ldd	r23, Y+2	; 0x02
    6d36:	8b 81       	ldd	r24, Y+3	; 0x03
    6d38:	9c 81       	ldd	r25, Y+4	; 0x04
    6d3a:	a5 01       	movw	r20, r10
    6d3c:	94 01       	movw	r18, r8
    6d3e:	0e 94 d8 46 	call	0x8db0	; 0x8db0 <__udivmodsi4>
    6d42:	72 2e       	mov	r7, r18
    6d44:	63 2e       	mov	r6, r19
    6d46:	54 2e       	mov	r5, r20
    6d48:	45 2e       	mov	r4, r21
    6d4a:	a7 01       	movw	r20, r14
    6d4c:	96 01       	movw	r18, r12
    6d4e:	0e 94 d8 46 	call	0x8db0	; 0x8db0 <__udivmodsi4>
    6d52:	5f 93       	push	r21
    6d54:	4f 93       	push	r20
    6d56:	3f 93       	push	r19
    6d58:	2f 93       	push	r18
    6d5a:	4f 92       	push	r4
    6d5c:	5f 92       	push	r5
    6d5e:	6f 92       	push	r6
    6d60:	7f 92       	push	r7
    6d62:	6d 81       	ldd	r22, Y+5	; 0x05
    6d64:	7e 81       	ldd	r23, Y+6	; 0x06
    6d66:	8f 81       	ldd	r24, Y+7	; 0x07
    6d68:	98 85       	ldd	r25, Y+8	; 0x08
    6d6a:	a5 01       	movw	r20, r10
    6d6c:	94 01       	movw	r18, r8
    6d6e:	0e 94 d8 46 	call	0x8db0	; 0x8db0 <__udivmodsi4>
    6d72:	b2 2e       	mov	r11, r18
    6d74:	a3 2e       	mov	r10, r19
    6d76:	94 2e       	mov	r9, r20
    6d78:	85 2e       	mov	r8, r21
    6d7a:	a7 01       	movw	r20, r14
    6d7c:	96 01       	movw	r18, r12
    6d7e:	0e 94 d8 46 	call	0x8db0	; 0x8db0 <__udivmodsi4>
    6d82:	5f 93       	push	r21
    6d84:	4f 93       	push	r20
    6d86:	3f 93       	push	r19
    6d88:	2f 93       	push	r18
    6d8a:	8f 92       	push	r8
    6d8c:	9f 92       	push	r9
    6d8e:	af 92       	push	r10
    6d90:	bf 92       	push	r11
    6d92:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <db_save_status+0x1>
    6d96:	8f 93       	push	r24
    6d98:	80 91 1a 02 	lds	r24, 0x021A	; 0x80021a <db_save_status>
    6d9c:	8f 93       	push	r24
    6d9e:	ea e0       	ldi	r30, 0x0A	; 10
    6da0:	fb e0       	ldi	r31, 0x0B	; 11
    6da2:	81 81       	ldd	r24, Z+1	; 0x01
    6da4:	8f 93       	push	r24
    6da6:	80 81       	ld	r24, Z
    6da8:	8f 93       	push	r24
    6daa:	83 e4       	ldi	r24, 0x43	; 67
    6dac:	9a e0       	ldi	r25, 0x0A	; 10
    6dae:	9f 93       	push	r25
    6db0:	8f 93       	push	r24
    6db2:	02 0d       	add	r16, r2
    6db4:	13 1d       	adc	r17, r3
    6db6:	1f 93       	push	r17
    6db8:	0f 93       	push	r16
    6dba:	0e 94 f4 47 	call	0x8fe8	; 0x8fe8 <sprintf>
    6dbe:	f1 01       	movw	r30, r2
    6dc0:	01 90       	ld	r0, Z+
    6dc2:	00 20       	and	r0, r0
    6dc4:	e9 f7       	brne	.-6      	; 0x6dc0 <_Z18rtuPrepareGPRSDataPc25gprs_upload_data_pkt_id_t+0x574>
    6dc6:	31 97       	sbiw	r30, 0x01	; 1
    6dc8:	bf 01       	movw	r22, r30
    6dca:	62 19       	sub	r22, r2
    6dcc:	73 09       	sbc	r23, r3
    6dce:	f1 01       	movw	r30, r2
    6dd0:	e6 0f       	add	r30, r22
    6dd2:	f7 1f       	adc	r31, r23
    6dd4:	0f b6       	in	r0, 0x3f	; 63
    6dd6:	f8 94       	cli
    6dd8:	de bf       	out	0x3e, r29	; 62
    6dda:	0f be       	out	0x3f, r0	; 63
    6ddc:	cd bf       	out	0x3d, r28	; 61
    6dde:	40 e0       	ldi	r20, 0x00	; 0
    6de0:	50 e0       	ldi	r21, 0x00	; 0
    6de2:	03 e4       	ldi	r16, 0x43	; 67
    6de4:	13 e1       	ldi	r17, 0x13	; 19
    6de6:	ee 24       	eor	r14, r14
    6de8:	e3 94       	inc	r14
    6dea:	f1 2c       	mov	r15, r1
    6dec:	97 01       	movw	r18, r14
    6dee:	04 2e       	mov	r0, r20
    6df0:	02 c0       	rjmp	.+4      	; 0x6df6 <_Z18rtuPrepareGPRSDataPc25gprs_upload_data_pkt_id_t+0x5aa>
    6df2:	22 0f       	add	r18, r18
    6df4:	33 1f       	adc	r19, r19
    6df6:	0a 94       	dec	r0
    6df8:	e2 f7       	brpl	.-8      	; 0x6df2 <_Z18rtuPrepareGPRSDataPc25gprs_upload_data_pkt_id_t+0x5a6>
    6dfa:	d8 01       	movw	r26, r16
    6dfc:	51 96       	adiw	r26, 0x11	; 17
    6dfe:	8d 91       	ld	r24, X+
    6e00:	9c 91       	ld	r25, X
    6e02:	52 97       	sbiw	r26, 0x12	; 18
    6e04:	82 23       	and	r24, r18
    6e06:	93 23       	and	r25, r19
    6e08:	04 2e       	mov	r0, r20
    6e0a:	02 c0       	rjmp	.+4      	; 0x6e10 <_Z18rtuPrepareGPRSDataPc25gprs_upload_data_pkt_id_t+0x5c4>
    6e0c:	96 95       	lsr	r25
    6e0e:	87 95       	ror	r24
    6e10:	0a 94       	dec	r0
    6e12:	e2 f7       	brpl	.-8      	; 0x6e0c <_Z18rtuPrepareGPRSDataPc25gprs_upload_data_pkt_id_t+0x5c0>
    6e14:	80 5d       	subi	r24, 0xD0	; 208
    6e16:	81 93       	st	Z+, r24
    6e18:	4f 5f       	subi	r20, 0xFF	; 255
    6e1a:	5f 4f       	sbci	r21, 0xFF	; 255
    6e1c:	48 30       	cpi	r20, 0x08	; 8
    6e1e:	51 05       	cpc	r21, r1
    6e20:	29 f7       	brne	.-54     	; 0x6dec <_Z18rtuPrepareGPRSDataPc25gprs_upload_data_pkt_id_t+0x5a0>
    6e22:	e3 e4       	ldi	r30, 0x43	; 67
    6e24:	f3 e1       	ldi	r31, 0x13	; 19
    6e26:	80 8d       	ldd	r24, Z+24	; 0x18
    6e28:	1f 92       	push	r1
    6e2a:	8f 93       	push	r24
    6e2c:	87 89       	ldd	r24, Z+23	; 0x17
    6e2e:	1f 92       	push	r1
    6e30:	8f 93       	push	r24
    6e32:	86 89       	ldd	r24, Z+22	; 0x16
    6e34:	1f 92       	push	r1
    6e36:	8f 93       	push	r24
    6e38:	85 89       	ldd	r24, Z+21	; 0x15
    6e3a:	1f 92       	push	r1
    6e3c:	8f 93       	push	r24
    6e3e:	84 89       	ldd	r24, Z+20	; 0x14
    6e40:	1f 92       	push	r1
    6e42:	8f 93       	push	r24
    6e44:	83 89       	ldd	r24, Z+19	; 0x13
    6e46:	1f 92       	push	r1
    6e48:	8f 93       	push	r24
    6e4a:	85 e9       	ldi	r24, 0x95	; 149
    6e4c:	9a e0       	ldi	r25, 0x0A	; 10
    6e4e:	9f 93       	push	r25
    6e50:	8f 93       	push	r24
    6e52:	68 5f       	subi	r22, 0xF8	; 248
    6e54:	7f 4f       	sbci	r23, 0xFF	; 255
    6e56:	f1 01       	movw	r30, r2
    6e58:	e6 0f       	add	r30, r22
    6e5a:	f7 1f       	adc	r31, r23
    6e5c:	fa 83       	std	Y+2, r31	; 0x02
    6e5e:	e9 83       	std	Y+1, r30	; 0x01
    6e60:	ff 93       	push	r31
    6e62:	ef 93       	push	r30
    6e64:	0e 94 f4 47 	call	0x8fe8	; 0x8fe8 <sprintf>
    6e68:	0f b6       	in	r0, 0x3f	; 63
    6e6a:	f8 94       	cli
    6e6c:	de bf       	out	0x3e, r29	; 62
    6e6e:	0f be       	out	0x3f, r0	; 63
    6e70:	cd bf       	out	0x3d, r28	; 61
    6e72:	81 e0       	ldi	r24, 0x01	; 1
    6e74:	2e 96       	adiw	r28, 0x0e	; 14
    6e76:	0f b6       	in	r0, 0x3f	; 63
    6e78:	f8 94       	cli
    6e7a:	de bf       	out	0x3e, r29	; 62
    6e7c:	0f be       	out	0x3f, r0	; 63
    6e7e:	cd bf       	out	0x3d, r28	; 61
    6e80:	df 91       	pop	r29
    6e82:	cf 91       	pop	r28
    6e84:	1f 91       	pop	r17
    6e86:	0f 91       	pop	r16
    6e88:	ff 90       	pop	r15
    6e8a:	ef 90       	pop	r14
    6e8c:	df 90       	pop	r13
    6e8e:	cf 90       	pop	r12
    6e90:	bf 90       	pop	r11
    6e92:	af 90       	pop	r10
    6e94:	9f 90       	pop	r9
    6e96:	8f 90       	pop	r8
    6e98:	7f 90       	pop	r7
    6e9a:	6f 90       	pop	r6
    6e9c:	5f 90       	pop	r5
    6e9e:	4f 90       	pop	r4
    6ea0:	3f 90       	pop	r3
    6ea2:	2f 90       	pop	r2
    6ea4:	08 95       	ret

00006ea6 <_Z16save_FL_rtu_datav>:
    6ea6:	8d e7       	ldi	r24, 0x7D	; 125
    6ea8:	93 e1       	ldi	r25, 0x13	; 19
    6eaa:	0e 94 4e 19 	call	0x329c	; 0x329c <_Z12flashWriteLRP12FL_rtu_log_t>
    6eae:	0c 94 3c 17 	jmp	0x2e78	; 0x2e78 <_Z15flashWriteMR_BRv>
    6eb2:	08 95       	ret

00006eb4 <_Z13writeDefaultsv>:
    6eb4:	10 92 35 13 	sts	0x1335, r1	; 0x801335 <freq_updated_data+0x2>
    6eb8:	10 92 34 13 	sts	0x1334, r1	; 0x801334 <freq_updated_data+0x1>
    6ebc:	0e 94 78 1a 	call	0x34f0	; 0x34f0 <_Z27flashClearFreqUpdatedConfigv>
    6ec0:	ed e7       	ldi	r30, 0x7D	; 125
    6ec2:	f3 e1       	ldi	r31, 0x13	; 19
    6ec4:	11 82       	std	Z+1, r1	; 0x01
    6ec6:	10 82       	st	Z, r1
    6ec8:	12 82       	std	Z+2, r1	; 0x02
    6eca:	0e 94 7e 02 	call	0x4fc	; 0x4fc <_Z25write_default_GPRS_configv>
    6ece:	80 e2       	ldi	r24, 0x20	; 32
    6ed0:	ea e0       	ldi	r30, 0x0A	; 10
    6ed2:	fb e0       	ldi	r31, 0x0B	; 11
    6ed4:	df 01       	movw	r26, r30
    6ed6:	1d 92       	st	X+, r1
    6ed8:	8a 95       	dec	r24
    6eda:	e9 f7       	brne	.-6      	; 0x6ed6 <_Z13writeDefaultsv+0x22>
    6edc:	0c 94 7e 03 	jmp	0x6fc	; 0x6fc <_Z26write_default_product_infov>
    6ee0:	08 95       	ret

00006ee2 <_Z14read_flow_datav>:
    6ee2:	cf 92       	push	r12
    6ee4:	df 92       	push	r13
    6ee6:	ef 92       	push	r14
    6ee8:	ff 92       	push	r15
    6eea:	cf 93       	push	r28
    6eec:	df 93       	push	r29
    6eee:	c5 eb       	ldi	r28, 0xB5	; 181
    6ef0:	d3 e1       	ldi	r29, 0x13	; 19
    6ef2:	28 8d       	ldd	r18, Y+24	; 0x18
    6ef4:	39 8d       	ldd	r19, Y+25	; 0x19
    6ef6:	4a 8d       	ldd	r20, Y+26	; 0x1a
    6ef8:	5b 8d       	ldd	r21, Y+27	; 0x1b
    6efa:	20 93 9d 13 	sts	0x139D, r18	; 0x80139d <ram_data>
    6efe:	30 93 9e 13 	sts	0x139E, r19	; 0x80139e <ram_data+0x1>
    6f02:	40 93 9f 13 	sts	0x139F, r20	; 0x80139f <ram_data+0x2>
    6f06:	50 93 a0 13 	sts	0x13A0, r21	; 0x8013a0 <ram_data+0x3>
    6f0a:	a8 ee       	ldi	r26, 0xE8	; 232
    6f0c:	b3 e0       	ldi	r27, 0x03	; 3
    6f0e:	0e 94 11 47 	call	0x8e22	; 0x8e22 <__muluhisi3>
    6f12:	20 e1       	ldi	r18, 0x10	; 16
    6f14:	3e e0       	ldi	r19, 0x0E	; 14
    6f16:	40 e0       	ldi	r20, 0x00	; 0
    6f18:	50 e0       	ldi	r21, 0x00	; 0
    6f1a:	0e 94 d8 46 	call	0x8db0	; 0x8db0 <__udivmodsi4>
    6f1e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    6f20:	9d 8d       	ldd	r25, Y+29	; 0x1d
    6f22:	ae 8d       	ldd	r26, Y+30	; 0x1e
    6f24:	bf 8d       	ldd	r27, Y+31	; 0x1f
    6f26:	bc 01       	movw	r22, r24
    6f28:	cd 01       	movw	r24, r26
    6f2a:	62 0f       	add	r22, r18
    6f2c:	73 1f       	adc	r23, r19
    6f2e:	84 1f       	adc	r24, r20
    6f30:	95 1f       	adc	r25, r21
    6f32:	6c 8f       	std	Y+28, r22	; 0x1c
    6f34:	7d 8f       	std	Y+29, r23	; 0x1d
    6f36:	8e 8f       	std	Y+30, r24	; 0x1e
    6f38:	9f 8f       	std	Y+31, r25	; 0x1f
    6f3a:	68 3e       	cpi	r22, 0xE8	; 232
    6f3c:	23 e0       	ldi	r18, 0x03	; 3
    6f3e:	72 07       	cpc	r23, r18
    6f40:	81 05       	cpc	r24, r1
    6f42:	91 05       	cpc	r25, r1
    6f44:	b0 f1       	brcs	.+108    	; 0x6fb2 <_Z14read_flow_datav+0xd0>
    6f46:	28 ee       	ldi	r18, 0xE8	; 232
    6f48:	33 e0       	ldi	r19, 0x03	; 3
    6f4a:	40 e0       	ldi	r20, 0x00	; 0
    6f4c:	50 e0       	ldi	r21, 0x00	; 0
    6f4e:	0e 94 d8 46 	call	0x8db0	; 0x8db0 <__udivmodsi4>
    6f52:	6b 01       	movw	r12, r22
    6f54:	7c 01       	movw	r14, r24
    6f56:	ed e9       	ldi	r30, 0x9D	; 157
    6f58:	f3 e1       	ldi	r31, 0x13	; 19
    6f5a:	84 81       	ldd	r24, Z+4	; 0x04
    6f5c:	95 81       	ldd	r25, Z+5	; 0x05
    6f5e:	a6 81       	ldd	r26, Z+6	; 0x06
    6f60:	b7 81       	ldd	r27, Z+7	; 0x07
    6f62:	82 0f       	add	r24, r18
    6f64:	93 1f       	adc	r25, r19
    6f66:	a4 1f       	adc	r26, r20
    6f68:	b5 1f       	adc	r27, r21
    6f6a:	84 83       	std	Z+4, r24	; 0x04
    6f6c:	95 83       	std	Z+5, r25	; 0x05
    6f6e:	a6 83       	std	Z+6, r26	; 0x06
    6f70:	b7 83       	std	Z+7, r27	; 0x07
    6f72:	80 85       	ldd	r24, Z+8	; 0x08
    6f74:	91 85       	ldd	r25, Z+9	; 0x09
    6f76:	a2 85       	ldd	r26, Z+10	; 0x0a
    6f78:	b3 85       	ldd	r27, Z+11	; 0x0b
    6f7a:	82 0f       	add	r24, r18
    6f7c:	93 1f       	adc	r25, r19
    6f7e:	a4 1f       	adc	r26, r20
    6f80:	b5 1f       	adc	r27, r21
    6f82:	80 87       	std	Z+8, r24	; 0x08
    6f84:	91 87       	std	Z+9, r25	; 0x09
    6f86:	a2 87       	std	Z+10, r26	; 0x0a
    6f88:	b3 87       	std	Z+11, r27	; 0x0b
    6f8a:	84 85       	ldd	r24, Z+12	; 0x0c
    6f8c:	95 85       	ldd	r25, Z+13	; 0x0d
    6f8e:	a6 85       	ldd	r26, Z+14	; 0x0e
    6f90:	b7 85       	ldd	r27, Z+15	; 0x0f
    6f92:	82 0f       	add	r24, r18
    6f94:	93 1f       	adc	r25, r19
    6f96:	a4 1f       	adc	r26, r20
    6f98:	b5 1f       	adc	r27, r21
    6f9a:	84 87       	std	Z+12, r24	; 0x0c
    6f9c:	95 87       	std	Z+13, r25	; 0x0d
    6f9e:	a6 87       	std	Z+14, r26	; 0x0e
    6fa0:	b7 87       	std	Z+15, r27	; 0x0f
    6fa2:	c0 92 d1 13 	sts	0x13D1, r12	; 0x8013d1 <sensor_data+0x1c>
    6fa6:	d0 92 d2 13 	sts	0x13D2, r13	; 0x8013d2 <sensor_data+0x1d>
    6faa:	e0 92 d3 13 	sts	0x13D3, r14	; 0x8013d3 <sensor_data+0x1e>
    6fae:	f0 92 d4 13 	sts	0x13D4, r15	; 0x8013d4 <sensor_data+0x1f>
    6fb2:	62 e0       	ldi	r22, 0x02	; 2
    6fb4:	70 e0       	ldi	r23, 0x00	; 0
    6fb6:	8b eb       	ldi	r24, 0xBB	; 187
    6fb8:	9a e0       	ldi	r25, 0x0A	; 10
    6fba:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <_Z12UWriteStringPKci>
    6fbe:	60 91 d1 13 	lds	r22, 0x13D1	; 0x8013d1 <sensor_data+0x1c>
    6fc2:	70 91 d2 13 	lds	r23, 0x13D2	; 0x8013d2 <sensor_data+0x1d>
    6fc6:	80 91 d3 13 	lds	r24, 0x13D3	; 0x8013d3 <sensor_data+0x1e>
    6fca:	90 91 d4 13 	lds	r25, 0x13D4	; 0x8013d4 <sensor_data+0x1f>
    6fce:	42 e0       	ldi	r20, 0x02	; 2
    6fd0:	0e 94 3e 09 	call	0x127c	; 0x127c <_Z9UWriteIntmc>
    6fd4:	62 e0       	ldi	r22, 0x02	; 2
    6fd6:	70 e0       	ldi	r23, 0x00	; 0
    6fd8:	81 ec       	ldi	r24, 0xC1	; 193
    6fda:	9a e0       	ldi	r25, 0x0A	; 10
    6fdc:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <_Z12UWriteStringPKci>
    6fe0:	cd e9       	ldi	r28, 0x9D	; 157
    6fe2:	d3 e1       	ldi	r29, 0x13	; 19
    6fe4:	68 81       	ld	r22, Y
    6fe6:	79 81       	ldd	r23, Y+1	; 0x01
    6fe8:	8a 81       	ldd	r24, Y+2	; 0x02
    6fea:	9b 81       	ldd	r25, Y+3	; 0x03
    6fec:	42 e0       	ldi	r20, 0x02	; 2
    6fee:	0e 94 3e 09 	call	0x127c	; 0x127c <_Z9UWriteIntmc>
    6ff2:	62 e0       	ldi	r22, 0x02	; 2
    6ff4:	70 e0       	ldi	r23, 0x00	; 0
    6ff6:	8c e2       	ldi	r24, 0x2C	; 44
    6ff8:	0e 94 c3 08 	call	0x1186	; 0x1186 <_Z10UWriteDataci>
    6ffc:	6c 81       	ldd	r22, Y+4	; 0x04
    6ffe:	7d 81       	ldd	r23, Y+5	; 0x05
    7000:	8e 81       	ldd	r24, Y+6	; 0x06
    7002:	9f 81       	ldd	r25, Y+7	; 0x07
    7004:	42 e0       	ldi	r20, 0x02	; 2
    7006:	0e 94 3e 09 	call	0x127c	; 0x127c <_Z9UWriteIntmc>
    700a:	62 e0       	ldi	r22, 0x02	; 2
    700c:	70 e0       	ldi	r23, 0x00	; 0
    700e:	8c e2       	ldi	r24, 0x2C	; 44
    7010:	0e 94 c3 08 	call	0x1186	; 0x1186 <_Z10UWriteDataci>
    7014:	6c 85       	ldd	r22, Y+12	; 0x0c
    7016:	7d 85       	ldd	r23, Y+13	; 0x0d
    7018:	8e 85       	ldd	r24, Y+14	; 0x0e
    701a:	9f 85       	ldd	r25, Y+15	; 0x0f
    701c:	42 e0       	ldi	r20, 0x02	; 2
    701e:	0e 94 3e 09 	call	0x127c	; 0x127c <_Z9UWriteIntmc>
    7022:	df 91       	pop	r29
    7024:	cf 91       	pop	r28
    7026:	ff 90       	pop	r15
    7028:	ef 90       	pop	r14
    702a:	df 90       	pop	r13
    702c:	cf 90       	pop	r12
    702e:	08 95       	ret

00007030 <_Z21compare_time_from_logv>:
    7030:	80 91 72 13 	lds	r24, 0x1372	; 0x801372 <last_record+0x15>
    7034:	85 31       	cpi	r24, 0x15	; 21
    7036:	08 f4       	brcc	.+2      	; 0x703a <_Z21compare_time_from_logv+0xa>
    7038:	db c0       	rjmp	.+438    	; 0x71f0 <_Z21compare_time_from_logv+0x1c0>
    703a:	20 91 af 13 	lds	r18, 0x13AF	; 0x8013af <ram_data+0x12>
    703e:	82 13       	cpse	r24, r18
    7040:	8d c0       	rjmp	.+282    	; 0x715c <_Z21compare_time_from_logv+0x12c>
    7042:	80 91 73 13 	lds	r24, 0x1373	; 0x801373 <last_record+0x16>
    7046:	90 91 b0 13 	lds	r25, 0x13B0	; 0x8013b0 <ram_data+0x13>
    704a:	89 13       	cpse	r24, r25
    704c:	cb c0       	rjmp	.+406    	; 0x71e4 <_Z21compare_time_from_logv+0x1b4>
    704e:	80 91 74 13 	lds	r24, 0x1374	; 0x801374 <last_record+0x17>
    7052:	20 91 b1 13 	lds	r18, 0x13B1	; 0x8013b1 <ram_data+0x14>
    7056:	82 17       	cp	r24, r18
    7058:	09 f4       	brne	.+2      	; 0x705c <_Z21compare_time_from_logv+0x2c>
    705a:	ca c0       	rjmp	.+404    	; 0x71f0 <_Z21compare_time_from_logv+0x1c0>
    705c:	30 e0       	ldi	r19, 0x00	; 0
    705e:	90 e0       	ldi	r25, 0x00	; 0
    7060:	01 96       	adiw	r24, 0x01	; 1
    7062:	28 17       	cp	r18, r24
    7064:	39 07       	cpc	r19, r25
    7066:	89 f4       	brne	.+34     	; 0x708a <_Z21compare_time_from_logv+0x5a>
    7068:	80 91 a1 13 	lds	r24, 0x13A1	; 0x8013a1 <ram_data+0x4>
    706c:	90 91 a2 13 	lds	r25, 0x13A2	; 0x8013a2 <ram_data+0x5>
    7070:	a0 91 a3 13 	lds	r26, 0x13A3	; 0x8013a3 <ram_data+0x6>
    7074:	b0 91 a4 13 	lds	r27, 0x13A4	; 0x8013a4 <ram_data+0x7>
    7078:	80 93 1f 13 	sts	0x131F, r24	; 0x80131f <yest_total>
    707c:	90 93 20 13 	sts	0x1320, r25	; 0x801320 <yest_total+0x1>
    7080:	a0 93 21 13 	sts	0x1321, r26	; 0x801321 <yest_total+0x2>
    7084:	b0 93 22 13 	sts	0x1322, r27	; 0x801322 <yest_total+0x3>
    7088:	0b c0       	rjmp	.+22     	; 0x70a0 <_Z21compare_time_from_logv+0x70>
    708a:	8f ef       	ldi	r24, 0xFF	; 255
    708c:	9f ef       	ldi	r25, 0xFF	; 255
    708e:	dc 01       	movw	r26, r24
    7090:	80 93 1f 13 	sts	0x131F, r24	; 0x80131f <yest_total>
    7094:	90 93 20 13 	sts	0x1320, r25	; 0x801320 <yest_total+0x1>
    7098:	a0 93 21 13 	sts	0x1321, r26	; 0x801321 <yest_total+0x2>
    709c:	b0 93 22 13 	sts	0x1322, r27	; 0x801322 <yest_total+0x3>
    70a0:	10 92 a1 13 	sts	0x13A1, r1	; 0x8013a1 <ram_data+0x4>
    70a4:	10 92 a2 13 	sts	0x13A2, r1	; 0x8013a2 <ram_data+0x5>
    70a8:	10 92 a3 13 	sts	0x13A3, r1	; 0x8013a3 <ram_data+0x6>
    70ac:	10 92 a4 13 	sts	0x13A4, r1	; 0x8013a4 <ram_data+0x7>
    70b0:	5d da       	rcall	.-2886   	; 0x656c <_Z18prepare_FL_LogDatav>
    70b2:	f9 de       	rcall	.-526    	; 0x6ea6 <_Z16save_FL_rtu_datav>
    70b4:	67 da       	rcall	.-2866   	; 0x6584 <_Z19prepare_e2p_y_totalv>
    70b6:	0e 94 40 04 	call	0x880	; 0x880 <_Z17e2p_write_y_totalv>
    70ba:	10 92 32 13 	sts	0x1332, r1	; 0x801332 <sms_alert_state>
    70be:	08 95       	ret
    70c0:	90 91 74 13 	lds	r25, 0x1374	; 0x801374 <last_record+0x17>
    70c4:	24 ee       	ldi	r18, 0xE4	; 228
    70c6:	29 0f       	add	r18, r25
    70c8:	22 30       	cpi	r18, 0x02	; 2
    70ca:	10 f4       	brcc	.+4      	; 0x70d0 <_Z21compare_time_from_logv+0xa0>
    70cc:	82 30       	cpi	r24, 0x02	; 2
    70ce:	c1 f0       	breq	.+48     	; 0x7100 <_Z21compare_time_from_logv+0xd0>
    70d0:	9e 31       	cpi	r25, 0x1E	; 30
    70d2:	31 f4       	brne	.+12     	; 0x70e0 <_Z21compare_time_from_logv+0xb0>
    70d4:	8d 7f       	andi	r24, 0xFD	; 253
    70d6:	84 30       	cpi	r24, 0x04	; 4
    70d8:	99 f0       	breq	.+38     	; 0x7100 <_Z21compare_time_from_logv+0xd0>
    70da:	89 30       	cpi	r24, 0x09	; 9
    70dc:	11 f5       	brne	.+68     	; 0x7122 <_Z21compare_time_from_logv+0xf2>
    70de:	10 c0       	rjmp	.+32     	; 0x7100 <_Z21compare_time_from_logv+0xd0>
    70e0:	9f 31       	cpi	r25, 0x1F	; 31
    70e2:	f9 f4       	brne	.+62     	; 0x7122 <_Z21compare_time_from_logv+0xf2>
    70e4:	98 2f       	mov	r25, r24
    70e6:	9d 7f       	andi	r25, 0xFD	; 253
    70e8:	91 30       	cpi	r25, 0x01	; 1
    70ea:	51 f0       	breq	.+20     	; 0x7100 <_Z21compare_time_from_logv+0xd0>
    70ec:	85 30       	cpi	r24, 0x05	; 5
    70ee:	41 f0       	breq	.+16     	; 0x7100 <_Z21compare_time_from_logv+0xd0>
    70f0:	99 ef       	ldi	r25, 0xF9	; 249
    70f2:	98 0f       	add	r25, r24
    70f4:	92 30       	cpi	r25, 0x02	; 2
    70f6:	20 f0       	brcs	.+8      	; 0x7100 <_Z21compare_time_from_logv+0xd0>
    70f8:	8a 30       	cpi	r24, 0x0A	; 10
    70fa:	11 f0       	breq	.+4      	; 0x7100 <_Z21compare_time_from_logv+0xd0>
    70fc:	8c 30       	cpi	r24, 0x0C	; 12
    70fe:	89 f4       	brne	.+34     	; 0x7122 <_Z21compare_time_from_logv+0xf2>
    7100:	80 91 a1 13 	lds	r24, 0x13A1	; 0x8013a1 <ram_data+0x4>
    7104:	90 91 a2 13 	lds	r25, 0x13A2	; 0x8013a2 <ram_data+0x5>
    7108:	a0 91 a3 13 	lds	r26, 0x13A3	; 0x8013a3 <ram_data+0x6>
    710c:	b0 91 a4 13 	lds	r27, 0x13A4	; 0x8013a4 <ram_data+0x7>
    7110:	80 93 1f 13 	sts	0x131F, r24	; 0x80131f <yest_total>
    7114:	90 93 20 13 	sts	0x1320, r25	; 0x801320 <yest_total+0x1>
    7118:	a0 93 21 13 	sts	0x1321, r26	; 0x801321 <yest_total+0x2>
    711c:	b0 93 22 13 	sts	0x1322, r27	; 0x801322 <yest_total+0x3>
    7120:	0b c0       	rjmp	.+22     	; 0x7138 <_Z21compare_time_from_logv+0x108>
    7122:	8f ef       	ldi	r24, 0xFF	; 255
    7124:	9f ef       	ldi	r25, 0xFF	; 255
    7126:	dc 01       	movw	r26, r24
    7128:	80 93 1f 13 	sts	0x131F, r24	; 0x80131f <yest_total>
    712c:	90 93 20 13 	sts	0x1320, r25	; 0x801320 <yest_total+0x1>
    7130:	a0 93 21 13 	sts	0x1321, r26	; 0x801321 <yest_total+0x2>
    7134:	b0 93 22 13 	sts	0x1322, r27	; 0x801322 <yest_total+0x3>
    7138:	ed e9       	ldi	r30, 0x9D	; 157
    713a:	f3 e1       	ldi	r31, 0x13	; 19
    713c:	14 82       	std	Z+4, r1	; 0x04
    713e:	15 82       	std	Z+5, r1	; 0x05
    7140:	16 82       	std	Z+6, r1	; 0x06
    7142:	17 82       	std	Z+7, r1	; 0x07
    7144:	10 86       	std	Z+8, r1	; 0x08
    7146:	11 86       	std	Z+9, r1	; 0x09
    7148:	12 86       	std	Z+10, r1	; 0x0a
    714a:	13 86       	std	Z+11, r1	; 0x0b
    714c:	0f da       	rcall	.-3042   	; 0x656c <_Z18prepare_FL_LogDatav>
    714e:	ab de       	rcall	.-682    	; 0x6ea6 <_Z16save_FL_rtu_datav>
    7150:	19 da       	rcall	.-3022   	; 0x6584 <_Z19prepare_e2p_y_totalv>
    7152:	0e 94 40 04 	call	0x880	; 0x880 <_Z17e2p_write_y_totalv>
    7156:	10 92 32 13 	sts	0x1332, r1	; 0x801332 <sms_alert_state>
    715a:	08 95       	ret
    715c:	90 91 b0 13 	lds	r25, 0x13B0	; 0x8013b0 <ram_data+0x13>
    7160:	91 30       	cpi	r25, 0x01	; 1
    7162:	19 f5       	brne	.+70     	; 0x71aa <_Z21compare_time_from_logv+0x17a>
    7164:	90 91 b1 13 	lds	r25, 0x13B1	; 0x8013b1 <ram_data+0x14>
    7168:	91 30       	cpi	r25, 0x01	; 1
    716a:	f9 f4       	brne	.+62     	; 0x71aa <_Z21compare_time_from_logv+0x17a>
    716c:	30 e0       	ldi	r19, 0x00	; 0
    716e:	90 e0       	ldi	r25, 0x00	; 0
    7170:	01 96       	adiw	r24, 0x01	; 1
    7172:	28 17       	cp	r18, r24
    7174:	39 07       	cpc	r19, r25
    7176:	c9 f4       	brne	.+50     	; 0x71aa <_Z21compare_time_from_logv+0x17a>
    7178:	80 91 74 13 	lds	r24, 0x1374	; 0x801374 <last_record+0x17>
    717c:	8f 31       	cpi	r24, 0x1F	; 31
    717e:	a9 f4       	brne	.+42     	; 0x71aa <_Z21compare_time_from_logv+0x17a>
    7180:	80 91 73 13 	lds	r24, 0x1373	; 0x801373 <last_record+0x16>
    7184:	8c 30       	cpi	r24, 0x0C	; 12
    7186:	89 f4       	brne	.+34     	; 0x71aa <_Z21compare_time_from_logv+0x17a>
    7188:	80 91 a1 13 	lds	r24, 0x13A1	; 0x8013a1 <ram_data+0x4>
    718c:	90 91 a2 13 	lds	r25, 0x13A2	; 0x8013a2 <ram_data+0x5>
    7190:	a0 91 a3 13 	lds	r26, 0x13A3	; 0x8013a3 <ram_data+0x6>
    7194:	b0 91 a4 13 	lds	r27, 0x13A4	; 0x8013a4 <ram_data+0x7>
    7198:	80 93 1f 13 	sts	0x131F, r24	; 0x80131f <yest_total>
    719c:	90 93 20 13 	sts	0x1320, r25	; 0x801320 <yest_total+0x1>
    71a0:	a0 93 21 13 	sts	0x1321, r26	; 0x801321 <yest_total+0x2>
    71a4:	b0 93 22 13 	sts	0x1322, r27	; 0x801322 <yest_total+0x3>
    71a8:	0b c0       	rjmp	.+22     	; 0x71c0 <_Z21compare_time_from_logv+0x190>
    71aa:	8f ef       	ldi	r24, 0xFF	; 255
    71ac:	9f ef       	ldi	r25, 0xFF	; 255
    71ae:	dc 01       	movw	r26, r24
    71b0:	80 93 1f 13 	sts	0x131F, r24	; 0x80131f <yest_total>
    71b4:	90 93 20 13 	sts	0x1320, r25	; 0x801320 <yest_total+0x1>
    71b8:	a0 93 21 13 	sts	0x1321, r26	; 0x801321 <yest_total+0x2>
    71bc:	b0 93 22 13 	sts	0x1322, r27	; 0x801322 <yest_total+0x3>
    71c0:	ed e9       	ldi	r30, 0x9D	; 157
    71c2:	f3 e1       	ldi	r31, 0x13	; 19
    71c4:	14 82       	std	Z+4, r1	; 0x04
    71c6:	15 82       	std	Z+5, r1	; 0x05
    71c8:	16 82       	std	Z+6, r1	; 0x06
    71ca:	17 82       	std	Z+7, r1	; 0x07
    71cc:	10 86       	std	Z+8, r1	; 0x08
    71ce:	11 86       	std	Z+9, r1	; 0x09
    71d0:	12 86       	std	Z+10, r1	; 0x0a
    71d2:	13 86       	std	Z+11, r1	; 0x0b
    71d4:	cb d9       	rcall	.-3178   	; 0x656c <_Z18prepare_FL_LogDatav>
    71d6:	67 de       	rcall	.-818    	; 0x6ea6 <_Z16save_FL_rtu_datav>
    71d8:	d5 d9       	rcall	.-3158   	; 0x6584 <_Z19prepare_e2p_y_totalv>
    71da:	0e 94 40 04 	call	0x880	; 0x880 <_Z17e2p_write_y_totalv>
    71de:	10 92 32 13 	sts	0x1332, r1	; 0x801332 <sms_alert_state>
    71e2:	08 95       	ret
    71e4:	90 91 b1 13 	lds	r25, 0x13B1	; 0x8013b1 <ram_data+0x14>
    71e8:	91 30       	cpi	r25, 0x01	; 1
    71ea:	09 f0       	breq	.+2      	; 0x71ee <_Z21compare_time_from_logv+0x1be>
    71ec:	9a cf       	rjmp	.-204    	; 0x7122 <_Z21compare_time_from_logv+0xf2>
    71ee:	68 cf       	rjmp	.-304    	; 0x70c0 <_Z21compare_time_from_logv+0x90>
    71f0:	08 95       	ret

000071f2 <_Z26check_for_day_month_changev>:
    71f2:	ff 92       	push	r15
    71f4:	0f 93       	push	r16
    71f6:	1f 93       	push	r17
    71f8:	cf 93       	push	r28
    71fa:	df 93       	push	r29
    71fc:	cd e9       	ldi	r28, 0x9D	; 157
    71fe:	d3 e1       	ldi	r29, 0x13	; 19
    7200:	fc 88       	ldd	r15, Y+20	; 0x14
    7202:	0b 89       	ldd	r16, Y+19	; 0x13
    7204:	1a 89       	ldd	r17, Y+18	; 0x12
    7206:	8f ea       	ldi	r24, 0xAF	; 175
    7208:	93 e1       	ldi	r25, 0x13	; 19
    720a:	0e 94 d2 13 	call	0x27a4	; 0x27a4 <_Z16get_present_timeP12time_stamp_t>
    720e:	8a 89       	ldd	r24, Y+18	; 0x12
    7210:	85 31       	cpi	r24, 0x15	; 21
    7212:	08 f4       	brcc	.+2      	; 0x7216 <_Z26check_for_day_month_changev+0x24>
    7214:	09 c1       	rjmp	.+530    	; 0x7428 <_Z26check_for_day_month_changev+0x236>
    7216:	15 31       	cpi	r17, 0x15	; 21
    7218:	08 f4       	brcc	.+2      	; 0x721c <_Z26check_for_day_month_changev+0x2a>
    721a:	f3 c0       	rjmp	.+486    	; 0x7402 <_Z26check_for_day_month_changev+0x210>
    721c:	00 23       	and	r16, r16
    721e:	09 f4       	brne	.+2      	; 0x7222 <_Z26check_for_day_month_changev+0x30>
    7220:	b2 c0       	rjmp	.+356    	; 0x7386 <_Z26check_for_day_month_changev+0x194>
    7222:	ff 20       	and	r15, r15
    7224:	09 f4       	brne	.+2      	; 0x7228 <_Z26check_for_day_month_changev+0x36>
    7226:	af c0       	rjmp	.+350    	; 0x7386 <_Z26check_for_day_month_changev+0x194>
    7228:	18 13       	cpse	r17, r24
    722a:	76 c0       	rjmp	.+236    	; 0x7318 <_Z26check_for_day_month_changev+0x126>
    722c:	80 91 b0 13 	lds	r24, 0x13B0	; 0x8013b0 <ram_data+0x13>
    7230:	08 13       	cpse	r16, r24
    7232:	ef c0       	rjmp	.+478    	; 0x7412 <_Z26check_for_day_month_changev+0x220>
    7234:	80 91 b1 13 	lds	r24, 0x13B1	; 0x8013b1 <ram_data+0x14>
    7238:	f8 16       	cp	r15, r24
    723a:	09 f4       	brne	.+2      	; 0x723e <_Z26check_for_day_month_changev+0x4c>
    723c:	f0 c0       	rjmp	.+480    	; 0x741e <_Z26check_for_day_month_changev+0x22c>
    723e:	90 e0       	ldi	r25, 0x00	; 0
    7240:	2f 2d       	mov	r18, r15
    7242:	30 e0       	ldi	r19, 0x00	; 0
    7244:	2f 5f       	subi	r18, 0xFF	; 255
    7246:	3f 4f       	sbci	r19, 0xFF	; 255
    7248:	82 17       	cp	r24, r18
    724a:	93 07       	cpc	r25, r19
    724c:	89 f4       	brne	.+34     	; 0x7270 <_Z26check_for_day_month_changev+0x7e>
    724e:	80 91 a1 13 	lds	r24, 0x13A1	; 0x8013a1 <ram_data+0x4>
    7252:	90 91 a2 13 	lds	r25, 0x13A2	; 0x8013a2 <ram_data+0x5>
    7256:	a0 91 a3 13 	lds	r26, 0x13A3	; 0x8013a3 <ram_data+0x6>
    725a:	b0 91 a4 13 	lds	r27, 0x13A4	; 0x8013a4 <ram_data+0x7>
    725e:	80 93 1f 13 	sts	0x131F, r24	; 0x80131f <yest_total>
    7262:	90 93 20 13 	sts	0x1320, r25	; 0x801320 <yest_total+0x1>
    7266:	a0 93 21 13 	sts	0x1321, r26	; 0x801321 <yest_total+0x2>
    726a:	b0 93 22 13 	sts	0x1322, r27	; 0x801322 <yest_total+0x3>
    726e:	0b c0       	rjmp	.+22     	; 0x7286 <_Z26check_for_day_month_changev+0x94>
    7270:	8f ef       	ldi	r24, 0xFF	; 255
    7272:	9f ef       	ldi	r25, 0xFF	; 255
    7274:	dc 01       	movw	r26, r24
    7276:	80 93 1f 13 	sts	0x131F, r24	; 0x80131f <yest_total>
    727a:	90 93 20 13 	sts	0x1320, r25	; 0x801320 <yest_total+0x1>
    727e:	a0 93 21 13 	sts	0x1321, r26	; 0x801321 <yest_total+0x2>
    7282:	b0 93 22 13 	sts	0x1322, r27	; 0x801322 <yest_total+0x3>
    7286:	7e d9       	rcall	.-3332   	; 0x6584 <_Z19prepare_e2p_y_totalv>
    7288:	0e 94 40 04 	call	0x880	; 0x880 <_Z17e2p_write_y_totalv>
    728c:	10 92 32 13 	sts	0x1332, r1	; 0x801332 <sms_alert_state>
    7290:	bb c0       	rjmp	.+374    	; 0x7408 <_Z26check_for_day_month_changev+0x216>
    7292:	84 ee       	ldi	r24, 0xE4	; 228
    7294:	8f 0d       	add	r24, r15
    7296:	82 30       	cpi	r24, 0x02	; 2
    7298:	10 f4       	brcc	.+4      	; 0x729e <_Z26check_for_day_month_changev+0xac>
    729a:	02 30       	cpi	r16, 0x02	; 2
    729c:	d9 f0       	breq	.+54     	; 0x72d4 <_Z26check_for_day_month_changev+0xe2>
    729e:	8e e1       	ldi	r24, 0x1E	; 30
    72a0:	f8 12       	cpse	r15, r24
    72a2:	07 c0       	rjmp	.+14     	; 0x72b2 <_Z26check_for_day_month_changev+0xc0>
    72a4:	80 2f       	mov	r24, r16
    72a6:	8d 7f       	andi	r24, 0xFD	; 253
    72a8:	84 30       	cpi	r24, 0x04	; 4
    72aa:	a1 f0       	breq	.+40     	; 0x72d4 <_Z26check_for_day_month_changev+0xe2>
    72ac:	89 30       	cpi	r24, 0x09	; 9
    72ae:	19 f5       	brne	.+70     	; 0x72f6 <_Z26check_for_day_month_changev+0x104>
    72b0:	11 c0       	rjmp	.+34     	; 0x72d4 <_Z26check_for_day_month_changev+0xe2>
    72b2:	8f e1       	ldi	r24, 0x1F	; 31
    72b4:	f8 12       	cpse	r15, r24
    72b6:	1f c0       	rjmp	.+62     	; 0x72f6 <_Z26check_for_day_month_changev+0x104>
    72b8:	80 2f       	mov	r24, r16
    72ba:	8d 7f       	andi	r24, 0xFD	; 253
    72bc:	81 30       	cpi	r24, 0x01	; 1
    72be:	51 f0       	breq	.+20     	; 0x72d4 <_Z26check_for_day_month_changev+0xe2>
    72c0:	05 30       	cpi	r16, 0x05	; 5
    72c2:	41 f0       	breq	.+16     	; 0x72d4 <_Z26check_for_day_month_changev+0xe2>
    72c4:	89 ef       	ldi	r24, 0xF9	; 249
    72c6:	80 0f       	add	r24, r16
    72c8:	82 30       	cpi	r24, 0x02	; 2
    72ca:	20 f0       	brcs	.+8      	; 0x72d4 <_Z26check_for_day_month_changev+0xe2>
    72cc:	0a 30       	cpi	r16, 0x0A	; 10
    72ce:	11 f0       	breq	.+4      	; 0x72d4 <_Z26check_for_day_month_changev+0xe2>
    72d0:	0c 30       	cpi	r16, 0x0C	; 12
    72d2:	89 f4       	brne	.+34     	; 0x72f6 <_Z26check_for_day_month_changev+0x104>
    72d4:	80 91 a1 13 	lds	r24, 0x13A1	; 0x8013a1 <ram_data+0x4>
    72d8:	90 91 a2 13 	lds	r25, 0x13A2	; 0x8013a2 <ram_data+0x5>
    72dc:	a0 91 a3 13 	lds	r26, 0x13A3	; 0x8013a3 <ram_data+0x6>
    72e0:	b0 91 a4 13 	lds	r27, 0x13A4	; 0x8013a4 <ram_data+0x7>
    72e4:	80 93 1f 13 	sts	0x131F, r24	; 0x80131f <yest_total>
    72e8:	90 93 20 13 	sts	0x1320, r25	; 0x801320 <yest_total+0x1>
    72ec:	a0 93 21 13 	sts	0x1321, r26	; 0x801321 <yest_total+0x2>
    72f0:	b0 93 22 13 	sts	0x1322, r27	; 0x801322 <yest_total+0x3>
    72f4:	0b c0       	rjmp	.+22     	; 0x730c <_Z26check_for_day_month_changev+0x11a>
    72f6:	8f ef       	ldi	r24, 0xFF	; 255
    72f8:	9f ef       	ldi	r25, 0xFF	; 255
    72fa:	dc 01       	movw	r26, r24
    72fc:	80 93 1f 13 	sts	0x131F, r24	; 0x80131f <yest_total>
    7300:	90 93 20 13 	sts	0x1320, r25	; 0x801320 <yest_total+0x1>
    7304:	a0 93 21 13 	sts	0x1321, r26	; 0x801321 <yest_total+0x2>
    7308:	b0 93 22 13 	sts	0x1322, r27	; 0x801322 <yest_total+0x3>
    730c:	3b d9       	rcall	.-3466   	; 0x6584 <_Z19prepare_e2p_y_totalv>
    730e:	0e 94 40 04 	call	0x880	; 0x880 <_Z17e2p_write_y_totalv>
    7312:	10 92 32 13 	sts	0x1332, r1	; 0x801332 <sms_alert_state>
    7316:	78 c0       	rjmp	.+240    	; 0x7408 <_Z26check_for_day_month_changev+0x216>
    7318:	90 91 b0 13 	lds	r25, 0x13B0	; 0x8013b0 <ram_data+0x13>
    731c:	91 30       	cpi	r25, 0x01	; 1
    731e:	11 f5       	brne	.+68     	; 0x7364 <_Z26check_for_day_month_changev+0x172>
    7320:	90 91 b1 13 	lds	r25, 0x13B1	; 0x8013b1 <ram_data+0x14>
    7324:	91 30       	cpi	r25, 0x01	; 1
    7326:	f1 f4       	brne	.+60     	; 0x7364 <_Z26check_for_day_month_changev+0x172>
    7328:	90 e0       	ldi	r25, 0x00	; 0
    732a:	21 2f       	mov	r18, r17
    732c:	30 e0       	ldi	r19, 0x00	; 0
    732e:	2f 5f       	subi	r18, 0xFF	; 255
    7330:	3f 4f       	sbci	r19, 0xFF	; 255
    7332:	82 17       	cp	r24, r18
    7334:	93 07       	cpc	r25, r19
    7336:	b1 f4       	brne	.+44     	; 0x7364 <_Z26check_for_day_month_changev+0x172>
    7338:	8f e1       	ldi	r24, 0x1F	; 31
    733a:	f8 12       	cpse	r15, r24
    733c:	13 c0       	rjmp	.+38     	; 0x7364 <_Z26check_for_day_month_changev+0x172>
    733e:	0c 30       	cpi	r16, 0x0C	; 12
    7340:	89 f4       	brne	.+34     	; 0x7364 <_Z26check_for_day_month_changev+0x172>
    7342:	80 91 a1 13 	lds	r24, 0x13A1	; 0x8013a1 <ram_data+0x4>
    7346:	90 91 a2 13 	lds	r25, 0x13A2	; 0x8013a2 <ram_data+0x5>
    734a:	a0 91 a3 13 	lds	r26, 0x13A3	; 0x8013a3 <ram_data+0x6>
    734e:	b0 91 a4 13 	lds	r27, 0x13A4	; 0x8013a4 <ram_data+0x7>
    7352:	80 93 1f 13 	sts	0x131F, r24	; 0x80131f <yest_total>
    7356:	90 93 20 13 	sts	0x1320, r25	; 0x801320 <yest_total+0x1>
    735a:	a0 93 21 13 	sts	0x1321, r26	; 0x801321 <yest_total+0x2>
    735e:	b0 93 22 13 	sts	0x1322, r27	; 0x801322 <yest_total+0x3>
    7362:	0b c0       	rjmp	.+22     	; 0x737a <_Z26check_for_day_month_changev+0x188>
    7364:	8f ef       	ldi	r24, 0xFF	; 255
    7366:	9f ef       	ldi	r25, 0xFF	; 255
    7368:	dc 01       	movw	r26, r24
    736a:	80 93 1f 13 	sts	0x131F, r24	; 0x80131f <yest_total>
    736e:	90 93 20 13 	sts	0x1320, r25	; 0x801320 <yest_total+0x1>
    7372:	a0 93 21 13 	sts	0x1321, r26	; 0x801321 <yest_total+0x2>
    7376:	b0 93 22 13 	sts	0x1322, r27	; 0x801322 <yest_total+0x3>
    737a:	04 d9       	rcall	.-3576   	; 0x6584 <_Z19prepare_e2p_y_totalv>
    737c:	0e 94 40 04 	call	0x880	; 0x880 <_Z17e2p_write_y_totalv>
    7380:	10 92 32 13 	sts	0x1332, r1	; 0x801332 <sms_alert_state>
    7384:	41 c0       	rjmp	.+130    	; 0x7408 <_Z26check_for_day_month_changev+0x216>
    7386:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <rtc_state>
    738a:	81 11       	cpse	r24, r1
    738c:	04 c0       	rjmp	.+8      	; 0x7396 <_Z26check_for_day_month_changev+0x1a4>
    738e:	50 de       	rcall	.-864    	; 0x7030 <_Z21compare_time_from_logv>
    7390:	81 e0       	ldi	r24, 0x01	; 1
    7392:	80 93 19 02 	sts	0x0219, r24	; 0x800219 <rtc_state>
    7396:	80 91 af 13 	lds	r24, 0x13AF	; 0x8013af <ram_data+0x12>
    739a:	18 13       	cpse	r17, r24
    739c:	04 c0       	rjmp	.+8      	; 0x73a6 <_Z26check_for_day_month_changev+0x1b4>
    739e:	80 91 b0 13 	lds	r24, 0x13B0	; 0x8013b0 <ram_data+0x13>
    73a2:	08 17       	cp	r16, r24
    73a4:	b1 f0       	breq	.+44     	; 0x73d2 <_Z26check_for_day_month_changev+0x1e0>
    73a6:	e2 d8       	rcall	.-3644   	; 0x656c <_Z18prepare_FL_LogDatav>
    73a8:	7e dd       	rcall	.-1284   	; 0x6ea6 <_Z16save_FL_rtu_datav>
    73aa:	e3 e3       	ldi	r30, 0x33	; 51
    73ac:	f3 e1       	ldi	r31, 0x13	; 19
    73ae:	81 81       	ldd	r24, Z+1	; 0x01
    73b0:	92 81       	ldd	r25, Z+2	; 0x02
    73b2:	01 96       	adiw	r24, 0x01	; 1
    73b4:	92 83       	std	Z+2, r25	; 0x02
    73b6:	81 83       	std	Z+1, r24	; 0x01
    73b8:	0e 94 8e 1a 	call	0x351c	; 0x351c <_Z27flashWriteFreqUpdatedConfigv>
    73bc:	ed e9       	ldi	r30, 0x9D	; 157
    73be:	f3 e1       	ldi	r31, 0x13	; 19
    73c0:	10 86       	std	Z+8, r1	; 0x08
    73c2:	11 86       	std	Z+9, r1	; 0x09
    73c4:	12 86       	std	Z+10, r1	; 0x0a
    73c6:	13 86       	std	Z+11, r1	; 0x0b
    73c8:	14 82       	std	Z+4, r1	; 0x04
    73ca:	15 82       	std	Z+5, r1	; 0x05
    73cc:	16 82       	std	Z+6, r1	; 0x06
    73ce:	17 82       	std	Z+7, r1	; 0x07
    73d0:	2b c0       	rjmp	.+86     	; 0x7428 <_Z26check_for_day_month_changev+0x236>
    73d2:	80 91 b1 13 	lds	r24, 0x13B1	; 0x8013b1 <ram_data+0x14>
    73d6:	f8 16       	cp	r15, r24
    73d8:	39 f1       	breq	.+78     	; 0x7428 <_Z26check_for_day_month_changev+0x236>
    73da:	c8 d8       	rcall	.-3696   	; 0x656c <_Z18prepare_FL_LogDatav>
    73dc:	64 dd       	rcall	.-1336   	; 0x6ea6 <_Z16save_FL_rtu_datav>
    73de:	e3 e3       	ldi	r30, 0x33	; 51
    73e0:	f3 e1       	ldi	r31, 0x13	; 19
    73e2:	81 81       	ldd	r24, Z+1	; 0x01
    73e4:	92 81       	ldd	r25, Z+2	; 0x02
    73e6:	01 96       	adiw	r24, 0x01	; 1
    73e8:	92 83       	std	Z+2, r25	; 0x02
    73ea:	81 83       	std	Z+1, r24	; 0x01
    73ec:	0e 94 8e 1a 	call	0x351c	; 0x351c <_Z27flashWriteFreqUpdatedConfigv>
    73f0:	10 92 a1 13 	sts	0x13A1, r1	; 0x8013a1 <ram_data+0x4>
    73f4:	10 92 a2 13 	sts	0x13A2, r1	; 0x8013a2 <ram_data+0x5>
    73f8:	10 92 a3 13 	sts	0x13A3, r1	; 0x8013a3 <ram_data+0x6>
    73fc:	10 92 a4 13 	sts	0x13A4, r1	; 0x8013a4 <ram_data+0x7>
    7400:	13 c0       	rjmp	.+38     	; 0x7428 <_Z26check_for_day_month_changev+0x236>
    7402:	10 92 19 02 	sts	0x0219, r1	; 0x800219 <rtc_state>
    7406:	10 c0       	rjmp	.+32     	; 0x7428 <_Z26check_for_day_month_changev+0x236>
    7408:	80 91 af 13 	lds	r24, 0x13AF	; 0x8013af <ram_data+0x12>
    740c:	85 31       	cpi	r24, 0x15	; 21
    740e:	60 f0       	brcs	.+24     	; 0x7428 <_Z26check_for_day_month_changev+0x236>
    7410:	ba cf       	rjmp	.-140    	; 0x7386 <_Z26check_for_day_month_changev+0x194>
    7412:	80 91 b1 13 	lds	r24, 0x13B1	; 0x8013b1 <ram_data+0x14>
    7416:	81 30       	cpi	r24, 0x01	; 1
    7418:	09 f0       	breq	.+2      	; 0x741c <_Z26check_for_day_month_changev+0x22a>
    741a:	6d cf       	rjmp	.-294    	; 0x72f6 <_Z26check_for_day_month_changev+0x104>
    741c:	3a cf       	rjmp	.-396    	; 0x7292 <_Z26check_for_day_month_changev+0xa0>
    741e:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <rtc_state>
    7422:	81 11       	cpse	r24, r1
    7424:	bc cf       	rjmp	.-136    	; 0x739e <_Z26check_for_day_month_changev+0x1ac>
    7426:	b3 cf       	rjmp	.-154    	; 0x738e <_Z26check_for_day_month_changev+0x19c>
    7428:	df 91       	pop	r29
    742a:	cf 91       	pop	r28
    742c:	1f 91       	pop	r17
    742e:	0f 91       	pop	r16
    7430:	ff 90       	pop	r15
    7432:	08 95       	ret

00007434 <_Z13updateRamDatav>:
    7434:	56 dd       	rcall	.-1364   	; 0x6ee2 <_Z14read_flow_datav>
    7436:	dd ce       	rjmp	.-582    	; 0x71f2 <_Z26check_for_day_month_changev>
    7438:	08 95       	ret

0000743a <_Z13getAllCfgDatav>:
    743a:	0e 94 e9 1a 	call	0x35d2	; 0x35d2 <_Z21readFreqUpdData_flashv>
    743e:	0e 94 20 03 	call	0x640	; 0x640 <_Z21eepromReadProductInfov>
    7442:	81 11       	cpse	r24, r1
    7444:	14 c0       	rjmp	.+40     	; 0x746e <_Z13getAllCfgDatav+0x34>
    7446:	ea e0       	ldi	r30, 0x0A	; 10
    7448:	fb e0       	ldi	r31, 0x0B	; 11
    744a:	87 ee       	ldi	r24, 0xE7	; 231
    744c:	93 e0       	ldi	r25, 0x03	; 3
    744e:	91 83       	std	Z+1, r25	; 0x01
    7450:	80 83       	st	Z, r24
    7452:	13 82       	std	Z+3, r1	; 0x03
    7454:	12 82       	std	Z+2, r1	; 0x02
    7456:	14 8e       	std	Z+28, r1	; 0x1c
    7458:	84 e1       	ldi	r24, 0x14	; 20
    745a:	ee e3       	ldi	r30, 0x3E	; 62
    745c:	f2 e0       	ldi	r31, 0x02	; 2
    745e:	ae e0       	ldi	r26, 0x0E	; 14
    7460:	bb e0       	ldi	r27, 0x0B	; 11
    7462:	01 90       	ld	r0, Z+
    7464:	0d 92       	st	X+, r0
    7466:	8a 95       	dec	r24
    7468:	e1 f7       	brne	.-8      	; 0x7462 <_Z13getAllCfgDatav+0x28>
    746a:	0e 94 0e 03 	call	0x61c	; 0x61c <_Z22eepromWriteProductInfov>
    746e:	80 91 26 0b 	lds	r24, 0x0B26	; 0x800b26 <product_info+0x1c>
    7472:	84 36       	cpi	r24, 0x64	; 100
    7474:	20 f0       	brcs	.+8      	; 0x747e <_Z13getAllCfgDatav+0x44>
    7476:	10 92 26 0b 	sts	0x0B26, r1	; 0x800b26 <product_info+0x1c>
    747a:	0e 94 0e 03 	call	0x61c	; 0x61c <_Z22eepromWriteProductInfov>
    747e:	0e 94 aa 02 	call	0x554	; 0x554 <_Z20eepromreadGPRSConfigv>
    7482:	81 11       	cpse	r24, r1
    7484:	10 c0       	rjmp	.+32     	; 0x74a6 <_Z13getAllCfgDatav+0x6c>
    7486:	80 e5       	ldi	r24, 0x50	; 80
    7488:	e4 e9       	ldi	r30, 0x94	; 148
    748a:	f2 e1       	ldi	r31, 0x12	; 18
    748c:	df 01       	movw	r26, r30
    748e:	1d 92       	st	X+, r1
    7490:	8a 95       	dec	r24
    7492:	e9 f7       	brne	.-6      	; 0x748e <_Z13getAllCfgDatav+0x54>
    7494:	80 e0       	ldi	r24, 0x00	; 0
    7496:	0e 94 46 20 	call	0x408c	; 0x408c <_Z19setGPRSConfigErrStsc>
    749a:	0e 94 7e 02 	call	0x4fc	; 0x4fc <_Z25write_default_GPRS_configv>
    749e:	81 e0       	ldi	r24, 0x01	; 1
    74a0:	0e 94 46 20 	call	0x408c	; 0x408c <_Z19setGPRSConfigErrStsc>
    74a4:	03 c0       	rjmp	.+6      	; 0x74ac <_Z13getAllCfgDatav+0x72>
    74a6:	81 e0       	ldi	r24, 0x01	; 1
    74a8:	0e 94 46 20 	call	0x408c	; 0x408c <_Z19setGPRSConfigErrStsc>
    74ac:	0e 94 58 03 	call	0x6b0	; 0x6b0 <_Z27eepromReadProductInfoConfigv>
    74b0:	81 11       	cpse	r24, r1
    74b2:	0c c0       	rjmp	.+24     	; 0x74cc <_Z13getAllCfgDatav+0x92>
    74b4:	ea ef       	ldi	r30, 0xFA	; 250
    74b6:	fa e0       	ldi	r31, 0x0A	; 10
    74b8:	8c ef       	ldi	r24, 0xFC	; 252
    74ba:	98 e0       	ldi	r25, 0x08	; 8
    74bc:	91 83       	std	Z+1, r25	; 0x01
    74be:	80 83       	st	Z, r24
    74c0:	83 e0       	ldi	r24, 0x03	; 3
    74c2:	82 83       	std	Z+2, r24	; 0x02
    74c4:	81 e0       	ldi	r24, 0x01	; 1
    74c6:	83 83       	std	Z+3, r24	; 0x03
    74c8:	0e 94 46 03 	call	0x68c	; 0x68c <_Z28eepromWriteProductInfoConfigv>
    74cc:	0e 94 76 04 	call	0x8ec	; 0x8ec <_Z26eeprom_read_online_cfg_cntv>
    74d0:	81 11       	cpse	r24, r1
    74d2:	05 c0       	rjmp	.+10     	; 0x74de <_Z13getAllCfgDatav+0xa4>
    74d4:	81 e0       	ldi	r24, 0x01	; 1
    74d6:	80 93 fd 12 	sts	0x12FD, r24	; 0x8012fd <e2p_online_cnfg>
    74da:	0e 94 4b 04 	call	0x896	; 0x896 <_Z27eeprom_write_online_cfg_cntv>
    74de:	0e 94 e9 1a 	call	0x35d2	; 0x35d2 <_Z21readFreqUpdData_flashv>
    74e2:	81 11       	cpse	r24, r1
    74e4:	06 c0       	rjmp	.+12     	; 0x74f2 <_Z13getAllCfgDatav+0xb8>
    74e6:	10 92 35 13 	sts	0x1335, r1	; 0x801335 <freq_updated_data+0x2>
    74ea:	10 92 34 13 	sts	0x1334, r1	; 0x801334 <freq_updated_data+0x1>
    74ee:	0e 94 78 1a 	call	0x34f0	; 0x34f0 <_Z27flashClearFreqUpdatedConfigv>
    74f2:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <_Z17eepromReadCalDatav>
    74f6:	81 11       	cpse	r24, r1
    74f8:	0c c0       	rjmp	.+24     	; 0x7512 <_Z13getAllCfgDatav+0xd8>
    74fa:	e5 e4       	ldi	r30, 0x45	; 69
    74fc:	f4 e1       	ldi	r31, 0x14	; 20
    74fe:	88 ee       	ldi	r24, 0xE8	; 232
    7500:	93 e0       	ldi	r25, 0x03	; 3
    7502:	91 83       	std	Z+1, r25	; 0x01
    7504:	80 83       	st	Z, r24
    7506:	95 83       	std	Z+5, r25	; 0x05
    7508:	84 83       	std	Z+4, r24	; 0x04
    750a:	91 87       	std	Z+9, r25	; 0x09
    750c:	80 87       	std	Z+8, r24	; 0x08
    750e:	0c 94 fc 02 	jmp	0x5f8	; 0x5f8 <_Z18eepromWriteCalDatav>
    7512:	08 95       	ret

00007514 <_Z18update_online_datav>:
    7514:	80 91 d9 13 	lds	r24, 0x13D9	; 0x8013d9 <rtu_control_data>
    7518:	88 23       	and	r24, r24
    751a:	49 f0       	breq	.+18     	; 0x752e <_Z18update_online_datav+0x1a>
    751c:	0e 94 49 20 	call	0x4092	; 0x4092 <_Z14getGPRSConnStsv>
    7520:	81 30       	cpi	r24, 0x01	; 1
    7522:	29 f4       	brne	.+10     	; 0x752e <_Z18update_online_datav+0x1a>
    7524:	80 91 28 13 	lds	r24, 0x1328	; 0x801328 <RTU_state>
    7528:	81 11       	cpse	r24, r1
    752a:	01 c0       	rjmp	.+2      	; 0x752e <_Z18update_online_datav+0x1a>
    752c:	3c c8       	rjmp	.-3976   	; 0x65a6 <_Z20prepare_GPRS_LogDatav>
    752e:	08 95       	ret

00007530 <_Z11getRtuStatev>:
    7530:	80 91 28 13 	lds	r24, 0x1328	; 0x801328 <RTU_state>
    7534:	08 95       	ret

00007536 <_Z11setRtuState11RTU_state_t>:
    7536:	80 93 28 13 	sts	0x1328, r24	; 0x801328 <RTU_state>
    753a:	08 95       	ret

0000753c <_Z10readButtonv>:
    753c:	34 99       	sbic	0x06, 4	; 6
    753e:	1e c0       	rjmp	.+60     	; 0x757c <_Z10readButtonv+0x40>
    7540:	80 91 15 13 	lds	r24, 0x1315	; 0x801315 <_ZZ10readButtonvE15long_press_time>
    7544:	90 91 16 13 	lds	r25, 0x1316	; 0x801316 <_ZZ10readButtonvE15long_press_time+0x1>
    7548:	99 23       	and	r25, r25
    754a:	34 f4       	brge	.+12     	; 0x7558 <_Z10readButtonv+0x1c>
    754c:	01 96       	adiw	r24, 0x01	; 1
    754e:	90 93 16 13 	sts	0x1316, r25	; 0x801316 <_ZZ10readButtonvE15long_press_time+0x1>
    7552:	80 93 15 13 	sts	0x1315, r24	; 0x801315 <_ZZ10readButtonvE15long_press_time>
    7556:	08 95       	ret
    7558:	10 92 16 13 	sts	0x1316, r1	; 0x801316 <_ZZ10readButtonvE15long_press_time+0x1>
    755c:	10 92 15 13 	sts	0x1315, r1	; 0x801315 <_ZZ10readButtonvE15long_press_time>
    7560:	80 91 28 13 	lds	r24, 0x1328	; 0x801328 <RTU_state>
    7564:	81 11       	cpse	r24, r1
    7566:	0e c0       	rjmp	.+28     	; 0x7584 <_Z10readButtonv+0x48>
    7568:	ec e1       	ldi	r30, 0x1C	; 28
    756a:	fc e0       	ldi	r31, 0x0C	; 12
    756c:	80 e3       	ldi	r24, 0x30	; 48
    756e:	df 01       	movw	r26, r30
    7570:	1d 92       	st	X+, r1
    7572:	8a 95       	dec	r24
    7574:	e9 f7       	brne	.-6      	; 0x7570 <_Z10readButtonv+0x34>
    7576:	81 e0       	ldi	r24, 0x01	; 1
    7578:	81 83       	std	Z+1, r24	; 0x01
    757a:	08 95       	ret
    757c:	10 92 16 13 	sts	0x1316, r1	; 0x801316 <_ZZ10readButtonvE15long_press_time+0x1>
    7580:	10 92 15 13 	sts	0x1315, r1	; 0x801315 <_ZZ10readButtonvE15long_press_time>
    7584:	08 95       	ret

00007586 <_Z14get_last_y_totv>:
    7586:	0e 94 34 04 	call	0x868	; 0x868 <_Z16e2p_read_y_totalv>
    758a:	81 11       	cpse	r24, r1
    758c:	0d c0       	rjmp	.+26     	; 0x75a8 <_Z14get_last_y_totv+0x22>
    758e:	8f ef       	ldi	r24, 0xFF	; 255
    7590:	9f ef       	ldi	r25, 0xFF	; 255
    7592:	dc 01       	movw	r26, r24
    7594:	80 93 e8 0a 	sts	0x0AE8, r24	; 0x800ae8 <__data_end>
    7598:	90 93 e9 0a 	sts	0x0AE9, r25	; 0x800ae9 <__data_end+0x1>
    759c:	a0 93 ea 0a 	sts	0x0AEA, r26	; 0x800aea <__data_end+0x2>
    75a0:	b0 93 eb 0a 	sts	0x0AEB, r27	; 0x800aeb <__data_end+0x3>
    75a4:	0c 94 40 04 	jmp	0x880	; 0x880 <_Z17e2p_write_y_totalv>
    75a8:	08 95       	ret

000075aa <_Z32check_for_day_month_change_y_totP12FL_rtu_log_t>:
    75aa:	ff 92       	push	r15
    75ac:	0f 93       	push	r16
    75ae:	1f 93       	push	r17
    75b0:	cf 93       	push	r28
    75b2:	df 93       	push	r29
    75b4:	ec 01       	movw	r28, r24
    75b6:	ff 88       	ldd	r15, Y+23	; 0x17
    75b8:	0e 89       	ldd	r16, Y+22	; 0x16
    75ba:	1d 89       	ldd	r17, Y+21	; 0x15
    75bc:	e4 df       	rcall	.-56     	; 0x7586 <_Z14get_last_y_totv>
    75be:	8f ea       	ldi	r24, 0xAF	; 175
    75c0:	93 e1       	ldi	r25, 0x13	; 19
    75c2:	0e 94 d2 13 	call	0x27a4	; 0x27a4 <_Z16get_present_timeP12time_stamp_t>
    75c6:	15 31       	cpi	r17, 0x15	; 21
    75c8:	80 f0       	brcs	.+32     	; 0x75ea <_Z32check_for_day_month_change_y_totP12FL_rtu_log_t+0x40>
    75ca:	80 91 e8 0a 	lds	r24, 0x0AE8	; 0x800ae8 <__data_end>
    75ce:	90 91 e9 0a 	lds	r25, 0x0AE9	; 0x800ae9 <__data_end+0x1>
    75d2:	a0 91 ea 0a 	lds	r26, 0x0AEA	; 0x800aea <__data_end+0x2>
    75d6:	b0 91 eb 0a 	lds	r27, 0x0AEB	; 0x800aeb <__data_end+0x3>
    75da:	80 93 1f 13 	sts	0x131F, r24	; 0x80131f <yest_total>
    75de:	90 93 20 13 	sts	0x1320, r25	; 0x801320 <yest_total+0x1>
    75e2:	a0 93 21 13 	sts	0x1321, r26	; 0x801321 <yest_total+0x2>
    75e6:	b0 93 22 13 	sts	0x1322, r27	; 0x801322 <yest_total+0x3>
    75ea:	20 91 af 13 	lds	r18, 0x13AF	; 0x8013af <ram_data+0x12>
    75ee:	25 31       	cpi	r18, 0x15	; 21
    75f0:	08 f4       	brcc	.+2      	; 0x75f4 <_Z32check_for_day_month_change_y_totP12FL_rtu_log_t+0x4a>
    75f2:	d3 c0       	rjmp	.+422    	; 0x779a <_Z32check_for_day_month_change_y_totP12FL_rtu_log_t+0x1f0>
    75f4:	12 13       	cpse	r17, r18
    75f6:	88 c0       	rjmp	.+272    	; 0x7708 <_Z32check_for_day_month_change_y_totP12FL_rtu_log_t+0x15e>
    75f8:	80 91 b0 13 	lds	r24, 0x13B0	; 0x8013b0 <ram_data+0x13>
    75fc:	08 13       	cpse	r16, r24
    75fe:	c5 c0       	rjmp	.+394    	; 0x778a <_Z32check_for_day_month_change_y_totP12FL_rtu_log_t+0x1e0>
    7600:	80 91 b1 13 	lds	r24, 0x13B1	; 0x8013b1 <ram_data+0x14>
    7604:	f8 12       	cpse	r15, r24
    7606:	c4 c0       	rjmp	.+392    	; 0x7790 <_Z32check_for_day_month_change_y_totP12FL_rtu_log_t+0x1e6>
    7608:	80 91 e8 0a 	lds	r24, 0x0AE8	; 0x800ae8 <__data_end>
    760c:	90 91 e9 0a 	lds	r25, 0x0AE9	; 0x800ae9 <__data_end+0x1>
    7610:	a0 91 ea 0a 	lds	r26, 0x0AEA	; 0x800aea <__data_end+0x2>
    7614:	b0 91 eb 0a 	lds	r27, 0x0AEB	; 0x800aeb <__data_end+0x3>
    7618:	80 93 1f 13 	sts	0x131F, r24	; 0x80131f <yest_total>
    761c:	90 93 20 13 	sts	0x1320, r25	; 0x801320 <yest_total+0x1>
    7620:	a0 93 21 13 	sts	0x1321, r26	; 0x801321 <yest_total+0x2>
    7624:	b0 93 22 13 	sts	0x1322, r27	; 0x801322 <yest_total+0x3>
    7628:	b8 c0       	rjmp	.+368    	; 0x779a <_Z32check_for_day_month_change_y_totP12FL_rtu_log_t+0x1f0>
    762a:	2f 2d       	mov	r18, r15
    762c:	30 e0       	ldi	r19, 0x00	; 0
    762e:	2f 5f       	subi	r18, 0xFF	; 255
    7630:	3f 4f       	sbci	r19, 0xFF	; 255
    7632:	90 e0       	ldi	r25, 0x00	; 0
    7634:	28 17       	cp	r18, r24
    7636:	39 07       	cpc	r19, r25
    7638:	69 f4       	brne	.+26     	; 0x7654 <_Z32check_for_day_month_change_y_totP12FL_rtu_log_t+0xaa>
    763a:	8f 81       	ldd	r24, Y+7	; 0x07
    763c:	98 85       	ldd	r25, Y+8	; 0x08
    763e:	a9 85       	ldd	r26, Y+9	; 0x09
    7640:	ba 85       	ldd	r27, Y+10	; 0x0a
    7642:	80 93 1f 13 	sts	0x131F, r24	; 0x80131f <yest_total>
    7646:	90 93 20 13 	sts	0x1320, r25	; 0x801320 <yest_total+0x1>
    764a:	a0 93 21 13 	sts	0x1321, r26	; 0x801321 <yest_total+0x2>
    764e:	b0 93 22 13 	sts	0x1322, r27	; 0x801322 <yest_total+0x3>
    7652:	0b c0       	rjmp	.+22     	; 0x766a <_Z32check_for_day_month_change_y_totP12FL_rtu_log_t+0xc0>
    7654:	8f ef       	ldi	r24, 0xFF	; 255
    7656:	9f ef       	ldi	r25, 0xFF	; 255
    7658:	dc 01       	movw	r26, r24
    765a:	80 93 1f 13 	sts	0x131F, r24	; 0x80131f <yest_total>
    765e:	90 93 20 13 	sts	0x1320, r25	; 0x801320 <yest_total+0x1>
    7662:	a0 93 21 13 	sts	0x1321, r26	; 0x801321 <yest_total+0x2>
    7666:	b0 93 22 13 	sts	0x1322, r27	; 0x801322 <yest_total+0x3>
    766a:	0e 94 c2 32 	call	0x6584	; 0x6584 <_Z19prepare_e2p_y_totalv>
    766e:	0e 94 40 04 	call	0x880	; 0x880 <_Z17e2p_write_y_totalv>
    7672:	93 c0       	rjmp	.+294    	; 0x779a <_Z32check_for_day_month_change_y_totP12FL_rtu_log_t+0x1f0>
    7674:	80 91 b1 13 	lds	r24, 0x13B1	; 0x8013b1 <ram_data+0x14>
    7678:	81 30       	cpi	r24, 0x01	; 1
    767a:	b1 f5       	brne	.+108    	; 0x76e8 <_Z32check_for_day_month_change_y_totP12FL_rtu_log_t+0x13e>
    767c:	8d e1       	ldi	r24, 0x1D	; 29
    767e:	f8 12       	cpse	r15, r24
    7680:	03 c0       	rjmp	.+6      	; 0x7688 <_Z32check_for_day_month_change_y_totP12FL_rtu_log_t+0xde>
    7682:	02 30       	cpi	r16, 0x02	; 2
    7684:	89 f5       	brne	.+98     	; 0x76e8 <_Z32check_for_day_month_change_y_totP12FL_rtu_log_t+0x13e>
    7686:	23 c0       	rjmp	.+70     	; 0x76ce <_Z32check_for_day_month_change_y_totP12FL_rtu_log_t+0x124>
    7688:	8c e1       	ldi	r24, 0x1C	; 28
    768a:	f8 12       	cpse	r15, r24
    768c:	06 c0       	rjmp	.+12     	; 0x769a <_Z32check_for_day_month_change_y_totP12FL_rtu_log_t+0xf0>
    768e:	02 30       	cpi	r16, 0x02	; 2
    7690:	59 f5       	brne	.+86     	; 0x76e8 <_Z32check_for_day_month_change_y_totP12FL_rtu_log_t+0x13e>
    7692:	81 2f       	mov	r24, r17
    7694:	83 70       	andi	r24, 0x03	; 3
    7696:	d9 f4       	brne	.+54     	; 0x76ce <_Z32check_for_day_month_change_y_totP12FL_rtu_log_t+0x124>
    7698:	27 c0       	rjmp	.+78     	; 0x76e8 <_Z32check_for_day_month_change_y_totP12FL_rtu_log_t+0x13e>
    769a:	8e e1       	ldi	r24, 0x1E	; 30
    769c:	f8 12       	cpse	r15, r24
    769e:	06 c0       	rjmp	.+12     	; 0x76ac <_Z32check_for_day_month_change_y_totP12FL_rtu_log_t+0x102>
    76a0:	0d 7f       	andi	r16, 0xFD	; 253
    76a2:	04 30       	cpi	r16, 0x04	; 4
    76a4:	a1 f0       	breq	.+40     	; 0x76ce <_Z32check_for_day_month_change_y_totP12FL_rtu_log_t+0x124>
    76a6:	09 30       	cpi	r16, 0x09	; 9
    76a8:	f9 f4       	brne	.+62     	; 0x76e8 <_Z32check_for_day_month_change_y_totP12FL_rtu_log_t+0x13e>
    76aa:	11 c0       	rjmp	.+34     	; 0x76ce <_Z32check_for_day_month_change_y_totP12FL_rtu_log_t+0x124>
    76ac:	8f e1       	ldi	r24, 0x1F	; 31
    76ae:	f8 12       	cpse	r15, r24
    76b0:	1b c0       	rjmp	.+54     	; 0x76e8 <_Z32check_for_day_month_change_y_totP12FL_rtu_log_t+0x13e>
    76b2:	80 2f       	mov	r24, r16
    76b4:	8d 7f       	andi	r24, 0xFD	; 253
    76b6:	81 30       	cpi	r24, 0x01	; 1
    76b8:	51 f0       	breq	.+20     	; 0x76ce <_Z32check_for_day_month_change_y_totP12FL_rtu_log_t+0x124>
    76ba:	05 30       	cpi	r16, 0x05	; 5
    76bc:	41 f0       	breq	.+16     	; 0x76ce <_Z32check_for_day_month_change_y_totP12FL_rtu_log_t+0x124>
    76be:	89 ef       	ldi	r24, 0xF9	; 249
    76c0:	80 0f       	add	r24, r16
    76c2:	82 30       	cpi	r24, 0x02	; 2
    76c4:	20 f0       	brcs	.+8      	; 0x76ce <_Z32check_for_day_month_change_y_totP12FL_rtu_log_t+0x124>
    76c6:	0a 30       	cpi	r16, 0x0A	; 10
    76c8:	11 f0       	breq	.+4      	; 0x76ce <_Z32check_for_day_month_change_y_totP12FL_rtu_log_t+0x124>
    76ca:	0c 30       	cpi	r16, 0x0C	; 12
    76cc:	69 f4       	brne	.+26     	; 0x76e8 <_Z32check_for_day_month_change_y_totP12FL_rtu_log_t+0x13e>
    76ce:	8f 81       	ldd	r24, Y+7	; 0x07
    76d0:	98 85       	ldd	r25, Y+8	; 0x08
    76d2:	a9 85       	ldd	r26, Y+9	; 0x09
    76d4:	ba 85       	ldd	r27, Y+10	; 0x0a
    76d6:	80 93 1f 13 	sts	0x131F, r24	; 0x80131f <yest_total>
    76da:	90 93 20 13 	sts	0x1320, r25	; 0x801320 <yest_total+0x1>
    76de:	a0 93 21 13 	sts	0x1321, r26	; 0x801321 <yest_total+0x2>
    76e2:	b0 93 22 13 	sts	0x1322, r27	; 0x801322 <yest_total+0x3>
    76e6:	0b c0       	rjmp	.+22     	; 0x76fe <_Z32check_for_day_month_change_y_totP12FL_rtu_log_t+0x154>
    76e8:	8f ef       	ldi	r24, 0xFF	; 255
    76ea:	9f ef       	ldi	r25, 0xFF	; 255
    76ec:	dc 01       	movw	r26, r24
    76ee:	80 93 1f 13 	sts	0x131F, r24	; 0x80131f <yest_total>
    76f2:	90 93 20 13 	sts	0x1320, r25	; 0x801320 <yest_total+0x1>
    76f6:	a0 93 21 13 	sts	0x1321, r26	; 0x801321 <yest_total+0x2>
    76fa:	b0 93 22 13 	sts	0x1322, r27	; 0x801322 <yest_total+0x3>
    76fe:	0e 94 c2 32 	call	0x6584	; 0x6584 <_Z19prepare_e2p_y_totalv>
    7702:	0e 94 40 04 	call	0x880	; 0x880 <_Z17e2p_write_y_totalv>
    7706:	49 c0       	rjmp	.+146    	; 0x779a <_Z32check_for_day_month_change_y_totP12FL_rtu_log_t+0x1f0>
    7708:	80 91 b0 13 	lds	r24, 0x13B0	; 0x8013b0 <ram_data+0x13>
    770c:	81 30       	cpi	r24, 0x01	; 1
    770e:	e9 f4       	brne	.+58     	; 0x774a <_Z32check_for_day_month_change_y_totP12FL_rtu_log_t+0x1a0>
    7710:	80 91 b1 13 	lds	r24, 0x13B1	; 0x8013b1 <ram_data+0x14>
    7714:	81 30       	cpi	r24, 0x01	; 1
    7716:	c9 f4       	brne	.+50     	; 0x774a <_Z32check_for_day_month_change_y_totP12FL_rtu_log_t+0x1a0>
    7718:	30 e0       	ldi	r19, 0x00	; 0
    771a:	81 2f       	mov	r24, r17
    771c:	90 e0       	ldi	r25, 0x00	; 0
    771e:	01 96       	adiw	r24, 0x01	; 1
    7720:	28 17       	cp	r18, r24
    7722:	39 07       	cpc	r19, r25
    7724:	91 f4       	brne	.+36     	; 0x774a <_Z32check_for_day_month_change_y_totP12FL_rtu_log_t+0x1a0>
    7726:	8f e1       	ldi	r24, 0x1F	; 31
    7728:	f8 12       	cpse	r15, r24
    772a:	0f c0       	rjmp	.+30     	; 0x774a <_Z32check_for_day_month_change_y_totP12FL_rtu_log_t+0x1a0>
    772c:	0c 30       	cpi	r16, 0x0C	; 12
    772e:	69 f4       	brne	.+26     	; 0x774a <_Z32check_for_day_month_change_y_totP12FL_rtu_log_t+0x1a0>
    7730:	8f 81       	ldd	r24, Y+7	; 0x07
    7732:	98 85       	ldd	r25, Y+8	; 0x08
    7734:	a9 85       	ldd	r26, Y+9	; 0x09
    7736:	ba 85       	ldd	r27, Y+10	; 0x0a
    7738:	80 93 1f 13 	sts	0x131F, r24	; 0x80131f <yest_total>
    773c:	90 93 20 13 	sts	0x1320, r25	; 0x801320 <yest_total+0x1>
    7740:	a0 93 21 13 	sts	0x1321, r26	; 0x801321 <yest_total+0x2>
    7744:	b0 93 22 13 	sts	0x1322, r27	; 0x801322 <yest_total+0x3>
    7748:	0b c0       	rjmp	.+22     	; 0x7760 <_Z32check_for_day_month_change_y_totP12FL_rtu_log_t+0x1b6>
    774a:	8f ef       	ldi	r24, 0xFF	; 255
    774c:	9f ef       	ldi	r25, 0xFF	; 255
    774e:	dc 01       	movw	r26, r24
    7750:	80 93 1f 13 	sts	0x131F, r24	; 0x80131f <yest_total>
    7754:	90 93 20 13 	sts	0x1320, r25	; 0x801320 <yest_total+0x1>
    7758:	a0 93 21 13 	sts	0x1321, r26	; 0x801321 <yest_total+0x2>
    775c:	b0 93 22 13 	sts	0x1322, r27	; 0x801322 <yest_total+0x3>
    7760:	0e 94 c2 32 	call	0x6584	; 0x6584 <_Z19prepare_e2p_y_totalv>
    7764:	0e 94 40 04 	call	0x880	; 0x880 <_Z17e2p_write_y_totalv>
    7768:	18 c0       	rjmp	.+48     	; 0x779a <_Z32check_for_day_month_change_y_totP12FL_rtu_log_t+0x1f0>
    776a:	8f ef       	ldi	r24, 0xFF	; 255
    776c:	9f ef       	ldi	r25, 0xFF	; 255
    776e:	dc 01       	movw	r26, r24
    7770:	80 93 1f 13 	sts	0x131F, r24	; 0x80131f <yest_total>
    7774:	90 93 20 13 	sts	0x1320, r25	; 0x801320 <yest_total+0x1>
    7778:	a0 93 21 13 	sts	0x1321, r26	; 0x801321 <yest_total+0x2>
    777c:	b0 93 22 13 	sts	0x1322, r27	; 0x801322 <yest_total+0x3>
    7780:	0e 94 c2 32 	call	0x6584	; 0x6584 <_Z19prepare_e2p_y_totalv>
    7784:	0e 94 40 04 	call	0x880	; 0x880 <_Z17e2p_write_y_totalv>
    7788:	08 c0       	rjmp	.+16     	; 0x779a <_Z32check_for_day_month_change_y_totP12FL_rtu_log_t+0x1f0>
    778a:	08 13       	cpse	r16, r24
    778c:	73 cf       	rjmp	.-282    	; 0x7674 <_Z32check_for_day_month_change_y_totP12FL_rtu_log_t+0xca>
    778e:	ed cf       	rjmp	.-38     	; 0x776a <_Z32check_for_day_month_change_y_totP12FL_rtu_log_t+0x1c0>
    7790:	80 91 b1 13 	lds	r24, 0x13B1	; 0x8013b1 <ram_data+0x14>
    7794:	f8 12       	cpse	r15, r24
    7796:	49 cf       	rjmp	.-366    	; 0x762a <_Z32check_for_day_month_change_y_totP12FL_rtu_log_t+0x80>
    7798:	e8 cf       	rjmp	.-48     	; 0x776a <_Z32check_for_day_month_change_y_totP12FL_rtu_log_t+0x1c0>
    779a:	df 91       	pop	r29
    779c:	cf 91       	pop	r28
    779e:	1f 91       	pop	r17
    77a0:	0f 91       	pop	r16
    77a2:	ff 90       	pop	r15
    77a4:	08 95       	ret

000077a6 <_Z16get_last_rtu_logv>:
    77a6:	cf 92       	push	r12
    77a8:	df 92       	push	r13
    77aa:	ef 92       	push	r14
    77ac:	ff 92       	push	r15
    77ae:	0f 93       	push	r16
    77b0:	1f 93       	push	r17
    77b2:	cf 93       	push	r28
    77b4:	df 93       	push	r29
    77b6:	80 e0       	ldi	r24, 0x00	; 0
    77b8:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <_Z25flashGetCurrDataWriteAddrc>
    77bc:	6b 01       	movw	r12, r22
    77be:	7c 01       	movw	r14, r24
    77c0:	20 e2       	ldi	r18, 0x20	; 32
    77c2:	c2 1a       	sub	r12, r18
    77c4:	d1 08       	sbc	r13, r1
    77c6:	e1 08       	sbc	r14, r1
    77c8:	f1 08       	sbc	r15, r1
    77ca:	c1 14       	cp	r12, r1
    77cc:	80 e2       	ldi	r24, 0x20	; 32
    77ce:	d8 06       	cpc	r13, r24
    77d0:	e1 04       	cpc	r14, r1
    77d2:	f1 04       	cpc	r15, r1
    77d4:	78 f4       	brcc	.+30     	; 0x77f4 <_Z16get_last_rtu_logv+0x4e>
    77d6:	ed e9       	ldi	r30, 0x9D	; 157
    77d8:	f3 e1       	ldi	r31, 0x13	; 19
    77da:	14 86       	std	Z+12, r1	; 0x0c
    77dc:	15 86       	std	Z+13, r1	; 0x0d
    77de:	16 86       	std	Z+14, r1	; 0x0e
    77e0:	17 86       	std	Z+15, r1	; 0x0f
    77e2:	14 82       	std	Z+4, r1	; 0x04
    77e4:	15 82       	std	Z+5, r1	; 0x05
    77e6:	16 82       	std	Z+6, r1	; 0x06
    77e8:	17 82       	std	Z+7, r1	; 0x07
    77ea:	10 86       	std	Z+8, r1	; 0x08
    77ec:	11 86       	std	Z+9, r1	; 0x09
    77ee:	12 86       	std	Z+10, r1	; 0x0a
    77f0:	13 86       	std	Z+11, r1	; 0x0b
    77f2:	4d c0       	rjmp	.+154    	; 0x788e <_Z16get_last_rtu_logv+0xe8>
    77f4:	0e 94 cc 15 	call	0x2b98	; 0x2b98 <_Z4WRENv>
    77f8:	0d e5       	ldi	r16, 0x5D	; 93
    77fa:	13 e1       	ldi	r17, 0x13	; 19
    77fc:	20 e2       	ldi	r18, 0x20	; 32
    77fe:	30 e0       	ldi	r19, 0x00	; 0
    7800:	40 e0       	ldi	r20, 0x00	; 0
    7802:	50 e0       	ldi	r21, 0x00	; 0
    7804:	c7 01       	movw	r24, r14
    7806:	b6 01       	movw	r22, r12
    7808:	0e 94 6c 16 	call	0x2cd8	; 0x2cd8 <_Z14readContToBuffmmPc>
    780c:	0e 94 dd 16 	call	0x2dba	; 0x2dba <_Z9Wait_Busyv>
    7810:	0e 94 d1 15 	call	0x2ba2	; 0x2ba2 <_Z4WRDIv>
    7814:	cd e9       	ldi	r28, 0x9D	; 157
    7816:	d3 e1       	ldi	r29, 0x13	; 19
    7818:	f8 01       	movw	r30, r16
    781a:	87 85       	ldd	r24, Z+15	; 0x0f
    781c:	90 89       	ldd	r25, Z+16	; 0x10
    781e:	a1 89       	ldd	r26, Z+17	; 0x11
    7820:	b2 89       	ldd	r27, Z+18	; 0x12
    7822:	8c 87       	std	Y+12, r24	; 0x0c
    7824:	9d 87       	std	Y+13, r25	; 0x0d
    7826:	ae 87       	std	Y+14, r26	; 0x0e
    7828:	bf 87       	std	Y+15, r27	; 0x0f
    782a:	87 81       	ldd	r24, Z+7	; 0x07
    782c:	90 85       	ldd	r25, Z+8	; 0x08
    782e:	a1 85       	ldd	r26, Z+9	; 0x09
    7830:	b2 85       	ldd	r27, Z+10	; 0x0a
    7832:	8c 83       	std	Y+4, r24	; 0x04
    7834:	9d 83       	std	Y+5, r25	; 0x05
    7836:	ae 83       	std	Y+6, r26	; 0x06
    7838:	bf 83       	std	Y+7, r27	; 0x07
    783a:	83 85       	ldd	r24, Z+11	; 0x0b
    783c:	94 85       	ldd	r25, Z+12	; 0x0c
    783e:	a5 85       	ldd	r26, Z+13	; 0x0d
    7840:	b6 85       	ldd	r27, Z+14	; 0x0e
    7842:	88 87       	std	Y+8, r24	; 0x08
    7844:	99 87       	std	Y+9, r25	; 0x09
    7846:	aa 87       	std	Y+10, r26	; 0x0a
    7848:	bb 87       	std	Y+11, r27	; 0x0b
    784a:	c8 01       	movw	r24, r16
    784c:	ae de       	rcall	.-676    	; 0x75aa <_Z32check_for_day_month_change_y_totP12FL_rtu_log_t>
    784e:	8a 89       	ldd	r24, Y+18	; 0x12
    7850:	85 31       	cpi	r24, 0x15	; 21
    7852:	e8 f0       	brcs	.+58     	; 0x788e <_Z16get_last_rtu_logv+0xe8>
    7854:	90 91 73 13 	lds	r25, 0x1373	; 0x801373 <last_record+0x16>
    7858:	80 91 b0 13 	lds	r24, 0x13B0	; 0x8013b0 <ram_data+0x13>
    785c:	98 17       	cp	r25, r24
    785e:	49 f0       	breq	.+18     	; 0x7872 <_Z16get_last_rtu_logv+0xcc>
    7860:	18 86       	std	Y+8, r1	; 0x08
    7862:	19 86       	std	Y+9, r1	; 0x09
    7864:	1a 86       	std	Y+10, r1	; 0x0a
    7866:	1b 86       	std	Y+11, r1	; 0x0b
    7868:	1c 82       	std	Y+4, r1	; 0x04
    786a:	1d 82       	std	Y+5, r1	; 0x05
    786c:	1e 82       	std	Y+6, r1	; 0x06
    786e:	1f 82       	std	Y+7, r1	; 0x07
    7870:	0e c0       	rjmp	.+28     	; 0x788e <_Z16get_last_rtu_logv+0xe8>
    7872:	90 91 74 13 	lds	r25, 0x1374	; 0x801374 <last_record+0x17>
    7876:	80 91 b1 13 	lds	r24, 0x13B1	; 0x8013b1 <ram_data+0x14>
    787a:	98 17       	cp	r25, r24
    787c:	41 f0       	breq	.+16     	; 0x788e <_Z16get_last_rtu_logv+0xe8>
    787e:	10 92 a1 13 	sts	0x13A1, r1	; 0x8013a1 <ram_data+0x4>
    7882:	10 92 a2 13 	sts	0x13A2, r1	; 0x8013a2 <ram_data+0x5>
    7886:	10 92 a3 13 	sts	0x13A3, r1	; 0x8013a3 <ram_data+0x6>
    788a:	10 92 a4 13 	sts	0x13A4, r1	; 0x8013a4 <ram_data+0x7>
    788e:	df 91       	pop	r29
    7890:	cf 91       	pop	r28
    7892:	1f 91       	pop	r17
    7894:	0f 91       	pop	r16
    7896:	ff 90       	pop	r15
    7898:	ef 90       	pop	r14
    789a:	df 90       	pop	r13
    789c:	cf 90       	pop	r12
    789e:	08 95       	ret

000078a0 <_Z21check_for_MOTOR_POWERv>:
    78a0:	80 91 14 13 	lds	r24, 0x1314	; 0x801314 <_ZZ21check_for_MOTOR_POWERvE14mot_pow_detect>
    78a4:	88 23       	and	r24, r24
    78a6:	19 f0       	breq	.+6      	; 0x78ae <_Z21check_for_MOTOR_POWERv+0xe>
    78a8:	81 30       	cpi	r24, 0x01	; 1
    78aa:	d1 f0       	breq	.+52     	; 0x78e0 <_Z21check_for_MOTOR_POWERv+0x40>
    78ac:	08 95       	ret
    78ae:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <__TEXT_REGION_LENGTH__+0x700103>
    78b2:	82 fd       	sbrc	r24, 2
    78b4:	0a c0       	rjmp	.+20     	; 0x78ca <_Z21check_for_MOTOR_POWERv+0x2a>
    78b6:	ed e9       	ldi	r30, 0x9D	; 157
    78b8:	f3 e1       	ldi	r31, 0x13	; 19
    78ba:	80 89       	ldd	r24, Z+16	; 0x10
    78bc:	91 89       	ldd	r25, Z+17	; 0x11
    78be:	80 64       	ori	r24, 0x40	; 64
    78c0:	91 8b       	std	Z+17, r25	; 0x11
    78c2:	80 8b       	std	Z+16, r24	; 0x10
    78c4:	10 92 13 13 	sts	0x1313, r1	; 0x801313 <_ZZ21check_for_MOTOR_POWERvE12mot_down_cnt>
    78c8:	08 95       	ret
    78ca:	80 91 13 13 	lds	r24, 0x1313	; 0x801313 <_ZZ21check_for_MOTOR_POWERvE12mot_down_cnt>
    78ce:	8f 5f       	subi	r24, 0xFF	; 255
    78d0:	80 93 13 13 	sts	0x1313, r24	; 0x801313 <_ZZ21check_for_MOTOR_POWERvE12mot_down_cnt>
    78d4:	8b 30       	cpi	r24, 0x0B	; 11
    78d6:	78 f0       	brcs	.+30     	; 0x78f6 <_Z21check_for_MOTOR_POWERv+0x56>
    78d8:	81 e0       	ldi	r24, 0x01	; 1
    78da:	80 93 14 13 	sts	0x1314, r24	; 0x801314 <_ZZ21check_for_MOTOR_POWERvE14mot_pow_detect>
    78de:	08 95       	ret
    78e0:	ed e9       	ldi	r30, 0x9D	; 157
    78e2:	f3 e1       	ldi	r31, 0x13	; 19
    78e4:	80 89       	ldd	r24, Z+16	; 0x10
    78e6:	91 89       	ldd	r25, Z+17	; 0x11
    78e8:	8f 7b       	andi	r24, 0xBF	; 191
    78ea:	91 8b       	std	Z+17, r25	; 0x11
    78ec:	80 8b       	std	Z+16, r24	; 0x10
    78ee:	10 92 13 13 	sts	0x1313, r1	; 0x801313 <_ZZ21check_for_MOTOR_POWERvE12mot_down_cnt>
    78f2:	10 92 14 13 	sts	0x1314, r1	; 0x801314 <_ZZ21check_for_MOTOR_POWERvE14mot_pow_detect>
    78f6:	08 95       	ret

000078f8 <_Z20check_for_power_downv>:
    78f8:	80 91 12 13 	lds	r24, 0x1312	; 0x801312 <_ZZ20check_for_power_downvE12power_status>
    78fc:	88 23       	and	r24, r24
    78fe:	19 f0       	breq	.+6      	; 0x7906 <_Z20check_for_power_downv+0xe>
    7900:	81 30       	cpi	r24, 0x01	; 1
    7902:	39 f1       	breq	.+78     	; 0x7952 <_Z20check_for_power_downv+0x5a>
    7904:	08 95       	ret
    7906:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x700106>
    790a:	86 fd       	sbrc	r24, 6
    790c:	18 c0       	rjmp	.+48     	; 0x793e <_Z20check_for_power_downv+0x46>
    790e:	80 91 11 13 	lds	r24, 0x1311	; 0x801311 <_ZZ20check_for_power_downvE6pd_cnt>
    7912:	91 e0       	ldi	r25, 0x01	; 1
    7914:	98 0f       	add	r25, r24
    7916:	90 93 11 13 	sts	0x1311, r25	; 0x801311 <_ZZ20check_for_power_downvE6pd_cnt>
    791a:	83 30       	cpi	r24, 0x03	; 3
    791c:	c8 f1       	brcs	.+114    	; 0x7990 <_Z20check_for_power_downv+0x98>
    791e:	ed e9       	ldi	r30, 0x9D	; 157
    7920:	f3 e1       	ldi	r31, 0x13	; 19
    7922:	80 89       	ldd	r24, Z+16	; 0x10
    7924:	91 89       	ldd	r25, Z+17	; 0x11
    7926:	82 60       	ori	r24, 0x02	; 2
    7928:	91 8b       	std	Z+17, r25	; 0x11
    792a:	80 8b       	std	Z+16, r24	; 0x10
    792c:	0e 94 b6 32 	call	0x656c	; 0x656c <_Z18prepare_FL_LogDatav>
    7930:	ba da       	rcall	.-2700   	; 0x6ea6 <_Z16save_FL_rtu_datav>
    7932:	10 92 11 13 	sts	0x1311, r1	; 0x801311 <_ZZ20check_for_power_downvE6pd_cnt>
    7936:	81 e0       	ldi	r24, 0x01	; 1
    7938:	80 93 12 13 	sts	0x1312, r24	; 0x801312 <_ZZ20check_for_power_downvE12power_status>
    793c:	08 95       	ret
    793e:	10 92 11 13 	sts	0x1311, r1	; 0x801311 <_ZZ20check_for_power_downvE6pd_cnt>
    7942:	ed e9       	ldi	r30, 0x9D	; 157
    7944:	f3 e1       	ldi	r31, 0x13	; 19
    7946:	80 89       	ldd	r24, Z+16	; 0x10
    7948:	91 89       	ldd	r25, Z+17	; 0x11
    794a:	8d 7f       	andi	r24, 0xFD	; 253
    794c:	91 8b       	std	Z+17, r25	; 0x11
    794e:	80 8b       	std	Z+16, r24	; 0x10
    7950:	08 95       	ret
    7952:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x700106>
    7956:	86 ff       	sbrs	r24, 6
    7958:	12 c0       	rjmp	.+36     	; 0x797e <_Z20check_for_power_downv+0x86>
    795a:	80 91 11 13 	lds	r24, 0x1311	; 0x801311 <_ZZ20check_for_power_downvE6pd_cnt>
    795e:	91 e0       	ldi	r25, 0x01	; 1
    7960:	98 0f       	add	r25, r24
    7962:	90 93 11 13 	sts	0x1311, r25	; 0x801311 <_ZZ20check_for_power_downvE6pd_cnt>
    7966:	83 30       	cpi	r24, 0x03	; 3
    7968:	98 f0       	brcs	.+38     	; 0x7990 <_Z20check_for_power_downv+0x98>
    796a:	ed e9       	ldi	r30, 0x9D	; 157
    796c:	f3 e1       	ldi	r31, 0x13	; 19
    796e:	80 89       	ldd	r24, Z+16	; 0x10
    7970:	91 89       	ldd	r25, Z+17	; 0x11
    7972:	8d 7f       	andi	r24, 0xFD	; 253
    7974:	91 8b       	std	Z+17, r25	; 0x11
    7976:	80 8b       	std	Z+16, r24	; 0x10
    7978:	10 92 12 13 	sts	0x1312, r1	; 0x801312 <_ZZ20check_for_power_downvE12power_status>
    797c:	08 95       	ret
    797e:	ed e9       	ldi	r30, 0x9D	; 157
    7980:	f3 e1       	ldi	r31, 0x13	; 19
    7982:	80 89       	ldd	r24, Z+16	; 0x10
    7984:	91 89       	ldd	r25, Z+17	; 0x11
    7986:	82 60       	ori	r24, 0x02	; 2
    7988:	91 8b       	std	Z+17, r25	; 0x11
    798a:	80 8b       	std	Z+16, r24	; 0x10
    798c:	10 92 11 13 	sts	0x1311, r1	; 0x801311 <_ZZ20check_for_power_downvE6pd_cnt>
    7990:	08 95       	ret

00007992 <_Z12sw_led_cntrlv>:
    7992:	86 b1       	in	r24, 0x06	; 6
    7994:	98 2f       	mov	r25, r24
    7996:	90 7f       	andi	r25, 0xF0	; 240
    7998:	90 93 18 02 	sts	0x0218, r25	; 0x800218 <_ZZ12sw_led_cntrlvE2cs>
    799c:	85 fd       	sbrc	r24, 5
    799e:	13 c0       	rjmp	.+38     	; 0x79c6 <_Z12sw_led_cntrlv+0x34>
    79a0:	80 91 17 02 	lds	r24, 0x0217	; 0x800217 <_ZZ12sw_led_cntrlvE2ls>
    79a4:	85 ff       	sbrs	r24, 5
    79a6:	0f c0       	rjmp	.+30     	; 0x79c6 <_Z12sw_led_cntrlv+0x34>
    79a8:	80 91 28 13 	lds	r24, 0x1328	; 0x801328 <RTU_state>
    79ac:	84 30       	cpi	r24, 0x04	; 4
    79ae:	59 f4       	brne	.+22     	; 0x79c6 <_Z12sw_led_cntrlv+0x34>
    79b0:	80 91 26 13 	lds	r24, 0x1326	; 0x801326 <_ZL17manage_frmwr_updt>
    79b4:	81 30       	cpi	r24, 0x01	; 1
    79b6:	39 f4       	brne	.+14     	; 0x79c6 <_Z12sw_led_cntrlv+0x34>
    79b8:	0e 94 f9 2f 	call	0x5ff2	; 0x5ff2 <_Z23get_hex_file_updt_statev>
    79bc:	83 30       	cpi	r24, 0x03	; 3
    79be:	19 f4       	brne	.+6      	; 0x79c6 <_Z12sw_led_cntrlv+0x34>
    79c0:	81 e0       	ldi	r24, 0x01	; 1
    79c2:	80 93 27 13 	sts	0x1327, r24	; 0x801327 <_ZL17manage_frmwr_updt+0x1>
    79c6:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <_ZZ12sw_led_cntrlvE2cs>
    79ca:	86 fd       	sbrc	r24, 6
    79cc:	43 c0       	rjmp	.+134    	; 0x7a54 <_Z12sw_led_cntrlv+0xc2>
    79ce:	80 91 17 02 	lds	r24, 0x0217	; 0x800217 <_ZZ12sw_led_cntrlvE2ls>
    79d2:	98 2f       	mov	r25, r24
    79d4:	90 74       	andi	r25, 0x40	; 64
    79d6:	86 ff       	sbrs	r24, 6
    79d8:	1e c0       	rjmp	.+60     	; 0x7a16 <_Z12sw_led_cntrlv+0x84>
    79da:	2f ef       	ldi	r18, 0xFF	; 255
    79dc:	8f e1       	ldi	r24, 0x1F	; 31
    79de:	91 e0       	ldi	r25, 0x01	; 1
    79e0:	21 50       	subi	r18, 0x01	; 1
    79e2:	80 40       	sbci	r24, 0x00	; 0
    79e4:	90 40       	sbci	r25, 0x00	; 0
    79e6:	e1 f7       	brne	.-8      	; 0x79e0 <_Z12sw_led_cntrlv+0x4e>
    79e8:	00 c0       	rjmp	.+0      	; 0x79ea <_Z12sw_led_cntrlv+0x58>
    79ea:	00 00       	nop
    79ec:	36 99       	sbic	0x06, 6	; 6
    79ee:	32 c0       	rjmp	.+100    	; 0x7a54 <_Z12sw_led_cntrlv+0xc2>
    79f0:	10 92 10 13 	sts	0x1310, r1	; 0x801310 <_ZZ12sw_led_cntrlvE4time+0x1>
    79f4:	10 92 0f 13 	sts	0x130F, r1	; 0x80130f <_ZZ12sw_led_cntrlvE4time>
    79f8:	80 91 28 13 	lds	r24, 0x1328	; 0x801328 <RTU_state>
    79fc:	84 30       	cpi	r24, 0x04	; 4
    79fe:	51 f5       	brne	.+84     	; 0x7a54 <_Z12sw_led_cntrlv+0xc2>
    7a00:	80 91 26 13 	lds	r24, 0x1326	; 0x801326 <_ZL17manage_frmwr_updt>
    7a04:	81 30       	cpi	r24, 0x01	; 1
    7a06:	31 f5       	brne	.+76     	; 0x7a54 <_Z12sw_led_cntrlv+0xc2>
    7a08:	0e 94 f9 2f 	call	0x5ff2	; 0x5ff2 <_Z23get_hex_file_updt_statev>
    7a0c:	82 30       	cpi	r24, 0x02	; 2
    7a0e:	11 f5       	brne	.+68     	; 0x7a54 <_Z12sw_led_cntrlv+0xc2>
    7a10:	10 92 27 13 	sts	0x1327, r1	; 0x801327 <_ZL17manage_frmwr_updt+0x1>
    7a14:	1f c0       	rjmp	.+62     	; 0x7a54 <_Z12sw_led_cntrlv+0xc2>
    7a16:	91 11       	cpse	r25, r1
    7a18:	1d c0       	rjmp	.+58     	; 0x7a54 <_Z12sw_led_cntrlv+0xc2>
    7a1a:	80 91 0f 13 	lds	r24, 0x130F	; 0x80130f <_ZZ12sw_led_cntrlvE4time>
    7a1e:	90 91 10 13 	lds	r25, 0x1310	; 0x801310 <_ZZ12sw_led_cntrlvE4time+0x1>
    7a22:	01 96       	adiw	r24, 0x01	; 1
    7a24:	90 93 10 13 	sts	0x1310, r25	; 0x801310 <_ZZ12sw_led_cntrlvE4time+0x1>
    7a28:	80 93 0f 13 	sts	0x130F, r24	; 0x80130f <_ZZ12sw_led_cntrlvE4time>
    7a2c:	84 36       	cpi	r24, 0x64	; 100
    7a2e:	91 05       	cpc	r25, r1
    7a30:	88 f0       	brcs	.+34     	; 0x7a54 <_Z12sw_led_cntrlv+0xc2>
    7a32:	80 91 28 13 	lds	r24, 0x1328	; 0x801328 <RTU_state>
    7a36:	81 11       	cpse	r24, r1
    7a38:	0d c0       	rjmp	.+26     	; 0x7a54 <_Z12sw_led_cntrlv+0xc2>
    7a3a:	10 92 10 13 	sts	0x1310, r1	; 0x801310 <_ZZ12sw_led_cntrlvE4time+0x1>
    7a3e:	10 92 0f 13 	sts	0x130F, r1	; 0x80130f <_ZZ12sw_led_cntrlvE4time>
    7a42:	0e 94 49 20 	call	0x4092	; 0x4092 <_Z14getGPRSConnStsv>
    7a46:	81 30       	cpi	r24, 0x01	; 1
    7a48:	29 f4       	brne	.+10     	; 0x7a54 <_Z12sw_led_cntrlv+0xc2>
    7a4a:	80 e0       	ldi	r24, 0x00	; 0
    7a4c:	0e 94 7b 30 	call	0x60f6	; 0x60f6 <_Z22set_hex_file_updt_mode20hex_file_updt_mode_t>
    7a50:	0e 94 09 07 	call	0xe12	; 0xe12 <_Z21hexFileUpdateRoutinesv>
    7a54:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <_ZZ12sw_led_cntrlvE2cs>
    7a58:	88 23       	and	r24, r24
    7a5a:	d4 f0       	brlt	.+52     	; 0x7a90 <_Z12sw_led_cntrlv+0xfe>
    7a5c:	80 91 17 02 	lds	r24, 0x0217	; 0x800217 <_ZZ12sw_led_cntrlvE2ls>
    7a60:	88 23       	and	r24, r24
    7a62:	b4 f4       	brge	.+44     	; 0x7a90 <_Z12sw_led_cntrlv+0xfe>
    7a64:	80 91 28 13 	lds	r24, 0x1328	; 0x801328 <RTU_state>
    7a68:	84 30       	cpi	r24, 0x04	; 4
    7a6a:	91 f4       	brne	.+36     	; 0x7a90 <_Z12sw_led_cntrlv+0xfe>
    7a6c:	80 91 26 13 	lds	r24, 0x1326	; 0x801326 <_ZL17manage_frmwr_updt>
    7a70:	81 30       	cpi	r24, 0x01	; 1
    7a72:	71 f4       	brne	.+28     	; 0x7a90 <_Z12sw_led_cntrlv+0xfe>
    7a74:	0e 94 f9 2f 	call	0x5ff2	; 0x5ff2 <_Z23get_hex_file_updt_statev>
    7a78:	83 30       	cpi	r24, 0x03	; 3
    7a7a:	21 f4       	brne	.+8      	; 0x7a84 <_Z12sw_led_cntrlv+0xf2>
    7a7c:	82 e0       	ldi	r24, 0x02	; 2
    7a7e:	80 93 27 13 	sts	0x1327, r24	; 0x801327 <_ZL17manage_frmwr_updt+0x1>
    7a82:	06 c0       	rjmp	.+12     	; 0x7a90 <_Z12sw_led_cntrlv+0xfe>
    7a84:	0e 94 f9 2f 	call	0x5ff2	; 0x5ff2 <_Z23get_hex_file_updt_statev>
    7a88:	82 30       	cpi	r24, 0x02	; 2
    7a8a:	11 f4       	brne	.+4      	; 0x7a90 <_Z12sw_led_cntrlv+0xfe>
    7a8c:	10 92 28 13 	sts	0x1328, r1	; 0x801328 <RTU_state>
    7a90:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <_ZZ12sw_led_cntrlvE2cs>
    7a94:	80 93 17 02 	sts	0x0217, r24	; 0x800217 <_ZZ12sw_led_cntrlvE2ls>
    7a98:	08 95       	ret

00007a9a <_Z15updt_sys_configv>:
    7a9a:	80 91 24 13 	lds	r24, 0x1324	; 0x801324 <rtu_data>
    7a9e:	90 91 25 13 	lds	r25, 0x1325	; 0x801325 <rtu_data+0x1>
    7aa2:	81 60       	ori	r24, 0x01	; 1
    7aa4:	90 93 25 13 	sts	0x1325, r25	; 0x801325 <rtu_data+0x1>
    7aa8:	80 93 24 13 	sts	0x1324, r24	; 0x801324 <rtu_data>
    7aac:	08 95       	ret

00007aae <_Z9bootingUpv>:
    7aae:	0e 94 23 15 	call	0x2a46	; 0x2a46 <_Z18init_ext_interruptv>
    7ab2:	09 d4       	rcall	.+2066   	; 0x82c6 <_Z10timer0Initv>
    7ab4:	0e 94 03 1a 	call	0x3406	; 0x3406 <_Z9flashInitv>
    7ab8:	80 e0       	ldi	r24, 0x00	; 0
    7aba:	90 e0       	ldi	r25, 0x00	; 0
    7abc:	86 d5       	rcall	.+2828   	; 0x85ca <_Z8initUarti>
    7abe:	0e 94 77 32 	call	0x64ee	; 0x64ee <_Z15gprsPowerUpInitv>
    7ac2:	0e 94 93 1d 	call	0x3b26	; 0x3b26 <_Z15init_online_cfgv>
    7ac6:	0e 94 3c 02 	call	0x478	; 0x478 <_Z7initADCv>
    7aca:	0e 94 3f 2e 	call	0x5c7e	; 0x5c7e <_Z18init_hex_file_datav>
    7ace:	e5 df       	rcall	.-54     	; 0x7a9a <_Z15updt_sys_configv>
    7ad0:	0e 94 7e 1c 	call	0x38fc	; 0x38fc <_Z12initFMSensorv>
    7ad4:	2f ef       	ldi	r18, 0xFF	; 255
    7ad6:	8f e3       	ldi	r24, 0x3F	; 63
    7ad8:	92 e0       	ldi	r25, 0x02	; 2
    7ada:	21 50       	subi	r18, 0x01	; 1
    7adc:	80 40       	sbci	r24, 0x00	; 0
    7ade:	90 40       	sbci	r25, 0x00	; 0
    7ae0:	e1 f7       	brne	.-8      	; 0x7ada <_Z9bootingUpv+0x2c>
    7ae2:	00 c0       	rjmp	.+0      	; 0x7ae4 <_Z9bootingUpv+0x36>
    7ae4:	00 00       	nop
    7ae6:	08 95       	ret

00007ae8 <_Z12get_rtu_cnfgv>:
    7ae8:	80 91 24 13 	lds	r24, 0x1324	; 0x801324 <rtu_data>
    7aec:	90 91 25 13 	lds	r25, 0x1325	; 0x801325 <rtu_data+0x1>
    7af0:	08 95       	ret

00007af2 <_Z22manage_firmware_updatev>:
    7af2:	80 91 26 13 	lds	r24, 0x1326	; 0x801326 <_ZL17manage_frmwr_updt>
    7af6:	82 30       	cpi	r24, 0x02	; 2
    7af8:	71 f0       	breq	.+28     	; 0x7b16 <_Z22manage_firmware_updatev+0x24>
    7afa:	18 f4       	brcc	.+6      	; 0x7b02 <_Z22manage_firmware_updatev+0x10>
    7afc:	81 30       	cpi	r24, 0x01	; 1
    7afe:	31 f0       	breq	.+12     	; 0x7b0c <_Z22manage_firmware_updatev+0x1a>
    7b00:	08 95       	ret
    7b02:	83 30       	cpi	r24, 0x03	; 3
    7b04:	59 f0       	breq	.+22     	; 0x7b1c <_Z22manage_firmware_updatev+0x2a>
    7b06:	84 30       	cpi	r24, 0x04	; 4
    7b08:	71 f0       	breq	.+28     	; 0x7b26 <_Z22manage_firmware_updatev+0x34>
    7b0a:	08 95       	ret
    7b0c:	0e 94 18 07 	call	0xe30	; 0xe30 <_Z22manage_hex_file_updatev>
    7b10:	0c 94 df 07 	jmp	0xfbe	; 0xfbe <_Z23flash_hex_file_progressv>
    7b14:	08 95       	ret
    7b16:	0c 94 df 07 	jmp	0xfbe	; 0xfbe <_Z23flash_hex_file_progressv>
    7b1a:	08 95       	ret
    7b1c:	0e 94 df 07 	call	0xfbe	; 0xfbe <_Z23flash_hex_file_progressv>
    7b20:	0c 94 d5 1b 	jmp	0x37aa	; 0x37aa <_Z21flash_hex_file_verifyv>
    7b24:	08 95       	ret
    7b26:	0e 94 df 07 	call	0xfbe	; 0xfbe <_Z23flash_hex_file_progressv>
    7b2a:	80 91 0d 13 	lds	r24, 0x130D	; 0x80130d <_ZZ22manage_firmware_updatevE12display_time>
    7b2e:	90 91 0e 13 	lds	r25, 0x130E	; 0x80130e <_ZZ22manage_firmware_updatevE12display_time+0x1>
    7b32:	01 96       	adiw	r24, 0x01	; 1
    7b34:	82 33       	cpi	r24, 0x32	; 50
    7b36:	91 05       	cpc	r25, r1
    7b38:	28 f4       	brcc	.+10     	; 0x7b44 <_Z22manage_firmware_updatev+0x52>
    7b3a:	90 93 0e 13 	sts	0x130E, r25	; 0x80130e <_ZZ22manage_firmware_updatevE12display_time+0x1>
    7b3e:	80 93 0d 13 	sts	0x130D, r24	; 0x80130d <_ZZ22manage_firmware_updatevE12display_time>
    7b42:	08 95       	ret
    7b44:	10 92 0e 13 	sts	0x130E, r1	; 0x80130e <_ZZ22manage_firmware_updatevE12display_time+0x1>
    7b48:	10 92 0d 13 	sts	0x130D, r1	; 0x80130d <_ZZ22manage_firmware_updatevE12display_time>
    7b4c:	10 92 28 13 	sts	0x1328, r1	; 0x801328 <RTU_state>
    7b50:	08 95       	ret

00007b52 <_Z22set_frmwr_update_state20frmwr_update_state_t>:
    7b52:	80 93 26 13 	sts	0x1326, r24	; 0x801326 <_ZL17manage_frmwr_updt>
    7b56:	08 95       	ret

00007b58 <_Z22get_frmwr_update_statev>:
    7b58:	80 91 26 13 	lds	r24, 0x1326	; 0x801326 <_ZL17manage_frmwr_updt>
    7b5c:	08 95       	ret

00007b5e <_Z16get_frmwr_choicev>:
    7b5e:	80 91 27 13 	lds	r24, 0x1327	; 0x801327 <_ZL17manage_frmwr_updt+0x1>
    7b62:	08 95       	ret

00007b64 <_Z16set_frmwr_choiceh>:
    7b64:	80 93 27 13 	sts	0x1327, r24	; 0x801327 <_ZL17manage_frmwr_updt+0x1>
    7b68:	08 95       	ret

00007b6a <_Z13motor_handlerv>:
    7b6a:	0f 93       	push	r16
    7b6c:	1f 93       	push	r17
    7b6e:	ea e0       	ldi	r30, 0x0A	; 10
    7b70:	fb e0       	ldi	r31, 0x0B	; 11
    7b72:	22 81       	ldd	r18, Z+2	; 0x02
    7b74:	33 81       	ldd	r19, Z+3	; 0x03
    7b76:	a8 ee       	ldi	r26, 0xE8	; 232
    7b78:	b3 e0       	ldi	r27, 0x03	; 3
    7b7a:	0e 94 02 47 	call	0x8e04	; 0x8e04 <__umulhisi3>
    7b7e:	44 8d       	ldd	r20, Z+28	; 0x1c
    7b80:	50 e0       	ldi	r21, 0x00	; 0
    7b82:	9a 01       	movw	r18, r20
    7b84:	22 0f       	add	r18, r18
    7b86:	33 1f       	adc	r19, r19
    7b88:	44 0f       	add	r20, r20
    7b8a:	55 1f       	adc	r21, r21
    7b8c:	44 0f       	add	r20, r20
    7b8e:	55 1f       	adc	r21, r21
    7b90:	44 0f       	add	r20, r20
    7b92:	55 1f       	adc	r21, r21
    7b94:	24 0f       	add	r18, r20
    7b96:	35 1f       	adc	r19, r21
    7b98:	89 01       	movw	r16, r18
    7b9a:	33 0f       	add	r19, r19
    7b9c:	22 0b       	sbc	r18, r18
    7b9e:	33 0b       	sbc	r19, r19
    7ba0:	a9 01       	movw	r20, r18
    7ba2:	98 01       	movw	r18, r16
    7ba4:	26 0f       	add	r18, r22
    7ba6:	37 1f       	adc	r19, r23
    7ba8:	48 1f       	adc	r20, r24
    7baa:	59 1f       	adc	r21, r25
    7bac:	a3 e6       	ldi	r26, 0x63	; 99
    7bae:	b0 e0       	ldi	r27, 0x00	; 0
    7bb0:	0e 94 11 47 	call	0x8e22	; 0x8e22 <__muluhisi3>
    7bb4:	24 e6       	ldi	r18, 0x64	; 100
    7bb6:	30 e0       	ldi	r19, 0x00	; 0
    7bb8:	40 e0       	ldi	r20, 0x00	; 0
    7bba:	50 e0       	ldi	r21, 0x00	; 0
    7bbc:	0e 94 d8 46 	call	0x8db0	; 0x8db0 <__udivmodsi4>
    7bc0:	80 91 a1 13 	lds	r24, 0x13A1	; 0x8013a1 <ram_data+0x4>
    7bc4:	90 91 a2 13 	lds	r25, 0x13A2	; 0x8013a2 <ram_data+0x5>
    7bc8:	a0 91 a3 13 	lds	r26, 0x13A3	; 0x8013a3 <ram_data+0x6>
    7bcc:	b0 91 a4 13 	lds	r27, 0x13A4	; 0x8013a4 <ram_data+0x7>
    7bd0:	82 17       	cp	r24, r18
    7bd2:	93 07       	cpc	r25, r19
    7bd4:	a4 07       	cpc	r26, r20
    7bd6:	b5 07       	cpc	r27, r21
    7bd8:	30 f0       	brcs	.+12     	; 0x7be6 <_Z13motor_handlerv+0x7c>
    7bda:	e2 e0       	ldi	r30, 0x02	; 2
    7bdc:	f1 e0       	ldi	r31, 0x01	; 1
    7bde:	80 81       	ld	r24, Z
    7be0:	8b 7f       	andi	r24, 0xFB	; 251
    7be2:	80 83       	st	Z, r24
    7be4:	05 c0       	rjmp	.+10     	; 0x7bf0 <_Z13motor_handlerv+0x86>
    7be6:	e2 e0       	ldi	r30, 0x02	; 2
    7be8:	f1 e0       	ldi	r31, 0x01	; 1
    7bea:	80 81       	ld	r24, Z
    7bec:	84 60       	ori	r24, 0x04	; 4
    7bee:	80 83       	st	Z, r24
    7bf0:	1f 91       	pop	r17
    7bf2:	0f 91       	pop	r16
    7bf4:	08 95       	ret

00007bf6 <_Z19check_sms_thresholdv>:
    7bf6:	cf 92       	push	r12
    7bf8:	df 92       	push	r13
    7bfa:	ef 92       	push	r14
    7bfc:	ff 92       	push	r15
    7bfe:	0f 93       	push	r16
    7c00:	1f 93       	push	r17
    7c02:	ea e0       	ldi	r30, 0x0A	; 10
    7c04:	fb e0       	ldi	r31, 0x0B	; 11
    7c06:	22 81       	ldd	r18, Z+2	; 0x02
    7c08:	33 81       	ldd	r19, Z+3	; 0x03
    7c0a:	a8 ee       	ldi	r26, 0xE8	; 232
    7c0c:	b3 e0       	ldi	r27, 0x03	; 3
    7c0e:	0e 94 02 47 	call	0x8e04	; 0x8e04 <__umulhisi3>
    7c12:	44 8d       	ldd	r20, Z+28	; 0x1c
    7c14:	50 e0       	ldi	r21, 0x00	; 0
    7c16:	9a 01       	movw	r18, r20
    7c18:	22 0f       	add	r18, r18
    7c1a:	33 1f       	adc	r19, r19
    7c1c:	44 0f       	add	r20, r20
    7c1e:	55 1f       	adc	r21, r21
    7c20:	44 0f       	add	r20, r20
    7c22:	55 1f       	adc	r21, r21
    7c24:	44 0f       	add	r20, r20
    7c26:	55 1f       	adc	r21, r21
    7c28:	42 0f       	add	r20, r18
    7c2a:	53 1f       	adc	r21, r19
    7c2c:	8a 01       	movw	r16, r20
    7c2e:	55 0f       	add	r21, r21
    7c30:	22 0b       	sbc	r18, r18
    7c32:	33 0b       	sbc	r19, r19
    7c34:	a9 01       	movw	r20, r18
    7c36:	98 01       	movw	r18, r16
    7c38:	26 0f       	add	r18, r22
    7c3a:	37 1f       	adc	r19, r23
    7c3c:	48 1f       	adc	r20, r24
    7c3e:	59 1f       	adc	r21, r25
    7c40:	80 91 32 13 	lds	r24, 0x1332	; 0x801332 <sms_alert_state>
    7c44:	81 30       	cpi	r24, 0x01	; 1
    7c46:	a9 f1       	breq	.+106    	; 0x7cb2 <_Z19check_sms_thresholdv+0xbc>
    7c48:	18 f0       	brcs	.+6      	; 0x7c50 <_Z19check_sms_thresholdv+0x5a>
    7c4a:	82 30       	cpi	r24, 0x02	; 2
    7c4c:	e1 f1       	breq	.+120    	; 0x7cc6 <_Z19check_sms_thresholdv+0xd0>
    7c4e:	51 c0       	rjmp	.+162    	; 0x7cf2 <_Z19check_sms_thresholdv+0xfc>
    7c50:	c0 90 a1 13 	lds	r12, 0x13A1	; 0x8013a1 <ram_data+0x4>
    7c54:	d0 90 a2 13 	lds	r13, 0x13A2	; 0x8013a2 <ram_data+0x5>
    7c58:	e0 90 a3 13 	lds	r14, 0x13A3	; 0x8013a3 <ram_data+0x6>
    7c5c:	f0 90 a4 13 	lds	r15, 0x13A4	; 0x8013a4 <ram_data+0x7>
    7c60:	c2 16       	cp	r12, r18
    7c62:	d3 06       	cpc	r13, r19
    7c64:	e4 06       	cpc	r14, r20
    7c66:	f5 06       	cpc	r15, r21
    7c68:	20 f0       	brcs	.+8      	; 0x7c72 <_Z19check_sms_thresholdv+0x7c>
    7c6a:	82 e0       	ldi	r24, 0x02	; 2
    7c6c:	80 93 32 13 	sts	0x1332, r24	; 0x801332 <sms_alert_state>
    7c70:	40 c0       	rjmp	.+128    	; 0x7cf2 <_Z19check_sms_thresholdv+0xfc>
    7c72:	aa e5       	ldi	r26, 0x5A	; 90
    7c74:	b0 e0       	ldi	r27, 0x00	; 0
    7c76:	0e 94 11 47 	call	0x8e22	; 0x8e22 <__muluhisi3>
    7c7a:	24 e6       	ldi	r18, 0x64	; 100
    7c7c:	30 e0       	ldi	r19, 0x00	; 0
    7c7e:	40 e0       	ldi	r20, 0x00	; 0
    7c80:	50 e0       	ldi	r21, 0x00	; 0
    7c82:	0e 94 d8 46 	call	0x8db0	; 0x8db0 <__udivmodsi4>
    7c86:	c2 16       	cp	r12, r18
    7c88:	d3 06       	cpc	r13, r19
    7c8a:	e4 06       	cpc	r14, r20
    7c8c:	f5 06       	cpc	r15, r21
    7c8e:	88 f1       	brcs	.+98     	; 0x7cf2 <_Z19check_sms_thresholdv+0xfc>
    7c90:	80 91 9d 13 	lds	r24, 0x139D	; 0x80139d <ram_data>
    7c94:	90 91 9e 13 	lds	r25, 0x139E	; 0x80139e <ram_data+0x1>
    7c98:	a0 91 9f 13 	lds	r26, 0x139F	; 0x80139f <ram_data+0x2>
    7c9c:	b0 91 a0 13 	lds	r27, 0x13A0	; 0x8013a0 <ram_data+0x3>
    7ca0:	81 3d       	cpi	r24, 0xD1	; 209
    7ca2:	97 40       	sbci	r25, 0x07	; 7
    7ca4:	a1 05       	cpc	r26, r1
    7ca6:	b1 05       	cpc	r27, r1
    7ca8:	20 f1       	brcs	.+72     	; 0x7cf2 <_Z19check_sms_thresholdv+0xfc>
    7caa:	81 e0       	ldi	r24, 0x01	; 1
    7cac:	80 93 32 13 	sts	0x1332, r24	; 0x801332 <sms_alert_state>
    7cb0:	20 c0       	rjmp	.+64     	; 0x7cf2 <_Z19check_sms_thresholdv+0xfc>
    7cb2:	81 e0       	ldi	r24, 0x01	; 1
    7cb4:	90 e0       	ldi	r25, 0x00	; 0
    7cb6:	90 93 1b 02 	sts	0x021B, r25	; 0x80021b <db_save_status+0x1>
    7cba:	80 93 1a 02 	sts	0x021A, r24	; 0x80021a <db_save_status>
    7cbe:	82 e0       	ldi	r24, 0x02	; 2
    7cc0:	80 93 32 13 	sts	0x1332, r24	; 0x801332 <sms_alert_state>
    7cc4:	16 c0       	rjmp	.+44     	; 0x7cf2 <_Z19check_sms_thresholdv+0xfc>
    7cc6:	80 91 a1 13 	lds	r24, 0x13A1	; 0x8013a1 <ram_data+0x4>
    7cca:	90 91 a2 13 	lds	r25, 0x13A2	; 0x8013a2 <ram_data+0x5>
    7cce:	a0 91 a3 13 	lds	r26, 0x13A3	; 0x8013a3 <ram_data+0x6>
    7cd2:	b0 91 a4 13 	lds	r27, 0x13A4	; 0x8013a4 <ram_data+0x7>
    7cd6:	82 17       	cp	r24, r18
    7cd8:	93 07       	cpc	r25, r19
    7cda:	a4 07       	cpc	r26, r20
    7cdc:	b5 07       	cpc	r27, r21
    7cde:	48 f0       	brcs	.+18     	; 0x7cf2 <_Z19check_sms_thresholdv+0xfc>
    7ce0:	81 e0       	ldi	r24, 0x01	; 1
    7ce2:	90 e0       	ldi	r25, 0x00	; 0
    7ce4:	90 93 1b 02 	sts	0x021B, r25	; 0x80021b <db_save_status+0x1>
    7ce8:	80 93 1a 02 	sts	0x021A, r24	; 0x80021a <db_save_status>
    7cec:	83 e0       	ldi	r24, 0x03	; 3
    7cee:	80 93 32 13 	sts	0x1332, r24	; 0x801332 <sms_alert_state>
    7cf2:	1f 91       	pop	r17
    7cf4:	0f 91       	pop	r16
    7cf6:	ff 90       	pop	r15
    7cf8:	ef 90       	pop	r14
    7cfa:	df 90       	pop	r13
    7cfc:	cf 90       	pop	r12
    7cfe:	08 95       	ret

00007d00 <_Z11check_alarmv>:
    7d00:	0f 93       	push	r16
    7d02:	1f 93       	push	r17
    7d04:	ea e0       	ldi	r30, 0x0A	; 10
    7d06:	fb e0       	ldi	r31, 0x0B	; 11
    7d08:	22 81       	ldd	r18, Z+2	; 0x02
    7d0a:	33 81       	ldd	r19, Z+3	; 0x03
    7d0c:	a8 ee       	ldi	r26, 0xE8	; 232
    7d0e:	b3 e0       	ldi	r27, 0x03	; 3
    7d10:	0e 94 02 47 	call	0x8e04	; 0x8e04 <__umulhisi3>
    7d14:	44 8d       	ldd	r20, Z+28	; 0x1c
    7d16:	50 e0       	ldi	r21, 0x00	; 0
    7d18:	9a 01       	movw	r18, r20
    7d1a:	22 0f       	add	r18, r18
    7d1c:	33 1f       	adc	r19, r19
    7d1e:	44 0f       	add	r20, r20
    7d20:	55 1f       	adc	r21, r21
    7d22:	44 0f       	add	r20, r20
    7d24:	55 1f       	adc	r21, r21
    7d26:	44 0f       	add	r20, r20
    7d28:	55 1f       	adc	r21, r21
    7d2a:	24 0f       	add	r18, r20
    7d2c:	35 1f       	adc	r19, r21
    7d2e:	89 01       	movw	r16, r18
    7d30:	33 0f       	add	r19, r19
    7d32:	22 0b       	sbc	r18, r18
    7d34:	33 0b       	sbc	r19, r19
    7d36:	a9 01       	movw	r20, r18
    7d38:	98 01       	movw	r18, r16
    7d3a:	26 0f       	add	r18, r22
    7d3c:	37 1f       	adc	r19, r23
    7d3e:	48 1f       	adc	r20, r24
    7d40:	59 1f       	adc	r21, r25
    7d42:	aa e5       	ldi	r26, 0x5A	; 90
    7d44:	b0 e0       	ldi	r27, 0x00	; 0
    7d46:	0e 94 11 47 	call	0x8e22	; 0x8e22 <__muluhisi3>
    7d4a:	24 e6       	ldi	r18, 0x64	; 100
    7d4c:	30 e0       	ldi	r19, 0x00	; 0
    7d4e:	40 e0       	ldi	r20, 0x00	; 0
    7d50:	50 e0       	ldi	r21, 0x00	; 0
    7d52:	0e 94 d8 46 	call	0x8db0	; 0x8db0 <__udivmodsi4>
    7d56:	80 91 a1 13 	lds	r24, 0x13A1	; 0x8013a1 <ram_data+0x4>
    7d5a:	90 91 a2 13 	lds	r25, 0x13A2	; 0x8013a2 <ram_data+0x5>
    7d5e:	a0 91 a3 13 	lds	r26, 0x13A3	; 0x8013a3 <ram_data+0x6>
    7d62:	b0 91 a4 13 	lds	r27, 0x13A4	; 0x8013a4 <ram_data+0x7>
    7d66:	82 17       	cp	r24, r18
    7d68:	93 07       	cpc	r25, r19
    7d6a:	a4 07       	cpc	r26, r20
    7d6c:	b5 07       	cpc	r27, r21
    7d6e:	80 f0       	brcs	.+32     	; 0x7d90 <_Z11check_alarmv+0x90>
    7d70:	81 e0       	ldi	r24, 0x01	; 1
    7d72:	40 91 9d 13 	lds	r20, 0x139D	; 0x80139d <ram_data>
    7d76:	50 91 9e 13 	lds	r21, 0x139E	; 0x80139e <ram_data+0x1>
    7d7a:	60 91 9f 13 	lds	r22, 0x139F	; 0x80139f <ram_data+0x2>
    7d7e:	70 91 a0 13 	lds	r23, 0x13A0	; 0x8013a0 <ram_data+0x3>
    7d82:	41 3d       	cpi	r20, 0xD1	; 209
    7d84:	57 40       	sbci	r21, 0x07	; 7
    7d86:	61 05       	cpc	r22, r1
    7d88:	71 05       	cpc	r23, r1
    7d8a:	18 f4       	brcc	.+6      	; 0x7d92 <_Z11check_alarmv+0x92>
    7d8c:	80 e0       	ldi	r24, 0x00	; 0
    7d8e:	01 c0       	rjmp	.+2      	; 0x7d92 <_Z11check_alarmv+0x92>
    7d90:	80 e0       	ldi	r24, 0x00	; 0
    7d92:	1f 91       	pop	r17
    7d94:	0f 91       	pop	r16
    7d96:	08 95       	ret

00007d98 <_Z13alarm_handlerv>:
    7d98:	80 91 23 13 	lds	r24, 0x1323	; 0x801323 <alarm_state>
    7d9c:	81 30       	cpi	r24, 0x01	; 1
    7d9e:	89 f0       	breq	.+34     	; 0x7dc2 <_Z13alarm_handlerv+0x2a>
    7da0:	18 f0       	brcs	.+6      	; 0x7da8 <_Z13alarm_handlerv+0x10>
    7da2:	82 30       	cpi	r24, 0x02	; 2
    7da4:	b9 f1       	breq	.+110    	; 0x7e14 <_Z13alarm_handlerv+0x7c>
    7da6:	08 95       	ret
    7da8:	e2 e0       	ldi	r30, 0x02	; 2
    7daa:	f1 e0       	ldi	r31, 0x01	; 1
    7dac:	80 81       	ld	r24, Z
    7dae:	87 7f       	andi	r24, 0xF7	; 247
    7db0:	80 83       	st	Z, r24
    7db2:	a6 df       	rcall	.-180    	; 0x7d00 <_Z11check_alarmv>
    7db4:	88 23       	and	r24, r24
    7db6:	09 f4       	brne	.+2      	; 0x7dba <_Z13alarm_handlerv+0x22>
    7db8:	51 c0       	rjmp	.+162    	; 0x7e5c <_Z13alarm_handlerv+0xc4>
    7dba:	81 e0       	ldi	r24, 0x01	; 1
    7dbc:	80 93 23 13 	sts	0x1323, r24	; 0x801323 <alarm_state>
    7dc0:	08 95       	ret
    7dc2:	e2 e0       	ldi	r30, 0x02	; 2
    7dc4:	f1 e0       	ldi	r31, 0x01	; 1
    7dc6:	80 81       	ld	r24, Z
    7dc8:	88 60       	ori	r24, 0x08	; 8
    7dca:	80 83       	st	Z, r24
    7dcc:	99 df       	rcall	.-206    	; 0x7d00 <_Z11check_alarmv>
    7dce:	81 11       	cpse	r24, r1
    7dd0:	03 c0       	rjmp	.+6      	; 0x7dd8 <_Z13alarm_handlerv+0x40>
    7dd2:	10 92 23 13 	sts	0x1323, r1	; 0x801323 <alarm_state>
    7dd6:	08 95       	ret
    7dd8:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x700106>
    7ddc:	80 ff       	sbrs	r24, 0
    7dde:	15 c0       	rjmp	.+42     	; 0x7e0a <_Z13alarm_handlerv+0x72>
    7de0:	80 91 0b 13 	lds	r24, 0x130B	; 0x80130b <_ZZ13alarm_handlervE9wait_time>
    7de4:	90 91 0c 13 	lds	r25, 0x130C	; 0x80130c <_ZZ13alarm_handlervE9wait_time+0x1>
    7de8:	85 30       	cpi	r24, 0x05	; 5
    7dea:	91 05       	cpc	r25, r1
    7dec:	30 f4       	brcc	.+12     	; 0x7dfa <_Z13alarm_handlerv+0x62>
    7dee:	01 96       	adiw	r24, 0x01	; 1
    7df0:	90 93 0c 13 	sts	0x130C, r25	; 0x80130c <_ZZ13alarm_handlervE9wait_time+0x1>
    7df4:	80 93 0b 13 	sts	0x130B, r24	; 0x80130b <_ZZ13alarm_handlervE9wait_time>
    7df8:	08 95       	ret
    7dfa:	10 92 0c 13 	sts	0x130C, r1	; 0x80130c <_ZZ13alarm_handlervE9wait_time+0x1>
    7dfe:	10 92 0b 13 	sts	0x130B, r1	; 0x80130b <_ZZ13alarm_handlervE9wait_time>
    7e02:	82 e0       	ldi	r24, 0x02	; 2
    7e04:	80 93 23 13 	sts	0x1323, r24	; 0x801323 <alarm_state>
    7e08:	08 95       	ret
    7e0a:	10 92 0c 13 	sts	0x130C, r1	; 0x80130c <_ZZ13alarm_handlervE9wait_time+0x1>
    7e0e:	10 92 0b 13 	sts	0x130B, r1	; 0x80130b <_ZZ13alarm_handlervE9wait_time>
    7e12:	08 95       	ret
    7e14:	e2 e0       	ldi	r30, 0x02	; 2
    7e16:	f1 e0       	ldi	r31, 0x01	; 1
    7e18:	80 81       	ld	r24, Z
    7e1a:	87 7f       	andi	r24, 0xF7	; 247
    7e1c:	80 83       	st	Z, r24
    7e1e:	70 df       	rcall	.-288    	; 0x7d00 <_Z11check_alarmv>
    7e20:	88 23       	and	r24, r24
    7e22:	b1 f0       	breq	.+44     	; 0x7e50 <_Z13alarm_handlerv+0xb8>
    7e24:	80 91 0b 13 	lds	r24, 0x130B	; 0x80130b <_ZZ13alarm_handlervE9wait_time>
    7e28:	90 91 0c 13 	lds	r25, 0x130C	; 0x80130c <_ZZ13alarm_handlervE9wait_time+0x1>
    7e2c:	01 96       	adiw	r24, 0x01	; 1
    7e2e:	80 37       	cpi	r24, 0x70	; 112
    7e30:	27 e1       	ldi	r18, 0x17	; 23
    7e32:	92 07       	cpc	r25, r18
    7e34:	28 f4       	brcc	.+10     	; 0x7e40 <_Z13alarm_handlerv+0xa8>
    7e36:	90 93 0c 13 	sts	0x130C, r25	; 0x80130c <_ZZ13alarm_handlervE9wait_time+0x1>
    7e3a:	80 93 0b 13 	sts	0x130B, r24	; 0x80130b <_ZZ13alarm_handlervE9wait_time>
    7e3e:	08 95       	ret
    7e40:	10 92 0c 13 	sts	0x130C, r1	; 0x80130c <_ZZ13alarm_handlervE9wait_time+0x1>
    7e44:	10 92 0b 13 	sts	0x130B, r1	; 0x80130b <_ZZ13alarm_handlervE9wait_time>
    7e48:	81 e0       	ldi	r24, 0x01	; 1
    7e4a:	80 93 23 13 	sts	0x1323, r24	; 0x801323 <alarm_state>
    7e4e:	08 95       	ret
    7e50:	10 92 0c 13 	sts	0x130C, r1	; 0x80130c <_ZZ13alarm_handlervE9wait_time+0x1>
    7e54:	10 92 0b 13 	sts	0x130B, r1	; 0x80130b <_ZZ13alarm_handlervE9wait_time>
    7e58:	10 92 23 13 	sts	0x1323, r1	; 0x801323 <alarm_state>
    7e5c:	08 95       	ret

00007e5e <_Z10controlRTUv>:
    7e5e:	80 91 28 13 	lds	r24, 0x1328	; 0x801328 <RTU_state>
    7e62:	88 23       	and	r24, r24
    7e64:	21 f0       	breq	.+8      	; 0x7e6e <_Z10controlRTUv+0x10>
    7e66:	84 30       	cpi	r24, 0x04	; 4
    7e68:	21 f4       	brne	.+8      	; 0x7e72 <_Z10controlRTUv+0x14>
    7e6a:	43 ce       	rjmp	.-890    	; 0x7af2 <_Z22manage_firmware_updatev>
    7e6c:	08 95       	ret
    7e6e:	94 df       	rcall	.-216    	; 0x7d98 <_Z13alarm_handlerv>
    7e70:	7c ce       	rjmp	.-776    	; 0x7b6a <_Z13motor_handlerv>
    7e72:	08 95       	ret

00007e74 <_Z14clear_ram_logsv>:
    7e74:	ed e9       	ldi	r30, 0x9D	; 157
    7e76:	f3 e1       	ldi	r31, 0x13	; 19
    7e78:	10 82       	st	Z, r1
    7e7a:	11 82       	std	Z+1, r1	; 0x01
    7e7c:	12 82       	std	Z+2, r1	; 0x02
    7e7e:	13 82       	std	Z+3, r1	; 0x03
    7e80:	14 82       	std	Z+4, r1	; 0x04
    7e82:	15 82       	std	Z+5, r1	; 0x05
    7e84:	16 82       	std	Z+6, r1	; 0x06
    7e86:	17 82       	std	Z+7, r1	; 0x07
    7e88:	10 86       	std	Z+8, r1	; 0x08
    7e8a:	11 86       	std	Z+9, r1	; 0x09
    7e8c:	12 86       	std	Z+10, r1	; 0x0a
    7e8e:	13 86       	std	Z+11, r1	; 0x0b
    7e90:	14 86       	std	Z+12, r1	; 0x0c
    7e92:	15 86       	std	Z+13, r1	; 0x0d
    7e94:	16 86       	std	Z+14, r1	; 0x0e
    7e96:	17 86       	std	Z+15, r1	; 0x0f
    7e98:	11 8a       	std	Z+17, r1	; 0x11
    7e9a:	10 8a       	std	Z+16, r1	; 0x10
    7e9c:	08 95       	ret

00007e9e <_Z24online_firmware_downloadv>:
    7e9e:	80 91 09 13 	lds	r24, 0x1309	; 0x801309 <_ZZ24online_firmware_downloadvE18firmware_dwld_time>
    7ea2:	90 91 0a 13 	lds	r25, 0x130A	; 0x80130a <_ZZ24online_firmware_downloadvE18firmware_dwld_time+0x1>
    7ea6:	01 96       	adiw	r24, 0x01	; 1
    7ea8:	90 93 0a 13 	sts	0x130A, r25	; 0x80130a <_ZZ24online_firmware_downloadvE18firmware_dwld_time+0x1>
    7eac:	80 93 09 13 	sts	0x1309, r24	; 0x801309 <_ZZ24online_firmware_downloadvE18firmware_dwld_time>
    7eb0:	88 30       	cpi	r24, 0x08	; 8
    7eb2:	97 40       	sbci	r25, 0x07	; 7
    7eb4:	a0 f0       	brcs	.+40     	; 0x7ede <_Z24online_firmware_downloadv+0x40>
    7eb6:	80 91 28 13 	lds	r24, 0x1328	; 0x801328 <RTU_state>
    7eba:	81 11       	cpse	r24, r1
    7ebc:	10 c0       	rjmp	.+32     	; 0x7ede <_Z24online_firmware_downloadv+0x40>
    7ebe:	0e 94 fc 32 	call	0x65f8	; 0x65f8 <_Z16check_unsent_logv>
    7ec2:	81 11       	cpse	r24, r1
    7ec4:	0c c0       	rjmp	.+24     	; 0x7ede <_Z24online_firmware_downloadv+0x40>
    7ec6:	0e 94 49 20 	call	0x4092	; 0x4092 <_Z14getGPRSConnStsv>
    7eca:	81 30       	cpi	r24, 0x01	; 1
    7ecc:	41 f4       	brne	.+16     	; 0x7ede <_Z24online_firmware_downloadv+0x40>
    7ece:	10 92 0a 13 	sts	0x130A, r1	; 0x80130a <_ZZ24online_firmware_downloadvE18firmware_dwld_time+0x1>
    7ed2:	10 92 09 13 	sts	0x1309, r1	; 0x801309 <_ZZ24online_firmware_downloadvE18firmware_dwld_time>
    7ed6:	0e 94 7b 30 	call	0x60f6	; 0x60f6 <_Z22set_hex_file_updt_mode20hex_file_updt_mode_t>
    7eda:	0c 94 09 07 	jmp	0xe12	; 0xe12 <_Z21hexFileUpdateRoutinesv>
    7ede:	08 95       	ret

00007ee0 <_Z9reset_avrv>:
    7ee0:	f8 94       	cli
    7ee2:	a8 95       	wdr
    7ee4:	e0 e6       	ldi	r30, 0x60	; 96
    7ee6:	f0 e0       	ldi	r31, 0x00	; 0
    7ee8:	80 81       	ld	r24, Z
    7eea:	88 61       	ori	r24, 0x18	; 24
    7eec:	80 83       	st	Z, r24
    7eee:	8f e0       	ldi	r24, 0x0F	; 15
    7ef0:	80 83       	st	Z, r24
    7ef2:	78 94       	sei
    7ef4:	92 e0       	ldi	r25, 0x02	; 2
    7ef6:	88 b1       	in	r24, 0x08	; 8
    7ef8:	89 27       	eor	r24, r25
    7efa:	88 b9       	out	0x08, r24	; 8
    7efc:	2f ef       	ldi	r18, 0xFF	; 255
    7efe:	3f e7       	ldi	r19, 0x7F	; 127
    7f00:	86 e1       	ldi	r24, 0x16	; 22
    7f02:	21 50       	subi	r18, 0x01	; 1
    7f04:	30 40       	sbci	r19, 0x00	; 0
    7f06:	80 40       	sbci	r24, 0x00	; 0
    7f08:	e1 f7       	brne	.-8      	; 0x7f02 <_Z9reset_avrv+0x22>
    7f0a:	00 c0       	rjmp	.+0      	; 0x7f0c <_Z9reset_avrv+0x2c>
    7f0c:	00 00       	nop
    7f0e:	f3 cf       	rjmp	.-26     	; 0x7ef6 <_Z9reset_avrv+0x16>

00007f10 <_Z7WDT_offv>:
}

void WDT_off(void)
{
	cli();
    7f10:	f8 94       	cli
	wdt_reset();
    7f12:	a8 95       	wdr
	/* Clear WDRF in MCUSR */
	MCUSR &= ~(1<<WDRF);
    7f14:	84 b7       	in	r24, 0x34	; 52
    7f16:	87 7f       	andi	r24, 0xF7	; 247
    7f18:	84 bf       	out	0x34, r24	; 52
	/* Write logical one to WDCE and WDE *//* Keep old prescaler setting to prevent unintentional time-out */
	WDTCSR |= (1<<WDCE) | (1<<WDE);
    7f1a:	e0 e6       	ldi	r30, 0x60	; 96
    7f1c:	f0 e0       	ldi	r31, 0x00	; 0
    7f1e:	80 81       	ld	r24, Z
    7f20:	88 61       	ori	r24, 0x18	; 24
    7f22:	80 83       	st	Z, r24
	/* Turn off WDT */
	WDTCSR = 0x00;
    7f24:	10 82       	st	Z, r1
	sei();
    7f26:	78 94       	sei
    7f28:	08 95       	ret

00007f2a <main>:

rtc_state_t rtc_state = IDLE;//AM

int main(void)
{
	WDT_off();
    7f2a:	f2 df       	rcall	.-28     	; 0x7f10 <_Z7WDT_offv>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    7f2c:	2f ef       	ldi	r18, 0xFF	; 255
    7f2e:	8f e3       	ldi	r24, 0x3F	; 63
    7f30:	92 e0       	ldi	r25, 0x02	; 2
    7f32:	21 50       	subi	r18, 0x01	; 1
    7f34:	80 40       	sbci	r24, 0x00	; 0
    7f36:	90 40       	sbci	r25, 0x00	; 0
    7f38:	e1 f7       	brne	.-8      	; 0x7f32 <main+0x8>
    7f3a:	00 c0       	rjmp	.+0      	; 0x7f3c <main+0x12>
    7f3c:	00 00       	nop
   
   
   
	_delay_ms(100);		//Imp delay to avoid self restart after shutdown
	
	gpioInit();
    7f3e:	0e 94 79 32 	call	0x64f2	; 0x64f2 <_Z8gpioInitv>
//#if 0
	GLCD_Initalize();			//25-02-19 SK: Initialize graphics lcd 
    7f42:	0e 94 da 30 	call	0x61b4	; 0x61b4 <_Z14GLCD_Initalizev>
    7f46:	ef ef       	ldi	r30, 0xFF	; 255
    7f48:	ff e3       	ldi	r31, 0x3F	; 63
    7f4a:	22 e0       	ldi	r18, 0x02	; 2
    7f4c:	e1 50       	subi	r30, 0x01	; 1
    7f4e:	f0 40       	sbci	r31, 0x00	; 0
    7f50:	20 40       	sbci	r18, 0x00	; 0
    7f52:	e1 f7       	brne	.-8      	; 0x7f4c <main+0x22>
    7f54:	00 c0       	rjmp	.+0      	; 0x7f56 <main+0x2c>
    7f56:	00 00       	nop
	_delay_ms(100);		//Lets Settle down a bit
	 GLCD_ClearScreen();
    7f58:	0e 94 0c 31 	call	0x6218	; 0x6218 <_Z16GLCD_ClearScreenv>
	initUart(UART_PC);
    7f5c:	82 e0       	ldi	r24, 0x02	; 2
    7f5e:	90 e0       	ldi	r25, 0x00	; 0
    7f60:	34 d3       	rcall	.+1640   	; 0x85ca <_Z8initUarti>
	UWriteString("** RTU **\n\r", UART_PC);
    7f62:	62 e0       	ldi	r22, 0x02	; 2
    7f64:	70 e0       	ldi	r23, 0x00	; 0
    7f66:	8b ec       	ldi	r24, 0xCB	; 203
    7f68:	9a e0       	ldi	r25, 0x0A	; 10
    7f6a:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <_Z12UWriteStringPKci>
	UWriteString(FIRMWARE_VER,UART_PC);
    7f6e:	62 e0       	ldi	r22, 0x02	; 2
    7f70:	70 e0       	ldi	r23, 0x00	; 0
    7f72:	8a e6       	ldi	r24, 0x6A	; 106
    7f74:	92 e0       	ldi	r25, 0x02	; 2
    7f76:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <_Z12UWriteStringPKci>
	bootingUp();
    7f7a:	99 dd       	rcall	.-1230   	; 0x7aae <_Z9bootingUpv>
	
	//set_rtc(timebuff);
	
	

   getAllCfgData();				// 22-2-19 VC: to do here for this project
    7f7c:	5e da       	rcall	.-2884   	; 0x743a <_Z13getAllCfgDatav>
    7f7e:	62 e0       	ldi	r22, 0x02	; 2
#ifdef ONLINE_CONFIG_EN
#ifdef DEBUG_ONLINE_CFG
	UWriteString("curr_ver_cnt:",UART_PC);
    7f80:	70 e0       	ldi	r23, 0x00	; 0
    7f82:	80 ef       	ldi	r24, 0xF0	; 240
    7f84:	97 e0       	ldi	r25, 0x07	; 7
    7f86:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <_Z12UWriteStringPKci>
    7f8a:	0e 94 72 30 	call	0x60e4	; 0x60e4 <_Z22get_online_cfg_ver_cntv>
	UWriteInt(get_online_cfg_ver_cnt(),UART_PC);
    7f8e:	68 2f       	mov	r22, r24
    7f90:	70 e0       	ldi	r23, 0x00	; 0
    7f92:	80 e0       	ldi	r24, 0x00	; 0
    7f94:	90 e0       	ldi	r25, 0x00	; 0
    7f96:	42 e0       	ldi	r20, 0x02	; 2
    7f98:	0e 94 3e 09 	call	0x127c	; 0x127c <_Z9UWriteIntmc>
    7f9c:	80 e0       	ldi	r24, 0x00	; 0
#endif
#endif
   setGPRSConnSts(NOT_AVBL);
    7f9e:	0e 94 4c 20 	call	0x4098	; 0x4098 <_Z14setGPRSConnSts13gprs_status_t>
    7fa2:	80 e0       	ldi	r24, 0x00	; 0
   setGPRSSrvrSts(NOT_AVBL);
    7fa4:	0e 94 4f 20 	call	0x409e	; 0x409e <_Z14setGPRSSrvrSts13gprs_status_t>
    7fa8:	62 e0       	ldi	r22, 0x02	; 2
   
#ifdef DEBUG_UNSENT_LOGS
   UWriteString("unsent:",UART_PC);
    7faa:	70 e0       	ldi	r23, 0x00	; 0
    7fac:	87 ed       	ldi	r24, 0xD7	; 215
    7fae:	9a e0       	ldi	r25, 0x0A	; 10
    7fb0:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <_Z12UWriteStringPKci>
    7fb4:	60 91 34 13 	lds	r22, 0x1334	; 0x801334 <freq_updated_data+0x1>
   UWriteInt(freq_updated_data.unsent_rtu_logs_GPRS,UART_PC);
    7fb8:	70 91 35 13 	lds	r23, 0x1335	; 0x801335 <freq_updated_data+0x2>
    7fbc:	80 e0       	ldi	r24, 0x00	; 0
    7fbe:	90 e0       	ldi	r25, 0x00	; 0
    7fc0:	42 e0       	ldi	r20, 0x02	; 2
    7fc2:	0e 94 3e 09 	call	0x127c	; 0x127c <_Z9UWriteIntmc>
    7fc6:	8f ef       	ldi	r24, 0xFF	; 255
    7fc8:	9f e7       	ldi	r25, 0x7F	; 127
    7fca:	e6 e1       	ldi	r30, 0x16	; 22
    7fcc:	81 50       	subi	r24, 0x01	; 1
    7fce:	90 40       	sbci	r25, 0x00	; 0
    7fd0:	e0 40       	sbci	r30, 0x00	; 0
    7fd2:	e1 f7       	brne	.-8      	; 0x7fcc <main+0xa2>
    7fd4:	00 c0       	rjmp	.+0      	; 0x7fd6 <main+0xac>
    7fd6:	00 00       	nop
    7fd8:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
}
void init_rtu_ctrl_data()
{
	rtu_control_data.keep_alive = TRUE;
    7fda:	80 93 d9 13 	sts	0x13D9, r24	; 0x8013d9 <rtu_control_data>
    7fde:	0e 94 9f 04 	call	0x93e	; 0x93e <_Z14welcome_screenv>

   _delay_ms(1000);
   init_rtu_ctrl_data(); // taking for keep alive second rtu
  

	welcome_screen();
    7fe2:	ff ef       	ldi	r31, 0xFF	; 255
    7fe4:	2f ef       	ldi	r18, 0xFF	; 255
    7fe6:	8c e2       	ldi	r24, 0x2C	; 44
    7fe8:	f1 50       	subi	r31, 0x01	; 1
    7fea:	20 40       	sbci	r18, 0x00	; 0
    7fec:	80 40       	sbci	r24, 0x00	; 0
    7fee:	e1 f7       	brne	.-8      	; 0x7fe8 <main+0xbe>
    7ff0:	00 c0       	rjmp	.+0      	; 0x7ff2 <main+0xc8>
    7ff2:	00 00       	nop
    7ff4:	0e 94 0c 31 	call	0x6218	; 0x6218 <_Z16GLCD_ClearScreenv>
	_delay_ms(2000);
	GLCD_ClearScreen();
    7ff8:	8f ea       	ldi	r24, 0xAF	; 175
	
	//Lets get date and time in Ram data. This is mendatory for day change and month change logic	
	get_present_time(&ram_data.time);
    7ffa:	93 e1       	ldi	r25, 0x13	; 19
    7ffc:	0e 94 d2 13 	call	0x27a4	; 0x27a4 <_Z16get_present_timeP12time_stamp_t>
    8000:	ed e9       	ldi	r30, 0x9D	; 157
	ram_data.status |= (1 << POWER_ON_BIT);
    8002:	f3 e1       	ldi	r31, 0x13	; 19
    8004:	80 89       	ldd	r24, Z+16	; 0x10
    8006:	91 89       	ldd	r25, Z+17	; 0x11
    8008:	80 61       	ori	r24, 0x10	; 16
    800a:	91 8b       	std	Z+17, r25	; 0x11
    800c:	80 8b       	std	Z+16, r24	; 0x10
	//This should be done afer time read
	get_last_rtu_log();
    800e:	cb db       	rcall	.-2154   	; 0x77a6 <_Z16get_last_rtu_logv>
    8010:	9f ef       	ldi	r25, 0xFF	; 255
    8012:	ef e7       	ldi	r30, 0x7F	; 127
    8014:	f6 e1       	ldi	r31, 0x16	; 22
    8016:	91 50       	subi	r25, 0x01	; 1
    8018:	e0 40       	sbci	r30, 0x00	; 0
    801a:	f0 40       	sbci	r31, 0x00	; 0
    801c:	e1 f7       	brne	.-8      	; 0x8016 <main+0xec>
    801e:	00 c0       	rjmp	.+0      	; 0x8020 <main+0xf6>
    8020:	00 00       	nop
	//initUart(UART_485);
#ifdef DEBUG_SIMULATED_DATA
	//set_dummy_values();
#endif
	_delay_ms(1000);
	WDT_Init();
    8022:	39 d6       	rcall	.+3186   	; 0x8c96 <_Z8WDT_Initv>
    8024:	78 94       	sei
	 sei(); //:VC :14/07/2018 need to be enable
    8026:	cb e8       	ldi	r28, 0x8B	; 139
	   checkforUARTFrameTimeout(UART_485);		// 30 ms frame timeout
	   checkforUARTFrameTimeout(GPRS_UART);	// 30 ms frame timeout

	   //checkforpendingdata();
	   
	   if(schedular_flg.flg_10ms == TRUE)
    8028:	d4 e1       	ldi	r29, 0x14	; 20
    802a:	77 24       	eor	r7, r7
	   
	   // * ----- Perform 1sec Tasks ----- * /
		if (schedular_flg.flg_1sec == TRUE)
		{
			schedular_flg.flg_1sec = FALSE;
			ACTIVITY_LED_PORT ^= (1<<ACTIVITY_LED);
    802c:	73 94       	inc	r7
    802e:	0f 2e       	mov	r0, r31
				   if(getGPRSConnSts() == NOT_AVBL	||	check_unsent_log())
				   {
#ifdef DEBUG_ONLINE_DATA
UWriteString("upload_back:",UART_PC);
#endif
					   ++freq_updated_data.unsent_rtu_logs_GPRS;
    8030:	f3 e3       	ldi	r31, 0x33	; 51
    8032:	8f 2e       	mov	r8, r31
    8034:	f3 e1       	ldi	r31, 0x13	; 19
    8036:	9f 2e       	mov	r9, r31
    8038:	f0 2d       	mov	r31, r0
    803a:	0f 2e       	mov	r0, r31
			   }*/
		   }
		   
	   } // END OF 1 SEC SCHEDULAR
	   
	   if((Tx_Buff[UART_PC].pending_command))
    803c:	f8 e6       	ldi	r31, 0x68	; 104
    803e:	cf 2e       	mov	r12, r31
    8040:	f5 e1       	ldi	r31, 0x15	; 21
    8042:	df 2e       	mov	r13, r31
    8044:	f0 2d       	mov	r31, r0
    8046:	0f 2e       	mov	r0, r31
		  /* #ifdef DEBUG_TIME
		   UWriteString("test_cnt:",UART_PC);
		   UWriteInt(test_cnt++,UART_PC);
		   #endif*/
		   completePendingCommand();
		   Tx_Buff[UART_PC].curr_pck_num++;
    8048:	f9 e6       	ldi	r31, 0x69	; 105
    804a:	af 2e       	mov	r10, r31
    804c:	f5 e1       	ldi	r31, 0x15	; 21
    804e:	bf 2e       	mov	r11, r31
    8050:	f0 2d       	mov	r31, r0
    8052:	07 e6       	ldi	r16, 0x67	; 103
		   
	   }
	   
	   if(Tx_Buff[UART_PC].tx_ready == TRUE)
    8054:	15 e1       	ldi	r17, 0x15	; 21
    8056:	0f 2e       	mov	r0, r31
		   
		   Usendbuffer(UART_PC);		//Send data

		   flushTxBuffer(UART_PC);	//Flush buffer
	   }
	   if(Tx_Buff[UART_485].tx_ready == TRUE)
    8058:	fe e1       	ldi	r31, 0x1E	; 30
    805a:	ef 2e       	mov	r14, r31
    805c:	f5 e1       	ldi	r31, 0x15	; 21
    805e:	ff 2e       	mov	r15, r31
    8060:	f0 2d       	mov	r31, r0
	_delay_ms(1000);
	WDT_Init();
	 sei(); //:VC :14/07/2018 need to be enable
   while(true)
   {
		wdt_reset();
    8062:	a8 95       	wdr
	   //readButton();
	   /*check_for_power_down();*/
	   
	   //schedule_without_timer();
	   //Free Running Task for checking data in request
	   checkforUARTFrameTimeout(UART_485);		// 30 ms frame timeout
    8064:	81 e0       	ldi	r24, 0x01	; 1
    8066:	90 e0       	ldi	r25, 0x00	; 0
    8068:	e5 d5       	rcall	.+3018   	; 0x8c34 <_Z24checkforUARTFrameTimeouti>
	   checkforUARTFrameTimeout(GPRS_UART);	// 30 ms frame timeout
    806a:	80 e0       	ldi	r24, 0x00	; 0
    806c:	90 e0       	ldi	r25, 0x00	; 0

	   //checkforpendingdata();
	   
	   if(schedular_flg.flg_10ms == TRUE)
    806e:	e2 d5       	rcall	.+3012   	; 0x8c34 <_Z24checkforUARTFrameTimeouti>
    8070:	88 81       	ld	r24, Y
    8072:	81 30       	cpi	r24, 0x01	; 1
	   {
		   schedular_flg.flg_10ms = FALSE;		   
		   check_for_power_down();
    8074:	19 f4       	brne	.+6      	; 0x807c <main+0x152>
    8076:	18 82       	st	Y, r1
		   check_for_MOTOR_POWER();
    8078:	3f dc       	rcall	.-1922   	; 0x78f8 <_Z20check_for_power_downv>
    807a:	12 dc       	rcall	.-2012   	; 0x78a0 <_Z21check_for_MOTOR_POWERv>
	   }
	   if(schedular_flg.flg_50ms == TRUE)
    807c:	89 81       	ldd	r24, Y+1	; 0x01
    807e:	81 30       	cpi	r24, 0x01	; 1
    8080:	11 f4       	brne	.+4      	; 0x8086 <main+0x15c>
	   {
		   schedular_flg.flg_50ms = FALSE;
    8082:	19 82       	std	Y+1, r1	; 0x01
		   sw_led_cntrl();
    8084:	86 dc       	rcall	.-1780   	; 0x7992 <_Z12sw_led_cntrlv>
			   /*manage_gps_gprs();*/
	   }	   
	   // ----- Perform 100ms Tasks -----
	   if (schedular_flg.flg_100ms == TRUE)
    8086:	8a 81       	ldd	r24, Y+2	; 0x02
    8088:	81 30       	cpi	r24, 0x01	; 1
	   {
		   schedular_flg.flg_100ms = FALSE;
    808a:	49 f4       	brne	.+18     	; 0x809e <main+0x174>
		if(getRtuState() != RTU_UART_CONFIG)
    808c:	1a 82       	std	Y+2, r1	; 0x02
    808e:	80 91 28 13 	lds	r24, 0x1328	; 0x801328 <RTU_state>
    8092:	82 30       	cpi	r24, 0x02	; 2
		{
			manage_gps_gprs();
    8094:	09 f0       	breq	.+2      	; 0x8098 <main+0x16e>
    8096:	37 d6       	rcall	.+3182   	; 0x8d06 <_Z15manage_gps_gprsv>
		}
		   decodeMsgUart0();
    8098:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <_Z14decodeMsgUart0v>
#if FM_TYPE == ABB_UART
		   //readFMSensor();
#endif
		   controlRTU();
    809c:	e0 de       	rcall	.-576    	; 0x7e5e <_Z10controlRTUv>
    809e:	8b 81       	ldd	r24, Y+3	; 0x03
		   
		}
	   
	   // * ----- Perform 1sec Tasks ----- * /
		if (schedular_flg.flg_1sec == TRUE)
    80a0:	81 30       	cpi	r24, 0x01	; 1
    80a2:	09 f0       	breq	.+2      	; 0x80a6 <main+0x17c>
    80a4:	75 c0       	rjmp	.+234    	; 0x8190 <main+0x266>
		{
			schedular_flg.flg_1sec = FALSE;
    80a6:	1b 82       	std	Y+3, r1	; 0x03
			ACTIVITY_LED_PORT ^= (1<<ACTIVITY_LED);
    80a8:	88 b1       	in	r24, 0x08	; 8
#if FM_TYPE == KROHNE_MAR_50_485
				//RS485_device_handler.slave_handler();
#endif
			}
			/*updateRamData();*/
			if(getRtuState() == RTU_NORMAL) 
    80aa:	87 25       	eor	r24, r7
    80ac:	88 b9       	out	0x08, r24	; 8
    80ae:	80 91 28 13 	lds	r24, 0x1328	; 0x801328 <RTU_state>
			{
				readFMSensorADC();
    80b2:	81 11       	cpse	r24, r1
    80b4:	06 c0       	rjmp	.+12     	; 0x80c2 <main+0x198>
				updateRamData();
    80b6:	0e 94 8c 1c 	call	0x3918	; 0x3918 <_Z15readFMSensorADCv>
				data_screen();							//26-02-2019 SK
    80ba:	bc d9       	rcall	.-3208   	; 0x7434 <_Z13updateRamDatav>
    80bc:	0e 94 de 04 	call	0x9bc	; 0x9bc <_Z11data_screenv>
				check_sms_threshold();					//AM
    80c0:	9a dd       	rcall	.-1228   	; 0x7bf6 <_Z19check_sms_thresholdv>
			}
			
			
			checkForAlert();		//04-01-21 SK: this is empty function
			//updateLocalDesplay();					//23-2-19 SK: this is to be changed according to lcd library.
			readButton();
    80c2:	3c da       	rcall	.-2952   	; 0x753c <_Z10readButtonv>
    80c4:	80 91 1d 13 	lds	r24, 0x131D	; 0x80131d <_ZZ4mainE16schedular_5s_cnt>
			//Store in flash in every 60sec
			
		   if(++schedular_5s_cnt >= 5)
    80c8:	90 91 1e 13 	lds	r25, 0x131E	; 0x80131e <_ZZ4mainE16schedular_5s_cnt+0x1>
    80cc:	01 96       	adiw	r24, 0x01	; 1
    80ce:	85 30       	cpi	r24, 0x05	; 5
    80d0:	91 05       	cpc	r25, r1
    80d2:	28 f4       	brcc	.+10     	; 0x80de <main+0x1b4>
    80d4:	90 93 1e 13 	sts	0x131E, r25	; 0x80131e <_ZZ4mainE16schedular_5s_cnt+0x1>
    80d8:	80 93 1d 13 	sts	0x131D, r24	; 0x80131d <_ZZ4mainE16schedular_5s_cnt>
    80dc:	04 c0       	rjmp	.+8      	; 0x80e6 <main+0x1bc>
    80de:	10 92 1e 13 	sts	0x131E, r1	; 0x80131e <_ZZ4mainE16schedular_5s_cnt+0x1>
		   {
				schedular_5s_cnt = 0;
    80e2:	10 92 1d 13 	sts	0x131D, r1	; 0x80131d <_ZZ4mainE16schedular_5s_cnt>
    80e6:	80 91 28 13 	lds	r24, 0x1328	; 0x801328 <RTU_state>
		   }
		   if((getRtuState() != RTU_FRMWR_UPDATE))
    80ea:	84 30       	cpi	r24, 0x04	; 4
    80ec:	09 f4       	brne	.+2      	; 0x80f0 <main+0x1c6>
    80ee:	50 c0       	rjmp	.+160    	; 0x8190 <main+0x266>
    80f0:	80 91 1b 13 	lds	r24, 0x131B	; 0x80131b <_ZZ4mainE18rtu_save_logs_time>
		   {
			   if( ++rtu_save_logs_time >= RTU_SAVE_LOG_TIME  ) // save data is time is 60 sec
    80f4:	90 91 1c 13 	lds	r25, 0x131C	; 0x80131c <_ZZ4mainE18rtu_save_logs_time+0x1>
    80f8:	01 96       	adiw	r24, 0x01	; 1
    80fa:	84 38       	cpi	r24, 0x84	; 132
    80fc:	23 e0       	ldi	r18, 0x03	; 3
    80fe:	92 07       	cpc	r25, r18
    8100:	28 f4       	brcc	.+10     	; 0x810c <main+0x1e2>
    8102:	90 93 1c 13 	sts	0x131C, r25	; 0x80131c <_ZZ4mainE18rtu_save_logs_time+0x1>
    8106:	80 93 1b 13 	sts	0x131B, r24	; 0x80131b <_ZZ4mainE18rtu_save_logs_time>
    810a:	18 c0       	rjmp	.+48     	; 0x813c <main+0x212>
    810c:	10 92 1c 13 	sts	0x131C, r1	; 0x80131c <_ZZ4mainE18rtu_save_logs_time+0x1>
			   {
				   rtu_save_logs_time = 0;
    8110:	10 92 1b 13 	sts	0x131B, r1	; 0x80131b <_ZZ4mainE18rtu_save_logs_time>
    8114:	0e 94 b6 32 	call	0x656c	; 0x656c <_Z18prepare_FL_LogDatav>
#ifdef FLASH_LOG_DATA
				   prepare_FL_LogData();
    8118:	0e 94 53 37 	call	0x6ea6	; 0x6ea6 <_Z16save_FL_rtu_datav>
				   save_FL_rtu_data();
    811c:	0e 94 49 20 	call	0x4092	; 0x4092 <_Z14getGPRSConnStsv>
#else
					prepare_e2p_logdata();
					e2p_write_log_data();
#endif
				   //if((getGPRSSrvrSts() == NOT_AVBL)) // if gprs is not avilable then save the ram data into flash
				   if(getGPRSConnSts() == NOT_AVBL	||	check_unsent_log())
    8120:	88 23       	and	r24, r24
    8122:	21 f0       	breq	.+8      	; 0x812c <main+0x202>
    8124:	0e 94 fc 32 	call	0x65f8	; 0x65f8 <_Z16check_unsent_logv>
    8128:	88 23       	and	r24, r24
    812a:	41 f0       	breq	.+16     	; 0x813c <main+0x212>
    812c:	f4 01       	movw	r30, r8
				   {
#ifdef DEBUG_ONLINE_DATA
UWriteString("upload_back:",UART_PC);
#endif
					   ++freq_updated_data.unsent_rtu_logs_GPRS;
    812e:	81 81       	ldd	r24, Z+1	; 0x01
    8130:	92 81       	ldd	r25, Z+2	; 0x02
    8132:	01 96       	adiw	r24, 0x01	; 1
    8134:	92 83       	std	Z+2, r25	; 0x02
    8136:	81 83       	std	Z+1, r24	; 0x01
    8138:	0e 94 8e 1a 	call	0x351c	; 0x351c <_Z27flashWriteFreqUpdatedConfigv>
					   flashWriteFreqUpdatedConfig();
    813c:	80 91 19 13 	lds	r24, 0x1319	; 0x801319 <_ZZ4mainE15rtu_upload_time>
					   // 21/09/2018 need to change to upload on flash
				   }
			   }
			   
			   //if( ++rtu_upload_time >= RTU_UPLOAD_TIME  ) // upload data in every 60 sec
			   if(	++rtu_upload_time >= RTU_UPLOAD_TIME	
    8140:	90 91 1a 13 	lds	r25, 0x131A	; 0x80131a <_ZZ4mainE15rtu_upload_time+0x1>
    8144:	01 96       	adiw	r24, 0x01	; 1
    8146:	8c 33       	cpi	r24, 0x3C	; 60
    8148:	91 05       	cpc	r25, r1
    814a:	28 f4       	brcc	.+10     	; 0x8156 <main+0x22c>
    814c:	90 93 1a 13 	sts	0x131A, r25	; 0x80131a <_ZZ4mainE15rtu_upload_time+0x1>
    8150:	80 93 19 13 	sts	0x1319, r24	; 0x801319 <_ZZ4mainE15rtu_upload_time>
    8154:	1c c0       	rjmp	.+56     	; 0x818e <main+0x264>
    8156:	10 92 1a 13 	sts	0x131A, r1	; 0x80131a <_ZZ4mainE15rtu_upload_time+0x1>
						db_save_status = TRUE;
					}
					else
#endif
					{
					   rtu_upload_time = 0;
    815a:	10 92 19 13 	sts	0x1319, r1	; 0x801319 <_ZZ4mainE15rtu_upload_time>
    815e:	80 91 17 13 	lds	r24, 0x1317	; 0x801317 <_ZZ4mainE12db_save_time>
#ifdef DEBUG_ONLINE_DATA
UWriteString("upload_online:",UART_PC);
#endif
					   if(++db_save_time >= DB_SAVE_TIME)
    8162:	90 91 18 13 	lds	r25, 0x1318	; 0x801318 <_ZZ4mainE12db_save_time+0x1>
    8166:	01 96       	adiw	r24, 0x01	; 1
    8168:	8f 30       	cpi	r24, 0x0F	; 15
    816a:	91 05       	cpc	r25, r1
    816c:	28 f4       	brcc	.+10     	; 0x8178 <main+0x24e>
    816e:	90 93 18 13 	sts	0x1318, r25	; 0x801318 <_ZZ4mainE12db_save_time+0x1>
    8172:	80 93 17 13 	sts	0x1317, r24	; 0x801317 <_ZZ4mainE12db_save_time>
					   {
						   db_save_time = 0;
    8176:	0a c0       	rjmp	.+20     	; 0x818c <main+0x262>
    8178:	10 92 18 13 	sts	0x1318, r1	; 0x801318 <_ZZ4mainE12db_save_time+0x1>
    817c:	10 92 17 13 	sts	0x1317, r1	; 0x801317 <_ZZ4mainE12db_save_time>
						   db_save_status = TRUE;
    8180:	81 e0       	ldi	r24, 0x01	; 1
    8182:	90 e0       	ldi	r25, 0x00	; 0
    8184:	90 93 1b 02 	sts	0x021B, r25	; 0x80021b <db_save_status+0x1>
    8188:	80 93 1a 02 	sts	0x021A, r24	; 0x80021a <db_save_status>
					   {
						  // db_save_status = FALSE;
					   }
					}
				   
				   update_online_data();
    818c:	c3 d9       	rcall	.-3194   	; 0x7514 <_Z18update_online_datav>
			   }
			   online_firmware_download();
    818e:	87 de       	rcall	.-754    	; 0x7e9e <_Z24online_firmware_downloadv>
    8190:	f6 01       	movw	r30, r12
			   }*/
		   }
		   
	   } // END OF 1 SEC SCHEDULAR
	   
	   if((Tx_Buff[UART_PC].pending_command))
    8192:	80 81       	ld	r24, Z
    8194:	88 23       	and	r24, r24
    8196:	71 f0       	breq	.+28     	; 0x81b4 <main+0x28a>
    8198:	0e 94 43 10 	call	0x2086	; 0x2086 <_Z22completePendingCommandv>
		   
		  /* #ifdef DEBUG_TIME
		   UWriteString("test_cnt:",UART_PC);
		   UWriteInt(test_cnt++,UART_PC);
		   #endif*/
		   completePendingCommand();
    819c:	f5 01       	movw	r30, r10
		   Tx_Buff[UART_PC].curr_pck_num++;
    819e:	80 81       	ld	r24, Z
    81a0:	91 81       	ldd	r25, Z+1	; 0x01
    81a2:	a2 81       	ldd	r26, Z+2	; 0x02
    81a4:	b3 81       	ldd	r27, Z+3	; 0x03
    81a6:	01 96       	adiw	r24, 0x01	; 1
    81a8:	a1 1d       	adc	r26, r1
    81aa:	b1 1d       	adc	r27, r1
    81ac:	80 83       	st	Z, r24
    81ae:	91 83       	std	Z+1, r25	; 0x01
    81b0:	a2 83       	std	Z+2, r26	; 0x02
    81b2:	b3 83       	std	Z+3, r27	; 0x03
    81b4:	f8 01       	movw	r30, r16
		   
	   }
	   
	   if(Tx_Buff[UART_PC].tx_ready == TRUE)
    81b6:	80 81       	ld	r24, Z
    81b8:	81 30       	cpi	r24, 0x01	; 1
    81ba:	49 f4       	brne	.+18     	; 0x81ce <main+0x2a4>
    81bc:	10 82       	st	Z, r1
	   {
		   Tx_Buff[UART_PC].tx_ready = FALSE;
    81be:	82 e0       	ldi	r24, 0x02	; 2
		   
		   Usendbuffer(UART_PC);		//Send data
    81c0:	90 e0       	ldi	r25, 0x00	; 0
    81c2:	0e 94 5f 09 	call	0x12be	; 0x12be <_Z11Usendbufferi>
    81c6:	82 e0       	ldi	r24, 0x02	; 2

		   flushTxBuffer(UART_PC);	//Flush buffer
    81c8:	90 e0       	ldi	r25, 0x00	; 0
    81ca:	0e 94 b3 09 	call	0x1366	; 0x1366 <_Z13flushTxBufferi>
    81ce:	f7 01       	movw	r30, r14
	   }
	   if(Tx_Buff[UART_485].tx_ready == TRUE)
    81d0:	80 81       	ld	r24, Z
    81d2:	81 30       	cpi	r24, 0x01	; 1
    81d4:	09 f0       	breq	.+2      	; 0x81d8 <main+0x2ae>
    81d6:	45 cf       	rjmp	.-374    	; 0x8062 <main+0x138>
    81d8:	10 82       	st	Z, r1
	   {
		   Tx_Buff[UART_485].tx_ready = FALSE;
    81da:	81 e0       	ldi	r24, 0x01	; 1
		   Usendbuffer(UART_485);		//Send data
    81dc:	90 e0       	ldi	r25, 0x00	; 0
    81de:	0e 94 5f 09 	call	0x12be	; 0x12be <_Z11Usendbufferi>
    81e2:	81 e0       	ldi	r24, 0x01	; 1
#ifdef DEBUG_FM
UWriteString((char *)"\nfm_tx:",UART_PC);
UWriteBytes((char *)&Tx_Buff[UART_485].tx_buffer,(unsigned int)Tx_Buff[UART_485].tx_indx,UART_PC);
#endif
		   flushTxBuffer(UART_485);		//Flush buffer
    81e4:	90 e0       	ldi	r25, 0x00	; 0
    81e6:	0e 94 b3 09 	call	0x1366	; 0x1366 <_Z13flushTxBufferi>
    81ea:	3b cf       	rjmp	.-394    	; 0x8062 <main+0x138>

000081ec <_GLOBAL__sub_I_master>:
    81ec:	e1 ee       	ldi	r30, 0xE1	; 225

/* _____PRIVATE FUNCTIONS_____________________________________________________ */

void Modbus::init(uint8_t u8id, uint8_t u8serno, uint8_t u8txenpin)
{
    this->u8id = u8id;
    81ee:	f3 e1       	ldi	r31, 0x13	; 19
    81f0:	10 82       	st	Z, r1
    this->u8serno = (u8serno > 3) ? 0 : u8serno;
    81f2:	81 e0       	ldi	r24, 0x01	; 1
    81f4:	81 83       	std	Z+1, r24	; 0x01
    this->u8txenpin = u8txenpin;
    81f6:	86 e0       	ldi	r24, 0x06	; 6
    81f8:	82 83       	std	Z+2, r24	; 0x02
    this->u16timeOut = 1000;
    81fa:	88 ee       	ldi	r24, 0xE8	; 232
    81fc:	93 e0       	ldi	r25, 0x03	; 3
    81fe:	90 93 31 14 	sts	0x1431, r25	; 0x801431 <master+0x50>
    8202:	80 93 30 14 	sts	0x1430, r24	; 0x801430 <master+0x4f>
    8206:	08 95       	ret

00008208 <__vector_5>:
	EIMSK &= (~(1<<PULSER));
	EIMSK &= (~(1<<PULSER1));
}

ISR(INT4_vect)
{
    8208:	1f 92       	push	r1
    820a:	0f 92       	push	r0
    820c:	0f b6       	in	r0, 0x3f	; 63
    820e:	0f 92       	push	r0
    8210:	11 24       	eor	r1, r1
    8212:	8f 93       	push	r24
    8214:	9f 93       	push	r25
    8216:	af 93       	push	r26
    8218:	bf 93       	push	r27
#ifdef _DEBUG_PULSER
	debug_pulser_1++;
#endif
	cli();
    821a:	f8 94       	cli
	pulser_raw_cnt++;
    821c:	80 91 3b 14 	lds	r24, 0x143B	; 0x80143b <pulser_raw_cnt>
    8220:	90 91 3c 14 	lds	r25, 0x143C	; 0x80143c <pulser_raw_cnt+0x1>
    8224:	a0 91 3d 14 	lds	r26, 0x143D	; 0x80143d <pulser_raw_cnt+0x2>
    8228:	b0 91 3e 14 	lds	r27, 0x143E	; 0x80143e <pulser_raw_cnt+0x3>
    822c:	01 96       	adiw	r24, 0x01	; 1
    822e:	a1 1d       	adc	r26, r1
    8230:	b1 1d       	adc	r27, r1
    8232:	80 93 3b 14 	sts	0x143B, r24	; 0x80143b <pulser_raw_cnt>
    8236:	90 93 3c 14 	sts	0x143C, r25	; 0x80143c <pulser_raw_cnt+0x1>
    823a:	a0 93 3d 14 	sts	0x143D, r26	; 0x80143d <pulser_raw_cnt+0x2>
    823e:	b0 93 3e 14 	sts	0x143E, r27	; 0x80143e <pulser_raw_cnt+0x3>
	//pulser.pulsertimeout = 0;
	sei();
    8242:	78 94       	sei
}
    8244:	bf 91       	pop	r27
    8246:	af 91       	pop	r26
    8248:	9f 91       	pop	r25
    824a:	8f 91       	pop	r24
    824c:	0f 90       	pop	r0
    824e:	0f be       	out	0x3f, r0	; 63
    8250:	0f 90       	pop	r0
    8252:	1f 90       	pop	r1
    8254:	18 95       	reti

00008256 <__vector_6>:

ISR(INT5_vect)
{
    8256:	1f 92       	push	r1
    8258:	0f 92       	push	r0
    825a:	0f b6       	in	r0, 0x3f	; 63
    825c:	0f 92       	push	r0
    825e:	11 24       	eor	r1, r1
    8260:	8f 93       	push	r24
    8262:	9f 93       	push	r25
    8264:	af 93       	push	r26
    8266:	bf 93       	push	r27
#ifdef _DEBUG_PULSER
	debug_pulser_2++;
#endif
	cli();
    8268:	f8 94       	cli
	pulser_raw_cnt++;
    826a:	80 91 3b 14 	lds	r24, 0x143B	; 0x80143b <pulser_raw_cnt>
    826e:	90 91 3c 14 	lds	r25, 0x143C	; 0x80143c <pulser_raw_cnt+0x1>
    8272:	a0 91 3d 14 	lds	r26, 0x143D	; 0x80143d <pulser_raw_cnt+0x2>
    8276:	b0 91 3e 14 	lds	r27, 0x143E	; 0x80143e <pulser_raw_cnt+0x3>
    827a:	01 96       	adiw	r24, 0x01	; 1
    827c:	a1 1d       	adc	r26, r1
    827e:	b1 1d       	adc	r27, r1
    8280:	80 93 3b 14 	sts	0x143B, r24	; 0x80143b <pulser_raw_cnt>
    8284:	90 93 3c 14 	sts	0x143C, r25	; 0x80143c <pulser_raw_cnt+0x1>
    8288:	a0 93 3d 14 	sts	0x143D, r26	; 0x80143d <pulser_raw_cnt+0x2>
    828c:	b0 93 3e 14 	sts	0x143E, r27	; 0x80143e <pulser_raw_cnt+0x3>
	//pulser.pulsertimeout = 0;	
	sei();
    8290:	78 94       	sei
}
    8292:	bf 91       	pop	r27
    8294:	af 91       	pop	r26
    8296:	9f 91       	pop	r25
    8298:	8f 91       	pop	r24
    829a:	0f 90       	pop	r0
    829c:	0f be       	out	0x3f, r0	; 63
    829e:	0f 90       	pop	r0
    82a0:	1f 90       	pop	r1
    82a2:	18 95       	reti

000082a4 <_ZN12RS485_device12set_req_portEh>:
	device_sts[slave_id-1] = status;
}

void RS485_device::set_req_port(uint8_t port)
{
	req_port = port;
    82a4:	fc 01       	movw	r30, r24
    82a6:	62 83       	std	Z+2, r22	; 0x02
    82a8:	08 95       	ret

000082aa <_Z18timer0SetPrescalerh>:
void timer0SetPrescaler(unsigned char prescale)
{
	unsigned char timer_control_bit;
	// set prescaler on timer 0
	//outb(TCCR0B, (inb(TCCR0B) & ~TIMERRTC_PRESCALE_MASK) | prescale);
	timer_control_bit = ((TCCR0B) & ~TIMERRTC_PRESCALE_MASK) ;
    82aa:	95 b5       	in	r25, 0x25	; 37
	TCCR0B |= (timer_control_bit  | prescale);
    82ac:	25 b5       	in	r18, 0x25	; 37
    82ae:	98 7f       	andi	r25, 0xF8	; 248
    82b0:	92 2b       	or	r25, r18
    82b2:	89 2b       	or	r24, r25
    82b4:	85 bd       	out	0x25, r24	; 37
    82b6:	08 95       	ret

000082b8 <_Z13schedularInitv>:
}

/**/
void schedularInit( void )
{
	schedular_flg.flg_10ms = FALSE;
    82b8:	eb e8       	ldi	r30, 0x8B	; 139
    82ba:	f4 e1       	ldi	r31, 0x14	; 20
    82bc:	10 82       	st	Z, r1
	schedular_flg.flg_50ms = FALSE;
    82be:	11 82       	std	Z+1, r1	; 0x01
	schedular_flg.flg_100ms = FALSE;
    82c0:	12 82       	std	Z+2, r1	; 0x02
	schedular_flg.flg_1sec = FALSE;
    82c2:	13 82       	std	Z+3, r1	; 0x03
    82c4:	08 95       	ret

000082c6 <_Z10timer0Initv>:
#endif*/
/* Initialize timer 0 for running a scheduler of 10 msec*/
void timer0Init (void)
{
	// initialize timer 0
	timer0SetPrescaler( TIMER_CLK_DIV1024/*TIMER0PRESCALE*/ );	// set prescaler
    82c6:	85 e0       	ldi	r24, 0x05	; 5
    82c8:	f0 df       	rcall	.-32     	; 0x82aa <_Z18timer0SetPrescalerh>
	//outb(TCNT0, 0);							// reset TCNT0
	TCNT0 = 0;
    82ca:	16 bc       	out	0x26, r1	; 38
	//sbi(TIMSK0, TOIE0);						// enable TCNT0 overflow interrupt
	TIMSK0 |= (1<<TOIE0);
    82cc:	ee e6       	ldi	r30, 0x6E	; 110
    82ce:	f0 e0       	ldi	r31, 0x00	; 0
    82d0:	80 81       	ld	r24, Z
    82d2:	81 60       	ori	r24, 0x01	; 1
    82d4:	80 83       	st	Z, r24
	//outb(TCNT0, ( TIMERRTC_TOP_VALUE - TIMER0_INIT_VALUE));		//Initialize with a prefix time
	TCNT0 = ( TIMERRTC_TOP_VALUE - TIMER0_INIT_VALUE);
    82d6:	87 eb       	ldi	r24, 0xB7	; 183
	schedularInit();
    82d8:	86 bd       	out	0x26, r24	; 38
    82da:	ee cf       	rjmp	.-36     	; 0x82b8 <_Z13schedularInitv>
    82dc:	08 95       	ret

000082de <__vector_23>:
	schedular_flg.flg_1sec = FALSE;
}

/* Design the scheduler to perform different task at different instances */
ISR(TIMER0_OVF_vect)
{
    82de:	1f 92       	push	r1
    82e0:	0f 92       	push	r0
    82e2:	0f b6       	in	r0, 0x3f	; 63
    82e4:	0f 92       	push	r0
    82e6:	11 24       	eor	r1, r1
    82e8:	0b b6       	in	r0, 0x3b	; 59
    82ea:	0f 92       	push	r0
    82ec:	8f 93       	push	r24
    82ee:	9f 93       	push	r25
    82f0:	ef 93       	push	r30
    82f2:	ff 93       	push	r31
	static unsigned char cnt_100ms = 0;
	static unsigned int cnt_1sec = 0;
	/*static unsigned char sys_hang_duration = 0;*/
	//cli();
	//outb(TCNT0, ( TIMERRTC_TOP_VALUE - TIMER0_INIT_VALUE));
	TCNT0 = ( TIMERRTC_TOP_VALUE - TIMER0_INIT_VALUE);
    82f4:	87 eb       	ldi	r24, 0xB7	; 183
    82f6:	86 bd       	out	0x26, r24	; 38
	sei();
    82f8:	78 94       	sei
	{
		uart_rx_timeout = 0;
		uart_rx_timeout_flg = TRUE;
	}*/
	
	++_cnt;		//Anand 29.09.2014
    82fa:	80 91 89 14 	lds	r24, 0x1489	; 0x801489 <_cnt>
    82fe:	90 91 8a 14 	lds	r25, 0x148A	; 0x80148a <_cnt+0x1>
    8302:	01 96       	adiw	r24, 0x01	; 1
    8304:	90 93 8a 14 	sts	0x148A, r25	; 0x80148a <_cnt+0x1>
    8308:	80 93 89 14 	sts	0x1489, r24	; 0x801489 <_cnt>
	
#ifdef GPRS_ENABLE
	if(gprs_rx_isr_handler.elapsed < 0xFF)
    830c:	80 91 4d 0c 	lds	r24, 0x0C4D	; 0x800c4d <gprs_rx_isr_handler>
    8310:	8f 3f       	cpi	r24, 0xFF	; 255
    8312:	29 f0       	breq	.+10     	; 0x831e <__vector_23+0x40>
		gprs_rx_isr_handler.elapsed++;		//Anand 07-04-16
    8314:	ed e4       	ldi	r30, 0x4D	; 77
    8316:	fc e0       	ldi	r31, 0x0C	; 12
    8318:	80 81       	ld	r24, Z
    831a:	8f 5f       	subi	r24, 0xFF	; 255
    831c:	80 83       	st	Z, r24
#endif

	if(Rx_Buff[UART_485].elapsed < 0xFF)
    831e:	80 91 f5 15 	lds	r24, 0x15F5	; 0x8015f5 <Rx_Buff+0x87>
    8322:	90 91 f6 15 	lds	r25, 0x15F6	; 0x8015f6 <Rx_Buff+0x88>
    8326:	8f 3f       	cpi	r24, 0xFF	; 255
    8328:	91 05       	cpc	r25, r1
    832a:	38 f4       	brcc	.+14     	; 0x833a <__vector_23+0x5c>
		Rx_Buff[UART_485].elapsed++;
    832c:	e5 ef       	ldi	r30, 0xF5	; 245
    832e:	f5 e1       	ldi	r31, 0x15	; 21
    8330:	80 81       	ld	r24, Z
    8332:	91 81       	ldd	r25, Z+1	; 0x01
    8334:	01 96       	adiw	r24, 0x01	; 1
    8336:	91 83       	std	Z+1, r25	; 0x01
    8338:	80 83       	st	Z, r24

	/* 10msec flag check to perform 10msec task */
	//if(cnt_10ms++ > SCHEDULE_10MS_CNT)
	{
		//cnt_10ms = 0;		//Anand 08-07-15
		schedular_flg.flg_10ms  = TRUE;
    833a:	81 e0       	ldi	r24, 0x01	; 1
    833c:	80 93 8b 14 	sts	0x148B, r24	; 0x80148b <schedular_flg>
	}
	/* 50msec flag check to perform 10msec task */
	if(cnt_50ms++ >= SCHEDULE_50MS_CNT)
    8340:	80 91 88 14 	lds	r24, 0x1488	; 0x801488 <_ZZ11__vector_23E8cnt_50ms>
    8344:	85 30       	cpi	r24, 0x05	; 5
    8346:	20 f4       	brcc	.+8      	; 0x8350 <__vector_23+0x72>
    8348:	8f 5f       	subi	r24, 0xFF	; 255
    834a:	80 93 88 14 	sts	0x1488, r24	; 0x801488 <_ZZ11__vector_23E8cnt_50ms>
    834e:	05 c0       	rjmp	.+10     	; 0x835a <__vector_23+0x7c>
	{
		cnt_50ms = 0;
    8350:	10 92 88 14 	sts	0x1488, r1	; 0x801488 <_ZZ11__vector_23E8cnt_50ms>
		schedular_flg.flg_50ms  = TRUE;
    8354:	81 e0       	ldi	r24, 0x01	; 1
    8356:	80 93 8c 14 	sts	0x148C, r24	; 0x80148c <schedular_flg+0x1>
	}
	/* 100msec flag check to perform 100msec task */
	if(cnt_100ms++ >= SCHEDULE_100MS_CNT)
    835a:	80 91 87 14 	lds	r24, 0x1487	; 0x801487 <_ZZ11__vector_23E9cnt_100ms>
    835e:	8a 30       	cpi	r24, 0x0A	; 10
    8360:	20 f4       	brcc	.+8      	; 0x836a <__vector_23+0x8c>
    8362:	8f 5f       	subi	r24, 0xFF	; 255
    8364:	80 93 87 14 	sts	0x1487, r24	; 0x801487 <_ZZ11__vector_23E9cnt_100ms>
    8368:	05 c0       	rjmp	.+10     	; 0x8374 <__vector_23+0x96>
	{
		cnt_100ms = 0;
    836a:	10 92 87 14 	sts	0x1487, r1	; 0x801487 <_ZZ11__vector_23E9cnt_100ms>
		schedular_flg.flg_100ms = TRUE;
    836e:	81 e0       	ldi	r24, 0x01	; 1
    8370:	80 93 8d 14 	sts	0x148D, r24	; 0x80148d <schedular_flg+0x2>
	}
	/* 1sec flag check to perform 1sec task */
	if(cnt_1sec++ >= SCHEDULE_1SEC_CNT)
    8374:	80 91 85 14 	lds	r24, 0x1485	; 0x801485 <_ZZ11__vector_23E8cnt_1sec>
    8378:	90 91 86 14 	lds	r25, 0x1486	; 0x801486 <_ZZ11__vector_23E8cnt_1sec+0x1>
    837c:	84 36       	cpi	r24, 0x64	; 100
    837e:	91 05       	cpc	r25, r1
    8380:	30 f4       	brcc	.+12     	; 0x838e <__vector_23+0xb0>
    8382:	01 96       	adiw	r24, 0x01	; 1
    8384:	90 93 86 14 	sts	0x1486, r25	; 0x801486 <_ZZ11__vector_23E8cnt_1sec+0x1>
    8388:	80 93 85 14 	sts	0x1485, r24	; 0x801485 <_ZZ11__vector_23E8cnt_1sec>
    838c:	0b c0       	rjmp	.+22     	; 0x83a4 <__vector_23+0xc6>
	{
		cnt_1sec = 0;
    838e:	10 92 86 14 	sts	0x1486, r1	; 0x801486 <_ZZ11__vector_23E8cnt_1sec+0x1>
    8392:	10 92 85 14 	sts	0x1485, r1	; 0x801485 <_ZZ11__vector_23E8cnt_1sec>
		
//#if CONN_TYPE == PULSE
//		sensor_data.sample_1s[0] = curr_pulse_cnt;
		curr_pulse_cnt = 0;
    8396:	10 92 39 0b 	sts	0x0B39, r1	; 0x800b39 <curr_pulse_cnt+0x1>
    839a:	10 92 38 0b 	sts	0x0B38, r1	; 0x800b38 <curr_pulse_cnt>
//#endif
		
		schedular_flg.flg_1sec = TRUE;
    839e:	81 e0       	ldi	r24, 0x01	; 1
    83a0:	80 93 8e 14 	sts	0x148E, r24	; 0x80148e <schedular_flg+0x3>
	}
	//sei();
}
    83a4:	ff 91       	pop	r31
    83a6:	ef 91       	pop	r30
    83a8:	9f 91       	pop	r25
    83aa:	8f 91       	pop	r24
    83ac:	0f 90       	pop	r0
    83ae:	0b be       	out	0x3b, r0	; 59
    83b0:	0f 90       	pop	r0
    83b2:	0f be       	out	0x3f, r0	; 63
    83b4:	0f 90       	pop	r0
    83b6:	1f 90       	pop	r1
    83b8:	18 95       	reti

000083ba <_Z10isLeapYeari>:
time_stamp_t last_dispense_time;
time_stamp_t end_time;


int isLeapYear(int year)
{
    83ba:	9c 01       	movw	r18, r24
	return (year % 4 == 0 && year % 100 != 0) || (year % 400 == 0);
    83bc:	83 70       	andi	r24, 0x03	; 3
    83be:	99 27       	eor	r25, r25
    83c0:	89 2b       	or	r24, r25
    83c2:	31 f4       	brne	.+12     	; 0x83d0 <_Z10isLeapYeari+0x16>
    83c4:	c9 01       	movw	r24, r18
    83c6:	64 e6       	ldi	r22, 0x64	; 100
    83c8:	70 e0       	ldi	r23, 0x00	; 0
    83ca:	df d4       	rcall	.+2494   	; 0x8d8a <__divmodhi4>
    83cc:	89 2b       	or	r24, r25
    83ce:	51 f4       	brne	.+20     	; 0x83e4 <_Z10isLeapYeari+0x2a>
    83d0:	c9 01       	movw	r24, r18
    83d2:	60 e9       	ldi	r22, 0x90	; 144
    83d4:	71 e0       	ldi	r23, 0x01	; 1
    83d6:	d9 d4       	rcall	.+2482   	; 0x8d8a <__divmodhi4>
    83d8:	9c 01       	movw	r18, r24
    83da:	81 e0       	ldi	r24, 0x01	; 1
    83dc:	23 2b       	or	r18, r19
    83de:	19 f0       	breq	.+6      	; 0x83e6 <_Z10isLeapYeari+0x2c>
    83e0:	80 e0       	ldi	r24, 0x00	; 0
    83e2:	01 c0       	rjmp	.+2      	; 0x83e6 <_Z10isLeapYeari+0x2c>
    83e4:	81 e0       	ldi	r24, 0x01	; 1
}
    83e6:	90 e0       	ldi	r25, 0x00	; 0
    83e8:	08 95       	ret

000083ea <_Z14getDaysOfMonthii>:

int getDaysOfMonth(int month, int year) 
{
	if (month == FEB) 
    83ea:	82 30       	cpi	r24, 0x02	; 2
    83ec:	91 05       	cpc	r25, r1
    83ee:	39 f4       	brne	.+14     	; 0x83fe <_Z14getDaysOfMonthii+0x14>
    83f0:	cb 01       	movw	r24, r22
	{
		return isLeapYear(year) ? 29 : 28;
    83f2:	e3 df       	rcall	.-58     	; 0x83ba <_Z10isLeapYeari>
    83f4:	89 2b       	or	r24, r25
    83f6:	99 f4       	brne	.+38     	; 0x841e <_Z14getDaysOfMonthii+0x34>
    83f8:	8c e1       	ldi	r24, 0x1C	; 28
    83fa:	90 e0       	ldi	r25, 0x00	; 0
    83fc:	08 95       	ret
	}

	switch (month)
    83fe:	fc 01       	movw	r30, r24
    8400:	31 97       	sbiw	r30, 0x01	; 1
    8402:	ec 30       	cpi	r30, 0x0C	; 12
    8404:	f1 05       	cpc	r31, r1
    8406:	40 f4       	brcc	.+16     	; 0x8418 <_Z14getDaysOfMonthii+0x2e>
    8408:	88 27       	eor	r24, r24
    840a:	e3 5f       	subi	r30, 0xF3	; 243
    840c:	fe 4f       	sbci	r31, 0xFE	; 254
    840e:	8f 4f       	sbci	r24, 0xFF	; 255
    8410:	f1 c4       	rjmp	.+2530   	; 0x8df4 <__tablejump2__>
	{
		case JAN: case MAR: case MAY: case JUL: case AUG: case OCT: case DECMB:
		return 31;
		case APR: case JUN: case SEP: case NOV:
		return 30;
    8412:	8e e1       	ldi	r24, 0x1E	; 30
    8414:	90 e0       	ldi	r25, 0x00	; 0
    8416:	08 95       	ret
		default:
		return 0;
    8418:	80 e0       	ldi	r24, 0x00	; 0
    841a:	90 e0       	ldi	r25, 0x00	; 0
    841c:	08 95       	ret

int getDaysOfMonth(int month, int year) 
{
	if (month == FEB) 
	{
		return isLeapYear(year) ? 29 : 28;
    841e:	8d e1       	ldi	r24, 0x1D	; 29
    8420:	90 e0       	ldi	r25, 0x00	; 0
    8422:	08 95       	ret
	}

	switch (month)
	{
		case JAN: case MAR: case MAY: case JUL: case AUG: case OCT: case DECMB:
		return 31;
    8424:	8f e1       	ldi	r24, 0x1F	; 31
    8426:	90 e0       	ldi	r25, 0x00	; 0
		case APR: case JUN: case SEP: case NOV:
		return 30;
		default:
		return 0;
	}
}
    8428:	08 95       	ret

0000842a <_Z18timestampToMinutes12time_stamp_t>:



int timestampToMinutes(time_stamp_t ts)			//neetu parihar
{
    842a:	7f 92       	push	r7
    842c:	8f 92       	push	r8
    842e:	9f 92       	push	r9
    8430:	af 92       	push	r10
    8432:	bf 92       	push	r11
    8434:	cf 92       	push	r12
    8436:	df 92       	push	r13
    8438:	ef 92       	push	r14
    843a:	ff 92       	push	r15
    843c:	0f 93       	push	r16
    843e:	1f 93       	push	r17
    8440:	cf 93       	push	r28
    8442:	df 93       	push	r29
    8444:	00 d0       	rcall	.+0      	; 0x8446 <_Z18timestampToMinutes12time_stamp_t+0x1c>
    8446:	00 d0       	rcall	.+0      	; 0x8448 <_Z18timestampToMinutes12time_stamp_t+0x1e>
    8448:	cd b7       	in	r28, 0x3d	; 61
    844a:	de b7       	in	r29, 0x3e	; 62
    844c:	74 2e       	mov	r7, r20
	int totalMinutes = 0;

	totalMinutes += ts.min;
	totalMinutes += ts.hr * 60;
    844e:	08 2f       	mov	r16, r24
    8450:	10 e0       	ldi	r17, 0x00	; 0
    8452:	c8 01       	movw	r24, r16
    8454:	2c e3       	ldi	r18, 0x3C	; 60
    8456:	72 9f       	mul	r23, r18
    8458:	80 0d       	add	r24, r0
    845a:	91 1d       	adc	r25, r1
    845c:	11 24       	eor	r1, r1
	totalMinutes += ts.dd * 24 * 60;
    845e:	20 ea       	ldi	r18, 0xA0	; 160
    8460:	35 e0       	ldi	r19, 0x05	; 5
    8462:	62 9f       	mul	r22, r18
    8464:	80 01       	movw	r16, r0
    8466:	63 9f       	mul	r22, r19
    8468:	10 0d       	add	r17, r0
    846a:	11 24       	eor	r1, r1
    846c:	08 0f       	add	r16, r24
    846e:	19 1f       	adc	r17, r25
	for (int month = JAN; month < ts.mm; ++month)
    8470:	c5 2e       	mov	r12, r21
    8472:	d1 2c       	mov	r13, r1
    8474:	32 e0       	ldi	r19, 0x02	; 2
    8476:	c3 16       	cp	r12, r19
    8478:	d1 04       	cpc	r13, r1
    847a:	d4 f4       	brge	.+52     	; 0x84b0 <_Z18timestampToMinutes12time_stamp_t+0x86>
	{
		totalMinutes += getDaysOfMonth(month, ts.yr) * 24 * 60;
	}
	for (int year = 1; year < ts.yr; ++year)
    847c:	c7 2c       	mov	r12, r7
    847e:	d1 2c       	mov	r13, r1
    8480:	82 e0       	ldi	r24, 0x02	; 2
    8482:	c8 16       	cp	r12, r24
    8484:	d1 04       	cpc	r13, r1
    8486:	0c f4       	brge	.+2      	; 0x848a <_Z18timestampToMinutes12time_stamp_t+0x60>
    8488:	43 c0       	rjmp	.+134    	; 0x8510 <_Z18timestampToMinutes12time_stamp_t+0xe6>
    848a:	ee 24       	eor	r14, r14
    848c:	e3 94       	inc	r14
    848e:	f1 2c       	mov	r15, r1
	{
		totalMinutes += (isLeapYear(year) ? 366 : 365) * 24 * 60;
    8490:	0f 2e       	mov	r0, r31
    8492:	f0 ec       	ldi	r31, 0xC0	; 192
    8494:	8f 2e       	mov	r8, r31
    8496:	f0 2d       	mov	r31, r0
    8498:	0f 2e       	mov	r0, r31
    849a:	fa e0       	ldi	r31, 0x0A	; 10
    849c:	9f 2e       	mov	r9, r31
    849e:	f0 2d       	mov	r31, r0
    84a0:	68 94       	set
    84a2:	aa 24       	eor	r10, r10
    84a4:	a5 f8       	bld	r10, 5
    84a6:	0f 2e       	mov	r0, r31
    84a8:	f5 e0       	ldi	r31, 0x05	; 5
    84aa:	bf 2e       	mov	r11, r31
    84ac:	f0 2d       	mov	r31, r0
    84ae:	1f c0       	rjmp	.+62     	; 0x84ee <_Z18timestampToMinutes12time_stamp_t+0xc4>
	int totalMinutes = 0;

	totalMinutes += ts.min;
	totalMinutes += ts.hr * 60;
	totalMinutes += ts.dd * 24 * 60;
	for (int month = JAN; month < ts.mm; ++month)
    84b0:	ee 24       	eor	r14, r14
    84b2:	e3 94       	inc	r14
    84b4:	f1 2c       	mov	r15, r1
	{
		totalMinutes += getDaysOfMonth(month, ts.yr) * 24 * 60;
    84b6:	84 2e       	mov	r8, r20
    84b8:	91 2c       	mov	r9, r1
    84ba:	0f 2e       	mov	r0, r31
    84bc:	f0 ea       	ldi	r31, 0xA0	; 160
    84be:	af 2e       	mov	r10, r31
    84c0:	f5 e0       	ldi	r31, 0x05	; 5
    84c2:	bf 2e       	mov	r11, r31
    84c4:	f0 2d       	mov	r31, r0
    84c6:	b4 01       	movw	r22, r8
    84c8:	c7 01       	movw	r24, r14
    84ca:	8f df       	rcall	.-226    	; 0x83ea <_Z14getDaysOfMonthii>
    84cc:	9c 01       	movw	r18, r24
    84ce:	2a 9d       	mul	r18, r10
    84d0:	c0 01       	movw	r24, r0
    84d2:	2b 9d       	mul	r18, r11
    84d4:	90 0d       	add	r25, r0
    84d6:	3a 9d       	mul	r19, r10
    84d8:	90 0d       	add	r25, r0
    84da:	11 24       	eor	r1, r1
    84dc:	08 0f       	add	r16, r24
    84de:	19 1f       	adc	r17, r25
	int totalMinutes = 0;

	totalMinutes += ts.min;
	totalMinutes += ts.hr * 60;
	totalMinutes += ts.dd * 24 * 60;
	for (int month = JAN; month < ts.mm; ++month)
    84e0:	3f ef       	ldi	r19, 0xFF	; 255
    84e2:	e3 1a       	sub	r14, r19
    84e4:	f3 0a       	sbc	r15, r19
    84e6:	ec 14       	cp	r14, r12
    84e8:	fd 04       	cpc	r15, r13
    84ea:	69 f7       	brne	.-38     	; 0x84c6 <_Z18timestampToMinutes12time_stamp_t+0x9c>
    84ec:	c7 cf       	rjmp	.-114    	; 0x847c <_Z18timestampToMinutes12time_stamp_t+0x52>
	{
		totalMinutes += getDaysOfMonth(month, ts.yr) * 24 * 60;
	}
	for (int year = 1; year < ts.yr; ++year)
	{
		totalMinutes += (isLeapYear(year) ? 366 : 365) * 24 * 60;
    84ee:	c7 01       	movw	r24, r14
    84f0:	64 df       	rcall	.-312    	; 0x83ba <_Z10isLeapYeari>
    84f2:	89 2b       	or	r24, r25
    84f4:	19 f4       	brne	.+6      	; 0x84fc <_Z18timestampToMinutes12time_stamp_t+0xd2>
    84f6:	8a 2d       	mov	r24, r10
    84f8:	9b 2d       	mov	r25, r11
    84fa:	02 c0       	rjmp	.+4      	; 0x8500 <_Z18timestampToMinutes12time_stamp_t+0xd6>
    84fc:	88 2d       	mov	r24, r8
    84fe:	99 2d       	mov	r25, r9
    8500:	08 0f       	add	r16, r24
    8502:	19 1f       	adc	r17, r25
	totalMinutes += ts.dd * 24 * 60;
	for (int month = JAN; month < ts.mm; ++month)
	{
		totalMinutes += getDaysOfMonth(month, ts.yr) * 24 * 60;
	}
	for (int year = 1; year < ts.yr; ++year)
    8504:	8f ef       	ldi	r24, 0xFF	; 255
    8506:	e8 1a       	sub	r14, r24
    8508:	f8 0a       	sbc	r15, r24
    850a:	ec 14       	cp	r14, r12
    850c:	fd 04       	cpc	r15, r13
    850e:	79 f7       	brne	.-34     	; 0x84ee <_Z18timestampToMinutes12time_stamp_t+0xc4>
		totalMinutes += (isLeapYear(year) ? 366 : 365) * 24 * 60;
	}


	return totalMinutes;
}
    8510:	c8 01       	movw	r24, r16
    8512:	26 96       	adiw	r28, 0x06	; 6
    8514:	0f b6       	in	r0, 0x3f	; 63
    8516:	f8 94       	cli
    8518:	de bf       	out	0x3e, r29	; 62
    851a:	0f be       	out	0x3f, r0	; 63
    851c:	cd bf       	out	0x3d, r28	; 61
    851e:	df 91       	pop	r29
    8520:	cf 91       	pop	r28
    8522:	1f 91       	pop	r17
    8524:	0f 91       	pop	r16
    8526:	ff 90       	pop	r15
    8528:	ef 90       	pop	r14
    852a:	df 90       	pop	r13
    852c:	cf 90       	pop	r12
    852e:	bf 90       	pop	r11
    8530:	af 90       	pop	r10
    8532:	9f 90       	pop	r9
    8534:	8f 90       	pop	r8
    8536:	7f 90       	pop	r7
    8538:	08 95       	ret

0000853a <_Z12calcTimeDiff12time_stamp_tS_>:

timeDiff_t calcTimeDiff(time_stamp_t start, time_stamp_t stop)		//neetu parihar
{
    853a:	ef 92       	push	r14
    853c:	ff 92       	push	r15
    853e:	0f 93       	push	r16
    8540:	1f 93       	push	r17
    8542:	cf 93       	push	r28
    8544:	df 93       	push	r29
    8546:	cd b7       	in	r28, 0x3d	; 61
    8548:	de b7       	in	r29, 0x3e	; 62
    854a:	62 97       	sbiw	r28, 0x12	; 18
    854c:	0f b6       	in	r0, 0x3f	; 63
    854e:	f8 94       	cli
    8550:	de bf       	out	0x3e, r29	; 62
    8552:	0f be       	out	0x3f, r0	; 63
    8554:	cd bf       	out	0x3d, r28	; 61
    8556:	0f 87       	std	Y+15, r16	; 0x0f
    8558:	18 8b       	std	Y+16, r17	; 0x10
    855a:	29 8b       	std	Y+17, r18	; 0x11
    855c:	3a 8b       	std	Y+18, r19	; 0x12
	timeDiff_t diff = {0, 0, 0};

	int startMinutes = timestampToMinutes(start);
    855e:	65 df       	rcall	.-310    	; 0x842a <_Z18timestampToMinutes12time_stamp_t>
    8560:	8c 01       	movw	r16, r24
	int stopMinutes = timestampToMinutes(stop);
    8562:	4e 2d       	mov	r20, r14
    8564:	5f 2d       	mov	r21, r15
    8566:	6f 85       	ldd	r22, Y+15	; 0x0f
    8568:	78 89       	ldd	r23, Y+16	; 0x10
    856a:	89 89       	ldd	r24, Y+17	; 0x11
    856c:	9a 89       	ldd	r25, Y+18	; 0x12
    856e:	5d df       	rcall	.-326    	; 0x842a <_Z18timestampToMinutes12time_stamp_t>

	int totalMinutes = stopMinutes - startMinutes;
    8570:	9c 01       	movw	r18, r24
    8572:	20 1b       	sub	r18, r16
    8574:	31 0b       	sbc	r19, r17
    8576:	c9 01       	movw	r24, r18
    8578:	99 23       	and	r25, r25
    857a:	24 f4       	brge	.+8      	; 0x8584 <_Z12calcTimeDiff12time_stamp_tS_+0x4a>
    857c:	88 27       	eor	r24, r24
    857e:	99 27       	eor	r25, r25
    8580:	82 1b       	sub	r24, r18
    8582:	93 0b       	sbc	r25, r19
		start = stop;
		stop = temp;
		totalMinutes = -totalMinutes;
	}
	diff.diffDays = totalMinutes / (24 * 60);
	totalMinutes %= (24 * 60);
    8584:	60 ea       	ldi	r22, 0xA0	; 160
    8586:	75 e0       	ldi	r23, 0x05	; 5
    8588:	00 d4       	rcall	.+2048   	; 0x8d8a <__divmodhi4>
    858a:	fb 01       	movw	r30, r22
	diff.diffHrs = totalMinutes / 60;
	diff.diffMins = totalMinutes % 60;
	

	return diff;
    858c:	6c e3       	ldi	r22, 0x3C	; 60
    858e:	70 e0       	ldi	r23, 0x00	; 0
    8590:	fc d3       	rcall	.+2040   	; 0x8d8a <__divmodhi4>
    8592:	26 2f       	mov	r18, r22
    8594:	af 01       	movw	r20, r30
    8596:	ff 0f       	add	r31, r31
    8598:	66 0b       	sbc	r22, r22
    859a:	77 0b       	sbc	r23, r23
    859c:	4b 83       	std	Y+3, r20	; 0x03
    859e:	5c 83       	std	Y+4, r21	; 0x04
    85a0:	6d 83       	std	Y+5, r22	; 0x05
    85a2:	7e 83       	std	Y+6, r23	; 0x06
    85a4:	5c 81       	ldd	r21, Y+4	; 0x04
    85a6:	6d 81       	ldd	r22, Y+5	; 0x05
    85a8:	7e 81       	ldd	r23, Y+6	; 0x06
    85aa:	38 2f       	mov	r19, r24
}
    85ac:	80 e0       	ldi	r24, 0x00	; 0
    85ae:	90 e0       	ldi	r25, 0x00	; 0
    85b0:	62 96       	adiw	r28, 0x12	; 18
    85b2:	0f b6       	in	r0, 0x3f	; 63
    85b4:	f8 94       	cli
    85b6:	de bf       	out	0x3e, r29	; 62
    85b8:	0f be       	out	0x3f, r0	; 63
    85ba:	cd bf       	out	0x3d, r28	; 61
    85bc:	df 91       	pop	r29
    85be:	cf 91       	pop	r28
    85c0:	1f 91       	pop	r17
    85c2:	0f 91       	pop	r16
    85c4:	ff 90       	pop	r15
    85c6:	ef 90       	pop	r14
    85c8:	08 95       	ret

000085ca <_Z8initUarti>:
    85ca:	00 97       	sbiw	r24, 0x00	; 0
	}
	
	copy_here[j] = '\0';

	return (retval);
}
    85cc:	61 f4       	brne	.+24     	; 0x85e6 <_Z8initUarti+0x1c>
    85ce:	88 e9       	ldi	r24, 0x98	; 152
    85d0:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
    85d4:	86 e0       	ldi	r24, 0x06	; 6
    85d6:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
    85da:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
    85de:	8b e0       	ldi	r24, 0x0B	; 11
    85e0:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
    85e4:	2b c0       	rjmp	.+86     	; 0x863c <_Z8initUarti+0x72>
    85e6:	81 30       	cpi	r24, 0x01	; 1
    85e8:	91 05       	cpc	r25, r1
    85ea:	61 f4       	brne	.+24     	; 0x8604 <_Z8initUarti+0x3a>
    85ec:	88 e9       	ldi	r24, 0x98	; 152
    85ee:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7000c9>
    85f2:	86 e0       	ldi	r24, 0x06	; 6
    85f4:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7000ca>
    85f8:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7000cd>
    85fc:	8f e5       	ldi	r24, 0x5F	; 95
    85fe:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7000cc>
    8602:	1c c0       	rjmp	.+56     	; 0x863c <_Z8initUarti+0x72>
    8604:	82 30       	cpi	r24, 0x02	; 2
    8606:	91 05       	cpc	r25, r1
    8608:	61 f4       	brne	.+24     	; 0x8622 <_Z8initUarti+0x58>
    860a:	88 e9       	ldi	r24, 0x98	; 152
    860c:	80 93 d1 00 	sts	0x00D1, r24	; 0x8000d1 <__TEXT_REGION_LENGTH__+0x7000d1>
    8610:	86 e0       	ldi	r24, 0x06	; 6
    8612:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <__TEXT_REGION_LENGTH__+0x7000d2>
    8616:	10 92 d5 00 	sts	0x00D5, r1	; 0x8000d5 <__TEXT_REGION_LENGTH__+0x7000d5>
    861a:	8b e0       	ldi	r24, 0x0B	; 11
    861c:	80 93 d4 00 	sts	0x00D4, r24	; 0x8000d4 <__TEXT_REGION_LENGTH__+0x7000d4>
    8620:	0d c0       	rjmp	.+26     	; 0x863c <_Z8initUarti+0x72>
    8622:	03 97       	sbiw	r24, 0x03	; 3
    8624:	59 f4       	brne	.+22     	; 0x863c <_Z8initUarti+0x72>
    8626:	88 e9       	ldi	r24, 0x98	; 152
    8628:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <__TEXT_REGION_LENGTH__+0x700131>
    862c:	86 e0       	ldi	r24, 0x06	; 6
    862e:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <__TEXT_REGION_LENGTH__+0x700132>
    8632:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <__TEXT_REGION_LENGTH__+0x700135>
    8636:	8f e2       	ldi	r24, 0x2F	; 47
    8638:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <__TEXT_REGION_LENGTH__+0x700134>
    863c:	80 e0       	ldi	r24, 0x00	; 0
    863e:	90 e0       	ldi	r25, 0x00	; 0
    8640:	0e 94 d7 09 	call	0x13ae	; 0x13ae <_Z13flushRxBufferi>
    8644:	80 e0       	ldi	r24, 0x00	; 0
    8646:	90 e0       	ldi	r25, 0x00	; 0
    8648:	0e 94 b3 09 	call	0x1366	; 0x1366 <_Z13flushTxBufferi>
    864c:	81 e0       	ldi	r24, 0x01	; 1
    864e:	90 e0       	ldi	r25, 0x00	; 0
    8650:	0e 94 d7 09 	call	0x13ae	; 0x13ae <_Z13flushRxBufferi>
    8654:	81 e0       	ldi	r24, 0x01	; 1
    8656:	90 e0       	ldi	r25, 0x00	; 0
    8658:	0e 94 b3 09 	call	0x1366	; 0x1366 <_Z13flushTxBufferi>
    865c:	82 e0       	ldi	r24, 0x02	; 2
    865e:	90 e0       	ldi	r25, 0x00	; 0
    8660:	0e 94 d7 09 	call	0x13ae	; 0x13ae <_Z13flushRxBufferi>
    8664:	82 e0       	ldi	r24, 0x02	; 2
    8666:	90 e0       	ldi	r25, 0x00	; 0
    8668:	0e 94 b3 09 	call	0x1366	; 0x1366 <_Z13flushTxBufferi>
    866c:	83 e0       	ldi	r24, 0x03	; 3
    866e:	90 e0       	ldi	r25, 0x00	; 0
    8670:	0e 94 d7 09 	call	0x13ae	; 0x13ae <_Z13flushRxBufferi>
    8674:	83 e0       	ldi	r24, 0x03	; 3
    8676:	90 e0       	ldi	r25, 0x00	; 0
    8678:	0c 94 b3 09 	jmp	0x1366	; 0x1366 <_Z13flushTxBufferi>
    867c:	08 95       	ret

0000867e <_Z14enable_tx_intri>:
    867e:	00 97       	sbiw	r24, 0x00	; 0
    8680:	31 f4       	brne	.+12     	; 0x868e <_Z14enable_tx_intri+0x10>
    8682:	e1 ec       	ldi	r30, 0xC1	; 193
    8684:	f0 e0       	ldi	r31, 0x00	; 0
    8686:	80 81       	ld	r24, Z
    8688:	80 64       	ori	r24, 0x40	; 64
    868a:	80 83       	st	Z, r24
    868c:	08 95       	ret
    868e:	81 30       	cpi	r24, 0x01	; 1
    8690:	91 05       	cpc	r25, r1
    8692:	31 f4       	brne	.+12     	; 0x86a0 <_Z14enable_tx_intri+0x22>
    8694:	e9 ec       	ldi	r30, 0xC9	; 201
    8696:	f0 e0       	ldi	r31, 0x00	; 0
    8698:	80 81       	ld	r24, Z
    869a:	80 64       	ori	r24, 0x40	; 64
    869c:	80 83       	st	Z, r24
    869e:	08 95       	ret
    86a0:	82 30       	cpi	r24, 0x02	; 2
    86a2:	91 05       	cpc	r25, r1
    86a4:	31 f4       	brne	.+12     	; 0x86b2 <_Z14enable_tx_intri+0x34>
    86a6:	e1 ed       	ldi	r30, 0xD1	; 209
    86a8:	f0 e0       	ldi	r31, 0x00	; 0
    86aa:	80 81       	ld	r24, Z
    86ac:	80 64       	ori	r24, 0x40	; 64
    86ae:	80 83       	st	Z, r24
    86b0:	08 95       	ret
    86b2:	03 97       	sbiw	r24, 0x03	; 3
    86b4:	29 f4       	brne	.+10     	; 0x86c0 <_Z14enable_tx_intri+0x42>
    86b6:	e1 e3       	ldi	r30, 0x31	; 49
    86b8:	f1 e0       	ldi	r31, 0x01	; 1
    86ba:	80 81       	ld	r24, Z
    86bc:	80 64       	ori	r24, 0x40	; 64
    86be:	80 83       	st	Z, r24
    86c0:	08 95       	ret

000086c2 <_Z15disable_tx_intri>:
    86c2:	00 97       	sbiw	r24, 0x00	; 0
    86c4:	31 f4       	brne	.+12     	; 0x86d2 <_Z15disable_tx_intri+0x10>
    86c6:	e1 ec       	ldi	r30, 0xC1	; 193
    86c8:	f0 e0       	ldi	r31, 0x00	; 0
    86ca:	80 81       	ld	r24, Z
    86cc:	8f 7b       	andi	r24, 0xBF	; 191
    86ce:	80 83       	st	Z, r24
    86d0:	08 95       	ret
    86d2:	81 30       	cpi	r24, 0x01	; 1
    86d4:	91 05       	cpc	r25, r1
    86d6:	31 f4       	brne	.+12     	; 0x86e4 <_Z15disable_tx_intri+0x22>
    86d8:	e9 ec       	ldi	r30, 0xC9	; 201
    86da:	f0 e0       	ldi	r31, 0x00	; 0
    86dc:	80 81       	ld	r24, Z
    86de:	8f 7b       	andi	r24, 0xBF	; 191
    86e0:	80 83       	st	Z, r24
    86e2:	08 95       	ret
    86e4:	82 30       	cpi	r24, 0x02	; 2
    86e6:	91 05       	cpc	r25, r1
    86e8:	31 f4       	brne	.+12     	; 0x86f6 <_Z15disable_tx_intri+0x34>
    86ea:	e1 ed       	ldi	r30, 0xD1	; 209
    86ec:	f0 e0       	ldi	r31, 0x00	; 0
    86ee:	80 81       	ld	r24, Z
    86f0:	8f 7b       	andi	r24, 0xBF	; 191
    86f2:	80 83       	st	Z, r24
    86f4:	08 95       	ret
    86f6:	03 97       	sbiw	r24, 0x03	; 3
    86f8:	29 f4       	brne	.+10     	; 0x8704 <_Z15disable_tx_intri+0x42>
    86fa:	e1 e3       	ldi	r30, 0x31	; 49
    86fc:	f1 e0       	ldi	r31, 0x01	; 1
    86fe:	80 81       	ld	r24, Z
    8700:	8f 7b       	andi	r24, 0xBF	; 191
    8702:	80 83       	st	Z, r24
    8704:	08 95       	ret

00008706 <__vector_25>:
    8706:	1f 92       	push	r1
    8708:	0f 92       	push	r0
    870a:	0f b6       	in	r0, 0x3f	; 63
    870c:	0f 92       	push	r0
    870e:	11 24       	eor	r1, r1
    8710:	0b b6       	in	r0, 0x3b	; 59
    8712:	0f 92       	push	r0
    8714:	2f 93       	push	r18
    8716:	3f 93       	push	r19
    8718:	4f 93       	push	r20
    871a:	5f 93       	push	r21
    871c:	8f 93       	push	r24
    871e:	9f 93       	push	r25
    8720:	ef 93       	push	r30
    8722:	ff 93       	push	r31
    8724:	f8 94       	cli
    8726:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    872a:	ed e4       	ldi	r30, 0x4D	; 77
    872c:	fc e0       	ldi	r31, 0x0C	; 12
    872e:	81 e0       	ldi	r24, 0x01	; 1
    8730:	81 83       	std	Z+1, r24	; 0x01
    8732:	10 82       	st	Z, r1
    8734:	80 91 c8 11 	lds	r24, 0x11C8	; 0x8011c8 <gprs_rx_buff+0x579>
    8738:	90 91 c9 11 	lds	r25, 0x11C9	; 0x8011c9 <gprs_rx_buff+0x57a>
    873c:	88 37       	cpi	r24, 0x78	; 120
    873e:	95 40       	sbci	r25, 0x05	; 5
    8740:	68 f4       	brcc	.+26     	; 0x875c <__vector_25+0x56>
    8742:	e8 ec       	ldi	r30, 0xC8	; 200
    8744:	f1 e1       	ldi	r31, 0x11	; 17
    8746:	80 81       	ld	r24, Z
    8748:	91 81       	ldd	r25, Z+1	; 0x01
    874a:	ac 01       	movw	r20, r24
    874c:	4f 5f       	subi	r20, 0xFF	; 255
    874e:	5f 4f       	sbci	r21, 0xFF	; 255
    8750:	51 83       	std	Z+1, r21	; 0x01
    8752:	40 83       	st	Z, r20
    8754:	fc 01       	movw	r30, r24
    8756:	e1 5b       	subi	r30, 0xB1	; 177
    8758:	f3 4f       	sbci	r31, 0xF3	; 243
    875a:	21 83       	std	Z+1, r18	; 0x01
    875c:	78 94       	sei
    875e:	ff 91       	pop	r31
    8760:	ef 91       	pop	r30
    8762:	9f 91       	pop	r25
    8764:	8f 91       	pop	r24
    8766:	5f 91       	pop	r21
    8768:	4f 91       	pop	r20
    876a:	3f 91       	pop	r19
    876c:	2f 91       	pop	r18
    876e:	0f 90       	pop	r0
    8770:	0b be       	out	0x3b, r0	; 59
    8772:	0f 90       	pop	r0
    8774:	0f be       	out	0x3f, r0	; 63
    8776:	0f 90       	pop	r0
    8778:	1f 90       	pop	r1
    877a:	18 95       	reti

0000877c <__vector_27>:
    877c:	1f 92       	push	r1
    877e:	0f 92       	push	r0
    8780:	0f b6       	in	r0, 0x3f	; 63
    8782:	0f 92       	push	r0
    8784:	11 24       	eor	r1, r1
    8786:	0b b6       	in	r0, 0x3b	; 59
    8788:	0f 92       	push	r0
    878a:	2f 93       	push	r18
    878c:	3f 93       	push	r19
    878e:	4f 93       	push	r20
    8790:	5f 93       	push	r21
    8792:	6f 93       	push	r22
    8794:	7f 93       	push	r23
    8796:	8f 93       	push	r24
    8798:	9f 93       	push	r25
    879a:	af 93       	push	r26
    879c:	bf 93       	push	r27
    879e:	ef 93       	push	r30
    87a0:	ff 93       	push	r31
    87a2:	eb e8       	ldi	r30, 0x8B	; 139
    87a4:	f2 e1       	ldi	r31, 0x12	; 18
    87a6:	80 81       	ld	r24, Z
    87a8:	91 81       	ldd	r25, Z+1	; 0x01
    87aa:	01 96       	adiw	r24, 0x01	; 1
    87ac:	91 83       	std	Z+1, r25	; 0x01
    87ae:	80 83       	st	Z, r24
    87b0:	80 81       	ld	r24, Z
    87b2:	91 81       	ldd	r25, Z+1	; 0x01
    87b4:	80 3c       	cpi	r24, 0xC0	; 192
    87b6:	91 05       	cpc	r25, r1
    87b8:	48 f4       	brcc	.+18     	; 0x87cc <__vector_27+0x50>
    87ba:	e0 91 8b 12 	lds	r30, 0x128B	; 0x80128b <gprs_tx_buff+0xc1>
    87be:	f0 91 8c 12 	lds	r31, 0x128C	; 0x80128c <gprs_tx_buff+0xc2>
    87c2:	e6 53       	subi	r30, 0x36	; 54
    87c4:	fe 4e       	sbci	r31, 0xEE	; 238
    87c6:	81 81       	ldd	r24, Z+1	; 0x01
    87c8:	81 11       	cpse	r24, r1
    87ca:	06 c0       	rjmp	.+12     	; 0x87d8 <__vector_27+0x5c>
    87cc:	10 92 ca 11 	sts	0x11CA, r1	; 0x8011ca <gprs_tx_buff>
    87d0:	80 e0       	ldi	r24, 0x00	; 0
    87d2:	90 e0       	ldi	r25, 0x00	; 0
    87d4:	76 df       	rcall	.-276    	; 0x86c2 <_Z15disable_tx_intri>
    87d6:	0d c0       	rjmp	.+26     	; 0x87f2 <__vector_27+0x76>
    87d8:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
    87dc:	85 ff       	sbrs	r24, 5
    87de:	09 c0       	rjmp	.+18     	; 0x87f2 <__vector_27+0x76>
    87e0:	e0 91 8b 12 	lds	r30, 0x128B	; 0x80128b <gprs_tx_buff+0xc1>
    87e4:	f0 91 8c 12 	lds	r31, 0x128C	; 0x80128c <gprs_tx_buff+0xc2>
    87e8:	e6 53       	subi	r30, 0x36	; 54
    87ea:	fe 4e       	sbci	r31, 0xEE	; 238
    87ec:	81 81       	ldd	r24, Z+1	; 0x01
    87ee:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    87f2:	ff 91       	pop	r31
    87f4:	ef 91       	pop	r30
    87f6:	bf 91       	pop	r27
    87f8:	af 91       	pop	r26
    87fa:	9f 91       	pop	r25
    87fc:	8f 91       	pop	r24
    87fe:	7f 91       	pop	r23
    8800:	6f 91       	pop	r22
    8802:	5f 91       	pop	r21
    8804:	4f 91       	pop	r20
    8806:	3f 91       	pop	r19
    8808:	2f 91       	pop	r18
    880a:	0f 90       	pop	r0
    880c:	0b be       	out	0x3b, r0	; 59
    880e:	0f 90       	pop	r0
    8810:	0f be       	out	0x3f, r0	; 63
    8812:	0f 90       	pop	r0
    8814:	1f 90       	pop	r1
    8816:	18 95       	reti

00008818 <__vector_36>:
    8818:	1f 92       	push	r1
    881a:	0f 92       	push	r0
    881c:	0f b6       	in	r0, 0x3f	; 63
    881e:	0f 92       	push	r0
    8820:	11 24       	eor	r1, r1
    8822:	0b b6       	in	r0, 0x3b	; 59
    8824:	0f 92       	push	r0
    8826:	2f 93       	push	r18
    8828:	4f 93       	push	r20
    882a:	5f 93       	push	r21
    882c:	8f 93       	push	r24
    882e:	9f 93       	push	r25
    8830:	ef 93       	push	r30
    8832:	ff 93       	push	r31
    8834:	f8 94       	cli
    8836:	20 91 ce 00 	lds	r18, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    883a:	10 92 f6 15 	sts	0x15F6, r1	; 0x8015f6 <Rx_Buff+0x88>
    883e:	10 92 f5 15 	sts	0x15F5, r1	; 0x8015f5 <Rx_Buff+0x87>
    8842:	80 91 f3 15 	lds	r24, 0x15F3	; 0x8015f3 <Rx_Buff+0x85>
    8846:	90 91 f4 15 	lds	r25, 0x15F4	; 0x8015f4 <Rx_Buff+0x86>
    884a:	80 34       	cpi	r24, 0x40	; 64
    884c:	91 05       	cpc	r25, r1
    884e:	6c f4       	brge	.+26     	; 0x886a <__vector_36+0x52>
    8850:	e3 ef       	ldi	r30, 0xF3	; 243
    8852:	f5 e1       	ldi	r31, 0x15	; 21
    8854:	80 81       	ld	r24, Z
    8856:	91 81       	ldd	r25, Z+1	; 0x01
    8858:	ac 01       	movw	r20, r24
    885a:	4f 5f       	subi	r20, 0xFF	; 255
    885c:	5f 4f       	sbci	r21, 0xFF	; 255
    885e:	51 83       	std	Z+1, r21	; 0x01
    8860:	40 83       	st	Z, r20
    8862:	fc 01       	movw	r30, r24
    8864:	ed 54       	subi	r30, 0x4D	; 77
    8866:	fa 4e       	sbci	r31, 0xEA	; 234
    8868:	20 83       	st	Z, r18
    886a:	78 94       	sei
    886c:	ff 91       	pop	r31
    886e:	ef 91       	pop	r30
    8870:	9f 91       	pop	r25
    8872:	8f 91       	pop	r24
    8874:	5f 91       	pop	r21
    8876:	4f 91       	pop	r20
    8878:	2f 91       	pop	r18
    887a:	0f 90       	pop	r0
    887c:	0b be       	out	0x3b, r0	; 59
    887e:	0f 90       	pop	r0
    8880:	0f be       	out	0x3f, r0	; 63
    8882:	0f 90       	pop	r0
    8884:	1f 90       	pop	r1
    8886:	18 95       	reti

00008888 <__vector_38>:
    8888:	1f 92       	push	r1
    888a:	0f 92       	push	r0
    888c:	0f b6       	in	r0, 0x3f	; 63
    888e:	0f 92       	push	r0
    8890:	11 24       	eor	r1, r1
    8892:	f8 94       	cli
    8894:	78 94       	sei
    8896:	0f 90       	pop	r0
    8898:	0f be       	out	0x3f, r0	; 63
    889a:	0f 90       	pop	r0
    889c:	1f 90       	pop	r1
    889e:	18 95       	reti

000088a0 <__vector_51>:
    88a0:	1f 92       	push	r1
    88a2:	0f 92       	push	r0
    88a4:	0f b6       	in	r0, 0x3f	; 63
    88a6:	0f 92       	push	r0
    88a8:	11 24       	eor	r1, r1
    88aa:	0b b6       	in	r0, 0x3b	; 59
    88ac:	0f 92       	push	r0
    88ae:	1f 93       	push	r17
    88b0:	2f 93       	push	r18
    88b2:	3f 93       	push	r19
    88b4:	4f 93       	push	r20
    88b6:	5f 93       	push	r21
    88b8:	6f 93       	push	r22
    88ba:	7f 93       	push	r23
    88bc:	8f 93       	push	r24
    88be:	9f 93       	push	r25
    88c0:	af 93       	push	r26
    88c2:	bf 93       	push	r27
    88c4:	ef 93       	push	r30
    88c6:	ff 93       	push	r31
    88c8:	cf 93       	push	r28
    88ca:	df 93       	push	r29
    88cc:	1f 92       	push	r1
    88ce:	cd b7       	in	r28, 0x3d	; 61
    88d0:	de b7       	in	r29, 0x3e	; 62
    88d2:	f8 94       	cli
    88d4:	19 82       	std	Y+1, r1	; 0x01
    88d6:	10 91 d6 00 	lds	r17, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    88da:	61 e0       	ldi	r22, 0x01	; 1
    88dc:	70 e0       	ldi	r23, 0x00	; 0
    88de:	81 2f       	mov	r24, r17
    88e0:	0e 94 c3 08 	call	0x1186	; 0x1186 <_Z10UWriteDataci>
    88e4:	80 91 3c 16 	lds	r24, 0x163C	; 0x80163c <Rx_Buff+0xce>
    88e8:	83 30       	cpi	r24, 0x03	; 3
    88ea:	39 f1       	breq	.+78     	; 0x893a <__vector_51+0x9a>
    88ec:	18 f4       	brcc	.+6      	; 0x88f4 <__vector_51+0x54>
    88ee:	88 23       	and	r24, r24
    88f0:	39 f0       	breq	.+14     	; 0x8900 <__vector_51+0x60>
    88f2:	bb c0       	rjmp	.+374    	; 0x8a6a <__vector_51+0x1ca>
    88f4:	84 30       	cpi	r24, 0x04	; 4
    88f6:	c1 f1       	breq	.+112    	; 0x8968 <__vector_51+0xc8>
    88f8:	88 30       	cpi	r24, 0x08	; 8
    88fa:	09 f4       	brne	.+2      	; 0x88fe <__vector_51+0x5e>
    88fc:	64 c0       	rjmp	.+200    	; 0x89c6 <__vector_51+0x126>
    88fe:	b5 c0       	rjmp	.+362    	; 0x8a6a <__vector_51+0x1ca>
    8900:	1a 3a       	cpi	r17, 0xAA	; 170
    8902:	09 f0       	breq	.+2      	; 0x8906 <__vector_51+0x66>
    8904:	b2 c0       	rjmp	.+356    	; 0x8a6a <__vector_51+0x1ca>
    8906:	82 e0       	ldi	r24, 0x02	; 2
    8908:	90 e0       	ldi	r25, 0x00	; 0
    890a:	0e 94 d7 09 	call	0x13ae	; 0x13ae <_Z13flushRxBufferi>
    890e:	e8 e3       	ldi	r30, 0x38	; 56
    8910:	f6 e1       	ldi	r31, 0x16	; 22
    8912:	80 81       	ld	r24, Z
    8914:	91 81       	ldd	r25, Z+1	; 0x01
    8916:	9c 01       	movw	r18, r24
    8918:	2f 5f       	subi	r18, 0xFF	; 255
    891a:	3f 4f       	sbci	r19, 0xFF	; 255
    891c:	31 83       	std	Z+1, r19	; 0x01
    891e:	20 83       	st	Z, r18
    8920:	fc 01       	movw	r30, r24
    8922:	e8 50       	subi	r30, 0x08	; 8
    8924:	fa 4e       	sbci	r31, 0xEA	; 234
    8926:	2a ea       	ldi	r18, 0xAA	; 170
    8928:	20 83       	st	Z, r18
    892a:	83 e0       	ldi	r24, 0x03	; 3
    892c:	80 93 3c 16 	sts	0x163C, r24	; 0x80163c <Rx_Buff+0xce>
    8930:	10 92 92 14 	sts	0x1492, r1	; 0x801492 <_ZZ11__vector_51E7datacnt+0x1>
    8934:	10 92 91 14 	sts	0x1491, r1	; 0x801491 <_ZZ11__vector_51E7datacnt>
    8938:	98 c0       	rjmp	.+304    	; 0x8a6a <__vector_51+0x1ca>
    893a:	81 2f       	mov	r24, r17
    893c:	90 e0       	ldi	r25, 0x00	; 0
    893e:	90 93 90 14 	sts	0x1490, r25	; 0x801490 <_ZZ11__vector_51E6msglen+0x1>
    8942:	80 93 8f 14 	sts	0x148F, r24	; 0x80148f <_ZZ11__vector_51E6msglen>
    8946:	e8 e3       	ldi	r30, 0x38	; 56
    8948:	f6 e1       	ldi	r31, 0x16	; 22
    894a:	80 81       	ld	r24, Z
    894c:	91 81       	ldd	r25, Z+1	; 0x01
    894e:	9c 01       	movw	r18, r24
    8950:	2f 5f       	subi	r18, 0xFF	; 255
    8952:	3f 4f       	sbci	r19, 0xFF	; 255
    8954:	31 83       	std	Z+1, r19	; 0x01
    8956:	20 83       	st	Z, r18
    8958:	fc 01       	movw	r30, r24
    895a:	e8 50       	subi	r30, 0x08	; 8
    895c:	fa 4e       	sbci	r31, 0xEA	; 234
    895e:	10 83       	st	Z, r17
    8960:	84 e0       	ldi	r24, 0x04	; 4
    8962:	80 93 3c 16 	sts	0x163C, r24	; 0x80163c <Rx_Buff+0xce>
    8966:	81 c0       	rjmp	.+258    	; 0x8a6a <__vector_51+0x1ca>
    8968:	e8 e3       	ldi	r30, 0x38	; 56
    896a:	f6 e1       	ldi	r31, 0x16	; 22
    896c:	80 81       	ld	r24, Z
    896e:	91 81       	ldd	r25, Z+1	; 0x01
    8970:	9c 01       	movw	r18, r24
    8972:	2f 5f       	subi	r18, 0xFF	; 255
    8974:	3f 4f       	sbci	r19, 0xFF	; 255
    8976:	31 83       	std	Z+1, r19	; 0x01
    8978:	20 83       	st	Z, r18
    897a:	fc 01       	movw	r30, r24
    897c:	e8 50       	subi	r30, 0x08	; 8
    897e:	fa 4e       	sbci	r31, 0xEA	; 234
    8980:	10 83       	st	Z, r17
    8982:	80 91 91 14 	lds	r24, 0x1491	; 0x801491 <_ZZ11__vector_51E7datacnt>
    8986:	90 91 92 14 	lds	r25, 0x1492	; 0x801492 <_ZZ11__vector_51E7datacnt+0x1>
    898a:	01 96       	adiw	r24, 0x01	; 1
    898c:	90 93 92 14 	sts	0x1492, r25	; 0x801492 <_ZZ11__vector_51E7datacnt+0x1>
    8990:	80 93 91 14 	sts	0x1491, r24	; 0x801491 <_ZZ11__vector_51E7datacnt>
    8994:	80 34       	cpi	r24, 0x40	; 64
    8996:	91 05       	cpc	r25, r1
    8998:	34 f0       	brlt	.+12     	; 0x89a6 <__vector_51+0x106>
    899a:	82 e0       	ldi	r24, 0x02	; 2
    899c:	90 e0       	ldi	r25, 0x00	; 0
    899e:	0e 94 d7 09 	call	0x13ae	; 0x13ae <_Z13flushRxBufferi>
    89a2:	10 92 3c 16 	sts	0x163C, r1	; 0x80163c <Rx_Buff+0xce>
    89a6:	20 91 91 14 	lds	r18, 0x1491	; 0x801491 <_ZZ11__vector_51E7datacnt>
    89aa:	30 91 92 14 	lds	r19, 0x1492	; 0x801492 <_ZZ11__vector_51E7datacnt+0x1>
    89ae:	80 91 8f 14 	lds	r24, 0x148F	; 0x80148f <_ZZ11__vector_51E6msglen>
    89b2:	90 91 90 14 	lds	r25, 0x1490	; 0x801490 <_ZZ11__vector_51E6msglen+0x1>
    89b6:	82 17       	cp	r24, r18
    89b8:	93 07       	cpc	r25, r19
    89ba:	0c f0       	brlt	.+2      	; 0x89be <__vector_51+0x11e>
    89bc:	56 c0       	rjmp	.+172    	; 0x8a6a <__vector_51+0x1ca>
    89be:	88 e0       	ldi	r24, 0x08	; 8
    89c0:	80 93 3c 16 	sts	0x163C, r24	; 0x80163c <Rx_Buff+0xce>
    89c4:	52 c0       	rjmp	.+164    	; 0x8a6a <__vector_51+0x1ca>
    89c6:	15 35       	cpi	r17, 0x55	; 85
    89c8:	61 f5       	brne	.+88     	; 0x8a22 <__vector_51+0x182>
    89ca:	e8 e3       	ldi	r30, 0x38	; 56
    89cc:	f6 e1       	ldi	r31, 0x16	; 22
    89ce:	80 81       	ld	r24, Z
    89d0:	91 81       	ldd	r25, Z+1	; 0x01
    89d2:	9c 01       	movw	r18, r24
    89d4:	2f 5f       	subi	r18, 0xFF	; 255
    89d6:	3f 4f       	sbci	r19, 0xFF	; 255
    89d8:	31 83       	std	Z+1, r19	; 0x01
    89da:	20 83       	st	Z, r18
    89dc:	fc 01       	movw	r30, r24
    89de:	e8 50       	subi	r30, 0x08	; 8
    89e0:	fa 4e       	sbci	r31, 0xEA	; 234
    89e2:	25 e5       	ldi	r18, 0x55	; 85
    89e4:	20 83       	st	Z, r18
    89e6:	60 91 8f 14 	lds	r22, 0x148F	; 0x80148f <_ZZ11__vector_51E6msglen>
    89ea:	8a ef       	ldi	r24, 0xFA	; 250
    89ec:	95 e1       	ldi	r25, 0x15	; 21
    89ee:	0e 94 56 14 	call	0x28ac	; 0x28ac <_Z11getChecksumPhc>
    89f2:	e0 91 8f 14 	lds	r30, 0x148F	; 0x80148f <_ZZ11__vector_51E6msglen>
    89f6:	f0 91 90 14 	lds	r31, 0x1490	; 0x801490 <_ZZ11__vector_51E6msglen+0x1>
    89fa:	e6 50       	subi	r30, 0x06	; 6
    89fc:	fa 4e       	sbci	r31, 0xEA	; 234
    89fe:	90 81       	ld	r25, Z
    8a00:	89 13       	cpse	r24, r25
    8a02:	0a c0       	rjmp	.+20     	; 0x8a18 <__vector_51+0x178>
    8a04:	81 e4       	ldi	r24, 0x41	; 65
    8a06:	89 83       	std	Y+1, r24	; 0x01
    8a08:	82 e0       	ldi	r24, 0x02	; 2
    8a0a:	80 93 3c 16 	sts	0x163C, r24	; 0x80163c <Rx_Buff+0xce>
    8a0e:	80 91 6d 15 	lds	r24, 0x156D	; 0x80156d <Tx_Buff+0xda>
    8a12:	81 11       	cpse	r24, r1
    8a14:	0b c0       	rjmp	.+22     	; 0x8a2c <__vector_51+0x18c>
    8a16:	0d c0       	rjmp	.+26     	; 0x8a32 <__vector_51+0x192>
    8a18:	8e e4       	ldi	r24, 0x4E	; 78
    8a1a:	89 83       	std	Y+1, r24	; 0x01
    8a1c:	10 92 3c 16 	sts	0x163C, r1	; 0x80163c <Rx_Buff+0xce>
    8a20:	26 c0       	rjmp	.+76     	; 0x8a6e <__vector_51+0x1ce>
    8a22:	10 92 3c 16 	sts	0x163C, r1	; 0x80163c <Rx_Buff+0xce>
    8a26:	8e e4       	ldi	r24, 0x4E	; 78
    8a28:	89 83       	std	Y+1, r24	; 0x01
    8a2a:	21 c0       	rjmp	.+66     	; 0x8a6e <__vector_51+0x1ce>
    8a2c:	89 81       	ldd	r24, Y+1	; 0x01
    8a2e:	8e 34       	cpi	r24, 0x4E	; 78
    8a30:	89 f4       	brne	.+34     	; 0x8a54 <__vector_51+0x1b4>
    8a32:	60 91 fa 15 	lds	r22, 0x15FA	; 0x8015fa <Rx_Buff+0x8c>
    8a36:	22 e0       	ldi	r18, 0x02	; 2
    8a38:	ae 01       	movw	r20, r28
    8a3a:	4f 5f       	subi	r20, 0xFF	; 255
    8a3c:	5f 4f       	sbci	r21, 0xFF	; 255
    8a3e:	82 e0       	ldi	r24, 0x02	; 2
    8a40:	90 e0       	ldi	r25, 0x00	; 0
    8a42:	0e 94 f7 09 	call	0x13ee	; 0x13ee <_Z21prepareResponsePacketi5cmd_tPch>
    8a46:	89 81       	ldd	r24, Y+1	; 0x01
    8a48:	8e 34       	cpi	r24, 0x4E	; 78
    8a4a:	21 f4       	brne	.+8      	; 0x8a54 <__vector_51+0x1b4>
    8a4c:	82 e0       	ldi	r24, 0x02	; 2
    8a4e:	90 e0       	ldi	r25, 0x00	; 0
    8a50:	0e 94 d7 09 	call	0x13ae	; 0x13ae <_Z13flushRxBufferi>
    8a54:	81 e0       	ldi	r24, 0x01	; 1
    8a56:	80 93 67 15 	sts	0x1567, r24	; 0x801567 <Tx_Buff+0xd4>
    8a5a:	82 e0       	ldi	r24, 0x02	; 2
    8a5c:	90 e0       	ldi	r25, 0x00	; 0
    8a5e:	0e 94 5f 09 	call	0x12be	; 0x12be <_Z11Usendbufferi>
    8a62:	82 e0       	ldi	r24, 0x02	; 2
    8a64:	90 e0       	ldi	r25, 0x00	; 0
    8a66:	0e 94 b3 09 	call	0x1366	; 0x1366 <_Z13flushTxBufferi>
    8a6a:	78 94       	sei
    8a6c:	03 c0       	rjmp	.+6      	; 0x8a74 <__vector_51+0x1d4>
    8a6e:	80 91 6d 15 	lds	r24, 0x156D	; 0x80156d <Tx_Buff+0xda>
    8a72:	df cf       	rjmp	.-66     	; 0x8a32 <__vector_51+0x192>
    8a74:	0f 90       	pop	r0
    8a76:	df 91       	pop	r29
    8a78:	cf 91       	pop	r28
    8a7a:	ff 91       	pop	r31
    8a7c:	ef 91       	pop	r30
    8a7e:	bf 91       	pop	r27
    8a80:	af 91       	pop	r26
    8a82:	9f 91       	pop	r25
    8a84:	8f 91       	pop	r24
    8a86:	7f 91       	pop	r23
    8a88:	6f 91       	pop	r22
    8a8a:	5f 91       	pop	r21
    8a8c:	4f 91       	pop	r20
    8a8e:	3f 91       	pop	r19
    8a90:	2f 91       	pop	r18
    8a92:	1f 91       	pop	r17
    8a94:	0f 90       	pop	r0
    8a96:	0b be       	out	0x3b, r0	; 59
    8a98:	0f 90       	pop	r0
    8a9a:	0f be       	out	0x3f, r0	; 63
    8a9c:	0f 90       	pop	r0
    8a9e:	1f 90       	pop	r1
    8aa0:	18 95       	reti

00008aa2 <__vector_53>:
    8aa2:	1f 92       	push	r1
    8aa4:	0f 92       	push	r0
    8aa6:	0f b6       	in	r0, 0x3f	; 63
    8aa8:	0f 92       	push	r0
    8aaa:	11 24       	eor	r1, r1
    8aac:	f8 94       	cli
    8aae:	78 94       	sei
    8ab0:	0f 90       	pop	r0
    8ab2:	0f be       	out	0x3f, r0	; 63
    8ab4:	0f 90       	pop	r0
    8ab6:	1f 90       	pop	r1
    8ab8:	18 95       	reti

00008aba <__vector_54>:
    8aba:	1f 92       	push	r1
    8abc:	0f 92       	push	r0
    8abe:	0f b6       	in	r0, 0x3f	; 63
    8ac0:	0f 92       	push	r0
    8ac2:	11 24       	eor	r1, r1
    8ac4:	f8 94       	cli
    8ac6:	78 94       	sei
    8ac8:	0f 90       	pop	r0
    8aca:	0f be       	out	0x3f, r0	; 63
    8acc:	0f 90       	pop	r0
    8ace:	1f 90       	pop	r1
    8ad0:	18 95       	reti

00008ad2 <__vector_56>:
    8ad2:	1f 92       	push	r1
    8ad4:	0f 92       	push	r0
    8ad6:	0f b6       	in	r0, 0x3f	; 63
    8ad8:	0f 92       	push	r0
    8ada:	11 24       	eor	r1, r1
    8adc:	f8 94       	cli
    8ade:	78 94       	sei
    8ae0:	0f 90       	pop	r0
    8ae2:	0f be       	out	0x3f, r0	; 63
    8ae4:	0f 90       	pop	r0
    8ae6:	1f 90       	pop	r1
    8ae8:	18 95       	reti

00008aea <_Z12check_stringPKcPcPi>:
    8aea:	6f 92       	push	r6
    8aec:	7f 92       	push	r7
    8aee:	8f 92       	push	r8
    8af0:	9f 92       	push	r9
    8af2:	af 92       	push	r10
    8af4:	bf 92       	push	r11
    8af6:	cf 92       	push	r12
    8af8:	df 92       	push	r13
    8afa:	ef 92       	push	r14
    8afc:	ff 92       	push	r15
    8afe:	1f 93       	push	r17
    8b00:	cf 93       	push	r28
    8b02:	df 93       	push	r29
    8b04:	fc 01       	movw	r30, r24
    8b06:	01 90       	ld	r0, Z+
    8b08:	00 20       	and	r0, r0
    8b0a:	e9 f7       	brne	.-6      	; 0x8b06 <_Z12check_stringPKcPcPi+0x1c>
    8b0c:	31 97       	sbiw	r30, 0x01	; 1
    8b0e:	ef 01       	movw	r28, r30
    8b10:	c8 1b       	sub	r28, r24
    8b12:	d9 0b       	sbc	r29, r25
    8b14:	61 15       	cp	r22, r1
    8b16:	71 05       	cpc	r23, r1
    8b18:	09 f4       	brne	.+2      	; 0x8b1c <_Z12check_stringPKcPcPi+0x32>
    8b1a:	58 c0       	rjmp	.+176    	; 0x8bcc <_Z12check_stringPKcPcPi+0xe2>
    8b1c:	10 91 4f 0c 	lds	r17, 0x0C4F	; 0x800c4f <gprs_rx_buff>
    8b20:	11 30       	cpi	r17, 0x01	; 1
    8b22:	09 f0       	breq	.+2      	; 0x8b26 <_Z12check_stringPKcPcPi+0x3c>
    8b24:	55 c0       	rjmp	.+170    	; 0x8bd0 <_Z12check_stringPKcPcPi+0xe6>
    8b26:	6a 01       	movw	r12, r20
    8b28:	7b 01       	movw	r14, r22
    8b2a:	3c 01       	movw	r6, r24
    8b2c:	10 92 4f 0c 	sts	0x0C4F, r1	; 0x800c4f <gprs_rx_buff>
    8b30:	cb 01       	movw	r24, r22
    8b32:	0e 94 24 20 	call	0x4048	; 0x4048 <_Z11get_rx_dataPc>
    8b36:	5c 01       	movw	r10, r24
    8b38:	f6 01       	movw	r30, r12
    8b3a:	91 83       	std	Z+1, r25	; 0x01
    8b3c:	80 83       	st	Z, r24
    8b3e:	f3 01       	movw	r30, r6
    8b40:	80 81       	ld	r24, Z
    8b42:	88 23       	and	r24, r24
    8b44:	09 f4       	brne	.+2      	; 0x8b48 <_Z12check_stringPKcPcPi+0x5e>
    8b46:	46 c0       	rjmp	.+140    	; 0x8bd4 <_Z12check_stringPKcPcPi+0xea>
    8b48:	1a 14       	cp	r1, r10
    8b4a:	1b 04       	cpc	r1, r11
    8b4c:	0c f0       	brlt	.+2      	; 0x8b50 <_Z12check_stringPKcPcPi+0x66>
    8b4e:	44 c0       	rjmp	.+136    	; 0x8bd8 <_Z12check_stringPKcPcPi+0xee>
    8b50:	81 2c       	mov	r8, r1
    8b52:	91 2c       	mov	r9, r1
    8b54:	ae 01       	movw	r20, r28
    8b56:	b3 01       	movw	r22, r6
    8b58:	c7 01       	movw	r24, r14
    8b5a:	88 0d       	add	r24, r8
    8b5c:	99 1d       	adc	r25, r9
    8b5e:	e9 d1       	rcall	.+978    	; 0x8f32 <memcmp>
    8b60:	89 2b       	or	r24, r25
    8b62:	39 f0       	breq	.+14     	; 0x8b72 <_Z12check_stringPKcPcPi+0x88>
    8b64:	ff ef       	ldi	r31, 0xFF	; 255
    8b66:	8f 1a       	sub	r8, r31
    8b68:	9f 0a       	sbc	r9, r31
    8b6a:	a8 14       	cp	r10, r8
    8b6c:	b9 04       	cpc	r11, r9
    8b6e:	91 f7       	brne	.-28     	; 0x8b54 <_Z12check_stringPKcPcPi+0x6a>
    8b70:	34 c0       	rjmp	.+104    	; 0x8bda <_Z12check_stringPKcPcPi+0xf0>
    8b72:	8a 14       	cp	r8, r10
    8b74:	9b 04       	cpc	r9, r11
    8b76:	8c f5       	brge	.+98     	; 0x8bda <_Z12check_stringPKcPcPi+0xf0>
    8b78:	9e 01       	movw	r18, r28
    8b7a:	a8 18       	sub	r10, r8
    8b7c:	b9 08       	sbc	r11, r9
    8b7e:	ac 1a       	sub	r10, r28
    8b80:	bd 0a       	sbc	r11, r29
    8b82:	1a 14       	cp	r1, r10
    8b84:	1b 04       	cpc	r1, r11
    8b86:	bc f4       	brge	.+46     	; 0x8bb6 <_Z12check_stringPKcPcPi+0xcc>
    8b88:	fe 01       	movw	r30, r28
    8b8a:	e8 0d       	add	r30, r8
    8b8c:	f9 1d       	adc	r31, r9
    8b8e:	ee 0d       	add	r30, r14
    8b90:	ff 1d       	adc	r31, r15
    8b92:	d7 01       	movw	r26, r14
    8b94:	60 e0       	ldi	r22, 0x00	; 0
    8b96:	70 e0       	ldi	r23, 0x00	; 0
    8b98:	81 91       	ld	r24, Z+
    8b9a:	8d 93       	st	X+, r24
    8b9c:	6f 5f       	subi	r22, 0xFF	; 255
    8b9e:	7f 4f       	sbci	r23, 0xFF	; 255
    8ba0:	e6 01       	movw	r28, r12
    8ba2:	88 81       	ld	r24, Y
    8ba4:	99 81       	ldd	r25, Y+1	; 0x01
    8ba6:	88 19       	sub	r24, r8
    8ba8:	99 09       	sbc	r25, r9
    8baa:	82 1b       	sub	r24, r18
    8bac:	93 0b       	sbc	r25, r19
    8bae:	68 17       	cp	r22, r24
    8bb0:	79 07       	cpc	r23, r25
    8bb2:	94 f3       	brlt	.-28     	; 0x8b98 <_Z12check_stringPKcPcPi+0xae>
    8bb4:	02 c0       	rjmp	.+4      	; 0x8bba <_Z12check_stringPKcPcPi+0xd0>
    8bb6:	60 e0       	ldi	r22, 0x00	; 0
    8bb8:	70 e0       	ldi	r23, 0x00	; 0
    8bba:	f6 01       	movw	r30, r12
    8bbc:	71 83       	std	Z+1, r23	; 0x01
    8bbe:	60 83       	st	Z, r22
    8bc0:	f7 01       	movw	r30, r14
    8bc2:	e6 0f       	add	r30, r22
    8bc4:	f7 1f       	adc	r31, r23
    8bc6:	10 82       	st	Z, r1
    8bc8:	12 e0       	ldi	r17, 0x02	; 2
    8bca:	07 c0       	rjmp	.+14     	; 0x8bda <_Z12check_stringPKcPcPi+0xf0>
    8bcc:	10 e0       	ldi	r17, 0x00	; 0
    8bce:	05 c0       	rjmp	.+10     	; 0x8bda <_Z12check_stringPKcPcPi+0xf0>
    8bd0:	10 e0       	ldi	r17, 0x00	; 0
    8bd2:	03 c0       	rjmp	.+6      	; 0x8bda <_Z12check_stringPKcPcPi+0xf0>
    8bd4:	12 e0       	ldi	r17, 0x02	; 2
    8bd6:	01 c0       	rjmp	.+2      	; 0x8bda <_Z12check_stringPKcPcPi+0xf0>
    8bd8:	10 e0       	ldi	r17, 0x00	; 0
    8bda:	81 2f       	mov	r24, r17
    8bdc:	df 91       	pop	r29
    8bde:	cf 91       	pop	r28
    8be0:	1f 91       	pop	r17
    8be2:	ff 90       	pop	r15
    8be4:	ef 90       	pop	r14
    8be6:	df 90       	pop	r13
    8be8:	cf 90       	pop	r12
    8bea:	bf 90       	pop	r11
    8bec:	af 90       	pop	r10
    8bee:	9f 90       	pop	r9
    8bf0:	8f 90       	pop	r8
    8bf2:	7f 90       	pop	r7
    8bf4:	6f 90       	pop	r6
    8bf6:	08 95       	ret

00008bf8 <_Z18check_string_nobufPKc>:
    8bf8:	cf 93       	push	r28
    8bfa:	df 93       	push	r29
    8bfc:	cd b7       	in	r28, 0x3d	; 61
    8bfe:	de b7       	in	r29, 0x3e	; 62
    8c00:	c2 58       	subi	r28, 0x82	; 130
    8c02:	d1 09       	sbc	r29, r1
    8c04:	0f b6       	in	r0, 0x3f	; 63
    8c06:	f8 94       	cli
    8c08:	de bf       	out	0x3e, r29	; 62
    8c0a:	0f be       	out	0x3f, r0	; 63
    8c0c:	cd bf       	out	0x3d, r28	; 61
    8c0e:	1a 82       	std	Y+2, r1	; 0x02
    8c10:	19 82       	std	Y+1, r1	; 0x01
    8c12:	ae 01       	movw	r20, r28
    8c14:	4f 5f       	subi	r20, 0xFF	; 255
    8c16:	5f 4f       	sbci	r21, 0xFF	; 255
    8c18:	be 01       	movw	r22, r28
    8c1a:	6d 5f       	subi	r22, 0xFD	; 253
    8c1c:	7f 4f       	sbci	r23, 0xFF	; 255
    8c1e:	65 df       	rcall	.-310    	; 0x8aea <_Z12check_stringPKcPcPi>
    8c20:	ce 57       	subi	r28, 0x7E	; 126
    8c22:	df 4f       	sbci	r29, 0xFF	; 255
    8c24:	0f b6       	in	r0, 0x3f	; 63
    8c26:	f8 94       	cli
    8c28:	de bf       	out	0x3e, r29	; 62
    8c2a:	0f be       	out	0x3f, r0	; 63
    8c2c:	cd bf       	out	0x3d, r28	; 61
    8c2e:	df 91       	pop	r29
    8c30:	cf 91       	pop	r28
    8c32:	08 95       	ret

00008c34 <_Z24checkforUARTFrameTimeouti>:
#endif
void checkforUARTFrameTimeout(int uart_no)
{
	if(uart_no == GPRS_UART)
    8c34:	00 97       	sbiw	r24, 0x00	; 0
    8c36:	a1 f4       	brne	.+40     	; 0x8c60 <_Z24checkforUARTFrameTimeouti+0x2c>
	{
		if(gprs_rx_isr_handler.elapsed >= FRAME_TIMEOUT[uart_no])
    8c38:	90 91 4d 0c 	lds	r25, 0x0C4D	; 0x800c4d <gprs_rx_isr_handler>
    8c3c:	80 91 1c 02 	lds	r24, 0x021C	; 0x80021c <FRAME_TIMEOUT>
    8c40:	98 17       	cp	r25, r24
    8c42:	40 f1       	brcs	.+80     	; 0x8c94 <_Z24checkforUARTFrameTimeouti+0x60>
		{
			gprs_rx_isr_handler.elapsed = 0;
    8c44:	10 92 4d 0c 	sts	0x0C4D, r1	; 0x800c4d <gprs_rx_isr_handler>
					gprs_rx_isr_handler.state = GPRS_RX_IDLE;
				}
			}
			else*/
			{
				if((gprs_rx_buff.index > 0))
    8c48:	80 91 c8 11 	lds	r24, 0x11C8	; 0x8011c8 <gprs_rx_buff+0x579>
    8c4c:	90 91 c9 11 	lds	r25, 0x11C9	; 0x8011c9 <gprs_rx_buff+0x57a>
    8c50:	89 2b       	or	r24, r25
    8c52:	01 f1       	breq	.+64     	; 0x8c94 <_Z24checkforUARTFrameTimeouti+0x60>
				{
					gprs_rx_buff.locked = LOCKED;
    8c54:	81 e0       	ldi	r24, 0x01	; 1
    8c56:	80 93 4f 0c 	sts	0x0C4F, r24	; 0x800c4f <gprs_rx_buff>
					gprs_rx_isr_handler.state = GPRS_RX_IDLE;
    8c5a:	10 92 4e 0c 	sts	0x0C4E, r1	; 0x800c4e <gprs_rx_isr_handler+0x1>
    8c5e:	08 95       	ret
				}
			}
		}
	}
	else if(uart_no == UART_485)
    8c60:	01 97       	sbiw	r24, 0x01	; 1
    8c62:	c1 f4       	brne	.+48     	; 0x8c94 <_Z24checkforUARTFrameTimeouti+0x60>
	{
		
		if(Rx_Buff[uart_no].elapsed >= FRAME_TIMEOUT[uart_no])
    8c64:	20 91 f5 15 	lds	r18, 0x15F5	; 0x8015f5 <Rx_Buff+0x87>
    8c68:	30 91 f6 15 	lds	r19, 0x15F6	; 0x8015f6 <Rx_Buff+0x88>
    8c6c:	80 91 1d 02 	lds	r24, 0x021D	; 0x80021d <FRAME_TIMEOUT+0x1>
    8c70:	90 e0       	ldi	r25, 0x00	; 0
    8c72:	28 17       	cp	r18, r24
    8c74:	39 07       	cpc	r19, r25
    8c76:	70 f0       	brcs	.+28     	; 0x8c94 <_Z24checkforUARTFrameTimeouti+0x60>
		{
			Rx_Buff[uart_no].elapsed = 0;
    8c78:	10 92 f6 15 	sts	0x15F6, r1	; 0x8015f6 <Rx_Buff+0x88>
    8c7c:	10 92 f5 15 	sts	0x15F5, r1	; 0x8015f5 <Rx_Buff+0x87>
#ifdef DEBUG_FM
UWriteData('#',UART_PC);
UWriteData(Rx_Buff[UART_485].rx_indx,UART_PC);
//UWriteData(udata,UART_PC);
#endif*/			
			if(Rx_Buff[uart_no].rx_indx > 0)
    8c80:	80 91 f3 15 	lds	r24, 0x15F3	; 0x8015f3 <Rx_Buff+0x85>
    8c84:	90 91 f4 15 	lds	r25, 0x15F4	; 0x8015f4 <Rx_Buff+0x86>
    8c88:	18 16       	cp	r1, r24
    8c8a:	19 06       	cpc	r1, r25
    8c8c:	1c f4       	brge	.+6      	; 0x8c94 <_Z24checkforUARTFrameTimeouti+0x60>
			{
				Rx_Buff[uart_no].rx_state = READY;
    8c8e:	82 e0       	ldi	r24, 0x02	; 2
    8c90:	80 93 f7 15 	sts	0x15F7, r24	; 0x8015f7 <Rx_Buff+0x89>
    8c94:	08 95       	ret

00008c96 <_Z8WDT_Initv>:

#include "WDT.h"

void WDT_Init(void)
{
	cli();
    8c96:	f8 94       	cli
	wdt_reset();
    8c98:	a8 95       	wdr
	/* Start timed equence */
	WDTCSR |= (1<<WDCE) | (1<<WDE);
    8c9a:	e0 e6       	ldi	r30, 0x60	; 96
    8c9c:	f0 e0       	ldi	r31, 0x00	; 0
    8c9e:	80 81       	ld	r24, Z
    8ca0:	88 61       	ori	r24, 0x18	; 24
    8ca2:	80 83       	st	Z, r24
	/* Set new prescaler(time-out) value =  (~8 s) */
	WDTCSR = (1<<WDE) | (1<<WDP3) | (1<<WDP0);
    8ca4:	89 e2       	ldi	r24, 0x29	; 41
    8ca6:	80 83       	st	Z, r24
	sei();
    8ca8:	78 94       	sei
    8caa:	08 95       	ret

00008cac <_Z17gprs_power_togglev>:
}

conn_state_t get_conn_state(void)
{
	return conn_state;
}
    8cac:	80 91 3f 16 	lds	r24, 0x163F	; 0x80163f <_ZZ17gprs_power_togglevE15sim_reset_state>
    8cb0:	81 30       	cpi	r24, 0x01	; 1
    8cb2:	51 f0       	breq	.+20     	; 0x8cc8 <_Z17gprs_power_togglev+0x1c>
    8cb4:	18 f0       	brcs	.+6      	; 0x8cbc <_Z17gprs_power_togglev+0x10>
    8cb6:	82 30       	cpi	r24, 0x02	; 2
    8cb8:	e9 f0       	breq	.+58     	; 0x8cf4 <_Z17gprs_power_togglev+0x48>
    8cba:	21 c0       	rjmp	.+66     	; 0x8cfe <_Z17gprs_power_togglev+0x52>
    8cbc:	72 98       	cbi	0x0e, 2	; 14
    8cbe:	81 e0       	ldi	r24, 0x01	; 1
    8cc0:	80 93 3f 16 	sts	0x163F, r24	; 0x80163f <_ZZ17gprs_power_togglevE15sim_reset_state>
    8cc4:	80 e0       	ldi	r24, 0x00	; 0
    8cc6:	08 95       	ret
    8cc8:	80 91 3d 16 	lds	r24, 0x163D	; 0x80163d <_ZZ17gprs_power_togglevE9wait_time>
    8ccc:	90 91 3e 16 	lds	r25, 0x163E	; 0x80163e <_ZZ17gprs_power_togglevE9wait_time+0x1>
    8cd0:	9c 01       	movw	r18, r24
    8cd2:	2f 5f       	subi	r18, 0xFF	; 255
    8cd4:	3f 4f       	sbci	r19, 0xFF	; 255
    8cd6:	30 93 3e 16 	sts	0x163E, r19	; 0x80163e <_ZZ17gprs_power_togglevE9wait_time+0x1>
    8cda:	20 93 3d 16 	sts	0x163D, r18	; 0x80163d <_ZZ17gprs_power_togglevE9wait_time>
    8cde:	0c 97       	sbiw	r24, 0x0c	; 12
    8ce0:	80 f0       	brcs	.+32     	; 0x8d02 <_Z17gprs_power_togglev+0x56>
    8ce2:	82 e0       	ldi	r24, 0x02	; 2
    8ce4:	80 93 3f 16 	sts	0x163F, r24	; 0x80163f <_ZZ17gprs_power_togglevE15sim_reset_state>
    8ce8:	10 92 3e 16 	sts	0x163E, r1	; 0x80163e <_ZZ17gprs_power_togglevE9wait_time+0x1>
    8cec:	10 92 3d 16 	sts	0x163D, r1	; 0x80163d <_ZZ17gprs_power_togglevE9wait_time>
    8cf0:	80 e0       	ldi	r24, 0x00	; 0
    8cf2:	08 95       	ret
    8cf4:	10 92 3f 16 	sts	0x163F, r1	; 0x80163f <_ZZ17gprs_power_togglevE15sim_reset_state>
    8cf8:	72 9a       	sbi	0x0e, 2	; 14
    8cfa:	81 e0       	ldi	r24, 0x01	; 1
    8cfc:	08 95       	ret
    8cfe:	80 e0       	ldi	r24, 0x00	; 0
    8d00:	08 95       	ret
    8d02:	80 e0       	ldi	r24, 0x00	; 0
    8d04:	08 95       	ret

00008d06 <_Z15manage_gps_gprsv>:
    8d06:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <conn_state>
    8d0a:	81 30       	cpi	r24, 0x01	; 1
    8d0c:	19 f0       	breq	.+6      	; 0x8d14 <_Z15manage_gps_gprsv+0xe>
    8d0e:	82 30       	cpi	r24, 0x02	; 2
    8d10:	71 f0       	breq	.+28     	; 0x8d2e <_Z15manage_gps_gprsv+0x28>
    8d12:	08 95       	ret
    8d14:	cb df       	rcall	.-106    	; 0x8cac <_Z17gprs_power_togglev>
    8d16:	88 23       	and	r24, r24
    8d18:	11 f1       	breq	.+68     	; 0x8d5e <_Z15manage_gps_gprsv+0x58>
    8d1a:	60 e0       	ldi	r22, 0x00	; 0
    8d1c:	70 e0       	ldi	r23, 0x00	; 0
    8d1e:	8f ed       	ldi	r24, 0xDF	; 223
    8d20:	9a e0       	ldi	r25, 0x0A	; 10
    8d22:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <_Z12UWriteStringPKci>
    8d26:	82 e0       	ldi	r24, 0x02	; 2
    8d28:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <conn_state>
    8d2c:	08 95       	ret
    8d2e:	0e 94 1e 2c 	call	0x583c	; 0x583c <_Z12http_handlerv>
    8d32:	80 91 40 16 	lds	r24, 0x1640	; 0x801640 <gps_read_timeout>
    8d36:	90 91 41 16 	lds	r25, 0x1641	; 0x801641 <gps_read_timeout+0x1>
    8d3a:	9c 01       	movw	r18, r24
    8d3c:	2f 5f       	subi	r18, 0xFF	; 255
    8d3e:	3f 4f       	sbci	r19, 0xFF	; 255
    8d40:	30 93 41 16 	sts	0x1641, r19	; 0x801641 <gps_read_timeout+0x1>
    8d44:	20 93 40 16 	sts	0x1640, r18	; 0x801640 <gps_read_timeout>
    8d48:	84 36       	cpi	r24, 0x64	; 100
    8d4a:	91 05       	cpc	r25, r1
    8d4c:	40 f0       	brcs	.+16     	; 0x8d5e <_Z15manage_gps_gprsv+0x58>
    8d4e:	80 91 f3 12 	lds	r24, 0x12F3	; 0x8012f3 <gprs+0xf>
    8d52:	88 30       	cpi	r24, 0x08	; 8
    8d54:	21 f0       	breq	.+8      	; 0x8d5e <_Z15manage_gps_gprsv+0x58>
    8d56:	10 92 41 16 	sts	0x1641, r1	; 0x801641 <gps_read_timeout+0x1>
    8d5a:	10 92 40 16 	sts	0x1640, r1	; 0x801640 <gps_read_timeout>
    8d5e:	08 95       	ret

00008d60 <_Z14set_conn_state12conn_state_t>:
    8d60:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <conn_state>
    8d64:	08 95       	ret

00008d66 <_Z19set_live_pckt_readyh>:

void set_live_pckt_ready(unsigned char val)
{
	WEB_data.GPRS_rtu_data.pkt_ready = val;
    8d66:	80 93 5c 13 	sts	0x135C, r24	; 0x80135c <WEB_data+0x19>
    8d6a:	08 95       	ret

00008d6c <__mulsi3>:
    8d6c:	db 01       	movw	r26, r22
    8d6e:	8f 93       	push	r24
    8d70:	9f 93       	push	r25
    8d72:	57 d0       	rcall	.+174    	; 0x8e22 <__muluhisi3>
    8d74:	bf 91       	pop	r27
    8d76:	af 91       	pop	r26
    8d78:	a2 9f       	mul	r26, r18
    8d7a:	80 0d       	add	r24, r0
    8d7c:	91 1d       	adc	r25, r1
    8d7e:	a3 9f       	mul	r26, r19
    8d80:	90 0d       	add	r25, r0
    8d82:	b2 9f       	mul	r27, r18
    8d84:	90 0d       	add	r25, r0
    8d86:	11 24       	eor	r1, r1
    8d88:	08 95       	ret

00008d8a <__divmodhi4>:
    8d8a:	97 fb       	bst	r25, 7
    8d8c:	07 2e       	mov	r0, r23
    8d8e:	16 f4       	brtc	.+4      	; 0x8d94 <__divmodhi4+0xa>
    8d90:	00 94       	com	r0
    8d92:	06 d0       	rcall	.+12     	; 0x8da0 <__divmodhi4_neg1>
    8d94:	77 fd       	sbrc	r23, 7
    8d96:	08 d0       	rcall	.+16     	; 0x8da8 <__divmodhi4_neg2>
    8d98:	93 d0       	rcall	.+294    	; 0x8ec0 <__udivmodhi4>
    8d9a:	07 fc       	sbrc	r0, 7
    8d9c:	05 d0       	rcall	.+10     	; 0x8da8 <__divmodhi4_neg2>
    8d9e:	3e f4       	brtc	.+14     	; 0x8dae <__divmodhi4_exit>

00008da0 <__divmodhi4_neg1>:
    8da0:	90 95       	com	r25
    8da2:	81 95       	neg	r24
    8da4:	9f 4f       	sbci	r25, 0xFF	; 255
    8da6:	08 95       	ret

00008da8 <__divmodhi4_neg2>:
    8da8:	70 95       	com	r23
    8daa:	61 95       	neg	r22
    8dac:	7f 4f       	sbci	r23, 0xFF	; 255

00008dae <__divmodhi4_exit>:
    8dae:	08 95       	ret

00008db0 <__udivmodsi4>:
    8db0:	a1 e2       	ldi	r26, 0x21	; 33
    8db2:	1a 2e       	mov	r1, r26
    8db4:	aa 1b       	sub	r26, r26
    8db6:	bb 1b       	sub	r27, r27
    8db8:	fd 01       	movw	r30, r26
    8dba:	0d c0       	rjmp	.+26     	; 0x8dd6 <__udivmodsi4_ep>

00008dbc <__udivmodsi4_loop>:
    8dbc:	aa 1f       	adc	r26, r26
    8dbe:	bb 1f       	adc	r27, r27
    8dc0:	ee 1f       	adc	r30, r30
    8dc2:	ff 1f       	adc	r31, r31
    8dc4:	a2 17       	cp	r26, r18
    8dc6:	b3 07       	cpc	r27, r19
    8dc8:	e4 07       	cpc	r30, r20
    8dca:	f5 07       	cpc	r31, r21
    8dcc:	20 f0       	brcs	.+8      	; 0x8dd6 <__udivmodsi4_ep>
    8dce:	a2 1b       	sub	r26, r18
    8dd0:	b3 0b       	sbc	r27, r19
    8dd2:	e4 0b       	sbc	r30, r20
    8dd4:	f5 0b       	sbc	r31, r21

00008dd6 <__udivmodsi4_ep>:
    8dd6:	66 1f       	adc	r22, r22
    8dd8:	77 1f       	adc	r23, r23
    8dda:	88 1f       	adc	r24, r24
    8ddc:	99 1f       	adc	r25, r25
    8dde:	1a 94       	dec	r1
    8de0:	69 f7       	brne	.-38     	; 0x8dbc <__udivmodsi4_loop>
    8de2:	60 95       	com	r22
    8de4:	70 95       	com	r23
    8de6:	80 95       	com	r24
    8de8:	90 95       	com	r25
    8dea:	9b 01       	movw	r18, r22
    8dec:	ac 01       	movw	r20, r24
    8dee:	bd 01       	movw	r22, r26
    8df0:	cf 01       	movw	r24, r30
    8df2:	08 95       	ret

00008df4 <__tablejump2__>:
    8df4:	ee 0f       	add	r30, r30
    8df6:	ff 1f       	adc	r31, r31
    8df8:	88 1f       	adc	r24, r24
    8dfa:	8b bf       	out	0x3b, r24	; 59
    8dfc:	07 90       	elpm	r0, Z+
    8dfe:	f6 91       	elpm	r31, Z
    8e00:	e0 2d       	mov	r30, r0
    8e02:	19 94       	eijmp

00008e04 <__umulhisi3>:
    8e04:	a2 9f       	mul	r26, r18
    8e06:	b0 01       	movw	r22, r0
    8e08:	b3 9f       	mul	r27, r19
    8e0a:	c0 01       	movw	r24, r0
    8e0c:	a3 9f       	mul	r26, r19
    8e0e:	70 0d       	add	r23, r0
    8e10:	81 1d       	adc	r24, r1
    8e12:	11 24       	eor	r1, r1
    8e14:	91 1d       	adc	r25, r1
    8e16:	b2 9f       	mul	r27, r18
    8e18:	70 0d       	add	r23, r0
    8e1a:	81 1d       	adc	r24, r1
    8e1c:	11 24       	eor	r1, r1
    8e1e:	91 1d       	adc	r25, r1
    8e20:	08 95       	ret

00008e22 <__muluhisi3>:
    8e22:	f0 df       	rcall	.-32     	; 0x8e04 <__umulhisi3>
    8e24:	a5 9f       	mul	r26, r21
    8e26:	90 0d       	add	r25, r0
    8e28:	b4 9f       	mul	r27, r20
    8e2a:	90 0d       	add	r25, r0
    8e2c:	a4 9f       	mul	r26, r20
    8e2e:	80 0d       	add	r24, r0
    8e30:	91 1d       	adc	r25, r1
    8e32:	11 24       	eor	r1, r1
    8e34:	08 95       	ret

00008e36 <__umulsidi3>:
    8e36:	e8 94       	clt

00008e38 <__umulsidi3_helper>:
    8e38:	df 93       	push	r29
    8e3a:	cf 93       	push	r28
    8e3c:	fc 01       	movw	r30, r24
    8e3e:	db 01       	movw	r26, r22
    8e40:	e1 df       	rcall	.-62     	; 0x8e04 <__umulhisi3>
    8e42:	7f 93       	push	r23
    8e44:	6f 93       	push	r22
    8e46:	e9 01       	movw	r28, r18
    8e48:	9a 01       	movw	r18, r20
    8e4a:	ac 01       	movw	r20, r24
    8e4c:	bf 93       	push	r27
    8e4e:	af 93       	push	r26
    8e50:	3f 93       	push	r19
    8e52:	2f 93       	push	r18
    8e54:	df 01       	movw	r26, r30
    8e56:	d6 df       	rcall	.-84     	; 0x8e04 <__umulhisi3>
    8e58:	26 f4       	brtc	.+8      	; 0x8e62 <__umulsidi3_helper+0x2a>
    8e5a:	6c 1b       	sub	r22, r28
    8e5c:	7d 0b       	sbc	r23, r29
    8e5e:	82 0b       	sbc	r24, r18
    8e60:	93 0b       	sbc	r25, r19
    8e62:	9e 01       	movw	r18, r28
    8e64:	eb 01       	movw	r28, r22
    8e66:	fc 01       	movw	r30, r24
    8e68:	3f d0       	rcall	.+126    	; 0x8ee8 <__muldi3_6>
    8e6a:	af 91       	pop	r26
    8e6c:	bf 91       	pop	r27
    8e6e:	2f 91       	pop	r18
    8e70:	3f 91       	pop	r19
    8e72:	3a d0       	rcall	.+116    	; 0x8ee8 <__muldi3_6>
    8e74:	be 01       	movw	r22, r28
    8e76:	cf 01       	movw	r24, r30
    8e78:	f9 01       	movw	r30, r18
    8e7a:	2f 91       	pop	r18
    8e7c:	3f 91       	pop	r19
    8e7e:	cf 91       	pop	r28
    8e80:	df 91       	pop	r29
    8e82:	08 95       	ret

00008e84 <__ashrdi3>:
    8e84:	97 fb       	bst	r25, 7
    8e86:	10 f8       	bld	r1, 0

00008e88 <__lshrdi3>:
    8e88:	16 94       	lsr	r1
    8e8a:	00 08       	sbc	r0, r0
    8e8c:	0f 93       	push	r16
    8e8e:	08 30       	cpi	r16, 0x08	; 8
    8e90:	98 f0       	brcs	.+38     	; 0x8eb8 <__lshrdi3+0x30>
    8e92:	08 50       	subi	r16, 0x08	; 8
    8e94:	23 2f       	mov	r18, r19
    8e96:	34 2f       	mov	r19, r20
    8e98:	45 2f       	mov	r20, r21
    8e9a:	56 2f       	mov	r21, r22
    8e9c:	67 2f       	mov	r22, r23
    8e9e:	78 2f       	mov	r23, r24
    8ea0:	89 2f       	mov	r24, r25
    8ea2:	90 2d       	mov	r25, r0
    8ea4:	f4 cf       	rjmp	.-24     	; 0x8e8e <__lshrdi3+0x6>
    8ea6:	05 94       	asr	r0
    8ea8:	97 95       	ror	r25
    8eaa:	87 95       	ror	r24
    8eac:	77 95       	ror	r23
    8eae:	67 95       	ror	r22
    8eb0:	57 95       	ror	r21
    8eb2:	47 95       	ror	r20
    8eb4:	37 95       	ror	r19
    8eb6:	27 95       	ror	r18
    8eb8:	0a 95       	dec	r16
    8eba:	aa f7       	brpl	.-22     	; 0x8ea6 <__lshrdi3+0x1e>
    8ebc:	0f 91       	pop	r16
    8ebe:	08 95       	ret

00008ec0 <__udivmodhi4>:
    8ec0:	aa 1b       	sub	r26, r26
    8ec2:	bb 1b       	sub	r27, r27
    8ec4:	51 e1       	ldi	r21, 0x11	; 17
    8ec6:	07 c0       	rjmp	.+14     	; 0x8ed6 <__udivmodhi4_ep>

00008ec8 <__udivmodhi4_loop>:
    8ec8:	aa 1f       	adc	r26, r26
    8eca:	bb 1f       	adc	r27, r27
    8ecc:	a6 17       	cp	r26, r22
    8ece:	b7 07       	cpc	r27, r23
    8ed0:	10 f0       	brcs	.+4      	; 0x8ed6 <__udivmodhi4_ep>
    8ed2:	a6 1b       	sub	r26, r22
    8ed4:	b7 0b       	sbc	r27, r23

00008ed6 <__udivmodhi4_ep>:
    8ed6:	88 1f       	adc	r24, r24
    8ed8:	99 1f       	adc	r25, r25
    8eda:	5a 95       	dec	r21
    8edc:	a9 f7       	brne	.-22     	; 0x8ec8 <__udivmodhi4_loop>
    8ede:	80 95       	com	r24
    8ee0:	90 95       	com	r25
    8ee2:	bc 01       	movw	r22, r24
    8ee4:	cd 01       	movw	r24, r26
    8ee6:	08 95       	ret

00008ee8 <__muldi3_6>:
    8ee8:	8d df       	rcall	.-230    	; 0x8e04 <__umulhisi3>
    8eea:	46 0f       	add	r20, r22
    8eec:	57 1f       	adc	r21, r23
    8eee:	c8 1f       	adc	r28, r24
    8ef0:	d9 1f       	adc	r29, r25
    8ef2:	08 f4       	brcc	.+2      	; 0x8ef6 <__muldi3_6+0xe>
    8ef4:	31 96       	adiw	r30, 0x01	; 1
    8ef6:	08 95       	ret

00008ef8 <atoi>:
    8ef8:	fc 01       	movw	r30, r24
    8efa:	88 27       	eor	r24, r24
    8efc:	99 27       	eor	r25, r25
    8efe:	e8 94       	clt
    8f00:	21 91       	ld	r18, Z+
    8f02:	20 32       	cpi	r18, 0x20	; 32
    8f04:	e9 f3       	breq	.-6      	; 0x8f00 <atoi+0x8>
    8f06:	29 30       	cpi	r18, 0x09	; 9
    8f08:	10 f0       	brcs	.+4      	; 0x8f0e <atoi+0x16>
    8f0a:	2e 30       	cpi	r18, 0x0E	; 14
    8f0c:	c8 f3       	brcs	.-14     	; 0x8f00 <atoi+0x8>
    8f0e:	2b 32       	cpi	r18, 0x2B	; 43
    8f10:	39 f0       	breq	.+14     	; 0x8f20 <atoi+0x28>
    8f12:	2d 32       	cpi	r18, 0x2D	; 45
    8f14:	31 f4       	brne	.+12     	; 0x8f22 <atoi+0x2a>
    8f16:	68 94       	set
    8f18:	03 c0       	rjmp	.+6      	; 0x8f20 <atoi+0x28>
    8f1a:	3d d0       	rcall	.+122    	; 0x8f96 <__mulhi_const_10>
    8f1c:	82 0f       	add	r24, r18
    8f1e:	91 1d       	adc	r25, r1
    8f20:	21 91       	ld	r18, Z+
    8f22:	20 53       	subi	r18, 0x30	; 48
    8f24:	2a 30       	cpi	r18, 0x0A	; 10
    8f26:	c8 f3       	brcs	.-14     	; 0x8f1a <atoi+0x22>
    8f28:	1e f4       	brtc	.+6      	; 0x8f30 <atoi+0x38>
    8f2a:	90 95       	com	r25
    8f2c:	81 95       	neg	r24
    8f2e:	9f 4f       	sbci	r25, 0xFF	; 255
    8f30:	08 95       	ret

00008f32 <memcmp>:
    8f32:	fb 01       	movw	r30, r22
    8f34:	dc 01       	movw	r26, r24
    8f36:	04 c0       	rjmp	.+8      	; 0x8f40 <memcmp+0xe>
    8f38:	8d 91       	ld	r24, X+
    8f3a:	01 90       	ld	r0, Z+
    8f3c:	80 19       	sub	r24, r0
    8f3e:	21 f4       	brne	.+8      	; 0x8f48 <memcmp+0x16>
    8f40:	41 50       	subi	r20, 0x01	; 1
    8f42:	50 40       	sbci	r21, 0x00	; 0
    8f44:	c8 f7       	brcc	.-14     	; 0x8f38 <memcmp+0x6>
    8f46:	88 1b       	sub	r24, r24
    8f48:	99 0b       	sbc	r25, r25
    8f4a:	08 95       	ret

00008f4c <memcpy>:
    8f4c:	fb 01       	movw	r30, r22
    8f4e:	dc 01       	movw	r26, r24
    8f50:	02 c0       	rjmp	.+4      	; 0x8f56 <memcpy+0xa>
    8f52:	01 90       	ld	r0, Z+
    8f54:	0d 92       	st	X+, r0
    8f56:	41 50       	subi	r20, 0x01	; 1
    8f58:	50 40       	sbci	r21, 0x00	; 0
    8f5a:	d8 f7       	brcc	.-10     	; 0x8f52 <memcpy+0x6>
    8f5c:	08 95       	ret

00008f5e <memset>:
    8f5e:	dc 01       	movw	r26, r24
    8f60:	01 c0       	rjmp	.+2      	; 0x8f64 <memset+0x6>
    8f62:	6d 93       	st	X+, r22
    8f64:	41 50       	subi	r20, 0x01	; 1
    8f66:	50 40       	sbci	r21, 0x00	; 0
    8f68:	e0 f7       	brcc	.-8      	; 0x8f62 <memset+0x4>
    8f6a:	08 95       	ret

00008f6c <strcpy>:
    8f6c:	fb 01       	movw	r30, r22
    8f6e:	dc 01       	movw	r26, r24
    8f70:	01 90       	ld	r0, Z+
    8f72:	0d 92       	st	X+, r0
    8f74:	00 20       	and	r0, r0
    8f76:	e1 f7       	brne	.-8      	; 0x8f70 <strcpy+0x4>
    8f78:	08 95       	ret

00008f7a <__ltoa_ncheck>:
    8f7a:	bb 27       	eor	r27, r27
    8f7c:	2a 30       	cpi	r18, 0x0A	; 10
    8f7e:	51 f4       	brne	.+20     	; 0x8f94 <__ltoa_ncheck+0x1a>
    8f80:	99 23       	and	r25, r25
    8f82:	42 f4       	brpl	.+16     	; 0x8f94 <__ltoa_ncheck+0x1a>
    8f84:	bd e2       	ldi	r27, 0x2D	; 45
    8f86:	90 95       	com	r25
    8f88:	80 95       	com	r24
    8f8a:	70 95       	com	r23
    8f8c:	61 95       	neg	r22
    8f8e:	7f 4f       	sbci	r23, 0xFF	; 255
    8f90:	8f 4f       	sbci	r24, 0xFF	; 255
    8f92:	9f 4f       	sbci	r25, 0xFF	; 255
    8f94:	09 c0       	rjmp	.+18     	; 0x8fa8 <__ultoa_common>

00008f96 <__mulhi_const_10>:
    8f96:	7a e0       	ldi	r23, 0x0A	; 10
    8f98:	97 9f       	mul	r25, r23
    8f9a:	90 2d       	mov	r25, r0
    8f9c:	87 9f       	mul	r24, r23
    8f9e:	80 2d       	mov	r24, r0
    8fa0:	91 0d       	add	r25, r1
    8fa2:	11 24       	eor	r1, r1
    8fa4:	08 95       	ret

00008fa6 <__ultoa_ncheck>:
    8fa6:	bb 27       	eor	r27, r27

00008fa8 <__ultoa_common>:
    8fa8:	fa 01       	movw	r30, r20
    8faa:	a6 2f       	mov	r26, r22
    8fac:	62 17       	cp	r22, r18
    8fae:	71 05       	cpc	r23, r1
    8fb0:	81 05       	cpc	r24, r1
    8fb2:	91 05       	cpc	r25, r1
    8fb4:	33 0b       	sbc	r19, r19
    8fb6:	30 fb       	bst	r19, 0
    8fb8:	66 f0       	brts	.+24     	; 0x8fd2 <__ultoa_common+0x2a>
    8fba:	aa 27       	eor	r26, r26
    8fbc:	66 0f       	add	r22, r22
    8fbe:	77 1f       	adc	r23, r23
    8fc0:	88 1f       	adc	r24, r24
    8fc2:	99 1f       	adc	r25, r25
    8fc4:	aa 1f       	adc	r26, r26
    8fc6:	a2 17       	cp	r26, r18
    8fc8:	10 f0       	brcs	.+4      	; 0x8fce <__ultoa_common+0x26>
    8fca:	a2 1b       	sub	r26, r18
    8fcc:	63 95       	inc	r22
    8fce:	38 50       	subi	r19, 0x08	; 8
    8fd0:	a9 f7       	brne	.-22     	; 0x8fbc <__ultoa_common+0x14>
    8fd2:	a0 5d       	subi	r26, 0xD0	; 208
    8fd4:	aa 33       	cpi	r26, 0x3A	; 58
    8fd6:	08 f0       	brcs	.+2      	; 0x8fda <__ultoa_common+0x32>
    8fd8:	a9 5d       	subi	r26, 0xD9	; 217
    8fda:	a1 93       	st	Z+, r26
    8fdc:	36 f7       	brtc	.-52     	; 0x8faa <__ultoa_common+0x2>
    8fde:	b1 11       	cpse	r27, r1
    8fe0:	b1 93       	st	Z+, r27
    8fe2:	10 82       	st	Z, r1
    8fe4:	ca 01       	movw	r24, r20
    8fe6:	41 c2       	rjmp	.+1154   	; 0x946a <strrev>

00008fe8 <sprintf>:
    8fe8:	0f 93       	push	r16
    8fea:	1f 93       	push	r17
    8fec:	cf 93       	push	r28
    8fee:	df 93       	push	r29
    8ff0:	cd b7       	in	r28, 0x3d	; 61
    8ff2:	de b7       	in	r29, 0x3e	; 62
    8ff4:	2e 97       	sbiw	r28, 0x0e	; 14
    8ff6:	0f b6       	in	r0, 0x3f	; 63
    8ff8:	f8 94       	cli
    8ffa:	de bf       	out	0x3e, r29	; 62
    8ffc:	0f be       	out	0x3f, r0	; 63
    8ffe:	cd bf       	out	0x3d, r28	; 61
    9000:	0e 89       	ldd	r16, Y+22	; 0x16
    9002:	1f 89       	ldd	r17, Y+23	; 0x17
    9004:	86 e0       	ldi	r24, 0x06	; 6
    9006:	8c 83       	std	Y+4, r24	; 0x04
    9008:	1a 83       	std	Y+2, r17	; 0x02
    900a:	09 83       	std	Y+1, r16	; 0x01
    900c:	8f ef       	ldi	r24, 0xFF	; 255
    900e:	9f e7       	ldi	r25, 0x7F	; 127
    9010:	9e 83       	std	Y+6, r25	; 0x06
    9012:	8d 83       	std	Y+5, r24	; 0x05
    9014:	ae 01       	movw	r20, r28
    9016:	46 5e       	subi	r20, 0xE6	; 230
    9018:	5f 4f       	sbci	r21, 0xFF	; 255
    901a:	68 8d       	ldd	r22, Y+24	; 0x18
    901c:	79 8d       	ldd	r23, Y+25	; 0x19
    901e:	ce 01       	movw	r24, r28
    9020:	01 96       	adiw	r24, 0x01	; 1
    9022:	10 d0       	rcall	.+32     	; 0x9044 <vfprintf>
    9024:	ef 81       	ldd	r30, Y+7	; 0x07
    9026:	f8 85       	ldd	r31, Y+8	; 0x08
    9028:	e0 0f       	add	r30, r16
    902a:	f1 1f       	adc	r31, r17
    902c:	10 82       	st	Z, r1
    902e:	2e 96       	adiw	r28, 0x0e	; 14
    9030:	0f b6       	in	r0, 0x3f	; 63
    9032:	f8 94       	cli
    9034:	de bf       	out	0x3e, r29	; 62
    9036:	0f be       	out	0x3f, r0	; 63
    9038:	cd bf       	out	0x3d, r28	; 61
    903a:	df 91       	pop	r29
    903c:	cf 91       	pop	r28
    903e:	1f 91       	pop	r17
    9040:	0f 91       	pop	r16
    9042:	08 95       	ret

00009044 <vfprintf>:
    9044:	2f 92       	push	r2
    9046:	3f 92       	push	r3
    9048:	4f 92       	push	r4
    904a:	5f 92       	push	r5
    904c:	6f 92       	push	r6
    904e:	7f 92       	push	r7
    9050:	8f 92       	push	r8
    9052:	9f 92       	push	r9
    9054:	af 92       	push	r10
    9056:	bf 92       	push	r11
    9058:	cf 92       	push	r12
    905a:	df 92       	push	r13
    905c:	ef 92       	push	r14
    905e:	ff 92       	push	r15
    9060:	0f 93       	push	r16
    9062:	1f 93       	push	r17
    9064:	cf 93       	push	r28
    9066:	df 93       	push	r29
    9068:	cd b7       	in	r28, 0x3d	; 61
    906a:	de b7       	in	r29, 0x3e	; 62
    906c:	2b 97       	sbiw	r28, 0x0b	; 11
    906e:	0f b6       	in	r0, 0x3f	; 63
    9070:	f8 94       	cli
    9072:	de bf       	out	0x3e, r29	; 62
    9074:	0f be       	out	0x3f, r0	; 63
    9076:	cd bf       	out	0x3d, r28	; 61
    9078:	6c 01       	movw	r12, r24
    907a:	7b 01       	movw	r14, r22
    907c:	8a 01       	movw	r16, r20
    907e:	fc 01       	movw	r30, r24
    9080:	17 82       	std	Z+7, r1	; 0x07
    9082:	16 82       	std	Z+6, r1	; 0x06
    9084:	83 81       	ldd	r24, Z+3	; 0x03
    9086:	81 ff       	sbrs	r24, 1
    9088:	bf c1       	rjmp	.+894    	; 0x9408 <vfprintf+0x3c4>
    908a:	ce 01       	movw	r24, r28
    908c:	01 96       	adiw	r24, 0x01	; 1
    908e:	3c 01       	movw	r6, r24
    9090:	f6 01       	movw	r30, r12
    9092:	93 81       	ldd	r25, Z+3	; 0x03
    9094:	f7 01       	movw	r30, r14
    9096:	93 fd       	sbrc	r25, 3
    9098:	85 91       	lpm	r24, Z+
    909a:	93 ff       	sbrs	r25, 3
    909c:	81 91       	ld	r24, Z+
    909e:	7f 01       	movw	r14, r30
    90a0:	88 23       	and	r24, r24
    90a2:	09 f4       	brne	.+2      	; 0x90a6 <vfprintf+0x62>
    90a4:	ad c1       	rjmp	.+858    	; 0x9400 <vfprintf+0x3bc>
    90a6:	85 32       	cpi	r24, 0x25	; 37
    90a8:	39 f4       	brne	.+14     	; 0x90b8 <vfprintf+0x74>
    90aa:	93 fd       	sbrc	r25, 3
    90ac:	85 91       	lpm	r24, Z+
    90ae:	93 ff       	sbrs	r25, 3
    90b0:	81 91       	ld	r24, Z+
    90b2:	7f 01       	movw	r14, r30
    90b4:	85 32       	cpi	r24, 0x25	; 37
    90b6:	21 f4       	brne	.+8      	; 0x90c0 <vfprintf+0x7c>
    90b8:	b6 01       	movw	r22, r12
    90ba:	90 e0       	ldi	r25, 0x00	; 0
    90bc:	e6 d1       	rcall	.+972    	; 0x948a <fputc>
    90be:	e8 cf       	rjmp	.-48     	; 0x9090 <vfprintf+0x4c>
    90c0:	91 2c       	mov	r9, r1
    90c2:	21 2c       	mov	r2, r1
    90c4:	31 2c       	mov	r3, r1
    90c6:	ff e1       	ldi	r31, 0x1F	; 31
    90c8:	f3 15       	cp	r31, r3
    90ca:	d8 f0       	brcs	.+54     	; 0x9102 <vfprintf+0xbe>
    90cc:	8b 32       	cpi	r24, 0x2B	; 43
    90ce:	79 f0       	breq	.+30     	; 0x90ee <vfprintf+0xaa>
    90d0:	38 f4       	brcc	.+14     	; 0x90e0 <vfprintf+0x9c>
    90d2:	80 32       	cpi	r24, 0x20	; 32
    90d4:	79 f0       	breq	.+30     	; 0x90f4 <vfprintf+0xb0>
    90d6:	83 32       	cpi	r24, 0x23	; 35
    90d8:	a1 f4       	brne	.+40     	; 0x9102 <vfprintf+0xbe>
    90da:	23 2d       	mov	r18, r3
    90dc:	20 61       	ori	r18, 0x10	; 16
    90de:	1d c0       	rjmp	.+58     	; 0x911a <vfprintf+0xd6>
    90e0:	8d 32       	cpi	r24, 0x2D	; 45
    90e2:	61 f0       	breq	.+24     	; 0x90fc <vfprintf+0xb8>
    90e4:	80 33       	cpi	r24, 0x30	; 48
    90e6:	69 f4       	brne	.+26     	; 0x9102 <vfprintf+0xbe>
    90e8:	23 2d       	mov	r18, r3
    90ea:	21 60       	ori	r18, 0x01	; 1
    90ec:	16 c0       	rjmp	.+44     	; 0x911a <vfprintf+0xd6>
    90ee:	83 2d       	mov	r24, r3
    90f0:	82 60       	ori	r24, 0x02	; 2
    90f2:	38 2e       	mov	r3, r24
    90f4:	e3 2d       	mov	r30, r3
    90f6:	e4 60       	ori	r30, 0x04	; 4
    90f8:	3e 2e       	mov	r3, r30
    90fa:	2a c0       	rjmp	.+84     	; 0x9150 <vfprintf+0x10c>
    90fc:	f3 2d       	mov	r31, r3
    90fe:	f8 60       	ori	r31, 0x08	; 8
    9100:	1d c0       	rjmp	.+58     	; 0x913c <vfprintf+0xf8>
    9102:	37 fc       	sbrc	r3, 7
    9104:	2d c0       	rjmp	.+90     	; 0x9160 <vfprintf+0x11c>
    9106:	20 ed       	ldi	r18, 0xD0	; 208
    9108:	28 0f       	add	r18, r24
    910a:	2a 30       	cpi	r18, 0x0A	; 10
    910c:	40 f0       	brcs	.+16     	; 0x911e <vfprintf+0xda>
    910e:	8e 32       	cpi	r24, 0x2E	; 46
    9110:	b9 f4       	brne	.+46     	; 0x9140 <vfprintf+0xfc>
    9112:	36 fc       	sbrc	r3, 6
    9114:	75 c1       	rjmp	.+746    	; 0x9400 <vfprintf+0x3bc>
    9116:	23 2d       	mov	r18, r3
    9118:	20 64       	ori	r18, 0x40	; 64
    911a:	32 2e       	mov	r3, r18
    911c:	19 c0       	rjmp	.+50     	; 0x9150 <vfprintf+0x10c>
    911e:	36 fe       	sbrs	r3, 6
    9120:	06 c0       	rjmp	.+12     	; 0x912e <vfprintf+0xea>
    9122:	8a e0       	ldi	r24, 0x0A	; 10
    9124:	98 9e       	mul	r9, r24
    9126:	20 0d       	add	r18, r0
    9128:	11 24       	eor	r1, r1
    912a:	92 2e       	mov	r9, r18
    912c:	11 c0       	rjmp	.+34     	; 0x9150 <vfprintf+0x10c>
    912e:	ea e0       	ldi	r30, 0x0A	; 10
    9130:	2e 9e       	mul	r2, r30
    9132:	20 0d       	add	r18, r0
    9134:	11 24       	eor	r1, r1
    9136:	22 2e       	mov	r2, r18
    9138:	f3 2d       	mov	r31, r3
    913a:	f0 62       	ori	r31, 0x20	; 32
    913c:	3f 2e       	mov	r3, r31
    913e:	08 c0       	rjmp	.+16     	; 0x9150 <vfprintf+0x10c>
    9140:	8c 36       	cpi	r24, 0x6C	; 108
    9142:	21 f4       	brne	.+8      	; 0x914c <vfprintf+0x108>
    9144:	83 2d       	mov	r24, r3
    9146:	80 68       	ori	r24, 0x80	; 128
    9148:	38 2e       	mov	r3, r24
    914a:	02 c0       	rjmp	.+4      	; 0x9150 <vfprintf+0x10c>
    914c:	88 36       	cpi	r24, 0x68	; 104
    914e:	41 f4       	brne	.+16     	; 0x9160 <vfprintf+0x11c>
    9150:	f7 01       	movw	r30, r14
    9152:	93 fd       	sbrc	r25, 3
    9154:	85 91       	lpm	r24, Z+
    9156:	93 ff       	sbrs	r25, 3
    9158:	81 91       	ld	r24, Z+
    915a:	7f 01       	movw	r14, r30
    915c:	81 11       	cpse	r24, r1
    915e:	b3 cf       	rjmp	.-154    	; 0x90c6 <vfprintf+0x82>
    9160:	98 2f       	mov	r25, r24
    9162:	9f 7d       	andi	r25, 0xDF	; 223
    9164:	95 54       	subi	r25, 0x45	; 69
    9166:	93 30       	cpi	r25, 0x03	; 3
    9168:	28 f4       	brcc	.+10     	; 0x9174 <vfprintf+0x130>
    916a:	0c 5f       	subi	r16, 0xFC	; 252
    916c:	1f 4f       	sbci	r17, 0xFF	; 255
    916e:	9f e3       	ldi	r25, 0x3F	; 63
    9170:	99 83       	std	Y+1, r25	; 0x01
    9172:	0d c0       	rjmp	.+26     	; 0x918e <vfprintf+0x14a>
    9174:	83 36       	cpi	r24, 0x63	; 99
    9176:	31 f0       	breq	.+12     	; 0x9184 <vfprintf+0x140>
    9178:	83 37       	cpi	r24, 0x73	; 115
    917a:	71 f0       	breq	.+28     	; 0x9198 <vfprintf+0x154>
    917c:	83 35       	cpi	r24, 0x53	; 83
    917e:	09 f0       	breq	.+2      	; 0x9182 <vfprintf+0x13e>
    9180:	55 c0       	rjmp	.+170    	; 0x922c <vfprintf+0x1e8>
    9182:	20 c0       	rjmp	.+64     	; 0x91c4 <vfprintf+0x180>
    9184:	f8 01       	movw	r30, r16
    9186:	80 81       	ld	r24, Z
    9188:	89 83       	std	Y+1, r24	; 0x01
    918a:	0e 5f       	subi	r16, 0xFE	; 254
    918c:	1f 4f       	sbci	r17, 0xFF	; 255
    918e:	88 24       	eor	r8, r8
    9190:	83 94       	inc	r8
    9192:	91 2c       	mov	r9, r1
    9194:	53 01       	movw	r10, r6
    9196:	12 c0       	rjmp	.+36     	; 0x91bc <vfprintf+0x178>
    9198:	28 01       	movw	r4, r16
    919a:	f2 e0       	ldi	r31, 0x02	; 2
    919c:	4f 0e       	add	r4, r31
    919e:	51 1c       	adc	r5, r1
    91a0:	f8 01       	movw	r30, r16
    91a2:	a0 80       	ld	r10, Z
    91a4:	b1 80       	ldd	r11, Z+1	; 0x01
    91a6:	36 fe       	sbrs	r3, 6
    91a8:	03 c0       	rjmp	.+6      	; 0x91b0 <vfprintf+0x16c>
    91aa:	69 2d       	mov	r22, r9
    91ac:	70 e0       	ldi	r23, 0x00	; 0
    91ae:	02 c0       	rjmp	.+4      	; 0x91b4 <vfprintf+0x170>
    91b0:	6f ef       	ldi	r22, 0xFF	; 255
    91b2:	7f ef       	ldi	r23, 0xFF	; 255
    91b4:	c5 01       	movw	r24, r10
    91b6:	4e d1       	rcall	.+668    	; 0x9454 <strnlen>
    91b8:	4c 01       	movw	r8, r24
    91ba:	82 01       	movw	r16, r4
    91bc:	f3 2d       	mov	r31, r3
    91be:	ff 77       	andi	r31, 0x7F	; 127
    91c0:	3f 2e       	mov	r3, r31
    91c2:	15 c0       	rjmp	.+42     	; 0x91ee <vfprintf+0x1aa>
    91c4:	28 01       	movw	r4, r16
    91c6:	22 e0       	ldi	r18, 0x02	; 2
    91c8:	42 0e       	add	r4, r18
    91ca:	51 1c       	adc	r5, r1
    91cc:	f8 01       	movw	r30, r16
    91ce:	a0 80       	ld	r10, Z
    91d0:	b1 80       	ldd	r11, Z+1	; 0x01
    91d2:	36 fe       	sbrs	r3, 6
    91d4:	03 c0       	rjmp	.+6      	; 0x91dc <vfprintf+0x198>
    91d6:	69 2d       	mov	r22, r9
    91d8:	70 e0       	ldi	r23, 0x00	; 0
    91da:	02 c0       	rjmp	.+4      	; 0x91e0 <vfprintf+0x19c>
    91dc:	6f ef       	ldi	r22, 0xFF	; 255
    91de:	7f ef       	ldi	r23, 0xFF	; 255
    91e0:	c5 01       	movw	r24, r10
    91e2:	2d d1       	rcall	.+602    	; 0x943e <strnlen_P>
    91e4:	4c 01       	movw	r8, r24
    91e6:	f3 2d       	mov	r31, r3
    91e8:	f0 68       	ori	r31, 0x80	; 128
    91ea:	3f 2e       	mov	r3, r31
    91ec:	82 01       	movw	r16, r4
    91ee:	33 fc       	sbrc	r3, 3
    91f0:	19 c0       	rjmp	.+50     	; 0x9224 <vfprintf+0x1e0>
    91f2:	82 2d       	mov	r24, r2
    91f4:	90 e0       	ldi	r25, 0x00	; 0
    91f6:	88 16       	cp	r8, r24
    91f8:	99 06       	cpc	r9, r25
    91fa:	a0 f4       	brcc	.+40     	; 0x9224 <vfprintf+0x1e0>
    91fc:	b6 01       	movw	r22, r12
    91fe:	80 e2       	ldi	r24, 0x20	; 32
    9200:	90 e0       	ldi	r25, 0x00	; 0
    9202:	43 d1       	rcall	.+646    	; 0x948a <fputc>
    9204:	2a 94       	dec	r2
    9206:	f5 cf       	rjmp	.-22     	; 0x91f2 <vfprintf+0x1ae>
    9208:	f5 01       	movw	r30, r10
    920a:	37 fc       	sbrc	r3, 7
    920c:	85 91       	lpm	r24, Z+
    920e:	37 fe       	sbrs	r3, 7
    9210:	81 91       	ld	r24, Z+
    9212:	5f 01       	movw	r10, r30
    9214:	b6 01       	movw	r22, r12
    9216:	90 e0       	ldi	r25, 0x00	; 0
    9218:	38 d1       	rcall	.+624    	; 0x948a <fputc>
    921a:	21 10       	cpse	r2, r1
    921c:	2a 94       	dec	r2
    921e:	21 e0       	ldi	r18, 0x01	; 1
    9220:	82 1a       	sub	r8, r18
    9222:	91 08       	sbc	r9, r1
    9224:	81 14       	cp	r8, r1
    9226:	91 04       	cpc	r9, r1
    9228:	79 f7       	brne	.-34     	; 0x9208 <vfprintf+0x1c4>
    922a:	e1 c0       	rjmp	.+450    	; 0x93ee <vfprintf+0x3aa>
    922c:	84 36       	cpi	r24, 0x64	; 100
    922e:	11 f0       	breq	.+4      	; 0x9234 <vfprintf+0x1f0>
    9230:	89 36       	cpi	r24, 0x69	; 105
    9232:	39 f5       	brne	.+78     	; 0x9282 <vfprintf+0x23e>
    9234:	f8 01       	movw	r30, r16
    9236:	37 fe       	sbrs	r3, 7
    9238:	07 c0       	rjmp	.+14     	; 0x9248 <vfprintf+0x204>
    923a:	60 81       	ld	r22, Z
    923c:	71 81       	ldd	r23, Z+1	; 0x01
    923e:	82 81       	ldd	r24, Z+2	; 0x02
    9240:	93 81       	ldd	r25, Z+3	; 0x03
    9242:	0c 5f       	subi	r16, 0xFC	; 252
    9244:	1f 4f       	sbci	r17, 0xFF	; 255
    9246:	08 c0       	rjmp	.+16     	; 0x9258 <vfprintf+0x214>
    9248:	60 81       	ld	r22, Z
    924a:	71 81       	ldd	r23, Z+1	; 0x01
    924c:	07 2e       	mov	r0, r23
    924e:	00 0c       	add	r0, r0
    9250:	88 0b       	sbc	r24, r24
    9252:	99 0b       	sbc	r25, r25
    9254:	0e 5f       	subi	r16, 0xFE	; 254
    9256:	1f 4f       	sbci	r17, 0xFF	; 255
    9258:	f3 2d       	mov	r31, r3
    925a:	ff 76       	andi	r31, 0x6F	; 111
    925c:	3f 2e       	mov	r3, r31
    925e:	97 ff       	sbrs	r25, 7
    9260:	09 c0       	rjmp	.+18     	; 0x9274 <vfprintf+0x230>
    9262:	90 95       	com	r25
    9264:	80 95       	com	r24
    9266:	70 95       	com	r23
    9268:	61 95       	neg	r22
    926a:	7f 4f       	sbci	r23, 0xFF	; 255
    926c:	8f 4f       	sbci	r24, 0xFF	; 255
    926e:	9f 4f       	sbci	r25, 0xFF	; 255
    9270:	f0 68       	ori	r31, 0x80	; 128
    9272:	3f 2e       	mov	r3, r31
    9274:	2a e0       	ldi	r18, 0x0A	; 10
    9276:	30 e0       	ldi	r19, 0x00	; 0
    9278:	a3 01       	movw	r20, r6
    927a:	43 d1       	rcall	.+646    	; 0x9502 <__ultoa_invert>
    927c:	88 2e       	mov	r8, r24
    927e:	86 18       	sub	r8, r6
    9280:	44 c0       	rjmp	.+136    	; 0x930a <vfprintf+0x2c6>
    9282:	85 37       	cpi	r24, 0x75	; 117
    9284:	31 f4       	brne	.+12     	; 0x9292 <vfprintf+0x24e>
    9286:	23 2d       	mov	r18, r3
    9288:	2f 7e       	andi	r18, 0xEF	; 239
    928a:	b2 2e       	mov	r11, r18
    928c:	2a e0       	ldi	r18, 0x0A	; 10
    928e:	30 e0       	ldi	r19, 0x00	; 0
    9290:	25 c0       	rjmp	.+74     	; 0x92dc <vfprintf+0x298>
    9292:	93 2d       	mov	r25, r3
    9294:	99 7f       	andi	r25, 0xF9	; 249
    9296:	b9 2e       	mov	r11, r25
    9298:	8f 36       	cpi	r24, 0x6F	; 111
    929a:	c1 f0       	breq	.+48     	; 0x92cc <vfprintf+0x288>
    929c:	18 f4       	brcc	.+6      	; 0x92a4 <vfprintf+0x260>
    929e:	88 35       	cpi	r24, 0x58	; 88
    92a0:	79 f0       	breq	.+30     	; 0x92c0 <vfprintf+0x27c>
    92a2:	ae c0       	rjmp	.+348    	; 0x9400 <vfprintf+0x3bc>
    92a4:	80 37       	cpi	r24, 0x70	; 112
    92a6:	19 f0       	breq	.+6      	; 0x92ae <vfprintf+0x26a>
    92a8:	88 37       	cpi	r24, 0x78	; 120
    92aa:	21 f0       	breq	.+8      	; 0x92b4 <vfprintf+0x270>
    92ac:	a9 c0       	rjmp	.+338    	; 0x9400 <vfprintf+0x3bc>
    92ae:	e9 2f       	mov	r30, r25
    92b0:	e0 61       	ori	r30, 0x10	; 16
    92b2:	be 2e       	mov	r11, r30
    92b4:	b4 fe       	sbrs	r11, 4
    92b6:	0d c0       	rjmp	.+26     	; 0x92d2 <vfprintf+0x28e>
    92b8:	fb 2d       	mov	r31, r11
    92ba:	f4 60       	ori	r31, 0x04	; 4
    92bc:	bf 2e       	mov	r11, r31
    92be:	09 c0       	rjmp	.+18     	; 0x92d2 <vfprintf+0x28e>
    92c0:	34 fe       	sbrs	r3, 4
    92c2:	0a c0       	rjmp	.+20     	; 0x92d8 <vfprintf+0x294>
    92c4:	29 2f       	mov	r18, r25
    92c6:	26 60       	ori	r18, 0x06	; 6
    92c8:	b2 2e       	mov	r11, r18
    92ca:	06 c0       	rjmp	.+12     	; 0x92d8 <vfprintf+0x294>
    92cc:	28 e0       	ldi	r18, 0x08	; 8
    92ce:	30 e0       	ldi	r19, 0x00	; 0
    92d0:	05 c0       	rjmp	.+10     	; 0x92dc <vfprintf+0x298>
    92d2:	20 e1       	ldi	r18, 0x10	; 16
    92d4:	30 e0       	ldi	r19, 0x00	; 0
    92d6:	02 c0       	rjmp	.+4      	; 0x92dc <vfprintf+0x298>
    92d8:	20 e1       	ldi	r18, 0x10	; 16
    92da:	32 e0       	ldi	r19, 0x02	; 2
    92dc:	f8 01       	movw	r30, r16
    92de:	b7 fe       	sbrs	r11, 7
    92e0:	07 c0       	rjmp	.+14     	; 0x92f0 <vfprintf+0x2ac>
    92e2:	60 81       	ld	r22, Z
    92e4:	71 81       	ldd	r23, Z+1	; 0x01
    92e6:	82 81       	ldd	r24, Z+2	; 0x02
    92e8:	93 81       	ldd	r25, Z+3	; 0x03
    92ea:	0c 5f       	subi	r16, 0xFC	; 252
    92ec:	1f 4f       	sbci	r17, 0xFF	; 255
    92ee:	06 c0       	rjmp	.+12     	; 0x92fc <vfprintf+0x2b8>
    92f0:	60 81       	ld	r22, Z
    92f2:	71 81       	ldd	r23, Z+1	; 0x01
    92f4:	80 e0       	ldi	r24, 0x00	; 0
    92f6:	90 e0       	ldi	r25, 0x00	; 0
    92f8:	0e 5f       	subi	r16, 0xFE	; 254
    92fa:	1f 4f       	sbci	r17, 0xFF	; 255
    92fc:	a3 01       	movw	r20, r6
    92fe:	01 d1       	rcall	.+514    	; 0x9502 <__ultoa_invert>
    9300:	88 2e       	mov	r8, r24
    9302:	86 18       	sub	r8, r6
    9304:	fb 2d       	mov	r31, r11
    9306:	ff 77       	andi	r31, 0x7F	; 127
    9308:	3f 2e       	mov	r3, r31
    930a:	36 fe       	sbrs	r3, 6
    930c:	0d c0       	rjmp	.+26     	; 0x9328 <vfprintf+0x2e4>
    930e:	23 2d       	mov	r18, r3
    9310:	2e 7f       	andi	r18, 0xFE	; 254
    9312:	a2 2e       	mov	r10, r18
    9314:	89 14       	cp	r8, r9
    9316:	58 f4       	brcc	.+22     	; 0x932e <vfprintf+0x2ea>
    9318:	34 fe       	sbrs	r3, 4
    931a:	0b c0       	rjmp	.+22     	; 0x9332 <vfprintf+0x2ee>
    931c:	32 fc       	sbrc	r3, 2
    931e:	09 c0       	rjmp	.+18     	; 0x9332 <vfprintf+0x2ee>
    9320:	83 2d       	mov	r24, r3
    9322:	8e 7e       	andi	r24, 0xEE	; 238
    9324:	a8 2e       	mov	r10, r24
    9326:	05 c0       	rjmp	.+10     	; 0x9332 <vfprintf+0x2ee>
    9328:	b8 2c       	mov	r11, r8
    932a:	a3 2c       	mov	r10, r3
    932c:	03 c0       	rjmp	.+6      	; 0x9334 <vfprintf+0x2f0>
    932e:	b8 2c       	mov	r11, r8
    9330:	01 c0       	rjmp	.+2      	; 0x9334 <vfprintf+0x2f0>
    9332:	b9 2c       	mov	r11, r9
    9334:	a4 fe       	sbrs	r10, 4
    9336:	0f c0       	rjmp	.+30     	; 0x9356 <vfprintf+0x312>
    9338:	fe 01       	movw	r30, r28
    933a:	e8 0d       	add	r30, r8
    933c:	f1 1d       	adc	r31, r1
    933e:	80 81       	ld	r24, Z
    9340:	80 33       	cpi	r24, 0x30	; 48
    9342:	21 f4       	brne	.+8      	; 0x934c <vfprintf+0x308>
    9344:	9a 2d       	mov	r25, r10
    9346:	99 7e       	andi	r25, 0xE9	; 233
    9348:	a9 2e       	mov	r10, r25
    934a:	09 c0       	rjmp	.+18     	; 0x935e <vfprintf+0x31a>
    934c:	a2 fe       	sbrs	r10, 2
    934e:	06 c0       	rjmp	.+12     	; 0x935c <vfprintf+0x318>
    9350:	b3 94       	inc	r11
    9352:	b3 94       	inc	r11
    9354:	04 c0       	rjmp	.+8      	; 0x935e <vfprintf+0x31a>
    9356:	8a 2d       	mov	r24, r10
    9358:	86 78       	andi	r24, 0x86	; 134
    935a:	09 f0       	breq	.+2      	; 0x935e <vfprintf+0x31a>
    935c:	b3 94       	inc	r11
    935e:	a3 fc       	sbrc	r10, 3
    9360:	10 c0       	rjmp	.+32     	; 0x9382 <vfprintf+0x33e>
    9362:	a0 fe       	sbrs	r10, 0
    9364:	06 c0       	rjmp	.+12     	; 0x9372 <vfprintf+0x32e>
    9366:	b2 14       	cp	r11, r2
    9368:	80 f4       	brcc	.+32     	; 0x938a <vfprintf+0x346>
    936a:	28 0c       	add	r2, r8
    936c:	92 2c       	mov	r9, r2
    936e:	9b 18       	sub	r9, r11
    9370:	0d c0       	rjmp	.+26     	; 0x938c <vfprintf+0x348>
    9372:	b2 14       	cp	r11, r2
    9374:	58 f4       	brcc	.+22     	; 0x938c <vfprintf+0x348>
    9376:	b6 01       	movw	r22, r12
    9378:	80 e2       	ldi	r24, 0x20	; 32
    937a:	90 e0       	ldi	r25, 0x00	; 0
    937c:	86 d0       	rcall	.+268    	; 0x948a <fputc>
    937e:	b3 94       	inc	r11
    9380:	f8 cf       	rjmp	.-16     	; 0x9372 <vfprintf+0x32e>
    9382:	b2 14       	cp	r11, r2
    9384:	18 f4       	brcc	.+6      	; 0x938c <vfprintf+0x348>
    9386:	2b 18       	sub	r2, r11
    9388:	02 c0       	rjmp	.+4      	; 0x938e <vfprintf+0x34a>
    938a:	98 2c       	mov	r9, r8
    938c:	21 2c       	mov	r2, r1
    938e:	a4 fe       	sbrs	r10, 4
    9390:	0f c0       	rjmp	.+30     	; 0x93b0 <vfprintf+0x36c>
    9392:	b6 01       	movw	r22, r12
    9394:	80 e3       	ldi	r24, 0x30	; 48
    9396:	90 e0       	ldi	r25, 0x00	; 0
    9398:	78 d0       	rcall	.+240    	; 0x948a <fputc>
    939a:	a2 fe       	sbrs	r10, 2
    939c:	16 c0       	rjmp	.+44     	; 0x93ca <vfprintf+0x386>
    939e:	a1 fc       	sbrc	r10, 1
    93a0:	03 c0       	rjmp	.+6      	; 0x93a8 <vfprintf+0x364>
    93a2:	88 e7       	ldi	r24, 0x78	; 120
    93a4:	90 e0       	ldi	r25, 0x00	; 0
    93a6:	02 c0       	rjmp	.+4      	; 0x93ac <vfprintf+0x368>
    93a8:	88 e5       	ldi	r24, 0x58	; 88
    93aa:	90 e0       	ldi	r25, 0x00	; 0
    93ac:	b6 01       	movw	r22, r12
    93ae:	0c c0       	rjmp	.+24     	; 0x93c8 <vfprintf+0x384>
    93b0:	8a 2d       	mov	r24, r10
    93b2:	86 78       	andi	r24, 0x86	; 134
    93b4:	51 f0       	breq	.+20     	; 0x93ca <vfprintf+0x386>
    93b6:	a1 fe       	sbrs	r10, 1
    93b8:	02 c0       	rjmp	.+4      	; 0x93be <vfprintf+0x37a>
    93ba:	8b e2       	ldi	r24, 0x2B	; 43
    93bc:	01 c0       	rjmp	.+2      	; 0x93c0 <vfprintf+0x37c>
    93be:	80 e2       	ldi	r24, 0x20	; 32
    93c0:	a7 fc       	sbrc	r10, 7
    93c2:	8d e2       	ldi	r24, 0x2D	; 45
    93c4:	b6 01       	movw	r22, r12
    93c6:	90 e0       	ldi	r25, 0x00	; 0
    93c8:	60 d0       	rcall	.+192    	; 0x948a <fputc>
    93ca:	89 14       	cp	r8, r9
    93cc:	30 f4       	brcc	.+12     	; 0x93da <vfprintf+0x396>
    93ce:	b6 01       	movw	r22, r12
    93d0:	80 e3       	ldi	r24, 0x30	; 48
    93d2:	90 e0       	ldi	r25, 0x00	; 0
    93d4:	5a d0       	rcall	.+180    	; 0x948a <fputc>
    93d6:	9a 94       	dec	r9
    93d8:	f8 cf       	rjmp	.-16     	; 0x93ca <vfprintf+0x386>
    93da:	8a 94       	dec	r8
    93dc:	f3 01       	movw	r30, r6
    93de:	e8 0d       	add	r30, r8
    93e0:	f1 1d       	adc	r31, r1
    93e2:	80 81       	ld	r24, Z
    93e4:	b6 01       	movw	r22, r12
    93e6:	90 e0       	ldi	r25, 0x00	; 0
    93e8:	50 d0       	rcall	.+160    	; 0x948a <fputc>
    93ea:	81 10       	cpse	r8, r1
    93ec:	f6 cf       	rjmp	.-20     	; 0x93da <vfprintf+0x396>
    93ee:	22 20       	and	r2, r2
    93f0:	09 f4       	brne	.+2      	; 0x93f4 <vfprintf+0x3b0>
    93f2:	4e ce       	rjmp	.-868    	; 0x9090 <vfprintf+0x4c>
    93f4:	b6 01       	movw	r22, r12
    93f6:	80 e2       	ldi	r24, 0x20	; 32
    93f8:	90 e0       	ldi	r25, 0x00	; 0
    93fa:	47 d0       	rcall	.+142    	; 0x948a <fputc>
    93fc:	2a 94       	dec	r2
    93fe:	f7 cf       	rjmp	.-18     	; 0x93ee <vfprintf+0x3aa>
    9400:	f6 01       	movw	r30, r12
    9402:	86 81       	ldd	r24, Z+6	; 0x06
    9404:	97 81       	ldd	r25, Z+7	; 0x07
    9406:	02 c0       	rjmp	.+4      	; 0x940c <vfprintf+0x3c8>
    9408:	8f ef       	ldi	r24, 0xFF	; 255
    940a:	9f ef       	ldi	r25, 0xFF	; 255
    940c:	2b 96       	adiw	r28, 0x0b	; 11
    940e:	0f b6       	in	r0, 0x3f	; 63
    9410:	f8 94       	cli
    9412:	de bf       	out	0x3e, r29	; 62
    9414:	0f be       	out	0x3f, r0	; 63
    9416:	cd bf       	out	0x3d, r28	; 61
    9418:	df 91       	pop	r29
    941a:	cf 91       	pop	r28
    941c:	1f 91       	pop	r17
    941e:	0f 91       	pop	r16
    9420:	ff 90       	pop	r15
    9422:	ef 90       	pop	r14
    9424:	df 90       	pop	r13
    9426:	cf 90       	pop	r12
    9428:	bf 90       	pop	r11
    942a:	af 90       	pop	r10
    942c:	9f 90       	pop	r9
    942e:	8f 90       	pop	r8
    9430:	7f 90       	pop	r7
    9432:	6f 90       	pop	r6
    9434:	5f 90       	pop	r5
    9436:	4f 90       	pop	r4
    9438:	3f 90       	pop	r3
    943a:	2f 90       	pop	r2
    943c:	08 95       	ret

0000943e <strnlen_P>:
    943e:	fc 01       	movw	r30, r24
    9440:	05 90       	lpm	r0, Z+
    9442:	61 50       	subi	r22, 0x01	; 1
    9444:	70 40       	sbci	r23, 0x00	; 0
    9446:	01 10       	cpse	r0, r1
    9448:	d8 f7       	brcc	.-10     	; 0x9440 <strnlen_P+0x2>
    944a:	80 95       	com	r24
    944c:	90 95       	com	r25
    944e:	8e 0f       	add	r24, r30
    9450:	9f 1f       	adc	r25, r31
    9452:	08 95       	ret

00009454 <strnlen>:
    9454:	fc 01       	movw	r30, r24
    9456:	61 50       	subi	r22, 0x01	; 1
    9458:	70 40       	sbci	r23, 0x00	; 0
    945a:	01 90       	ld	r0, Z+
    945c:	01 10       	cpse	r0, r1
    945e:	d8 f7       	brcc	.-10     	; 0x9456 <strnlen+0x2>
    9460:	80 95       	com	r24
    9462:	90 95       	com	r25
    9464:	8e 0f       	add	r24, r30
    9466:	9f 1f       	adc	r25, r31
    9468:	08 95       	ret

0000946a <strrev>:
    946a:	dc 01       	movw	r26, r24
    946c:	fc 01       	movw	r30, r24
    946e:	67 2f       	mov	r22, r23
    9470:	71 91       	ld	r23, Z+
    9472:	77 23       	and	r23, r23
    9474:	e1 f7       	brne	.-8      	; 0x946e <strrev+0x4>
    9476:	32 97       	sbiw	r30, 0x02	; 2
    9478:	04 c0       	rjmp	.+8      	; 0x9482 <strrev+0x18>
    947a:	7c 91       	ld	r23, X
    947c:	6d 93       	st	X+, r22
    947e:	70 83       	st	Z, r23
    9480:	62 91       	ld	r22, -Z
    9482:	ae 17       	cp	r26, r30
    9484:	bf 07       	cpc	r27, r31
    9486:	c8 f3       	brcs	.-14     	; 0x947a <strrev+0x10>
    9488:	08 95       	ret

0000948a <fputc>:
    948a:	0f 93       	push	r16
    948c:	1f 93       	push	r17
    948e:	cf 93       	push	r28
    9490:	df 93       	push	r29
    9492:	fb 01       	movw	r30, r22
    9494:	23 81       	ldd	r18, Z+3	; 0x03
    9496:	21 fd       	sbrc	r18, 1
    9498:	03 c0       	rjmp	.+6      	; 0x94a0 <fputc+0x16>
    949a:	8f ef       	ldi	r24, 0xFF	; 255
    949c:	9f ef       	ldi	r25, 0xFF	; 255
    949e:	2c c0       	rjmp	.+88     	; 0x94f8 <fputc+0x6e>
    94a0:	22 ff       	sbrs	r18, 2
    94a2:	16 c0       	rjmp	.+44     	; 0x94d0 <fputc+0x46>
    94a4:	46 81       	ldd	r20, Z+6	; 0x06
    94a6:	57 81       	ldd	r21, Z+7	; 0x07
    94a8:	24 81       	ldd	r18, Z+4	; 0x04
    94aa:	35 81       	ldd	r19, Z+5	; 0x05
    94ac:	42 17       	cp	r20, r18
    94ae:	53 07       	cpc	r21, r19
    94b0:	44 f4       	brge	.+16     	; 0x94c2 <fputc+0x38>
    94b2:	a0 81       	ld	r26, Z
    94b4:	b1 81       	ldd	r27, Z+1	; 0x01
    94b6:	9d 01       	movw	r18, r26
    94b8:	2f 5f       	subi	r18, 0xFF	; 255
    94ba:	3f 4f       	sbci	r19, 0xFF	; 255
    94bc:	31 83       	std	Z+1, r19	; 0x01
    94be:	20 83       	st	Z, r18
    94c0:	8c 93       	st	X, r24
    94c2:	26 81       	ldd	r18, Z+6	; 0x06
    94c4:	37 81       	ldd	r19, Z+7	; 0x07
    94c6:	2f 5f       	subi	r18, 0xFF	; 255
    94c8:	3f 4f       	sbci	r19, 0xFF	; 255
    94ca:	37 83       	std	Z+7, r19	; 0x07
    94cc:	26 83       	std	Z+6, r18	; 0x06
    94ce:	14 c0       	rjmp	.+40     	; 0x94f8 <fputc+0x6e>
    94d0:	8b 01       	movw	r16, r22
    94d2:	ec 01       	movw	r28, r24
    94d4:	fb 01       	movw	r30, r22
    94d6:	00 84       	ldd	r0, Z+8	; 0x08
    94d8:	f1 85       	ldd	r31, Z+9	; 0x09
    94da:	e0 2d       	mov	r30, r0
    94dc:	19 95       	eicall
    94de:	89 2b       	or	r24, r25
    94e0:	e1 f6       	brne	.-72     	; 0x949a <fputc+0x10>
    94e2:	d8 01       	movw	r26, r16
    94e4:	16 96       	adiw	r26, 0x06	; 6
    94e6:	8d 91       	ld	r24, X+
    94e8:	9c 91       	ld	r25, X
    94ea:	17 97       	sbiw	r26, 0x07	; 7
    94ec:	01 96       	adiw	r24, 0x01	; 1
    94ee:	17 96       	adiw	r26, 0x07	; 7
    94f0:	9c 93       	st	X, r25
    94f2:	8e 93       	st	-X, r24
    94f4:	16 97       	sbiw	r26, 0x06	; 6
    94f6:	ce 01       	movw	r24, r28
    94f8:	df 91       	pop	r29
    94fa:	cf 91       	pop	r28
    94fc:	1f 91       	pop	r17
    94fe:	0f 91       	pop	r16
    9500:	08 95       	ret

00009502 <__ultoa_invert>:
    9502:	fa 01       	movw	r30, r20
    9504:	aa 27       	eor	r26, r26
    9506:	28 30       	cpi	r18, 0x08	; 8
    9508:	51 f1       	breq	.+84     	; 0x955e <__ultoa_invert+0x5c>
    950a:	20 31       	cpi	r18, 0x10	; 16
    950c:	81 f1       	breq	.+96     	; 0x956e <__ultoa_invert+0x6c>
    950e:	e8 94       	clt
    9510:	6f 93       	push	r22
    9512:	6e 7f       	andi	r22, 0xFE	; 254
    9514:	6e 5f       	subi	r22, 0xFE	; 254
    9516:	7f 4f       	sbci	r23, 0xFF	; 255
    9518:	8f 4f       	sbci	r24, 0xFF	; 255
    951a:	9f 4f       	sbci	r25, 0xFF	; 255
    951c:	af 4f       	sbci	r26, 0xFF	; 255
    951e:	b1 e0       	ldi	r27, 0x01	; 1
    9520:	3e d0       	rcall	.+124    	; 0x959e <__ultoa_invert+0x9c>
    9522:	b4 e0       	ldi	r27, 0x04	; 4
    9524:	3c d0       	rcall	.+120    	; 0x959e <__ultoa_invert+0x9c>
    9526:	67 0f       	add	r22, r23
    9528:	78 1f       	adc	r23, r24
    952a:	89 1f       	adc	r24, r25
    952c:	9a 1f       	adc	r25, r26
    952e:	a1 1d       	adc	r26, r1
    9530:	68 0f       	add	r22, r24
    9532:	79 1f       	adc	r23, r25
    9534:	8a 1f       	adc	r24, r26
    9536:	91 1d       	adc	r25, r1
    9538:	a1 1d       	adc	r26, r1
    953a:	6a 0f       	add	r22, r26
    953c:	71 1d       	adc	r23, r1
    953e:	81 1d       	adc	r24, r1
    9540:	91 1d       	adc	r25, r1
    9542:	a1 1d       	adc	r26, r1
    9544:	20 d0       	rcall	.+64     	; 0x9586 <__ultoa_invert+0x84>
    9546:	09 f4       	brne	.+2      	; 0x954a <__ultoa_invert+0x48>
    9548:	68 94       	set
    954a:	3f 91       	pop	r19
    954c:	2a e0       	ldi	r18, 0x0A	; 10
    954e:	26 9f       	mul	r18, r22
    9550:	11 24       	eor	r1, r1
    9552:	30 19       	sub	r19, r0
    9554:	30 5d       	subi	r19, 0xD0	; 208
    9556:	31 93       	st	Z+, r19
    9558:	de f6       	brtc	.-74     	; 0x9510 <__ultoa_invert+0xe>
    955a:	cf 01       	movw	r24, r30
    955c:	08 95       	ret
    955e:	46 2f       	mov	r20, r22
    9560:	47 70       	andi	r20, 0x07	; 7
    9562:	40 5d       	subi	r20, 0xD0	; 208
    9564:	41 93       	st	Z+, r20
    9566:	b3 e0       	ldi	r27, 0x03	; 3
    9568:	0f d0       	rcall	.+30     	; 0x9588 <__ultoa_invert+0x86>
    956a:	c9 f7       	brne	.-14     	; 0x955e <__ultoa_invert+0x5c>
    956c:	f6 cf       	rjmp	.-20     	; 0x955a <__ultoa_invert+0x58>
    956e:	46 2f       	mov	r20, r22
    9570:	4f 70       	andi	r20, 0x0F	; 15
    9572:	40 5d       	subi	r20, 0xD0	; 208
    9574:	4a 33       	cpi	r20, 0x3A	; 58
    9576:	18 f0       	brcs	.+6      	; 0x957e <__ultoa_invert+0x7c>
    9578:	49 5d       	subi	r20, 0xD9	; 217
    957a:	31 fd       	sbrc	r19, 1
    957c:	40 52       	subi	r20, 0x20	; 32
    957e:	41 93       	st	Z+, r20
    9580:	02 d0       	rcall	.+4      	; 0x9586 <__ultoa_invert+0x84>
    9582:	a9 f7       	brne	.-22     	; 0x956e <__ultoa_invert+0x6c>
    9584:	ea cf       	rjmp	.-44     	; 0x955a <__ultoa_invert+0x58>
    9586:	b4 e0       	ldi	r27, 0x04	; 4
    9588:	a6 95       	lsr	r26
    958a:	97 95       	ror	r25
    958c:	87 95       	ror	r24
    958e:	77 95       	ror	r23
    9590:	67 95       	ror	r22
    9592:	ba 95       	dec	r27
    9594:	c9 f7       	brne	.-14     	; 0x9588 <__ultoa_invert+0x86>
    9596:	00 97       	sbiw	r24, 0x00	; 0
    9598:	61 05       	cpc	r22, r1
    959a:	71 05       	cpc	r23, r1
    959c:	08 95       	ret
    959e:	9b 01       	movw	r18, r22
    95a0:	ac 01       	movw	r20, r24
    95a2:	0a 2e       	mov	r0, r26
    95a4:	06 94       	lsr	r0
    95a6:	57 95       	ror	r21
    95a8:	47 95       	ror	r20
    95aa:	37 95       	ror	r19
    95ac:	27 95       	ror	r18
    95ae:	ba 95       	dec	r27
    95b0:	c9 f7       	brne	.-14     	; 0x95a4 <__ultoa_invert+0xa2>
    95b2:	62 0f       	add	r22, r18
    95b4:	73 1f       	adc	r23, r19
    95b6:	84 1f       	adc	r24, r20
    95b8:	95 1f       	adc	r25, r21
    95ba:	a0 1d       	adc	r26, r0
    95bc:	08 95       	ret

000095be <eeprom_read_block>:
    95be:	dc 01       	movw	r26, r24
    95c0:	cb 01       	movw	r24, r22

000095c2 <eeprom_read_blraw>:
    95c2:	fc 01       	movw	r30, r24
    95c4:	f9 99       	sbic	0x1f, 1	; 31
    95c6:	fe cf       	rjmp	.-4      	; 0x95c4 <eeprom_read_blraw+0x2>
    95c8:	06 c0       	rjmp	.+12     	; 0x95d6 <eeprom_read_blraw+0x14>
    95ca:	f2 bd       	out	0x22, r31	; 34
    95cc:	e1 bd       	out	0x21, r30	; 33
    95ce:	f8 9a       	sbi	0x1f, 0	; 31
    95d0:	31 96       	adiw	r30, 0x01	; 1
    95d2:	00 b4       	in	r0, 0x20	; 32
    95d4:	0d 92       	st	X+, r0
    95d6:	41 50       	subi	r20, 0x01	; 1
    95d8:	50 40       	sbci	r21, 0x00	; 0
    95da:	b8 f7       	brcc	.-18     	; 0x95ca <eeprom_read_blraw+0x8>
    95dc:	08 95       	ret

000095de <eeprom_update_block>:
    95de:	dc 01       	movw	r26, r24
    95e0:	a4 0f       	add	r26, r20
    95e2:	b5 1f       	adc	r27, r21
    95e4:	41 50       	subi	r20, 0x01	; 1
    95e6:	50 40       	sbci	r21, 0x00	; 0
    95e8:	40 f0       	brcs	.+16     	; 0x95fa <eeprom_update_block+0x1c>
    95ea:	cb 01       	movw	r24, r22
    95ec:	84 0f       	add	r24, r20
    95ee:	95 1f       	adc	r25, r21
    95f0:	2e 91       	ld	r18, -X
    95f2:	05 d0       	rcall	.+10     	; 0x95fe <eeprom_update_r18>
    95f4:	41 50       	subi	r20, 0x01	; 1
    95f6:	50 40       	sbci	r21, 0x00	; 0
    95f8:	d8 f7       	brcc	.-10     	; 0x95f0 <eeprom_update_block+0x12>
    95fa:	08 95       	ret

000095fc <eeprom_update_byte>:
    95fc:	26 2f       	mov	r18, r22

000095fe <eeprom_update_r18>:
    95fe:	f9 99       	sbic	0x1f, 1	; 31
    9600:	fe cf       	rjmp	.-4      	; 0x95fe <eeprom_update_r18>
    9602:	92 bd       	out	0x22, r25	; 34
    9604:	81 bd       	out	0x21, r24	; 33
    9606:	f8 9a       	sbi	0x1f, 0	; 31
    9608:	01 97       	sbiw	r24, 0x01	; 1
    960a:	00 b4       	in	r0, 0x20	; 32
    960c:	02 16       	cp	r0, r18
    960e:	39 f0       	breq	.+14     	; 0x961e <eeprom_update_r18+0x20>
    9610:	1f ba       	out	0x1f, r1	; 31
    9612:	20 bd       	out	0x20, r18	; 32
    9614:	0f b6       	in	r0, 0x3f	; 63
    9616:	f8 94       	cli
    9618:	fa 9a       	sbi	0x1f, 2	; 31
    961a:	f9 9a       	sbi	0x1f, 1	; 31
    961c:	0f be       	out	0x3f, r0	; 63
    961e:	08 95       	ret

00009620 <eeprom_write_block>:
    9620:	dc 01       	movw	r26, r24
    9622:	cb 01       	movw	r24, r22
    9624:	02 c0       	rjmp	.+4      	; 0x962a <eeprom_write_block+0xa>
    9626:	2d 91       	ld	r18, X+
    9628:	05 d0       	rcall	.+10     	; 0x9634 <eeprom_write_r18>
    962a:	41 50       	subi	r20, 0x01	; 1
    962c:	50 40       	sbci	r21, 0x00	; 0
    962e:	d8 f7       	brcc	.-10     	; 0x9626 <eeprom_write_block+0x6>
    9630:	08 95       	ret

00009632 <eeprom_write_byte>:
    9632:	26 2f       	mov	r18, r22

00009634 <eeprom_write_r18>:
    9634:	f9 99       	sbic	0x1f, 1	; 31
    9636:	fe cf       	rjmp	.-4      	; 0x9634 <eeprom_write_r18>
    9638:	1f ba       	out	0x1f, r1	; 31
    963a:	92 bd       	out	0x22, r25	; 34
    963c:	81 bd       	out	0x21, r24	; 33
    963e:	20 bd       	out	0x20, r18	; 32
    9640:	0f b6       	in	r0, 0x3f	; 63
    9642:	f8 94       	cli
    9644:	fa 9a       	sbi	0x1f, 2	; 31
    9646:	f9 9a       	sbi	0x1f, 1	; 31
    9648:	0f be       	out	0x3f, r0	; 63
    964a:	01 96       	adiw	r24, 0x01	; 1
    964c:	08 95       	ret

0000964e <_exit>:
    964e:	f8 94       	cli

00009650 <__stop_program>:
    9650:	ff cf       	rjmp	.-2      	; 0x9650 <__stop_program>
